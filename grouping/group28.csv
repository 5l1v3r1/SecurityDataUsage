 6303. DATASETS Our Internet-wide study of key sharing in the HTTPS ecosystem is driven by four datasets: SSL certificates We use SSL certificates from full IPv4 scans as the basis of our measurements,Data,0
| Our SSL scans [30] also contain information on the IP address(es) that advertised each certificate. To obtain in- formation about the entity that controls this IP address, we use full IPv4 reverse DNS scans [29] that are also conducted by Rapid7|,Data,0
| Each AS is assigned an AS Number (ASN): for example, MIT is AS 3 and the Chicago Public Schools are AS 1416 [26]. CAIDA collects and publishes mappings between IP addresses and ASNs via their Route- Views datasets [7]|,Data,0
| For example, AT&T owns 160 unique ASNs. To aggregate these, we use CAIDA’s AS- to-Organization dataset [8] to group together ASes owned by the same organization|,Data,0
| For that, we rely on WHOIS [12], a protocol for querying domain registrars to obtain data on the domain owner. In practice, WHOIS data often contains fields such as the con- tact information for the owner of the domain, the contact for technical issues, where to send abuse complaints, and so on|,Data,0
| Here, we expand upon these prior findings by evaluating whether there is a correlation between centralized management and the quality of the keys chosen. Figure 13 compares several different features of self- managed and outsourced certificates across our entire cor- pus of leaf certificates (3,275,635 self-managed and 1,781,962 outsourced): (a) Key lengths in self-managed certificates are nearly identical to those managed by third-party hosting providers|,Data,0
|1 Combining Packet Capture (PCAP) Files The data set used in this study is a combination of the packet capture files obtained from two main sources. First of all, the APTs were collected from Contagio malware database [15] contributed by Mila Parkour|,Data,1
| First of all, the APTs were collected from Contagio malware database [15] contributed by Mila Parkour. The normal and non-malicious data is obtained from PREDICT internet data set repository [18] under the category of “DARPA Scalable Network Monitoring (SNM) Program Traffic”|,Data,1
| The data collection was performed during April 2016 using ZGrab, an application-layer scanner that operates with ZMap [15]. In the first phase, we performed an Internet-wide scan of all IPv4 addresses on port 500 to determine which hosts were configured 16This defect was corrected quite recently, years after the version of OpenSSL ScreenOS uses was written|,Data,6
|, download from an external source). Running on 71,000 articles collected from 45 leading technical blogs, this new approach demonstrates a remarkable performance: it gener- ated 900K OpenIOC items with a precision of 95% and a coverage over 90%, which is way beyond what the state-of-the-art NLP tech- nique and industry IOC tool can achieve, at a speed of thousands of articles per hour|,Data,7
| To structure our efforts, we followed a multi- step process. First, we collected exploits from various online databases and exploit frameworks, including Metasploit (22 exploits)3, Exploit-DB (2)4, Packet Storm (5)5, from the security research company Security Explorations (52)6, and an online repository for Java exploits7|,Data,11
| To structure our efforts, we followed a multi- step process. First, we collected exploits from various online databases and exploit frameworks, including Metasploit (22 exploits)3, Exploit-DB (2)4, Packet Storm (5)5, from the security research company Security Explorations (52)6, and an online repository for Java exploits7|,Data,11
| To structure our efforts, we followed a multi- step process. First, we collected exploits from various online databases and exploit frameworks, including Metasploit (22 exploits)3, Exploit-DB (2)4, Packet Storm (5)5, from the security research company Security Explorations (52)6, and an online repository for Java exploits7|,Data,11
| To structure our efforts, we followed a multi- step process. First, we collected exploits from various online databases and exploit frameworks, including Metasploit (22 exploits)3, Exploit-DB (2)4, Packet Storm (5)5, from the security research company Security Explorations (52)6, and an online repository for Java exploits7|,Data,11
| To structure our efforts, we followed a multi- step process. First, we collected exploits from various online databases and exploit frameworks, including Metasploit (22 exploits)3, Exploit-DB (2)4, Packet Storm (5)5, from the security research company Security Explorations (52)6, and an online repository for Java exploits7|,Data,11
 5. ANALYSIS AND FINDINGS In the following we use the extensive documentation of the 61 minimal exploits to provide insight into how attackers use specific vulnerabilities and features of the Java platform to implement their attacks,Data,11
| We run our event analysis on the top 100 free applications in the Android application store to determine how often this happens. In total, our analysis finds 1060 errors across 88 of the top 100 applications (10|,Data,12
| To our knowledge, AUTOREB is the first work that explores the user review information and utilizes the review semantics to predict the risky behaviors at both review-level and app-level. We crawled a real-world dataset of 2, 614, 186 users, 12, 783 apps and 13, 129, 783 reviews from Google play, and use it to comprehensively evaluate AUTOREB|,Data,14
| 4.1 Data collection For each team, we collected a variety of observed and self- reported data|,Data,16
| To demonstrate this, we scraped greatfire.org for websites in the top 1000 Alexa websites that are blocked by the GFW|,Data,18
| (cid:15) Identifying New Vulnerabilities. Our tool successfully an- alyzed 1,591 service interfaces of all the 80 system services in Android 5|,Data,19
| To understand the scope and magnitude of this new XARA threat, we developed an ana- lyzer for automatically inspecting Apple apps’ binaries to deter- mine their susceptibility to the XARA threat, that is, whether they perform security checks when using vulnerable resource-sharing mechanisms and IPC channels, a necessary step that has never been made clear by Apple. In our study, we ran the analyzer on 1,612 most popular MAC apps and 200 iOS apps, and found that more than 88|,Data,24
| To assist software developers (or secu- rity analysts) in tracking down a memory corruption vulnerability, CREDAL also performs analysis and highlights the code fragments corresponding to data corruption. To demonstrate the utility of CREDAL, we use it to analyze 80 crashes corresponding to 73 memory corruption vulnerabilities archived in Offensive Security Exploit Database|,Data,25
| These techniques may be applicable in other scenarios. We implemented and evaluated the attacks against the popular Gmail and Bing services, in several environments and ethical experiments, taking careful, IRB-approved mea- sures to avoid exposure of personal information|,Data,26
|, CSPAutoGen can handle all the inline and dynamic scripts. We have implemented a prototype of CSPAutoGen, and our eval- uation shows that CSPAutoGen can correctly render all the Alexa Top 50 websites|,Data,27
| 5. EXPERIMENTAL RESULTS This section reports on our evaluation of the moments ac- countant, and results on two popular image datasets: MNIST and CIFAR-10|,Data,28
| 6.1 Mobility Trace Dataset We use the CRAWDAD dataset roma/taxi [2, 3] for our simu- lations|,Data,31
 6.1 Evaluation We evaluated the performance of Σoφoς using 4 data sets of increasing size and also the English Wikipedia,Data,33
|1 Datasets, Metrics, Competitors & Settings Datasets. We test EpicRec on two real-world datasets: MovieLens1: a movie rating dataset collected by the Grou- pLens Research Project at the University of Minnesota through the website movielens|,Data,36
| 1 http://grouplens.org/datasets/movielens 188Yelp2: a business rating data provided by RecSys Chal- lenge 2013, in which Yelp reviews, businesses and users are collected at Phoenix, AZ metropolitan area|,Data,36
| The number of movie categories is 18. We use the MovieLens- 1M, with 1000,209 ratings from 6,040 users on 3,883 movies|,Data,36
| Our goal is to show that an ad- versary can insert an unbounded number of Sybil identities in the SybilLimit protocol, breaking its security guarantees. For our evaluation, we consider a real-world Facebook inter- action graph from the New Orleans regional network [28]|,Data,38
| We utilize these papers to extract Android malware behaviors and to construct the semantic network. From the electronic proceedings distributed to conference participants, we collect the papers from the IEEE Sympo- sium on Security and Privacy (S&P’08–S&P’15)4, the Com- puter Security Foundations Symposium (CSF’00–CSF’14), and USENIX Security (Sec’11)|,Data,39
 We conduct experiments on two publicly available set-valued datasets. • AOL search log dataset [1],Data,45
 90% of the users have fewer than 84 keywords in their logs. • Kosarak dataset [2],Data,45
 We select one month of data for our study. The data logs we used are col- lected from more than 30 machines with various server mod- els and operating systems,Data,46
| This paper rigorously investigates how users’ security beliefs, knowledge, and demographics corre- late with their sources of security advice, and how all these factors influence security behaviors. Using a carefully pre- tested, U|,Data,48
 We have ported Valgrind to iOS and implemented a prototype of iRiS on top of it. We evaluated iRiS with 2019 applications from the official App Store,Data,54
| from manufacturing equipment, as shown in Figure 1. We capture the relevant sensor data by deliberately or accidentally placing an attack-enabled phone close to, on top of, or inside a piece of manu- facturing equipment while the machinery is fabricating the target object|,Data,55
| Our new metric helps us compare in a fair way previously proposed attack-detection mechanisms. (ii) We compare previous attack-detection proposals across three di↵erent experimental settings: a) a testbed operating real-world systems, b) network data we collected from an operational large-scale Supervisory Control and Data Acqui- sition (SCADA) system that manages more than 100 Pro- grammable Logic Controllers (PLCs), and c) simulations|,Data,57
| Evaluation. We ran Oyente on 19, 366 smart contracts from the first 1, 460, 000 blocks in Ethereum network and found that 8, 833 contracts potentially have the documented bugs|,Data,58
| First, we consolidate the eight origin-exposing vectors into one auto- mated origin-exposing system called Cloudpiercer. Then, we assemble a list of clients from five CBSP companies by studying their DNS configurations and obtaining their adop- tion rate across the Alexa top 1 million websites|,Data,59
| The vast majority of them were exposed through their A record, indicating a brief dis- abling of the protection system. SSL certificate exposure In order to find IP addresses hosting SSL certificates associ- ated with the domains in the evaluation set, we made use of the publicly available data of Rapid7’s Project Sonar [42]|,Data,59
| 4. LARGE-SCALE ANALYSIS To assess the magnitude of the origin-exposure problem, we conduct a large-scale analysis in which we attempt to uncover the origin of CBSP-protected domains|,Data,59
|1 Dataset Description The dataset was first presented and used by Keller et al. in [23], and is publicly available in the gene expression om- nibus (GEO) database under reference GSE61741|,Data,61
| Although the cost of stor- age and processing have diminished, the cost of maintaining reliable infrastructure for transaction logs is still noticeable. Figure 1: A plot of transaction fee versus frequency for 1 million transactions in May 2015|,Data,65
| To estimate the cost of producing the preprocessing data (multiplication triples, random bits etc.), we used figures from the recent MASCOT protocol [31], which uses OT ex- tensions to obtain what are currently the best reported triple generation times with active security|,Data,67
| In this section, we validate whether the smartphone’s acoustic data can be utilized to deduce the movements. To conduct the validation, we implement an application on Nexus 5 (Android OS v6|,Data,68
| As seen in Table 4, we found that about half of the servers in Alexa’s top 10 support a large number of requests without rekeying. For a better estimate of the number of vulnerable servers, we tested servers from Alexa’s top 10k that negotiate 3DES with a modern client|,Data,72
| For a better estimate of the number of vulnerable servers, we tested servers from Alexa’s top 10k that negotiate 3DES with a modern client. We identified 11483 different HTTPS servers11, and found that 226 of them (1|,Data,72
| In this paper, we study the possible techniques to detect and measure this fraud and evaluate the real impact of OTT bypass on a small European country. For this, we performed more than 15,000 test calls during 8 months and conducted a user study with more than 8,000 users|,Data,78
|, the server cannot learn their relative order) after some number of queries are performed over real-world data. Specifically, we ran an experiment where we inserted over 2 million public employee salary figures from [1] and then performed 1000 random range queries|,Data,79
| In this study, we are interested in finding answers to security- and privacy-related questions about libraries, such as “How prevalent are third- party libraries in the top apps and how up-to-date are the library versions?”, “Do app developers update the libs included in their apps and how quickly do they update?”, or “How prevalent are vulnerabilities identified in prior research [28, 9] in libraries and how many apps are affected?” To answer these questions, we first built a comprehensive repository of third-party libraries and applications (see Section 5). Our library set contains 164 libraries of different categories (Ad- vertising, Cloud,|,Data,84
|) and a total of 2,065 versions. We then collected and tracked the version histories for the top 50 apps of each category on Play between Sep 2015 and July 2016, accumulating to 96,995 packages from 3,590 apps|,Data,84
|6.1, we found in our sample set 360 affected packages from 23 distinct apps, when only considering exact library matches|,Data,84
|15 for Android, which contained an account hijacking vulnerability, on 06/11/2014. In the histories of our sample set apps, we discovered, in total, 394 affected packages from 51 distinct apps, when only considering packages with exact matches of the vulner- able lib version|,Data,84
| We used LibScout to detect the affected application packages in our data set. In total 2,667 app versions of 296 distinct apps with a cumu- lative install-base of 3|,Data,84
| We observed that there is a significant variance in ACFG size. To reduce the sampling bias, we first collect a dataset which covers ACFGs of different functions from various architec- tures|,Data,89
| This dataset was used for base- line comparison, and all functions in this dataset has known ground truth for metric validation. We prepared this dataset using BusyBox (v1|,Data,89
| Dataset II – Public dataset. Recent work such as Pewny et al [45] and Eschweiler et al [23] used the same public dataset based upon two publicly-available firmware images for baseline comparison [7, 8]|,Data,89
| Dataset III – Firmware image dataset. This dataset of 33,045 firmware images was collected from the wild|,Data,89
| As a result, we created a freely available vulnerability database for this effort and for the broader research community. To build this database, we mined official software websites to collect lists of vulnerabilities with the corresponding CVE num- bers|,Data,89
| We selected OpenSSL for demonstration, since it is widely used in IoT devices. The resulting vulnerability database includes 154 vulnerable functions|,Data,89
| Roughly speaking, our measurement methods can be divided into two kinds: those that could be fully automated and scaled eas- ily, and those that required some manual interaction. For the latter, we used a set of 302938 major email providers and email genera- tors, while for the former, we used a much larger set of a million popular providers occurring in the Adobe leak and the Alexa top million Web sites (as potential email generators)|,Data,90
1.2 Provider List We created the set of popular email providers based on the top 1 million email address domains occurring in the leaked Adobe user data set of September 2013,Data,90
| Using a combination of mea- surement techniques, we determine whether major providers sup- ports TLS at each point in their email message path, and whether they support SPF and DKIM on incoming and outgoing mail. We found that while more than half of the top 20,000 receiving MTAs supported TLS, and support for TLS is increasing, servers do not check certificates, opening the Internet email system up to man- in-the-middle eavesdropping attacks|,Data,90
|26 and are configured with 4G RAM and 2 virtual processors. The VMs for TorA run on a workstation and are connected to a campus wired network, whereas the VMs for TorB and TorC are run on a laptop and connect to a home wired network, Each of these three datasets contains 30,000 traces collected as follows: (1) For each target obfuscator, we used our trace collection framework to visit Alexa Top 5,000 websites to collect 5,000 traces (labeled as obfs3, obfs4, fte, meekG, and meekA, corresponding to obfsproxy3, obfsproxy4, FTE, meek-google, and meek-amazon respectively); (2) In addition, we visited the same set of websites without Tor and obfuscators to collect 5,000 traces and labeled them as nonTor|,Data,91
|26 and are configured with 4G RAM and 2 virtual processors. The VMs for TorA run on a workstation and are connected to a campus wired network, whereas the VMs for TorB and TorC are run on a laptop and connect to a home wired network, Each of these three datasets contains 30,000 traces collected as follows: (1) For each target obfuscator, we used our trace collection framework to visit Alexa Top 5,000 websites to collect 5,000 traces (labeled as obfs3, obfs4, fte, meekG, and meekA, corresponding to obfsproxy3, obfsproxy4, FTE, meek-google, and meek-amazon respectively); (2) In addition, we visited the same set of websites without Tor and obfuscators to collect 5,000 traces and labeled them as nonTor|,Data,91
| 3.1 Datasets We use two major types of datasets: (1) packet-level traffic traces collected at various locations in a campus network, and (2) packet-level traces for Tor Pluggable Transport traffic collected in controlled environments|,Data,91
 Evaluation: local mixing time in social graphs. We use 10 various large-scale real-world social network topolo- gies that mainly come from the Stanford Large Network Dataset Collection [23] and other sources [45] to evaluate the local mixing time for nodes in social graphs,Data,92
| Feature Functions and Weights. To learn all feature functions and weights, we downloaded 1784 non-obfuscated Android applications from F-Droid [3], a popular repository for open-source Android applications|,Data,93
2.2 Experiments with Malware Samples We randomly selected one sample from each of the 49 mal- ware families reported in [40],Data,93
1_r1). Apps in our dataset used for the case study are downloaded from the Google official market (Google Play) in May 2016,Data,95
| • Using SInspector, we perform the first study of Unix domain sockets on Android, including the categoriza- tion of usage, existing security measures being en- forced, and common flaws and security implications. We analyze 14,644 apps and 60 system daemons, find- ing that 45 apps, as well as 9 system daemons, have vulnerabilities, some of which are very serious|,Data,98
| We presented SInspector, a tool for discovering potential security vulnerabilities through the process of identifying socket addresses, detecting authen- tication checks, and performing data flow analysis on na- 90tive code. We analyzed 14,644 Android apps and 60 system daemons, finding that some apps, as well as certain system daemons, suffer from serious vulnerabilities, including root privilege escalation, arbitrary file access, and factory reset- ting|,Data,98
| Our results show that many of our attacks succeed with a 100% chance such that the Sound-Proof cor- relation algorithm will accept the attacked audio samples as valid. Third, we collect general population statistics via an online sur- vey to determine the phone usage habits relevant to our attacks|,Data,100
 We find that the larger width of integer types and the increased amount of addressable memory introduce previously non-existent vulnerabilities that often lie dormant in program code. We empirically evaluate the prevalence of these flaws on the source code of Debian stable (“Jessie”) and 200 popular open-source projects hosted on GitHub,Data,104
| We have applied UniSan to the latest Linux kernel and Android kernel and found that UniSan can successfully prevent 43 known uninitialized data leaks, as well as many new ones. In particular, 19 of the new data leak vulnerabilities in the latest kernels have been confirmed by the Linux community and Google|,Data,107
| This allows us to prevent replay attacks, which are possibly the most applicable attack vectors against biometric authentication. Using a gaze tracking device, we build a prototype of our system and perform a series of systematic user experiments with 30 participants from the general public|,Data,108
| If two commits were blamed for the same amount of lines, blame both. Our heuristic maps the 718 CVEs of our dataset to 640 VCCs|,Data,109
| However, improving our blame heuristics further is an interesting avenue for future research. Apart from the 640 VCCs, we have a large set of 169,502 unclassified commits|,Data,109
|9 The SVM detected a high amount of excep- tions, a high number of changed code, inline ASM code, and variables containing user input such as __input and user. 6As previously mentioned we use the years 2011–2014 as the test dataset, since we have ground truth data on which to base the discussion|,Data,109
| When given a source file, Flawfinder returns lines with suspected vul- nerabilities. It offers a short explanation of the finding as well as a link to the Common Weakness Enumeration (CVE) database|,Data,109
| The paper makes three contributions. First, we conducted the first large-scale mapping of CVEs to GitHub commits in order to create a vulnerable commit database|,Data,109
| Our results show that our approach significantly outperforms the vulner- ability finder Flawfinder. We created a large test database containing 66 C and C++ project with 170,860 commits on which to evaluate and compare our approach|,Data,109
 VoiceLive takes advantages of the user’s unique vocal system and high quality stereo recording of smartphones. • We conduct extensive experiments with 12 participants and three different types of phones under various ex- perimental settings,Data,111
| To test if WebCapsule can successfully record and subsequently replay real-world phishing attacks, we proceeded as follows, us- ing Chromium on our desktop machine. We selected a large and diverse set of recently reported phishing web pages from Phish- Tank8|,Data,112
| 2.4 Datasets and implementation We use two real geographic datasets Cal, SpitzLoc, one synthetic geographic distribution Globe, and one real time- stamp dataset SpitzTime|,Data,113
|4 Datasets and implementation We use two real geographic datasets Cal, SpitzLoc, one synthetic geographic distribution Globe, and one real time- stamp dataset SpitzTime. The dataset Cal represents the latitude and longitude of about 21,000 intersections in the California road network1 (also used by Mavroforakis et al|,Data,113
294258. The dataset SpitzLoc consists of latitude and longitude coordinates tracking the movement of German Green party politician Malte Spitz over six months,Data,113
| In this section, we aim to explore whether the differences of keystroke wave- forms are large enough to be used for recognizing different keys inputs in the real-world setting. We collected training and testing data from 10 volunteers|,Data,114
 B. Real Attacks MAD uniformly detects attacks more quickly than the PAD; we use the former method to detect the presence of an attack in real Internet traces3,Data,119
 III. DATA SET  changes  The data used was the PREDICT ID USC-Lander!  (- 60  The total  were DNS attack packets,Data,120
|395326000  files IPs. There are total 59,928,920 packet counts out of which there was a total of  DoS_DNS_amplification-20130617 (2013-06-17) (2013-06-17) with anonymized million) 358019 DNS packets|,Data,120
| The maximum number of unique hosts per day we measured was 106,000. To understand these differences, we compared the observations from our network monitor to data collected from DShield (www|,Data,121
| 3.1 From our own transactions We engaged in 344 transactions with a wide variety of services, listed in Table 1, including mining pools, wallet services, bank ex- changes, non-bank exchanges, vendors, gambling sites, and mis- cellaneous services|,Data,122
| Wallets. We kept money with most of the major wallet services (10 in total), and made multiple deposit and withdrawal transac- Bank exchanges|,Data,122
|, in which the exchange rate is not fixed) also function as banks. As such, we tagged these services just as we did the wallets: by depositing into and withdrawing from our accounts (but rarely par- ticipating in any actual currency exchange)|,Data,122
|info/tags, including both addresses provided in users’ signatures for Bitcoin forums, as well as self-submitted tags. We collected all of these tags — over 5,000 in total — keeping in mind that the ones that were not self-submitted (and even the ones that were) could be regarded as less reliable than the ones we collected ourselves|,Data,122
| 3.1 Data analysis overview We use three data sets, summarized in Table 1|,Data,123
|1 PlanetLab Deployment We deployed tracebox on PlanetLab, using 72 machines as vantage points (VPs). Each VP had a target list of 5,000 items build with the top 5,000 Alexa web sites|,Data,124
|1 PlanetLab Deployment We deployed tracebox on PlanetLab, using 72 machines as vantage points (VPs). Each VP had a target list of 5,000 items build with the top 5,000 Alexa web sites|,Data,124
| We also describe our application of the technique to the IPv6 interface-level graph captured by CAIDA’s Archipelago (Ark) infrastructure [14] for March 2013. The graph consists of all the 52,986 IPv6 interfaces numbered within the 2000::/3 unicast prefix captured from all 27 Ark vantage points (VPs) with IPv6 connectivity|,Data,125
| cause the counters of distinct routers to diverge, and (4) confirm aliases with pairwise probing. Given the absence of velocity in ID counters and the large probes required for the technique to work, we probe at a low rate of 20pps from a single VP, producing 26Kbps of traffic|,Data,125
| 3. METHODOLOGY In this section, we describe the design of our experiment and our data collection methodology, as well as the mitigating steps and proactive measurements we conducted to ensure a minimal im- pact of our covering routes|,Data,126
| of IPs 1622 1219 159 9,409 9 12,418 No. of Unique ASNs 603 530 62 3,654 8 4,857 In order to validate minimal impact on data plane connectivity, we performed the following: We collected a set of public IPv6 addresses by querying the Alexa top 1M domains [2] for AAAA records|,Data,126
| of IPs 1622 1219 159 9,409 9 12,418 No. of Unique ASNs 603 530 62 3,654 8 4,857 In order to validate minimal impact on data plane connectivity, we performed the following: We collected a set of public IPv6 addresses by querying the Alexa top 1M domains [2] for AAAA records|,Data,126
| Our IPv6 network telescope results suggest sev- eral important differences (and some similarities) compared to that body of work. To produce a more recent and valid comparison, we analyzed a single week of IPv4 background radiation captured during the course of our ongoing IPv6 packet capture|,Data,126
| 4. DATA COLLECTION In this section we describe the datasets used in our analysis, which we summarize in Table 1|,Data,127
| DATA COLLECTION In this section we describe the datasets used in our analysis, which we summarize in Table 1. Our primary dataset consists of changes made to the |,Data,127
| domains, (2) the removal of existing domains, and (3) changes to existing domains in terms of revisions to their associated name- servers. Our data includes captures of the DNZA files as recorded every five minutes, time periods we refer to as epochs|,Data,127
| Since we lack comprehensive ground truth regarding the ultimate use of domains, to this end we use two proxies: subsequent appearance of a newly registered do- main in: (1) an email spam campaign, or (2) a domain blacklist. For the first of these, we operated a spam trap, i|,Data,127
|com), by restricting our focus to domains recently registered (March–July 2012) we can filter down the do- mains appearing in the spam trap to those very likely used for spam- ming. For the second, we subscribed to three major DNS blacklists, URIBL, SURBL, and Spamhaus DBL|,Data,127
| In this paper, we examine the effectiveness of these inter- ventions in the context of an understudied market niche, counterfeit luxury goods. Using eight months of empirical crawled data, we identify 52 distinct SEO campaigns, document how well they are able to place search results for sixteen luxury brands, how this ca- pability impacts the dynamics of their order volumes and how well existing interventions undermine this business when employed|,Data,128
| For a small number of stores, we were also able to collect user traffic data that directly measures an SEO campaign’s effectiveness in attracting customers to their stores. Specifically, we were able to periodically collect AWStats data for 647 storefronts in 12 cam- paigns|,Data,128
| One issue that undermines coverage is that Google only labels the root of a Web site as “hacked”, and does not label search results that link to sub-pages within the same root domain. In the PSR data set, we found 68,193 “hacked” search results|,Data,128
| We begin by exam- ining the properties of individual darknets and in particular the behavior of source IP addresses. We provide these char- acterizations by looking at data from 14 darknet monitors ranging in size from a /25 monitor to a /17 monitor over a period of 10 days between August 18, 2004 and August 28, 2004|,Data,129
| Figure 10: The number of darknets (of 31) reporting a port in the top 10 ports over a day, week, and month time frame. The analysis is performed for the top 10 destination ports over a day, top 10 destination ports over a week, and top 10 destination ports over a month|,Data,129
| 3.6 Datasets This paper uses DNS datasets from three authorities: one national-level top-level domain, operators of two root servers as shown in Table 1|,Data,130
 JP-DNS operates the .jp country code domain for Japan; we have data from all seven of their anycast sites,Data,130
|) part of the 2014 DITL collection [16] (for B-Root, shortly after 2014 DITL). We also use data for M-Root’s 2015 DITL collection (§ 4|,Data,130
 These root datasets are available to re- searchers through DNS-OARC. For longitudinal analysis we draw on 9 months of data taken at the M-Root server,Data,130
| However, we treat the union of these classes together. We use data from 103 surveys taken between April 2006 and February 2015, and performed initial studies based on 2011–2013 data, but focus on the most recent of them, in January and February of 2015 for data quality and time- liness|,Data,131
| We use data from 103 surveys taken between April 2006 and February 2015, and performed initial studies based on 2011–2013 data, but focus on the most recent of them, in January and February of 2015 for data quality and time- liness. The dataset consists of all echo requests that were sent as part of the surveys in this period, as well as all echo responses that were received|,Data,131
|, “host unreachable”); we ignore all probes as- sociated with such responses since the latency of ICMP error responses is not relevant. In later sections, we will complement this dataset with results from Zmap [5] and additional experiments includ- ing more frequent probing with Scamper [13] and Scrip- troute [22]|,Data,131
| 3.2 Milking 3 Methodology To collect the information needed to cluster servers into oper- ations, we have built an infrastructure to track individual exploit servers over time, periodically collecting and classi- fying the malware they distribute|,Data,132
 2. We receive feeds of drive-by download URLs (Sect,Data,132
 2. CHARACTERISTICS OF CHECK-INS We use three different datasets that capture human mobility,Data,133
 First we consider two online location-based social networks. We col- lected all the public check-in data between Feb,Data,133
| There are 196,591 nodes, 950,327 edges in Gowalla and 58,228 nodes, 214,078 edges in Brightkite. To ensure that our observations on human movement are not specific to data based on check-ins from location-based social net- works, we also include a dataset of cell phone location trace data|,Data,133
| Backscatter DDoS is a commonly seen behaviour in darknets where the attacker uses simultaneous bots to generate the actual attack packets to reach the targeted (original) victim. In our study, five publicly available network traffic datasets from CAIDA’s archives are employed|,Data,134
| Datasets Employed In this research, five publicly available real-life network traffic traces (datasets) from CAIDA’s archives are employed. Three of them, which were captured by a passive darknet in 2007, 2008 and 2012 [27][26][28], namely UCSD Network Telescope [21], include mostly one-way malicious traffic while the remaining ones collected in 2008 [29] and 2014 [30] via CAIDA’s Internet backbone links include only normal traffic|,Data,134
| 3 Approach This section presents our approach for the evalua- tion of reputation based blacklists. We evaluated the blacklists by deploying them in a large academic net- work of over 7,000 hosts|,Data,135
| This was a preliminary step to preventing inexperienced and non-serious workers from participating in our survey. Our survey is based on the participants’ actual check-ins on Foursquare posted over the last 24 months (that we collected through a specific application we developed), and it requires a significant amount of time to complete (30-45 minutes)|,Data,136
| The third phase of worm activ- ity is the persistence phase which for the Blaster worm has continued through 2004. In this one-week period of measurement, the IMS system observed over 286,000 unique IP addresses displaying the characteristics of Blaster activity|,Data,137
| published a study in 2011 that focused on the dynamics of leaf cer- tificates and the distribution of certificates among IP addresses, and attempted to roughly classify the overall quality of served certifi- cates. The study was based on regular scans of the Alexa Top 1 Mil- lion Domains [1] and through passive monitoring of TLS traffic on the Munich Scientific Research Network [17]|,Data,138
| Our study is founded on what is, to the best of our knowledge, the most comprehensive dataset of the HTTPS ecosystem to date. Between June 2012 and August 2013, we completed 110 exhaustive scans of the public IPv4 address space in which we performed TLS handshakes with all hosts publicly serving HTTPS on port 443|,Data,138
| Between June 2012 and August 2013, we completed 110 exhaustive scans of the public IPv4 address space in which we performed TLS handshakes with all hosts publicly serving HTTPS on port 443. Over the course of 14 months, we completed upwards of 400 billion SYN probes and 2|,Data,138
| Content Provider e Service Provider v i t c e p s r e P Content Consumer Addressing Prerequisite IP Functions Routing Naming A1: Address Allocation; A2: Address Advertisement N1: Nameservers; R1: Server Readiness N2: Resolvers N3: Queries A2: Address Advertisement; T1: Topology End-to-End Reachability R1: Server Readiness Operational Characteristics Usage Profile Performance U3: Transition Technologies U1: Traffic Volume; U3: Transition Technologies P1: Network RTT R2: Client Readiness U2: Application Mix; N3: Queries Table 2: Dataset summary showing the time period, scale, and public or new status of the datasets we analyzed. Dataset RIR Address Allocations Routing: Route Views Routing: RIPE Google IPv6 Client Adoption Verisign TLD Zone Files CAIDA Ark Performance Data Arbor Networks ISP Traffic Data Verisign TLD Packets: IPv4 Verisign TLD Packets: IPv6 Alexa Top Host Probing Time Period Metrics Jan 2004 – Jan 2014 A1 Jan 2004 – Jan 2014 A2, T1 Jan 2004 – Jan 2014 A2, T1 Sep 2008 – Dec 2013 R2, U3 Apr 2007 – Jan 2014 N1 P1 Dec 2008 – Dec 2013 U1, U2, U3 Mar 2010 – Dec 2013 Jun 2011 – Dec 2013 N2, N3 N2, N3 Jun 2011 – Dec 2013 Apr 2011 – Dec 2013 R1 Recent Scale ≈18K allocation snapshots (5 daily) 45,271 BGP table snapshots millions of daily global samples daily snapshots of ≈2|,Data,139
com & .net) ≈10 million IPs probed daily ≈33-50% of global Internet traffic; 2013 daily median: 50 terabits/sec (avg,Data,139
| To put the IPv6 allocation data in context, Figure 1 also shows IPv4 prefix allocations over the same period. The number of IPv4 prefix allocations grows from roughly 300 per month at the begin- ning of our observation period to a peak of 800–1000 per month at the start of 2011, after which it drops to around 500 per month in the last year, as the number of available addresses at RIRs has dwindled|,Data,139
| There were less than 30 IPv6 prefixes al- located per month prior to 2007, generally increasing thereafter. In the past several years, we typically find more than 300 prefixes allocated per month, with a high point of 470 prefix allocations in February 2011|,Data,139
| The number of IPv4 prefix allocations grows from roughly 300 per month at the begin- ning of our observation period to a peak of 800–1000 per month at the start of 2011, after which it drops to around 500 per month in the last year, as the number of available addresses at RIRs has dwindled. 1 Overall, we find nearly 69K IPv4 prefix allocations at the beginning of our dataset and just over 136K at the end|,Data,139
| We deployed this detection mechanism on an Alexa top 10 website, Facebook, which terminates connections through a diverse set of network operators across the world. We analyzed 3, 447, 719 real-world SSL connections and successfully discovered at least 6, 845 (0|,Data,140
| We deployed this detection mechanism on an Alexa top 10 website, Facebook, which terminates connections through a diverse set of network operators across the world. We analyzed 3, 447, 719 real-world SSL connections and successfully discovered at least 6, 845 (0|,Data,140
| Table 1 shows the datasets we use in our paper. We use two ICMP surveys taken by USC [12]: IT17ws and IT16ws; IT17ws is the main dataset used in this paper, while we use IT16ws for validation in Section 6|,Data,142
2. We collected VUSC s at our enterprise in order to compare our inferences with network operators as discussed in Section 6,Data,142
| # of Data-Oriented Attacks gives the number of attacks generated by FLOWSTITCH, includ- ing privilege escalation attacks and information leakage attacks. FLOWSTITCH generates 19 data-oriented attacks from 8 vulnerable programs|,Data,144
| Third, this method is not specific to C or C++, and can be applied to any programming language. We collected C++ source of thousands of contestants from the annual international competition “Google Code Jam”|,Data,145
| Finally, we analyze various attributes of programmers, types of programming tasks, and types of features that appear to influence the success of attribution. We identified the most important 928 fea- tures out of 120,000; 44% of them are syntactic, 1% are layout-based and the rest of the features are lexical|,Data,145
|3.1ScalingWecollectedalargerdatasetof1,600programmersfromvariousyears|,Data,145
| ) s y a D n i (    e m T i  7  6  5  4  3  2  1  10  20  30  40  50  60  70  80  90 Time Before Accounts Suspension Number of IP Addresses 2 Motivation: Analysis of Malicious Activ- ity on a Webmail Service We want to understand the way in which cybercrimi- nals abuse accounts on online services, to identify weak points that we could leverage for detection. To this end, we observed the email-sending activity on a large web- mail service|,Data,147
| Following accepted frameworks for qualitative research [18, 30, 35], we focus closely on a small number of participants. We interviewed 15 journalists employed in a range of well-respected journalistic institutions in the United States and France, analyzing these interviews using a grounded theory approach [18, 30]|,Data,146
| 3.1 Datasets We examine 13,345 passwords from four sets created under composition policies ranging from the typical to the currently less common to understand the suc- cess of password-guessing approaches against passwords of different characteristics|,Data,149
| Had we used any major password leak, their analysts would have already been familiar with most or all of the passwords contained in the leak, biasing results. The passwords in these sets were collected using Ama- zon’s Mechanical Turk crowdsourcing service|,Data,149
| The decision for or against pinning is always a trade- off between increasing security and keeping mainte- nance efforts at an acceptable level. In this paper, we present an extensive study on the applicability of pinning for non-browser software by analyzing 639,283 Android apps|,Data,152
| Therefore, we instrument telemetry data from a popular anti-virus software provider. We evaluate the update behaviour of 871,911 unique users from January 2014 to December 2014 and find that only 50% of the users update to a new app version within the first week after release|,Data,152
| Developer View Although pinning is only ap- plicable in relatively few cases, the nominal-actual comparison leaves room for improvement. We there- fore collected feedback from 45 developers of apps for which we would recommend pinning|,Data,152
| Section 4). Altogether we found 20,020,535 calls to network related API calls (cf|,Data,152
| Instability of the routes to the sensor address space can also result in reachability problems, especially given that route flap damping can be triggered during convergence to suppress unstable routes [9]. Using the BGP updates data from RouteViews BGP monitor, we studied the availability of the routes to the sensor blocks in our de- ployment from a large set of ASes|,Data,154
| This section probes these differences using three successively more specific views of traffic to a network of distributed blackhole sensors. The data was recorded over a one month period with SYN responders on TCP port 135, 445, 4444, and 9996 across all sen- sors|,Data,154
|  V. EXPERIMENT RESULTS  In this section, we mainly focus on how our router-to-AS Mapping method and other baseline methods behave on global router-level topology, as discussed above, we use PeeringDB data as ground truth, and apply clustering method on global topology based on CAIDA ITDK project|,Data,155
| It describes the properties that a dataset should have in order to be used for comparison purposes. The dataset used in the paper includes an IRC-based Botnet attack1, but the bot used for the attack was developed by the authors and therefore it may not represent a real botnet behavior|,Data,156
| This dataset may be downloaded with authorization. The Protected Repository for the Defense of Infrastructure Against Cyber Threats (PRE- DICT) indexed three Botnet datasets2 until May 16th, 2013|,Data,156
 None of them are labeled. A custom botnet dataset was created to verify five P2P botnet detection algorithms in Saad et al,Data,156
| Unfortunately, there is only one infected machine for each type of botnet, therefore no synchronization analysis can be done. The Traffic Laboratory at Ericsson Research created a normal dataset that was used in Saad et al|,Data,156
 This is the only normal dataset that is labeled inside the pcap file. A considerable amount of malware traffic in pcap format was published in the Contagio blog9,Data,156
| But since each scenario includes only one infected computer, it should be possible to label them. Another dataset with malware logs and benign logs was collected in NexGinRC (2013)|,Data,156
 Access to this dataset may be granted upon request10. The last dataset analyzed is currently created by the MAWI project described in Cho et al,Data,156
| Methodology and datasets We deployed Paris Traceroute with its Multipath Detection Algorithm (MDA) [29] enabled in 90 PlanetLab nodes. We configured each node to trace IP-level routes toward 10 thou- sand destinations selected at random from a list of 102,404 reachable destinations in different /16 prefixes we obtained from the PREDICT project [11]|,Data,158
| We configured each node to trace IP-level routes toward 10 thou- sand destinations selected at random from a list of 102,404 reachable destinations in different /16 prefixes we obtained from the PREDICT project [11]. Our dataset contains more than 900 thousand IP-level (multi)routes and 324,313 IP addresses|,Data,158
1 3.1 Address Allocation and BGP Data We analyzed BGP announcements captured by all collectors (24 collectors peering with 184 peers) of the Routeviews [3] and RIPE RIS [52] projects,Data,159
| For each /24 block, we computed the maximum number of peers that saw it reachable at any time within the full observation period of 92 days. To determine which address blocks are available for assignment, we used a dataset compiled by Geoff Hus- ton [23], which merges the extended delegation files from the 5 RIRs [4, 6, 7, 41, 51] with IANA’s published registries [31–36]|,Data,159
| SWITCH. We collected unsampled NetFlow records from all the border routers of SWITCH, a national aca- demic backbone network serving 46 single-homed uni- versities and research institutes in Switzerland [55]|,Data,159
| R-ISP. We collected per-flow logs from a vantage point monitoring traffic of about 25,000 residential ADSL customers of a major European ISP [21]|,Data,159
 UCSD-NT. We collected full packet traces from the /8 network telescope operated at the University of Cal- ifornia San Diego [1],Data,159
| IXP. Our fourth VP is a large European IXP inter- connecting more than 490 networks, exchanging more than 400 PB monthly [5]|,Data,159
|3 Active Measurements ISI. We used the ISI Internet Census dataset it55w- 20130723 [37], obtained by probing the routed IPv4 address space with ICMP echo requests and retaining only those probes that received an ICMP echo reply from an address that matched the one probed (as rec- ommended [38])|,Data,159
| HTTP. We extracted IP addresses from logs of Project Sonar’s HTTP (TCP port 80) scan of the entire IPv4 address space on October 29, 2013 [24]|,Data,159
| Definitions of graph parameters measuring metric tree-likeness of a graph, as well as notions and notations local to a section, are given in appropriate sections. 3 Datasets Our datasets come from different domains like Internet measurements, biological datasets, web graphs, social and collaboration networks|,Data,160
| The experiments were executed as follows. Traces were col- lected by using ICMP, UDP, and TCP Traceroute to probe the paths to a set of 100 destination websites from a source located on the Pennsylvania State University, University Park campus|,Data,161
| For UDP and TCP Traceroute, traces were collected using the default destination port numbers. We also collected traces using other ports and observed similar results|,Data,161
| Realistic Networks Here we compare the merged topologies produced by iTop, MN, and Isomap for realistic topologies. We use the Au- tonomous System (AS) topologies from both the Rocketfuel [20] and the CAIDA [21] projects, which represent IP-level connections between backbone/gateway routers of several ASes from major Internet Service Providers (ISPs) around the globe|,Data,161
| Although the paris-traceroute output of ITDK is more reliable than that of IPlane’s traceroute, the random selection of endpoints implemented by CAIDA hinders the collection of routes between the same vantage- and endpoints. Therefore we used the data of IPlane’s traceroute measurements|,Data,162
| They can also be used for constructing maps of the Internet at the Autonomous Systems level [, ]. In this work we used the CAIDA router-level Internet map from October th,  []|,Data,163
| 3 Table 1: Dataset Description Name BGP Usage AS Geolocation; Detour Detection Date 2016-01 Sources Info RouteViews, RIPE 38,688 RIBS, 416 peers, RIS 30 countries, 55GB Infrastructure IP List AS Geolocation 2016-01 to 2016-03 CAIDA Ark, iPlane, OpenIPMap, RIPE Atlas Measurements 3M Router IPs Infrastructure IPs to AS Mapping Infrastructure IP geolocation 2015-08 CAIDA ITDK, iPlane 6.6M IP to AS mappings AS to IXP Mapping AS Relationship AS Geolocation 2016-01 to 2016-03 Filtering peered paths from detection 2016-01 Traceroute Detour Validation 2016-05-01 IXP websites, PeeringDB, PCH CAIDA AS Relationship RIPE Atlas MaxMind Prefix Geolocation; Detour Validation 2016-01, 2016-03 MaxMind GeoLite City (free and paid) 368 IXP websites crawled 482,657 distinct relationships Used by Netra, 163 traceroutes Paid version used only for geolocating infrastructure IPs and detour validation longest prefix match on the global routing table and map the IP to the AS announcing the longest matching prefix|,Data,164
| As shown in Figure 3, we install LaBrea on a /29 subnetwork and use PlanetLab [9] to probe from multiple vantage points the entire /24 aggre- gate to which the /29 belongs. We scan the /24 network by attempting to establish TCP connections to each IP address in the subnet and capture the packets for further analysis|,Data,165
| • Active IPs in a Subnet: Intuitively, we might ex- pect high-occupancy subnets to be good indicators of pos- sible tarpits. To this end, we initially investigated using a hitlist of probable tarpits as inferred from the /24 subnets with more than 240 responding web hosts in the scans|,Data,165
| To facilitate large-scale scanning and avoid triggering anomaly detectors, degreaser uses permu- tation scanning [7, 12] to pseudo-randomly iterate through the IP address space when probing. Our real-world Internet scan, which probes at least one address in each /24 network in the Internet, discovers 107 different tarpit subnetworks (cid:20)(cid:24)(cid:25) ranging in size from /16 (with up to 216 fake hosts) to /24 (with up to 28 fake hosts)|,Data,165
  III. DATA SET  The data used in this work was the PREDICT ID USC-Lander/ DoS_DNS_amplification-20130617 (2013- 06-17) to (2013-06-17) [26],Data,166
  III. DATA SET  The data used in this work was the PREDICT ID USC-Lander/ DoS_DNS_amplification-20130617 (2013- 06-17) to (2013-06-17) [26],Data,166
| • Discovering correlations between anomalous traffic types detected with deep inspection techniques and traffic feature entropy variations. • Providing a traffic-type dissection (in-depth and entropy based) of a representative portion of the IBR for three weeks of April, 2012, with a 10-minute time scope|,Data,167
 Following is the summary of information about these data sets:  1. Data set from PREDICT USA [24] which contains traces of a DNS distributed denial of service attack (DDOS),Data,168
  from optical  2. Data set from CAIDA USA [25] which contains internet internet connectivity from 2002 and 2003,Data,168
  3. Data set from our experiment in which a PCAP file is captured from a lab computer which is being used for browsing and software development for the cyber security project,Data,168
| In a recurring finite state MDP, the initial state will be visited again in (3) (4) expectation after some finite number of steps S During that time, and the adversary gains an expected reward of Ra = E(cid:104)(cid:80)S the honest network gains a reward of Rh = E(cid:104)(cid:80)S reward per step in the Markov Chain is ra = E(cid:104) 1 (cid:80)S rh = E(cid:104) 1 in the original (bounded) decision problem It follows that the expected and for the adversary and the honest network, respectively We can thus simplify the expected relative revenue rrel to: (cid:80)S (cid:105) (cid:105) s=1 rhi s=1 rhi s=1 rai s=1 rai (cid:105) (cid:105) S S (cid:20) (cid:20) (cid:20) (cid:20) (cid:21) (cid:80)n (cid:80)n i=1 rai i=1(rai + rhi ) n · ra (cid:21) lim n→∞ (cid:21) lim n→∞ n · (ra + rh) ra (cid:21) (ra + rh) lim n→∞ ra rrel = E = E = E = E ra + rh ra = ra + rh (cid:33)(cid:35) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17) (18) (19) (20) (21) (22) (23) Additionally, we note the following: ((1 − ρ) · rai − ρ · rhi ) (cid:35) )) ∗ i=1 wρ(ri(π n(cid:88) n(cid:88) (cid:32) (1 − ρ) · n(cid:88) i=1 i=1 1 n 1 n 1 n v ρ = E (cid:34) ρ = vπ∗ ∗ (cid:34) = E (cid:34) (cid:20) (cid:20) = E = E lim n→∞ lim n→∞ lim n→∞ lim n→∞ (cid:35) rai − ρ · n(cid:88) (cid:21) i=1 rhi (cid:21) (n · (1 − ρ) · ra − n · ρ · rh) 1 n ((1 − ρ) · ra − ρ · rh) lim n→∞ = E = E [(1 − ρ) · ra − ρ · rh] = (1 − ρ) · ra − ρ · rh And thus, for the case where ρ = rrel = ra ra+rh : v ρ = (1 − ρ) · ra − ρ · rh ∗ = (1 − ra ) · ra − ra · rh ra + rh ra · (ra + rh) − ra ra ra + rh 2 + ra · rh − ra ra + rh ra + rh 2 − ra · rh 2 − ra · rh ra + rh = = = 0 The reasoning for the second proposition is straightforward|,Non-data,73
| For any given policy π, it holds for ρ > ρ(cid:48) that wρ(ra, rh) ≤ wρ(cid:48) (ra, rh) for every transition with rewards ra and rh for the adversary and ρ ≤ vπ the honest network, respectively It follows directly that vπ ρ(cid:48) 7ρ ≤ v∗ ρ(cid:48), ie, v∗ for every policy π and thus v∗ decreasing in ρ|,Non-data,73
| ρ is monotonically We use binary search on our restricted family of MDPs for ρ ∈ [0, 1] in order to find the ρ for which the expected value in the instantiated MDP is zero and which subsequently maximizes the reward in the original single-player decision problem [32] Since v∗ ρ is monotonically decreasing, this can be done efficiently as follows: Algorithm 1 Binary search algorithm for the family of MDPs function OPTIMAL STRATEGY(c, ) low ← 0 high ← 1 repeat ρ ← (low + high)/2 (π, v∗ if v∗ ρ) ← MDP_SOLVER(M c ρ) ρ > 0 then low ← ρ high ← ρ else end if until high − low <  return π, ρ end function As far as we are aware, this is the first selfish mining model that (i) captures various parameters such as block propagation times, block size, block generation interval, and (ii) known network vul- nerabilities such as eclipse attacks Note that we do not consider mining costs in the selfish mining MDP since the objective here is to increase the relative mining share (and not the monetary reward)|,Non-data,73
| Optimal Strategies for Selfish Mining In order to solve the MDP’s, we apply an MDP solver for finite state space MDPs [20], and use a cutoff value of 30 blocks We first analyse the impact of the stale block rate on selfish mining In Figure 2, we compare selfish mining under a stale block rate of 1% and 10%, and we observe that the higher the adversarial mining power, the bigger the relative revenue of a selfish miner grows (up to a maximum difference of 0074)|,Non-data,73
| For comparison purposes, we plot an upper bound α 1−α of the adversarial relative revenue from selfish mining which corresponds to the case where the adversary’s advantage is maximized by utilizing one block to override one block generated by the honest network (as reported by Sapirshtein et al [32]) As we observe, this upper bound is exceeded when taking into account network delays and parameters that we capture via the stale block rate For an adversary with a mining power of α = 0|,Non-data,73
|1 and α = 03 respectively, we observe in Figure 3 that there is a non-linear relationship between the stale block rate and the relative mining revenue of selfish mining We moreover study the impact of eclipse attacks on selfish mining in Figure 4 Here, we only consider the case where the adversary (i) exploits the victims mining power ω, and (ii) uses all the victim’s blocks to advance his private chain|,Non-data,73
| We therefore only determine the optimal adversarial choices given these restraints We observe that the higher ω, the stronger his selfish mining capabilities become We note that for some values of ω (eg|,Non-data,73
|, ω = 03, α = 038), it is more rewarding for the adversary not to include some of the victims block in his private chain This is because the victim’s block rewards count towards the reward of the honest network, and therefore reduce the relative block share of the adversary|,Non-data,73
| 33 Double-Spending MDP Unlike selfish mining where the optimal strategy is not always financially rewarding compared to honest mining (cf Section 3), we proceed in what follows to study optimal double-spending strategies, where we assume a rational adversary that is interested in maximiz- ing his benefits (measured in financial gains) in the network We implicitly require that each time the adversary starts a double- spending attack (e|,Non-data,73
|g after an adopt action), he publishes a transac- tion Tl in the network, and mines on including a conflicting transac- tion Td in his private chain We assume that the operational costs of “losing” a double-spending attempt are small, since the adversary effectively receives a good or service in exchange for transaction Tl In addition to the states described for the selfish mining, the double-spending MDP features the exit state (cf|,Non-data,73
| Table 2) This state can only be reached provided that the adversarial chain is at least one block ahead the honest chain (la > lh), after k confirmations (la > k), given an honest network with mining power 1− α Before reaching the exit state, the adversary adopts an optimal strategy to maximize its reward, given the state and action space described in Section 3 After reaching the exit state, transitions back to the exit state model rewards of honest mining|,Non-data,73
| Note that since we assume that the adversary is rational, an optimal strategy might advise against performing double-spending attacks (ie the adversary will never reach the exit state)—depending on the value of the attempted In the exit state, the adversary earns a block reward of attack la − be + vd, (cid:98)(lh + 1) la−be (cid:99)− cm block rewards after an override with eclipse attack (because the adversary’s reward needs to discount the be victim’s blocks and (cid:98)(lh) la−be (cid:99) − cm block rewards if the adversary’s chain wins the race after a match action|,Non-data,73
| For every state transition we discount the mining costs −cm The adversary either abides by the optimal double-spending strat- egy π or performs honest mining, depending on the expected reward We are therefore interested in the minimal double-spending value vd, such that vd is strictly larger than the honest mining reward (cf Equation 25)|,Non-data,73
| la la P = (α, γ, rs, k, ω, cm) (24) vd = min{vd||∃π ∈ A : R(π, P, vd) > R(honest mining, P )} (25) The double-spending value vd can serve as a generic metric to compare the security of various blockchain instantiations Namely, if vd of a blockchain instance A is bigger than for blockchain B for given α, γ and ω, then blockchain A can be considered more resistant against double-spending attacks 33|,Non-data,73
|1 Optimal Strategies for Double-Spending In what follows, we analyze the solutions of our aforementioned double-spending MDP given various parameters To solve for the optimal strategy in our MDP, we rely on the pymdptoolbox library4 and apply the PolicyIteration algorithm [20] with a discount value of 0999 This methodology allows us to assess whether the number of transaction confirmations k are sufficient to ensure security in the presence of a rational adversary, with respect to the considered transaction value|,Non-data,73
| That is, if the adversary has a higher expected financial gain in double-spending than honest mining, then the transaction cannot be considered safe given k confirmations, and the merchant should wait additional confirmations In order to decide whether the adversary should choose to follow the optimal double-spending policy or honest mining (cf Equa- tion 25), and to determine the minimum vd, we instantiate the double-spending MDP with a high double-spending value (> 109 4https://githubcom/sawcordwell/pymdptoolbox 8Figure 2: Selfish mining for rs of 1%, 10%|,Non-data,73
 Figure 3: Selfish mining for α = 01 and 03 Figure 4: Selfish mining with eclipse attacks,Non-data,73
| Resulting State Probability Reward (in Block reward) State × Action (la, lh, be,·), adopt (la, lh, be,·), override (la, lh, be, i), wait (la, lh, be, r), wait (la, lh, be, a), wait (la, lh, be, r), match (la, lh, be,·), exit (1, 0, 0, i) (1, 0, 1, i) (0, 1, 0, r) (0, 0, 0, i) (cid:16) (cid:16) (cid:16) (cid:16) (cid:101), i la − lh, 0, be − (cid:100)(lh + 1) be la − lh, 0, be − (cid:100)(lh + 1) be la − lh − 1, 1, be − (cid:100)(lh + 1) be la − lh − 1, 0, be − (cid:100)(lh + 1) be (cid:101) + 1, i (cid:101), r (cid:101), i la la la la (cid:17) (cid:17) (cid:17) (cid:17) (la + 1, lh, be, i) (la + 1, lh, be + 1, i) (la, lh + 1, be, r) (la, lh, be, i) (la + 1, lh, be, a) (la + 1, lh, be + 1, a) (la − lh, 1, be − (cid:100)(lh) be la (la, lh + 1, be, r) (cid:101), r) (la, lh, be, a) exit α ω (1 − α − ω) · (1 − rs) (1 − α − ω) · rs α ω (1 − α − ω) · (1 − rs) (1 − α − ω) · rs α ω (1 − α − ω) · (1 − rs) (1 − α − ω) · rs γ · (1 − α − ω) · (1 − rs) (1 − γ) · (1 − α − ω) · (1 − rs) (1 − α − ω) · rs α ω 1 (−cm, lh) (−cm, lh) (−cm, lh) (−cm, lh) (cid:16)(cid:98)(lh + 1) la−be (cid:16)(cid:98)(lh + 1) la−be (cid:16)(cid:98)(lh + 1) la−be (cid:16)(cid:98)(lh + 1) la−be la la la la (cid:17) (cid:17) (cid:17) (cid:17) (cid:99) − cm, 0 (cid:99) − cm, 0 (cid:99) − cm, 0 (cid:99) − cm, 0 (−cm, 0) (−cm, 0) (−cm, 0) (−cm, 0) (−cm, 0) (−cm, 0) la (−cm, 0) (−cm, 0) (cid:16)(cid:98)(lh) la−be (cid:17) (cid:99) − cm, 0 (la − be + vd, 0) Table 2: State transition and reward matrices for optimal selfish mining and double-spending strategies in PoW blockchains α is the mining power of the attacker, ω is the mining power of the eclipsed node, be is the number of blocks in the attacker chain that were mined by the eclipsed node, γ is the fraction of nodes that an attacker can reach faster than the honest network, rs is the stale block rate and vd is the value of the double-spend The actions override and match are feasible only when la > lh or la ≥ lh, respectively We discount the mining costs cm ∈ [0, α] in the state transition reward only for double-spending|,Non-data,73
| The fork label (last element of the state) is denoted by i, r and a for irrelevant, relevant and active respectively For a reward tuple (a, b), a corresponds to the adversary’s costs, while b represents the reward for the honest network for selfish mining block rewards), such that the exit state is reachable in the optimal policy If the policy contains an exit state, the expected gain of fol- lowing the optimal double-spending strategy is higher than honest mining|,Non-data,73
| Otherwise, honest mining is the preferred strategy We apply binary search to find the lowest double-spending value (in units of block rewards, within an error margin of 01), for α, k, rs, γ and cm In Table 3, we sketch an example of an optimal strategy for the case where α = 0|,Non-data,73
|3 (adversarial mining power), γ = 0 (propagation parameter), cm = α (maximum mining costs), ω = 0 (no eclipse attack), where we observe only wait, adopt and exit actions Because we can only solve finite MDPs, we choose a cutoff value of 20 blocks, ie, neither the chain of the adversary nor the chain of the honest network can be longer than the cutoff value|,Non-data,73
| In the following paragraphs, we discuss in greater details the impact of α, γ, cm, rs, k, vd and ω on the optimal double-spending strategy and its implications on the security of transaction confirmations Recall that the absorbing state [24] of the Markov chain of our double-spending MDP is the exit state By computing the funda- mental matrix [24] of the Markov chain, we calculate the expected number of steps in the Markov chain—before being absorbed by the exit state These steps correspond to the expected number of blocks required for a successful double-spending attack|,Non-data,73
| In Figure 5, we evaluate the expected number of blocks with respect to the adversar- ial mining power and the number of transaction confirmations k We observe that an adversary with a mining power of more than 025 is expected to need less than 1000 blocks for a successful double- spending attack (up to k = 10 confirmations), which corresponds to a one week attack duration in Bitcoin Impact of the propagation parameter: Recall that the propaga- tion parameter specifies the connection capability of the adversary|,Non-data,73
| In Figure 8, we depict the minimum double-spending transaction value that would result in financial gain when compared to honest mining (cf Equation 25) when γ = 0, 05 and 1 respectively Re- call that a merchant is safe as long as he accepts transactions with a value less than vd given these parameters|,Non-data,73
| Clearly, the higher γ is, the lower is the transaction value that an 0001020|,Non-data,73
30405Adversarialminingpowerα000,Non-data,73
20406081,Non-data,73
|0Relativerevenueselfishmining,rs=100%selfishmining,rs=1000%α1−αhonestmining000|,Non-data,73
10203040,Non-data,73
5Staleraters0002040,Non-data,73
60810Relativerevenueα=01α=0,Non-data,73
30001020,Non-data,73
30405Adversarialminingpowerα000,Non-data,73
10203040,Non-data,73
5Eclipsedminingpowerω0102030,Non-data,73
40506070,Non-data,73
|8RelativeRevenue9Figure 5: Expected number of blocks for successful double-spending given rs = 041%, γ = 0, cm = α and ω = 0 Figure 6: Impact of the mining cost cm on the security of double spending (rs = 041%, γ = 0, ω = 0)|,Non-data,73
| ∆vd is the difference in costs Figure 7: Impact of stale block rate rs on the security of double-spending given γ = 05, ω = 0 for α = 01, α = 0|,Non-data,73
|3 and k = 6 lh la 0 1 2 3 4 5 6 7 8 1 *a* 3 *** *a* 8 7 6 4 2 0 5 *** *** *** *** w** *** *** *** *** *** w** ww* ww* *** *** *** *** *** w** ww* ww* ww* ww* *a* *** *** w** ww* ww* ww* ww* ww* *a* *** w** ww* ww* ww* ww* ww* ww* *a* *a* w** ww* ww* ww* ww* ww* ww* ww* w** ww* ww* ww* ww* ww* ww* ww* ww* ww* e** *** w** w** e** e** *** e** *** e** *** e** *** e** *** e** *** Table 3: Optimal double-spending strategy for α = 03, γ = 0, rs = 041%, cm = α, ω = 0 and vd = 19|,Non-data,73
|5 The rows cor- respond to the length la of the adversary’s chain and the columns correspond to the length lh of the honest network’s chain The three values in each table entry correspond to the fork labels irrelevant, relevant and active, where * marks an unreachable state and w, a and e denote the wait, adopt and exit actions, respectively adversary is expected to double-spend|,Non-data,73
| For example, if the adversary has α = 03 of the hashing power in the network, assuming k = 6 confirmations, and a mining cost of cm = α, a double-spending strategy is clearly profitable if the double-spending transaction has a value of at least 05 block rewards (one block reward is 25 Bit- coin, where one Bitcoin is about 4367 USD at the time of writing, for rs = 0|,Non-data,73
|41%) when γ = 1 When γ = 05, the minimum transaction value increases to 129 block rewards|,Non-data,73
| Impact of the mining costs: In Figure 6, we analyze the impact of the mining costs on the minimum required double-spending trans- action value Our results show that mining costs have negligible impact on the adversarial strategy Impact of the stale block rate: We evaluate the impact of the stale block rate for adversaries with a mining power of α = 01 and α = 0|,Non-data,73
|3 in Figure 7 We observe that there exists a non-linear relationship between the stale block rate and the double-spending value and that the higher the stale block rate, the worse is the double- spending and selfish mining resistance of a PoW blockchain (cf Figure 7) For instance, for an adversary with mining power α = 0|,Non-data,73
|3 and rs of 10% and 20%, the double-spending value vd decreases from 92 to 64 block rewards Similarly, the relative revenue from selfish mining (cf|,Non-data,73
 Figure 3) increases from 037 to 043 Impact of eclipse attacks We evaluate the impact of eclipse attacks on the adversarial strategy given our MDP,Non-data,73
| We assume that the adversary eclipses a victim with mining power ω in order to increase its advantage in sustaining his blockchain (cf Figure 9) We observe that an eclipse attack clearly empowers the adversary, since it allows the adversary to effectively increase its overall mining power For instance, an adversary with α = 0|,Non-data,73
1 can reduce the double-spending value vd from 880 block rewards to 075 block reward if eclipsing a miner with ω = 0025 3,Non-data,73
|32 Bitcoin vs Ethereum In order to alleviate the problem that stale blocks decrease PoW’s efficiency, a number of proposals, such as Ethereum, suggest to reward miners for stale blocks [4] Here, although uncle blocks that are included in a block receive a reward, they do not count towards the total difficulty of a chain, i|,Non-data,73
|e, Ethereum uses a longest chain rule with added rewards for uncle blocks This clearly con- tradicts Ethereum’s claim of using a blockchain protocol adapting GHOST [33] Ethereum has also recently modified its longest chain algorithm to incorporate uniform tie breaking [11]|,Non-data,73
| Notice that such a strategy is meant as a selfish mining countermeasure, but allows a selfish miner to increase its chances of catching up to the honest chain [32] In Table 4, we extend our model to cater for uncle rewards and uniform tie breaking, and describe the resulting double-spending MDP in order to capture the security of Ethereum against double-spending Building on this analysis, we compare in Figure 10, the double- spending resilience of Bitcoin (rs = 041%, cf|,Non-data,73
| MDP in Table 2) to that of Ethereum (rs = 68%, cf MDP in Table 4), given γ = 0, cm = 0 and ω = 0 In order to provide a fair cost comparison, we rely on US dollar based valuation (Bitcoin’s block reward is more than 200 times higher than Ethereum’s block reward)|,Non-data,73
| We observe that 6 Bitcoin block confirmations are more resilient to double-spending than 6 Ethereum5 block confirmations Second, when comparing 12 Ethereum with 6 Bitcoin block confirmations, Ethereum’s double-spending resilience is only better than Bitcoin for an adversary with less than 11% of the PoW hashing power Note that 12 Ethereum blocks are likely to be generated in less than 4 minutes, while 6 Bitcoin blocks last about one hour Third, we discover that the monetary value of the block reward directly impacts the double-spending security: the higher the block reward of a blockchain (in $) the more resilient it is against double-spending|,Non-data,73
| In addition to comparing Bitcoin to Ethereum, we compare in Figure 11 the two blockchains by setting Bitcoin’s stale block rate equal to Ethereum’s stale block rate to objectively evaluate their 5Block generation time between 10 and 20 seconds 00010|,Non-data,73
2030405Adversarialminingpowerα101102103104105106Exp,Non-data,73
numofblocksk=12k=10k=8k=6k=4k=2k=100010,Non-data,73
2030405Adversarialminingpowerα10−1100101102103104105106vdcm=0cm=α∆vd0,Non-data,73
00102030,Non-data,73
405Staleraters100101102103104vdα=01α=0310(a) γ = 0 (b) γ = 0,Non-data,73
|5 (c) γ = 1 Figure 8: Impact of the propagation parameter γ We observe that the higher is γ, the lower is vd for double-spending to be more profitable than honest mining rs = 041% (Bitcoin’s stale block rate), cm = α (maximum mining costs), ω = 0 (no eclipse attack)|,Non-data,73
| Figure 9: Full eclipse attack for rs = 041%, γ = 0 and cm = 0 Figure 10: Double-spending resistance of Ethereum (k ∈ {6, 12}) vs Bitcoin (k = 6)|,Non-data,73
| USD exchange rate of 2016-04-20 Figure 11: Direct comparison between Ethereum and Bitcoin with k = 6, rs = 68% and their respective difference ∆vd security implications|,Non-data,73
| We observe that, in spite of the reliance on uncle block rewards, and uniform tie breaking, Ethereum’s security is weaker than Bitcoin, and conclude that the uniform tie breaking and the uncle reward lower the security of Ethereum’s blockchain 4 SECURITY VS PERFORMANCE OF POW-BLOCKCHAINS In this section, we evaluate the performance (and security) of var- ious blockchain instantiations by leveraging our model in Section 3|,Non-data,73
| To this end, we constructed a Bitcoin blockchain simulator in order to evaluate different blockchain instances from a performance perspective Relying on simulations emerges as the only workable alternative to realistically capture the blockchain performance under different parameters since neither formal modeling, nor the deploy- ment of a thousands of peers (eg, currently there are 6000 reachable nodes in Bitcoin) would be practical|,Non-data,73
| By leveraging our simulator, we evaluate different blockchain pa- rameters, such as the block interval, the block size, the propagation mechanisms by measuring the resulting stale block rate, throughput and block propagation times This also allows us to connect our blockchain simulator to our MDP model in a unified framework Namely, we feed the stale block rate output by the simulator into our MDP model in order to assess the security (under selfish mining and double-spending) of the resulting blockchain instance 4|,Non-data,73
|1 Blockchain Simulator In Table 5, we summarize the parameters captured by our sim- ulator Here, we simulate the PoW for miners, by attributing a particular mining power to each miner Based on the block interval distribution (which defines at what time a block is found), a new block is then attributed to a miner Conforming with the operation of existing PoW-blockchains, a miner mines on the first block he receives, and we assume that forks are inherently resolved by the longest chain rule|,Non-data,73
| Once a fork is resolved, the blocks that do not contribute to the main chain are considered stale blocks Within our simulations, we do not consider difficulty changes among different blocks; the longest chain is therefore simply defined by the number of its blocks When establishing the connections between nodes, we create point-to-point channels between them, which abstracts away any intermediate devices (routes, switches, etc) These channels have two characteristics; the latency and bandwidth|,Non-data,73
| To capture realistic latencies in the network, we adopt the global IP latency statistics from Verizon [36] and assume a Pareto traffic distribution with variance accounting for 20% of the mean latency [2] On the other hand, to model a realistic bandwidth distribution in the network, we adapted the distribution6 from testmynet [34] Our simulator does not model the propagation of transactions, since the focal point of our simulator is to study the impact of the block size, block interval, and the block request management system—all of which can be captured independently of the trans- action propagation|,Non-data,73
| Note that transactions are implicitly captured within the block size In our simulator, we distinguish between two node types: (i) regular nodes, and (ii) miners For regular nodes (up to 6000), we retrieved the current geographical node distribution from bitnodes 6Upload bandwidth characteristics: min=0|,Non-data,73
|1Mbps, max=100Mbps, interval=01Mbps Download bandwidth characteristics: min=01Mbps, max=500Mbps, interval=0|,Non-data,73
5Mbps 00010,Non-data,73
2030405Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=10,Non-data,73
00102030,Non-data,73
405Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=100010,Non-data,73
2030405Adversarialminingpowerα10−1100101102103104105106vdk=12k=10k=8k=6k=4k=2k=10,Non-data,73
00102030,Non-data,73
405Adversarialminingpowerα00010,Non-data,73
2030405Eclipsedminingpowerω10−1100101102103104105106vd0,Non-data,73
00102030,Non-data,73
|405Adversarialminingpowerα10−1100101102103104105106107108vdinblockrewardsBitcoin,k=6,blockrewEthereum,k=12,blockrewEthereum,k=6,blockrew|,Non-data,73
|10−1100101102103104105106107108vdin$Bitcoin,k=6,$Ethereum,k=12,$Ethereum,k=6,$0001020|,Non-data,73
|30405Adversarialminingpowerα10−1100101102103104105106vdBitcoin,rs=68%Ethereum,rs=6|,Non-data,73
|8%∆vd11State × Action (la, lh,·, nr), adopt (la, lh,·, inc), adopt (la, lh,·, rel), adopt (la, lh,·,·), override (la, lh, relevant, nr), wait (la, lh, relevant, inc), wait (la, lh, relevant, rel), wait (la, lh, active, nr), wait (la, lh, relevant, nr), match (la, lh, active, inc), wait (la, lh, relevant, inc), match (la, lh, active, rel), wait (la, lh, relevant, rel), match (la, lh,·, nr), release (la, lh,·,·), exit Resulting State (1, 0, relevant, nr) (0, 1, relevant, nr) (0, 0, relevant, nr) (1, 0, relevant, nr) (0, 1, relevant, nr) (0, 0, relevant, nr) (1, 0, relevant, rel) (0, 1, relevant, inc) (0, 0, relevant, rel) (la − lh, 0, relevant, nr) (la − lh − 1, 1, relevant, nr) (la − lh − 1, 0, relevant, nr) (la + 1, lh, relevant, nr) (la, lh + 1, relevant, nr) (la, lh, relevant, nr) (la + 1, lh, relevant, inc) (la, lh + 1, relevant, inc) (la, lh, relevant, inc) (la + 1, lh, relevant, rel) (la, lh + 1, relevant, inc) (la, lh, relevant, rel) (la + 1, lh, active, nr) (la + 1, lh, active, rel) (la − lh, 1, relevant, nr) (la, lh + 1, relevant, nr) (la, lh + 1, relevant, inc) (la, lh, active, nr) (la, lh, active, rel) (la + 1, lh, active, inc) (la − lh, 1, relevant, nr) (la, lh + 1, relevant, inc) (la, lh, active, inc) (la + 1, lh, active, rel) (la − lh, 1, relevant, nr) (la, lh + 1, relevant, inc) (la, lh, active, rel) (la, lh,·, rel) exit Probability α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α (1 − α) · (1 − rs) (1 − α) · rs α α α α γ · (1 − α) · (1 − rs) (1 − γ) · (1 − α) · (1 − rs) (1 − γ) · (1 − α) · (1 − rs) (1 − α) · rs (1 − α) · rs γ · (1 − α) · (1 − rs) (1 − γ) · (1 − α) · (1 − rs) (1 − α) · rs γ · (1 − α) · (1 − rs) (1 − γ) · (1 − α) · (1 − rs) (1 − α) · rs Reward −cm−cm−cm ru − cm ru − cm ru − cm −cm−cm−cm lh + 1 − cm lh + 1 − cm lh + 1 − cm −cm−cm−cm −cm−cm−cm −cm−cm−cm −cm−cm lh − cm−cm−cm−cm−cm lh − cm−cm−cm lh − cm−cm−cm −cm −cm 1 1 0 la + vd Condition - - - - - - - - - la > lh la > lh la > lh - - - - - - - - - lh > 6 lh ≤ 6 - lh > 6 lh ≤ 6 lh > 6 lh ≤ 6 - - - - - - - - lh ≤ 6 ∧ lh > 1 ∧ la ≥ 1 la > lh ∧ la > k Table 4: State transition and reward matrices for an MDP for optimal double-spending strategies in Ethereum where ru is the uncle reward (ie 8 ) Every state includes a flag (where nr = not released, rel = released, inc = included) indicating whether an attacker block has been or 7 will be included as an uncle in the honest chain|,Non-data,73
| The release action corresponds to the release of the first block of the attackers fork with the intention to be included as uncle in the honest chain Therefore, it is only feasible if 1 < lh ≤ 6 and la ≥ 1, since it is otherwise equivalent to a match or override or the honest chain is too long to include it as uncle With the release action, no block is mined and a state transitions from not released to released, which transitions to included with the next block mined on the honest chain In Ethereum, γ is fixed at 0|,Non-data,73
5 and a match is possible even without a prepared block Consensus parameter Block interval distribution Mining power distribution of the miners Network-layer parameter Block size distribution # of reachable network nodes Geo distribution of nodes Geo mining pool distribution # of connections per node # of connections of the miners Block request management system Standard mechanism (inv/getdata) Unsolicited block push Relay network Sendheaders Description Time to find a block PoW power distribution Description Variable transaction load Open TCP port nodes Worldwide distribution Worldwide distribution Within network Within network Possible Protocols Default Miner only push block Miner network Bitcoin v0,Non-data,73
12 Table 5: Parameters of the blockchain simulation 21co (cf Figure 12a) and adopted this distribution to define the location of our simulated nodes,Non-data,73
| We also adapted the bandwidth and network latency (according to the geographical location) from Verizon [2, 36] and testmynet [34] To model miners, we retrieved the mining pool distribution from blockchaininfo, and accordingly distributed the mining pool’s public node to the respective region (cf|,Non-data,73
| Figure 12b) Mining pools typically maintain private peering con- nections among themselves—which we capture in our simulations Besides direct peering, a number of mining pools nowadays partic- ipate in Matt Corallo’s relay network [7] that is operated indepen- dently of the default Bitcoin P2P overlay network (cf Section 2|,Non-data,73
|2) We also capture the relay network and assume in our simulations that all miners participate in the relay network whenever the relay network option is enabled 42 Evaluation Results In what follows, we present the results from our evaluation|,Non-data,73
| Simulator Validation 421 With the objective to experimentally validate our simulation, we compared Bitcoin, Litecoin, and Dogecoin with their respective simulated counterpart For each blockchain, we adjusted the pa- rameters of Table 5 according to the current parameters featured by existing deployments of the investigated blockchains|,Non-data,73
| For in- stance, we measured Bitcoin’s block size distribution, as well as the 12by unsolicited block push from the miners, (Case 3) both former components plus the relay network, and (Case 4) the send headers mechanism with unsolicited block push and the relay network We observe first that for a block interval time of 10 minutes and a standard request management system, our stale block rate is 185%, which is comparable to 169% as reported by Wattenhofer et al|,Non-data,73
| [10] Recall that at the time of Wattenhofer’s study, the unsolicited block push and relay network were not yet available Secondly, we observe that the introduction of the unsolicited block push for miners significantly reduces the stale block rate This is the case since (i) miners are interconnected and profit most from the unsolicited block push, and (ii) the propagation method of the first node is crucial to reach the majority of the network rapidly|,Non-data,73
| The addition of the relay network does not seem to affect the stale block rate significantly (given the Bitcoin’s transaction load) compared to the unsolicited block push, and reduces the propagation time only marginally For bigger block sizes however (eg > 2MB) the relay network indeed provides an advantage over the unsolicited block push (cf|,Non-data,73
| Table 8) Moreover, the relay network provides an additional source of block information, in addition to the classical P2P overlay network Notice that although the impact of the send header mechanisms compared to a fully deployed relay network and unsolicited block push is limited, this mechanism mitigates partial eclipse attacks [18] To assess the impact of the block interval on the security of PoW blockchains, we feed the resulting stale block rate into our MDP models as shown in Table 7|,Non-data,73
| Our results show that, for an adversary equipped with 30% of the total mining power11, the lower is the con- sensus time, the higher is the relative revenue from selfish mining and the lower is the double-spending value We observe that the block propagation mechanism significantly impacts the security of the blockchain, since it directly affects the stale block rate The stan- dard block propagation mechanism offers less resilience (in terms of double-spending and selfish mining) than the other evaluated block propagation mechanisms We also note that the double-spending value halves in Table 7 for the block propagation mechanism of Case 4 (which results in the lowest stale block rate when compared to the other investigated mechanisms) when reducing the block interval from 25 minutes to 0|,Non-data,73
|5 seconds Similarly, the relative revenue from selfish mining increases from 033 to 042|,Non-data,73
 423 We now study the impact of the block size on the performance and security of the blockchain (cf Table 8,Non-data,73
| To this end, we simulate block sizes ranging from 01 MB to up to 8 MB, given a block interval of 10 minutes Impact of the Block size Our results suggest that the block propagation time increases linearly with the block size up to 4 MB; after 8 MB blocks, the block propagation time and stale block rate increases exponentially Second, we clearly see that a better block propagation mechanism significantly reduces the propagation times and the stale block rate|,Non-data,73
| This also suggests, conforming with our MDP models, that the bigger the block size, the higher the relative revenue from selfish mining and the lower the double-spending value (cf Table 8) It is however apparent that an efficient block propagation mechanism effectively allows the network to keep nearly the same security pro- visions against selfish mining and double-spending as we can see in Case 3 (standard propagation mechanism, unsolicited block push, relay network) and Case 4 (send headers propagation mechanism, unsolicited block push, relay network) This confirms that an effi- 11Bitcoin’s resilience to malicious miners is based on the assumption that the adversary cannot harvest more than 30% of the total mining power [15, 18]|,Non-data,73
 (a) Node distribution (b) Miner distribution Figure 12: Geographical distribution of Bitcoin nodes and miners used in our simulator Block interval Measured tM BP Simulated tM BP Measured rs Simulated rs Bitcoin 10 min 8,Non-data,73
7 s [9] 942 s 041 % (a)014%-(b)1,Non-data,73
85% (b)024 % (b)079 % Dogecoin 1 min 098 s 0,Non-data,73
83 s 062 % Litecoin 25 min 102 s 0,Non-data,73
|86 s 027 % Table 6: Median block propagation time (tM BP , in seconds), and rs in the real networks and the simulation (10000 blocks for each blockchain) (a) assumes that all miners use the relay network and unsolicited block push, while (b) is only given the standard propagation mechanism We conclude that not all miners in Bitcoin use the relay network and unsolicited block push|,Non-data,73
| block generation rate7 in the real Bitcoin network between May to November 2015 [23] In order to measure the stale block rate rs in the real blockchain networks, we crawled at least 6 months of data, namely, 24,000 Bitcoin blocks8, 100,000 Litecoin and 240,000 Dogecoin blocks9 We moreover adopt the miner mining power distribution for the different blockchains from public block explorers10 The number of connection per node in our simulations follows the distribution due to Miller et al|,Non-data,73
| [27] Our findings (cf Table 6) show that our simulator captures, to a large extent, the performance of existing blockchain deployments For instance, our results show that the measured and simulated median block propagation times are relatively close|,Non-data,73
| The stale block rates for Litecoin and Dogecoin are particularly close In the case of Bitcoin, the stale rate falls between the case when all miners use the relay network and unsolicited block push, and the extreme case where the relay network and unsolicited block push is not used by any miner Note that Litecoin and Dogecoin do not have any relay network 4|,Non-data,73
|22 Impact of the Block Interval In this section, we study the impact of the block interval on the median block propagation time and the stale block rate in PoW- based blockchains To this end, we run our simulator for different block interval times ranging from 25 minutes to 05 seconds (cf|,Non-data,73
| Ta- ble 7) Each simulation is run independently for 10000 consecutive blocks, and for each of the four different block request management system combinations: (Case 1) the standard block request manage- ment, (Case 2) the standard block request management enhanced 7The block generation rate distribution follows the shifted geometric distribution with p = 019 [23] 8from blockchain|,Non-data,73
info 9from blockchainsio 10blockchaininfo and https://wwwlitecoinpool,Non-data,73
|org/pools NorthAmerica,3869%Europe,5159%SouthAmerica,113%Japan,1|,Non-data,73
|19%Australia, 166%Asia Pacic,574%Europe, 540%NorthAmerica,23|,Non-data,73
|70%AsiaPacic,7090%13Block interval 25 minutes 10 minutes 25 minutes 1 minute 30 seconds 20 seconds 10 seconds 5 seconds 2 seconds 1 seconds 05 seconds tM BP 35|,Non-data,73
73 147 418 208 1,Non-data,73
43 121 100 089 0,Non-data,73
84 082 082 Case 1 rs vd 172 % 12,Non-data,73
47 151 % 1252 182 % 12,Non-data,73
45 215 % 1235 254 % 12,Non-data,73
06 320 % 1173 477 % 10,Non-data,73
73 864 % 1008 1665 % 7,Non-data,73
35 2674 % 437 3815 % 2,Non-data,73
78 rrel 034 034 034 0,Non-data,73
34 034 034 035 0,Non-data,73
37 041 053 060 tM BP 25,Non-data,73
66 1065 291 134 0,Non-data,73
84 067 035 037 0,Non-data,73
40 053 061 Case 2 rs vd 016 % 12,Non-data,73
86 013 % 1288 016 % 12,Non-data,73
86 035 % 1281 045 % 12,Non-data,73
78 086 % 1268 173 % 12,Non-data,73
46 294 % 1185 698 % 10,Non-data,73
47 1244 % 834 2062 % 6,Non-data,73
22 rrel 033 033 033 0,Non-data,73
33 033 033 034 0,Non-data,73
34 036 039 042 tM BP 22,Non-data,73
50 941 260 130 0,Non-data,73
84 069 033 045 0,Non-data,73
39 038 049 Case 3 rs vd 003 % 12,Non-data,73
89 014 % 1286 016 % 12,Non-data,73
86 025 % 1283 051 % 12,Non-data,73
77 085 % 1268 141 % 12,Non-data,73
54 299 % 1180 728 % 10,Non-data,73
37 1259 % 824 2087 % 6,Non-data,73
16 rrel 033 033 033 0,Non-data,73
33 033 033 034 0,Non-data,73
34 036 039 042 tM BP 22,Non-data,73
44 918 259 127 0,Non-data,73
84 068 053 044 0,Non-data,73
38 037 036 Case 4 rs vd 002 % 12,Non-data,73
89 013 % 1287 015 % 12,Non-data,73
86 029 % 1277 052 % 12,Non-data,73
69 082 % 1268 159 % 12,Non-data,73
50 305 % 1178 710 % 10,Non-data,73
42 1252 % 830 2110 % 6,Non-data,73
02 rrel 033 033 033 0,Non-data,73
33 033 033 034 0,Non-data,73
|34 036 039 042 Table 7: Impact of the block interval on the median block propagation time (tM BP ) in seconds, and the stale block rate rs, vd and rrel given the current Bitcoin block size distribution, an adversary with α = 0|,Non-data,73
|3 and k = 6 Case 1 refers to the standard block propagation mechanism, Case 2 refers to standard mechanism plus unsolicited block push, Case 3 to the combination of Case 2 plus the relay network and Case 4 to the send headers with unsolicited block push and relay network Block Size 01 MB 0|,Non-data,73
25 MB 05 MB 1 MB 2 MB 4 MB 8 MB tM BP 318 703 13,Non-data,73
62 2767 5779 13330 571,Non-data,73
50 Case 1 rs vd 032 % 1280 088 % 12,Non-data,73
67 163 % 1248 317 % 11,Non-data,73
79 624 % 1057 1185 % 8,Non-data,73
20 2997 % 411 rrel 033 0,Non-data,73
33 034 034 036 0,Non-data,73
38 053 tM BP 212 493 9,Non-data,73
84 2001 446 12657 875,Non-data,73
97 Case 2 rs vd 003 % 1289 011 % 12,Non-data,73
87 013 % 1287 038 % 12,Non-data,73
79 112 % 1261 546 % 10,Non-data,73
51 1564 % 764 rrel 033 0,Non-data,73
33 033 033 034 0,Non-data,73
35 041 tM BP 202 449 8,Non-data,73
65 1724 3549 7801 555,Non-data,73
49 Case 3 rs vd 003 % 1289 005 % 12,Non-data,73
88 005 % 1288 007 % 12,Non-data,73
88 008% 1287 012 % 12,Non-data,73
85 043 % 1265 rrel 033 0,Non-data,73
33 033 033 033 0,Non-data,73
33 033 tM BP 202 446 8,Non-data,73
64 1714 3538 7840 550,Non-data,73
25 Case 4 rs vd 02 % 1290 017 % 12,Non-data,73
87 006 % 1287 007 % 12,Non-data,73
88 01 % 1286 013 % 12,Non-data,73
66 04 % 1268 rrel 033 0,Non-data,73
33 033 033 033 0,Non-data,73
|33 033 Table 8: Impact of the block size on the median block propagation time (tM BP ) in seconds, the stale block rate rs, vd and rrel, given the current Bitcoin block generation interval and an adversary with α = 03 and k = 6 cient network propagation mechanism helps to increase the security of the blockchain|,Non-data,73
| Interestingly, given the block propagation mecha- nism of Case 4, the resilience (in terms of double-spending value) does not significantly change in Table 8 when increasing the block size from 01 MB to 8 MB (vd changes from 129 to 1268 block rewards respectively)|,Non-data,73
| Similarly, the relative revenue from selfish mining stays at rrel = 033, when all miners use the relay network Currently, a number of proposals suggest to chunk blocks and download these chunks in parallel (eg|,Non-data,73
|, Blocktorrent [35]) In a separate experiment that we conducted, we implemented a block propagation mechanisms that divides blocks into chunks of a few kilobytes that can be queried from multiple peers Our results show that such a protocol does not improve the median block propagation time compared to the send headers and relay network protocol, when dealing with modest block sizes (ie|,Non-data,73
|, smaller than 8 MB) This is due to the fact that a chunked block propagates slower than the 10th and 25th percentile of nodes owing to: (i) the communication overhead caused by the chunks, and (ii) because a node only forwards block chunks if the respective block has been validated 42|,Non-data,73
|4 Throughput We now evaluate the throughput achieved by various blockchain instantiations To this end, we vary the block size (from 01M B to 8 MB) and the block interval (from 05 seconds to 25 minutes) to capture a larger number of blockchain instances with our simulator|,Non-data,73
| Here, we assume that the network relies on an efficient propagation mechanism (send headers with unsolicited block push and relay network for all miners) For each simulated blockchain instance, we compute the resulting throughput in transactions per second (tps), measure the stale block rate and infer vd and rrel in order to assess the blockchain’s security with our MDP model (cf Section 3) tps 33|,Non-data,73
4 40 50 667 667 667 vd 12,Non-data,73
75 1238 1245 1206 12,Non-data,73
65 1271 rrel 033 034 0,Non-data,73
34 034 033 033 Block size Block interval 0,Non-data,73
25MB 010MB 025MB 025MB 0,Non-data,73
|50MB 100MB 30 seconds 10 seconds 20 seconds 15 seconds 30 seconds 1 minute Table 9: Throughput in transactions per second (tps) vs security measured in vd and rrel for an adversary with 30% mining power, k = 6 and given 16 mining pools We also assume an average transaction size of 250 bytes, k = 6 confirmations against double-spending and an adversary with 0|,Non-data,73
|3 mining power and γ = 05 In Table 9, we selectively list candidate blockchain instances which could achieve a transactional throughput beyond 60 tps and achieve similar security provisions to the existing Bitcoin system Clearly, our results indicate that different parameter configurations can yield the same throughput—though with different security pro- visions (due to a different stale block rate)|,Non-data,73
| In particular, we observe that low consensus intervals offer less security compared to a higher consensus interval given the same overall throughput, since the network requires more round trips in order to commit the same information to the blockchain Our results show that there is con- siderable room to enhance the scalability of existing PoW without significantly compromising security 145 RELATED WORK A number of contributions analyze double-spending attacks in Bit- coin [16,31]) but they do not consider optimal adversarial strategies|,Non-data,73
| Eyal and Sirer [15] show that a selfish miner can increase its relative mining revenue by not directly publishing his blocks Simi- larly, Courtois and Bahack [8] study subversive mining strategies Our work shares similarities with Sapirshtein et al [32]|,Non-data,73
| Here, the authors devise optimal adversarial strategies for selfish mining in Bitcoin Unlike [32], our work however captures optimal adversar- ial selfish mining strategies for PoW-powered blockchain and takes into account network delays and eclipse attacks We additionally capture optimal double-spending strategies—where we also take into account the mining costs of the adversary, the number of re- quired block confirmations, and the double-spending value in order to properly account for costs of the attack Croman et al|,Non-data,73
| [9] discuss the scalability limitations of Bitcoin, but do not quantify the security implications of smaller block intervals or bigger blocks on the security of the system Several works [9, 17] analyse the security of Bitcoin’s protocol but only consider the synchronous network model Our analysis and findings do not rely on any assumption on synchrony in the network and capture realistic network delays witnessed in existing deployments GHOST [33] is an alternative to the longest chain rule for estab- lishing consensus in PoW based blockchains and aims to alleviate the negative impacts of stale blocks|,Non-data,73
| Many PoW alternatives have been proposed In Proof of Stake (PoS) [30], the voting power of peers is based on the amount of “stake” they own in the respective blockchain system Proof of Burn (PoB) is a proposal to replace PoW by burning transaction outputs, such that they can no longer be spent Existing PoB-based blockchains however rely on PoW in order to create blocks and therefore ultimately rely on PoW for coin creation|,Non-data,73
| Proof of Capacity (PoC), aims to use the available hard-disk space in order to replace PoW Bitcoin-NG [14] performs leader election of PoW—allowing the leader to sign micro-blocks until a new leader is elected The literature features a number of additional proposals [21, 25, 26, 37] that rely on classical Byzantine fault tolerant consensus protocols in the hope to increase the con- sensus efficiency and achieve high transactional throughput Recent studies propose to combine the use of PoW with BFT protocols to realize highly-performant open consensus protocols (Byzcoin [25])|,Non-data,73
| 6 CONCLUDING REMARKS In this work, we introduced a novel quantitative framework to objectively compare PoW blockchains given real world network impacts and blockchain parameters Our framework enables us to evaluate the impact of network-layer parameters on the security of PoW-based blockchain By doing so, we show how to objectively compare the security provisions of different PoW blockchain in- stances|,Non-data,73
| Namely, our framework allows us to push the boundaries of PoW powered blockchains in terms of throughput in transactions per second, while observing the impact on the security provisions of the blockchain in terms of optimal selfish mining and double spending strategies For instance, we find that Ethereum needs at least 37 block con- firmations in order to match Bitcoin’s security with 6 block confir- mations, given an adversary with 30% of the total mining power Our results indirectly suggest that Bitcoin’s blockchain offers more security than Ethereum’s blockchain which rewards miners with uncle rewards and performs uniform tie breaking for blockchain fork resolutions Our results additionally indicate that existing PoW blockchains can achieve a throughput of 60 transactions per second—without significantly affecting the blockchain’s security|,Non-data,73
| To the best of our knowledge, this is the first contribution that quan- titatively evaluates the impact of the stale block rate on optimal double-spending and selfish mining resistance of a PoW blockchain (cf Figure 7 and Figure 3) By doing so, our results quantitatively capture the security of transactions based on their values, and on the block confirmations—effectively quantifying the level of security achieved by the famous required six block confirmations in Bitcoin Our insights do not only allow merchants to take into account the security provisions when accepting transactions and to assess their respective risk of double-spending, but also help miners in quantifying a PoW blockchain’s resilience against selfish mining|,Non-data,73
|ABSTRACT Visual cryptography has been applied to design human com- putable authentication protocols In such a protocol, the user and the server share a secret key in the form of an im- age printed on a transparent medium, which the user super- imposes on server-generated image challenges, and visually decodes a response code from the image An example of such protocols is PassWindow, an award-winning commercial product We study the security and usability of segment- based visual cryptographic authentication protocols (SVAPs), which include PassWindow as a particular case|,Non-data,74
| In an SVAP, the images consist of segments and are thus structured Our overall findings are negative We introduce two attacks that together can break all SVAPs we considered in the paper Moreover, our attacks exploit fundamental weaknesses of SVAPs that appear difficult to fix|,Non-data,74
| We have also evaluated the usability of different SVAPs and found that the protocol that offers the best security has the poorest usability Keywords Visual Cryptography; User Authentication; Attack 1 INTRODUCTION Authentication protocols allow a user to identify herself to a centralized server while ensuring that no adversary, with- out possession of the secret, can impersonate her Human- computable authentication protocols rely on human’s cogni- tive capability (and, often memory) to carry out the authen- tication process|,Non-data,74
| These protocols do not rely on the trust- worthiness of the user’s computing device and hence hold the promise of providing moderately secure and usable second- factor authentication mechanisms However, most human- computable authentication protocols are either tough to use or very insecure The concept of visual cryptography (VC) [26, 27] offers the potential of designing such human-computable, second- factor authentication protocols VC is a more human intelli- gible principle of cryptographic protocol design that involves Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full cita- tion on the first page|,Non-data,74
| Copyrights for components of this work owned by others than ACM must be honored Abstracting with credit is permitted To copy otherwise, or re- publish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee Request permissions from permissions@acm|,Non-data,74
|org CCS’16, October 24-28, 2016, Vienna, Austria c(cid:13) 2016 ACM ISBN 978-1-4503-4139-4/16/10 |,Non-data,74
  $1500 DOI: http://dxdoi,Non-data,74
|org/101145/29767492978417 no end-user cryptographic computations and has, subse- quently, inspired a wide array of cryptographic applications [30, 20, 5, 14] A typical VC-based human-computable au- thentication protocol may proceed as follows|,Non-data,74
| The user and the server share a secret key in the form of an image printed on a transparent key card, eg, a special credit card with a transparent portion One authentication session consists of one or more rounds|,Non-data,74
| In each round, an image of challenge frame is shown to the user on a display (eg, a phone or a computer); then the user overlays her key card on top of the challenge frame to obtain a new superimposed image, inter- prets the image visually and replies back with a response Since VC-based protocols use an image card, it can store a high-entropy key that the user does not need to remember; this opens up the possibility of designing a secure and usable scheme|,Non-data,74
| A prominent representative example of such pro- tocols is PassWindow [28, 4], a commercial product available from a startup company, which won the Wall Street Journal Asian Innovation Awards [33] The design of PassWindow re- lies on the visual decoding of digits represented in 7-segment LED-style and is significantly more user-friendly than other human-computable cryptographic authentication proposals in the research literature In this paper, we study the security and usability of segment-based visual cryptographic authentication protocols (SVAPs), which includes PassWindow as a particular case In SVAPs, the images are segment-based and structured|,Non-data,74
| More specifically, each frame of image consists of segments such that a group of adjacent segments can be used to display a symbol from some pre-defined set, eg, digits or letters We call each such group which can display symbols a position|,Non-data,74
| The security expectation from SVAPs is that an eavesdrop- ping attacker (eg, a malware on the client device) who in- tercepts the challenge-response pairs belonging to multiple authentication sessions cannot impersonate the user Our overall findings are negative|,Non-data,74
| We introduce two classes of attacks that together can break all SVAPs we consider While some designs (such as having the response computed from multiple displayed digits) can slightly improve security, they hurt usability Furthermore, our attacks are applicable so long as the images are segment-based and symbol-based Contributions|,Non-data,74
| To conduct a systematic study of SVAPs, we introduce a framework and a security definition for them Our security definition is inspired by [25]: An attack algo- rithm ((cid:96), p)-breaks an SVAP if it can successfully respond to a new challenge with probability p on average after observing a transcript of (cid:96) successful authentication sessions We generalize PassWindow to the class of uni-symbol SVAPs, 603in which each challenge frame can yield at most one symbol (eg|,Non-data,74
|, a digit for PassWindow) The security of uni-symbol SVAPs relies on the assumption that an adversary is uncer- tain which position in the frame displays a response symbol However, through experiences of breaking and fixing Pass- Window and similar protocols, we gained the following key in- sight: Knowing that only one symbol s ∈ Σ is displayed in a frame yields the definite information that no other symbol in Σ is displayed at any position of the frame This information can be exploited to reduce the plausible key universe with- out any expensive searching, and applies to all uni-symbol SVAPs|,Non-data,74
| We develop Search, an attack targeting uni-symbol SVAPs Search hinges on the following three key ideas (1) Given a transcript of challenge-response pairs, we can use the above insight to eliminate keys that are inconsistent with the ob- served transcript (2) We can perform a bounded search to exploit non-definite information leaked through challenge- response pairs|,Non-data,74
| After the key universe is reduced signifi- cantly by exploiting definite information, such a search be- comes highly effective (3) It is not necessary to recover the key fully for the purpose of computing a correct response to challenges We find that, while PassWindow has been found to offer strong security in previous studies [28, 1], and such analysis results have been accepted at face value [11], Search is extremely effective against our reconstruction of PassWin- dow, as well as other uni-symbol SVAPs we have developed To summarize, uni-symbol SVAPs’ fundamental weakness is that each challenge frame encodes at most one symbol|,Non-data,74
| To overcome this fundamental weakness of uni-symbol SVAP, we design multi-symbol SVAPs where each challenge frame displays more than one symbol, and the user applies a transformation on the symbols to obtain the response of that frame Given a frame that encodes two digits d1 and d2, we considered two ways to generate the response code: (a) (d1 + d2) mod 10 (hashing based double-digit SVAP, in short, HDD) and (b) either d1 or d2 is acceptable (either of double- digit SVAP, in short, EDD) We also investigated a general- ization of HDD to three digits which we identify as hashing based triple digit SVAP (HTD) EDD and HTD leaks no definite information, and Search is totally ineffective against them|,Non-data,74
| We introduce the SolveLP attack that works for both uni- and multi- symbol SVAPs This attack encodes the imperson- ation attack as a constraint satisfaction problem, where each variable encodes whether the key contains a particular pat- tern in a given position However, off-the-shelf solvers are found to be ineffective at solving the resulting constraints We thus developed an algorithm for solving them, exploiting the linear programming relaxation technique|,Non-data,74
| That is, in- stead of assigning binary values to the variables, we consider a relaxation that assigns fractional values to them, and in- terpret a larger value as more likely to be 1 (cf, the random- ized rounding technique [29]) We further apply the iterative multiplicative update technique to solve the resulting linear programming problem Our experimental evaluation shows that all the newly introduced multi-symbol SVAPs are sus- ceptible to this attack, although they do offer higher security than uni-symbol SVAPs|,Non-data,74
| Our security analysis exposes a fundamental limitation of SVAPs, that is, one can attain a compact representation of the partial knowledge about the key based on each position independently SolveLP takes advantage of the compact rep- resentation by treating whether a specific pattern appears in Figure 1: An example of key, challenge and com- bined frames for an SVAP authentication round Figure 2: Visual representation of PassWindow’s Σ a given position of the key as a variable to be solved|,Non-data,74
| Any authentication protocol whose human-computable transfor- mation for deriving the response code from the displayed symbols is expressible as constraints is vulnerable to this attack Finally, we also carried out a user study on Amazon Me- chanical Turk service to evaluate the usability of some of the concrete SVAPs we have analyzed for security Some repre- sentative notable findings of our usability analysis are as follows (1) EDD performs the best based on completion time and accuracy|,Non-data,74
| However, EDD is very insecure against SolveLP (2) The computation required for HDD and HTD im- poses significant cognitive overhead for the users, and HTD, which is the most secure protocol, has significantly worse us- ability than other protocols (3) HDD offers stronger security than PassWindow with similar usability (4) For EDD, conven- tional wisdom indicates that the chance of the left digit get- ting picked in higher, au contraire, our study demonstrates that the probability of the user picking the left or the right digit is roughly equal|,Non-data,74
| Roadmap The paper is organized as follows We present our framework, the adversarial model we consider, and the security definition for SVAPs in Section 2 Section 3 describes the concrete uni- and multi-symbol SVAPs we analyze in this paper|,Non-data,74
| In Sections 4 and 5, we present the Search and SolveLP attack strategies, respectively Sections 6 and 7 present the experimental results concerning the SVAP secu- rity and usability, respectively We discuss related work in Section 8 and conclude with Section 9 2|,Non-data,74
| A FRAMEWORK FOR SVAPS In visual cryptographic authentication protocols, the user and the server share a secret key in the form of an image printed on a transparent key card, which the user superim- poses on server-generated challenge images, interprets the resulting image visually, and replies back with appropriate responses In this paper, we focus on Segment-based Vi- sual Authentication Protocols (in short, SVAPs), where each frame of (key or challenge) image consists of segments and is structured so that a group of adjacent segments can en- code a symbol See Figure 1 for an example of the visual key/secret, challenge, and the result of superimposing the key on top of the challenge In this section, we first give a general framework for SVAPs, then give the adversarial model and the security definition for SVAPs|,Non-data,74
 We use PassWindow as an example to illustrate the framework 21 The Framework SVAP Primitives Each SVAP is based on a Visual Primi- keychallengewhat user sees604Figure 3: Example of visual component of an SVAP Figure 4: An example key and challenge-response,Non-data,74
| The response should be the sequence 8596, encoded in frames 4, 5, 6, 7 tive, which is specified by a tuple (cid:104)Σ, image, code(cid:105) Σ gives the set of all symbols used in the SVAP; it can be a set of digits, a set of letters, or some other set of symbols The function image maps a bitstring to a segment-based image; each segment is turned on (or opaque) if and only if its cor- responding bit is ‘1’|,Non-data,74
| For example, Figure 3 shows how a 21-bit string is visualized as an image with three 7-segment groups The function code maps a bitstring to a multisets over Σ; eg, code of the bitstring in Figure 3 yields {2, 2}|,Non-data,74
| In SVAPs, the images are created by mapping each bit to a segment; and a group of adjacent segments may display a symbol We call each such group where a symbol can be displayed a position Multiple positions may overlap with each other The number of positions is considered a security parameter of an SVAP|,Non-data,74
| Note that overlaying one transparent image on top of the other corresponds to the bit-by-bit ‘or’ operation of the bitstrings In PassWindow, Σ = {P, 0, 2, 3,   |,Non-data,74
| , 9}, and their visual rep- resentation is given in Figure 2 The letter “P” is used to warn users about the upcoming symbols The digit “1” is not used because it is shown when just 2 out of the 7 segments are on, and this can leak a significant amount of information and also imposes restrictions on the set of valid challenges and keys SVAPs|,Non-data,74
| An SVAP AV is a tuple (cid:104)PV, α, λ, keyGen, challengeGen, response(cid:105) in which PV states the SVAP primitive the protocol is based on, α denotes the number of rounds, ie, the number of challenge frames that are shown to the user during an authentication session, λ denotes the security parameter, and the other components are explained below The function keyGen : 1λ → {0, 1}p(λ) takes as input the security parameter λ and generates a secret key x of length p(λ)|,Non-data,74
