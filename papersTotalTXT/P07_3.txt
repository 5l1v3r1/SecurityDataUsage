19th	  Annual	  Network	  &	  Distributed	  System	  Security	  Symposium	  

Towards	  Taming	  Privilege	  Escala3on	  

A5acks	  on	  Android	  

Fraunhofer	  Ins3tute	  for	  Secure	  Informa3on	  Technology,	  Darmstadt,	  Germany	  

Alexandra	  Dmitrienko	  

Sven	  Bugiel,	  Lucas	  Davi	  
TU	  Darmstadt/CASED,	  	  

Germany	  

Ahmad-­‐Reza	  Sadeghi,	  Bhargava	  Shastry	  

Fraunhofer	  SIT/CASED,	  	  
Darmstadt,	  Germany	  

Thomas	  Fischer	  	  
Ruhr-­‐University	  

Bochum	  

App	  Installa3on	  in	  Android	  

Android	  Market	  

Movie	  Player	  

Download	  App	  

Permissions	  

Install	  

Requested	  	  

permissions	  are	  	  

reasonable	  

User	  

Can	  apps	  go	  beyond	  their	  privileges?	  	  

YES	  

Privilege	  escala3on	  a5acks	  

3	  

Confused	  Deputy	  A5ack	  

Do	  not	  have	  a	  right	  permission?	  Ask	  your	  neighbor!	  

Malware	  

Privileges:	  none	  

Benign	  app	  
Privileges:	  P1	  

Android	  OS	  

Android	  Middleware	  

Examples:	  
1)  Invoke	  browser	  to	  download	  malicious	  	  ﬁles	  (Lineberry	  et	  al.,	  BlackHat	  

2010)	  

2)  Invoke	  Phone	  app	  to	  perform	  a	  phone	  call	  (Enck	  et	  al.,	  TechReport	  2008)	  
3)  Invoke	  Android	  ScripXng	  Environment	  to	  send	  SMS	  messages	  (Davi	  et	  al.,	  

ISC’2010)	  

4	  

Collusion	  A5ack	  

Two	  (or	  more)	  apps	  collude	  to	  launch	  the	  a5ack	  	  

Malware	  

Privileges:	  P1	  

Android	  	  
System	  App	  

Benign	  app	  
Privileges:	  P2	  

Android	  OS	  

1)  Apps	  communicate	  directly	  

	  Example:	  Claudio	  Marforio	  et.	  al,	  TechReport	  ETH	  Zurich	  

2)	  Apps	  communicate	  via	  covert	  (e.g.,	  volume	  se^ngs)	  or	  overt	  (e.g.,	  
content	  providers)	  channels	  in	  Android	  System	  components	  

	  Example:	  Soundcomber	  	  (Schlegel	  et	  al.,	  NDSS’2011)	  	  

5	  

Inter-­‐Applica3on	  Communica3on	  

Inter-­‐process	  communicaXon	  (IPC)	  	  
 
Intents	  and	  remote	  procedure	  calls	  

 
  File	  system	  	  (ﬁles,	  Unix	  domain	  sockets)	  	  
  Network	  sockets	  

AppA	  

ApplicaXon	  layer	  

AppB	  

IPC	  

Reference	  
Monitor	  

File	  System	  

Network	  
Sockets	  

DiscreXonary	  
access	  control	  

of	  Linux	  

6	  

Middleware	  

Linux	  kernel	  

Related	  Work	  

	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  App	  A	  
Sensi3ve	  
Perm.	  P1	  
Data	  

App	  B	  

Perm.	  P2	  

Perm.	  P3	  

Dalvik	  VM	  

TaintDroid	  

AppFence	  

Porscha	  
Mediator	  

Paranoid	  
Android	  

Reference	  Monitor	  

Installer	  

Saint	  

Apex	  

CRePE	  

IPC	  Inspec3on	  

QUIRE	  

TrustDroid	  

Saint	  

Apex	  

Kirin	  

Permission	  
Database	  

Android	  Middleware	  

QUIRE	  

TrustDroid	  

Linux	  Kernel	  

SELinux	  

7	  

Sta3c	  and	  Oﬄine	  

Analysis	  Tools	  

ded	  

ComDroid	  

Stowaway	  

XManDroid:	  	  

eXtended	  Monitoring	  on	  Android	  

  Monitors	  all	  communicaXon	  channels	  between	  apps	  
  Validates	  if	  the	  requested	  communicaXon	  link	  complies	  to	  a	  system-­‐

centric	  security	  policy	  

AppA	  

ApplicaXon	  layer	  

AppB	  

IPC	  

Reference	  
Monitor	  

File	  System	  

Network	  
Sockets	  

DiscreXonary	  
access	  control	  

of	  Linux	  

	  

i

d
o
r
D
n
a
M
X

8	  

Middleware	  

Linux	  kernel	  

l

	  

	  

i

e
r
a
w
e
d
d
M
d
o
r
d
n
A

i

XManDroid	  Architecture	  

App	  A	  

App	  B	  

	  
t
e
k
c
o
S
/
e

l
i

	  

F
e
t
a
e
r
C

Android	  

Permissions	  

Reference	  
Monitor	  

System	  
View	  

Decision	  
Maker	  

Linux	  DiscreXonary	  Access	  Control	  	  

XManDroid	  Mandatory	  Access	  Control	  

File	  System/Internet	  Sockets	  

ApplicaXon	  layer	  

	  
t
e
k
c
o
S
/
e

l
i

	  

F
e
t
i
r

W
/
d
a
e
R

Middleware	  layer	  
Kernel	  layer	  

9	  

XManDroid’s	  SystemView:	  	  
Graph-­‐based	  Representa3on	  

Android	  

Android	  System	  App	  

Core	  

System	  Components	  
ApplicaXon	  sandboxes	  
Files	  
Internet	  sockets	  

IPC	  calls	  
Access	  to	  ﬁles	  
Socket	  connecXons	  

10	  

XManDroid:	  Simpliﬁed	  Example	  

Android	  

Core	  

C

P1	  

A

B

P2	  

Sandbox	  A:	  permission	  P1,	  no	  P2	  	  	  
Sandbox	  B:	  permission	  P2,	  no	  P1	  

Policy	  Rule:	  
 
 
  CommunicaXon	  type:	  	  Direct	  and	  indirect	  
  Decision:	  Deny	  

11	  

Contribu3ons	  

Design	  

Implementa3on	  

Tests	  

A	  general	  
framework	  

towards	  taming	  

privilege	  

escalaXon	  ahacks	  

System-­‐centric	  

policy	  

enforcement	  

Kernel-­‐level	  

mandatory	  access	  
control	  based	  on	  

TOMOYO	  

Callback	  channel	  
between	  kernel-­‐
level	  and	  the	  
middleware	  

System-­‐centric	  
IPC	  call	  chain	  
tracking	  for	  

Intents	  (inspired	  

by	  QUIRE)	  

EvaluaXon	  

Study	  on	  inter-­‐
applicaXon	  

communicaXon	  

12	  

Evalua3on	  	  

1

EﬀecXveness	  (ahack	  prevenXon)	  

2

3

Performance	  

Rate	  of	  falsely	  denied	  communicaXons	  

13	  

Study	  on	  Applica3on	  Communica3on	  

Pa5erns	  

14	  

IPC-­‐based	  Applica3on	  Communica3on	  

Do	  not	  communicate	  directly	  with	  each	  other	  
except	  well	  dis3nguished	  excep3onal	  cases	  

Apps	  contact	  system	  services	  

15	  

File	  and	  Socket-­‐based	  Applica3on	  

Communica3on	  	  

Indica3on	  of	  malicious	  behaviour	  
Sharing	  data	  over	  ﬁles	  is	  not	  typical	  

16	  

Conclusion	  and	  Future	  Work	  

ahacks	  (at	  applicaXon	  level)	  

  First	  general	  approach	  towards	  tackling	  privilege	  escalaXon	  
  RunXme	  monitoring,	  but	  quite	  eﬃcient	  
  No	  false	  negaXves	  
  No	  false	  posiXves,	  but	  conceptually	  they	  are	  possible	  

  Current	  work	  

  Large	  scale	  evaluaXon	  
  AutomaXc	  policy	  engineering	  
  Full	  IPC	  call	  chain	  tracking	  
  Applying	  XManDroid	  framework	  	  
	  	  	  	  for	  domain	  isolaXon	  on	  Android	  

BizzTrust	  

17	  

Current	  Work:	  BizzTrust	  

  Special	  case	  of	  XManDroid	  
  Allows	  dual	  use	  of	  	  phone	  for	  Private	  and	  Enterprise	  

usage	  

Private	  

Business	  /	  Work	  

18	  

Thank	  you	  

alexandra.dmitrienko@sit.fraunhofer.de	  

19	  

Fine-­‐grained	  Analysis	  of	  System	  Sandbox	  	  

System	  Service/	  

Content	  Provider	  1	  

	  
/
e
c
i
v
r
e
S
m
e
t
s
y
S

	  

	  

4
	  
r
e
d
i
v
o
r
P
	  
t
n
e
t
n
o
C

C
o
n
t
e
n
t
	  
P
r
o
v
i
d
e
r
	  
2

	  

	  

S
y
s
t
e
m
S
e
r
v
i
c
e
/
	  

System	  Service/	  

Content	  Provider	  3	  

System	  Sandbox	  

A Write	  x	  

System	  Service/	  

Content	  Provider	  1	  

Entry/
Value	  

Writer	  
UID(s)	  

x	  

y	  

A	  

B	  

…

	  

…

	  

Read	  x	  

B

System	  Service/	  

Content	  Provider	  4	  

System	  Service/	  

Content	  Provider	  2	  

System	  Service/	  

Content	  Provider	  3	  

System	  Services:	  
Extend	  API	  to	  enforce	  permission	  check	  between	  the	  last	  writer	  of	  a	  value	  and	  the	  
reader	  upon	  reading	  of	  a	  value	  

System	  Content	  Provider:	  
Extend	  API	  to	  ﬁlter	  all	  data	  from	  the	  response	  to	  a	  read	  access	  whose	  reader-­‐writer(s)	  
pair	  violates	  the	  system	  policy	  

20	  

Privilege	  Escala3on	  A5acks	  

Scenario	  1:	  	  
Confused	  deputy	  a5ack	  

Scenario	  2:	  	  
Collusion	  a5ack	  	  

Unprivileged	  

Privilege	  P1	  

Privilege	  P1	  

Privilege	  P2	  

App	  A	  

App	  B	  

App	  A	  

System	  

App	  B	  

Android	  Middleware	  

Examples:	  
1) 

Invoke	  browser	  to	  download	  
malicious	  	  ﬁles	  (Lineberry	  et	  al.,	  
BlackHat	  2010)	  

2)  Unauthorized	  phone	  call	  	  
3) 

(Enck	  et	  al.,	  TechReport	  2008)	  
Invoke	  Android	  ScripXng	  
Environment	  to	  send	  SMS	  
messages	  (Davi	  et	  al.,	  ISC’2010)	  

Marforio	  et.	  al,	  TechReport	  ETH	  Zurich)	  

1)  Apps	  communicate	  directly	  (Claudio	  
2)  Apps	  communicate	  via	  covert	  (e.g.,	  volume	  
se^ngs)	  or	  overt	  (e.g.,	  content	  providers)	  
channels	  in	  Android	  System	  components	  

	  	  	  	  	  	  	  Example:	  Soundcomber	  	  (Schlegel	  et	  al.,	  	  
	  	  	  	  	  	  	  NDSS’2011)	  	  

21	  

Permission	  Framework	  

protected	  interfaces	  

  ApplicaXons	  must	  be	  granted	  corresponding	  permissions	  to	  be	  able	  to	  access	  
  Permission	  assignments	  are	  monitored	  by	  middleware	  reference	  monitor	  
  Some	  excepXonal	  cases:	  INTERNET	  and	  EXTERNAL_STORAGE	  permissions	  
  Enforced	  by	  Linux	  kernel	  rather	  than	  middleware	  
  These	  permissions	  are	  mapped	  to	  Linux	  groups	  (e.g.,	  each	  app	  granted	  Internet	  
permission	  is	  a	  member	  of	  a	  group	  which	  is	  allowed	  	  to	  access	  Internet	  driver)	  

App	  Sandbox,	  uid	  =	  xx	  
Granted	  permissions:	  p1	  
,	  
INTERNET	  

ApplicaXon	  A	  

Sandbox	  System,	  uid	  =	  yy	  
Declared	  permissions:	  p1	  …	  pn	  

p1	  
p2	  
…	  
pn	  

Middleware	  	  

Private	  folder	  of	  uid	  =	  xx	  

Linux	  /	  File	  System	  

INTERNET	  Socket	  
SensiXve	  driver	  

22	  

Policy	  Language	  

Based	  on	  	  VALID	  [Bleikertz	  et	  al.,	  POLICY	  2011]	  –	  a	  formal	  security	  

assurance	  language	  for	  graph-­‐based	  virtualized	  topologies	  

Expresses	  properXes	  of	  graph	  verXces	  and	  paths	  

Deﬁnes	  high-­‐level	  security	  goals	  in	  a	  form	  of	  ahack	  states	  

	  	  	  	  	  	  	  	  	  Policy	  rule	  for	  our	  simpliﬁed	  example:	  

A,B	  –	  applicaXon	  sandboxes	  
L(A,B)	  –	  path	  
goal	  RuleName(deny)	  :=	  A.hasPermission(p1)	  ˄	  ¬(A.hasPermission(p2)	  ˄	  
B.hasPermission(p2)	  ˄	  ¬(B.hasPermission(p1))	  ˄	  L.connects(A,B)	  ˄	  	  
L.type(direct	  I	  indirect)	  

23	  

Challenges:	  False	  Posi3ves	  

Problem:	  The	  same	  communicaXon	  channels	  can	  be	  used	  for	  both,	  
	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  legiXmate	  purposes	  and	  ahacks	  

App	  invokes	  the	  
browser	  to	  open	  
the	  link	  to	  
adverXsements	  

No	  privileges	  

Internet	  access	  

No	  privileges	  

Browser	  

Android	  OS	  

App	  invokes	  the	  
browser	  to	  
download	  
malicious	  ﬁles	  
(Lineberry	  et	  al.,	  
BlackHat	  2010)	  	  

Performed	  a	  study	  on	  third	  party	  applicaXon	  communicaXon	  to	  discover	  
possible	  sources	  of	  false	  posiXves	  

24	  

Tchnical	  Challenges	  to	  Mi3gate	  Falselz	  

Denied	  	  

1

Fine-­‐grained	  analysis	  of	  communicaXon	  links	  via	  system	  
components	  

2

3

Directed	  edge	  representaXon	  upon	  ﬁle	  access	  and	  upon	  
read/write	  access	  to	  system	  databases	  and	  system	  services	  

Establishment	  of	  the	  semanXc	  links	  for	  IPC	  calls	  	  
(inspired	  by	  QUIRE,	  (Dietz	  et	  al.,	  USENIX	  Security	  2011)	  

4

Deployment	  of	  excepXonal	  policy	  rules	  to	  handle	  excepXonal	  
cases	  of	  applicaXon-­‐to-­‐applicaXon	  communicaXon	  

25	  

monolithic	  Android	  System	  Sandbox	  as	  virtual	  nodes	  

System	  Sandbox:	  Fine-­‐grained	  Analysis	  
  Extract	  System	  Services	  (SS)	  and	  Content	  Providers	  (CP)	  from	  
  DisXnguishing	  read/write	  access	  to	  SSs	  and	  CPs	  (directed	  edges)	  
SSs	  (e.g.,	  loca3on	  manager	  
or	  audio	  manager):	  	  
•  Check	  privileges	  of	  the	  last	  writer	  of	  a	  

value	  and	  the	  current	  reader	  

BizzTrust	  
BizzTrust	  

CPs	  (SQL-­‐like	  databases,	  	  
e.g.,	  user	  contacts):	  
•  Coloring	  data	  
•  Filtering	  query	  response	  

t e 	   c o n t a c t

	  

W r

i

User	  

Contacts	  

Read	  contact	  

Loca3on	  

Mgr	  

D

C

Read	  volume	  	  
se^ngs	  

A

Write	  volume	  	  
se^ngs	  

Audio	  	  
Mgr	  

Default	  	  
volume	  	  
se^ngs	  

System	  
Sandbox	  

CP2	  

F

B

G

26	  

Contribu3on	  

  A	  general	  framework	  to	  prevent	  both	  classes	  of	  privilege	  escalaXon	  ahacks	  
  Middleware:	  RunXme	  monitoring	  of	  IPC	  calls,	  establishment	  of	  the	  semanXc	  
links	  for	  IPC	  calls	  (inspired	  by	  QUIRE	  [Dietz	  et	  al.,	  USENIX	  Security	  2011])	  
  Kernel	  level:	  Mandatory	  access	  control	  on	  ﬁle	  system	  and	  Internet	  sockets	  (based	  

on	  TOMOYO)	  

  RunXme	  mapping	  of	  middleware	  policies	  to	  kernel	  level	  	  

  Policy	  

  System-­‐centric	  policy	  enforcement	  
  Expressed	  on	  adopted	  VALID	  policy	  language	  [Bleikertz	  et	  al.,	  POLICY	  2011]	  

  EvaluaXon	  

  Performance,	  eﬀecXveness,	  rate	  of	  falsely	  denied	  communicaXons	  

19th	  Annual	  Network	  &	  Distributed	  System	  Security	  Symposium,	  5	  to	  8	  February	  2012	  

27	  

XManDroid	  Architecture	  

App	  A	  

App	  B	  

ApplicaXon	  layer	  

	  
t
e
k
c
o
S
/
e

l
i

	  

F
e
t
a
e
r
C

Android	  

Permissions	  

Reference	  
Monitor	  

System	  
View	  

Decision	  
Maker	  

	  

l

i

e
r
a
w
e
d
d
M
d
o
r
d
Kernel	  layer	  
n
A

i

	  

Middleware	  layer	  

	  
t
e
k
c
o
S
/
e

l
i

	  

F
e
t
i
r

W
/
d
a
e
R

Linux	  DiscreXonary	  Access	  Control	  	  

XManDroid	  Mandatory	  Access	  Control	  

File	  System/Internet	  Sockets	  

28	  

Confused	  Deputy	  A5ack	  
Do	  not	  have	  a	  right	  permission?	  Ask	  your	  neighbor!	  
 

Invoke	  browser	  to	  download	  malicious	  	  ﬁles	  (Lineberry	  et	  al.,	  BlackHat	  2010)	  

Sandbox	  	  

Granted	  permissions:	  

none	  

Browser	  Sandbox	  	  

Granted	  permissions:	  

INTERNET	  

Malware	  

Browser	  

Linux	  kernel	  

29	  

Middleware	  

Networking	  

Confused	  Deputy	  A5ack	  
Do	  not	  have	  a	  right	  permission?	  Ask	  your	  neighbor!	  
 
 

Invoke	  browser	  to	  download	  malicious	  	  ﬁles	  (Lineberry	  et	  al.,	  BlackHat	  2010)	  
Invoke	  Phone	  app	  to	  perform	  a	  phone	  call	  (Enck	  et	  al.,	  TechReport	  2008)	  

Sandbox	  	  

Granted	  permissions:	  

Phone	  Sandbox	  	  

Granted	  permissions:	  

System	  Sandbox	  

none	  

Malware	  

p1	  
Phone	  	  
app	  

API	  to	  make	  	  
phone	  calls	  

p1	  

API	  to	  send	  	  

SMS	  

p2	  

Middleware	  

Linux	  kernel	  

30	  

Confused	  Deputy	  A5ack	  
Do	  not	  have	  a	  right	  permission?	  Ask	  your	  neighbor!	  
 
 
 

Invoke	  browser	  to	  download	  malicious	  	  ﬁles	  (Lineberry	  et	  al.,	  BlackHat	  2010)	  
Invoke	  Phone	  app	  to	  perform	  a	  phone	  call	  (Enck	  et	  al.,	  TechReport	  2008)	  
Invoke	  Android	  ScripXng	  Environment	  (ASE)	  to	  send	  SMS	  messages	  (Davi	  et	  
al.,ISC	  2010)	  

Sandbox	  	  

ASE	  Sandbox	  	  

Granted	  permissions:	  

Granted	  permissions:	  

System	  Sandbox	  

none	  

Malware	  

INTERNET,	  p2	  
ASE	  
app	  

API	  to	  make	  	  
phone	  calls	  

p1	  

API	  to	  send	  	  

SMS	  

p2	  

Middleware	  

Linux	  kernel	  

Networking	  

31	  

Collusion	  A5ack	  

Divide	  necessary	  permissions	  among	  two	  (or	  more)	  apps	  	  
  1st	  app	  has	  access	  to	  user	  locaXon;	  2nd	  is	  granted	  Internet	  access	  

  Apps	  communicate	  directly	  
  Apps	  communicate	  via	  overt/covert	  channels	  in	  a	  System	  Sandbox	  (e.g.,	  write/read	  data	  to	  
  Apps	  communicate	  via	  ﬁle	  sharing	  

system	  databases,	  or	  write-­‐read	  system	  se^ngs)	  (Soundcomber,	  NDSS`2011)	  

Sandbox	  A	  

Sandbox	  B	  

Granted	  permissions:	  

Granted	  permissions:	  

System	  Sandbox	  

INTERNET	  
Malware	  	  

A	  

p3	  

Malware	  

B	  

API	  to	  access	  

locaXon	  

API	  to	  change	  	  
volume	  se^ngs	  

p3	  

-­‐	  

File	  System	  

32	  

Middleware	  

Networking	  

Linux	  kernel	  

Evalua3on	  	  

1

EﬀecXveness	  (ahack	  prevenXon)	  

2

3

Rate	  of	  falsely	  denied	  communicaXons	  

Performance	  

33	  

Evalua3on	  

1

EﬀecXveness	  (ahack	  prevenXon)	  

2

3

EvaluaXon	  of	  applicaXon	  communicaXon	  paherns	  

Rate	  of	  falsely	  denied	  communicaXons	  

4

Performance	  

34	  

Performance	  

  Small	  runXme	  overhead	  

  Non-­‐Intents:	  overhead	  is	  low,	  especially	  considering	  raXo	  for	  
  Intents:	  overhead	  is	  higher	  due	  to	  analysis	  of	  data	  included	  into	  

cached/uncached	  decisions,	  low	  standard	  deviaXon	  

Intent	  

IPC	  Type	  

All	  types	  

Number	  of	  Calls	  

Average	  	  

Std.	  Dev.	  	  

Run3me	  for	  IPC	  without	  XManDroid	  

11003	  

0.184	  ms	  

2.490	  ms	  

XManDroid	  overhead	  for	  IPC	  

Uncached,	  except	  Intents	  
Cached,	  except	  Intents	  
Intents	  (never	  cached)	  

312	  
10691	  
1821	  

6.182	  ms	  
0.367	  ms	  
8.621	  ms	  

9.703	  ms	  
1.930	  ms	  
29.011	  ms	  

File	  read	  

389	  

3.320	  ms	  

4.088	  ms	  

XManDroid	  overhead	  for	  ﬁle	  read	  

35	  

Performance	  (ctd.)	  

  Access	  to	  System	  Content	  Providers	  imposes	  higher	  
overhead,	  because	  mulXple	  reader-­‐writer	  pairs	  have	  
to	  be	  checked	  

Number	  of	  Calls	  

Average	  	  

Std.	  Dev.	  	  

Access	  to	  System	  Content	  Provides	  

Without	  XManDroid	  
Overhead	  of	  XManDroid	  

591	  
591	  

10.317	  ms	  
4.984	  ms	  

Access	  to	  System	  Services	  

Without	  XManDroid	  
Overhead	  of	  XManDroid	  

87	  
87	  

8.578	  ms	  
0.307	  ms	  

41.224	  ms	  
36.441	  ms	  

20.241	  ms	  
0.4318	  ms	  

36	  

Evalua3on:	  A5ack	  Preven3on	  

  Malware	  test	  suite	  

  Misusing	  Phone	  app	  (Enck	  et	  al.	  [TechReport	  2008])	  
  Misusing	  Android	  ScripXng	  Environment	  (Davi	  et	  al.	  
  Collusion	  over	  covert	  channels	  (Schlegel	  et	  al.	  [NDSS	  2011])	  

[ISC’2010])	  

  Deployed	  policy	  

  7	  rules	  target	  confused	  deputy	  ahacks	  
  4	  more	  general	  rules	  target	  collusion	  ahacks	  

=>	  All	  ahacks	  were	  successfully	  prevented	  

Expected	  result,	  as	  we	  had	  policy	  rules	  against	  all	  these	  ahacks	  

37	  

Rate	  of	  Falsely	  Denied	  Communica3ons	  
  Test	  setup	  

  Manual	  tests	  by	  25	  users	  
  50	  third	  party	  applicaXons	  

  Policy	  	  

  7	  rules	  targeXng	  confused	  deputy	  ahacks	  
  4	  rules	  targeXng	  collusion	  ahacks	  
  1	  excepXonal	  policy	  rule	  to	  allow	  launching	  other	  apps	  

by	  sending	  Intents	  which	  do	  not	  include	  any	  data	  	  

=>	  No	  false	  posiXves	  were	  detected	  

Result	  conﬁrms	  our	  observaXons	  on	  inter-­‐applicaXon	  	  
communicaXon	  paherns	  

38	  

Evalua3on	  

EﬀecXveness	  on	  malware	  testbed	  

Performance	  

Rate	  of	  falsely	  denied	  communicaXons	  

EvaluaXon	  of	  applicaXon	  communicaXon	  paherns	  

39	  

1

4

2

3

