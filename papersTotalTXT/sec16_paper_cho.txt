Fingerprinting Electronic Control Units  

for Vehicle Intrusion Detection
Kyong-Tak Cho and Kang G. Shin, University of Michigan

 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/cho

This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Fingerprinting Electronic Control Units for Vehicle Intrusion Detection

Kyong-Tak Cho and Kang G. Shin

The University of Michigan
{ktcho, kgshin}@umich.edu

Abstract
As more software modules and external interfaces are
getting added on vehicles, new attacks and vulnera-
bilities are emerging. Researchers have demonstrated
how to compromise in-vehicle Electronic Control Units
(ECUs) and control the vehicle maneuver. To counter
these vulnerabilities, various types of defense mecha-
nisms have been proposed, but they have not been able
to meet the need of strong protection for safety-critical
ECUs against in-vehicle network attacks. To mitigate
this deﬁciency, we propose an anomaly-based intrusion
detection system (IDS), called Clock-based IDS (CIDS).
It measures and then exploits the intervals of periodic
in-vehicle messages for ﬁngerprinting ECUs. The thus-
derived ﬁngerprints are then used for constructing a base-
line of ECUs’ clock behaviors with the Recursive Least
Squares (RLS) algorithm. Based on this baseline, CIDS
uses Cumulative Sum (CUSUM) to detect any abnormal
shifts in the identiﬁcation errors — a clear sign of intru-
sion. This allows quick identiﬁcation of in-vehicle net-
work intrusions with a low false-positive rate of 0.055%.
Unlike state-of-the-art IDSs, if an attack is detected,
CIDS’s ﬁngerprinting of ECUs also facilitates a root-
cause analysis; identifying which ECU mounted the at-
tack. Our experiments on a CAN bus prototype and on
real vehicles have shown CIDS to be able to detect a wide
range of in-vehicle network attacks.

1

Introduction

Security has now become an important and real concern
to connected and/or automated vehicles. The authors
of [9] systematically analyzed different attack vectors in
vehicles (e.g., Bluetooth, Cellular), and showed that in-
vehicle Electronic Control Units (ECUs) can be compro-
mised for remote attacks. Through a compromised ECU,
the adversary can control the vehicle by injecting pack-
ets in the in-vehicle network [20, 23]. Researchers have

also been able to compromise and remotely stop a Jeep
Cherokee running on a highway [7, 25], which triggered
a recall of 1.4 million vehicles. Such a reality of vehi-
cle attacks has made automotive security one of the most
critical issues.

As a countermeasure against such attacks on in-
vehicle networks, two main lines of defense have been
pursued: message authentication and intrusion detec-
tion. Although message authentication provides a certain
level of security and is shown to be efﬁcient for Internet
security, its adoption in in-vehicle networks is hindered
by (i) the limited space available for appending a Mes-
sage Authentication Code (MAC) in in-vehicle messages
and (ii) its requirements of real-time processing and com-
munication.

Various types of Intrusion Detection Systems (IDS)
have been proposed [16, 23, 30, 31]. The essence of
state-of-the-art IDSs is to monitor the contents and the
periodicity of in-vehicle messages and verify whether
there are any signiﬁcant changes in them. Since they
are either constant or predictable in in-vehicle networks,
such approaches can be feasible in most circumstances.
However, there still remain critical attacks which exist-
ing IDSs can neither detect nor prevent, for two main rea-
sons: 1) in-vehicle messages do not carry information on
their transmitters, and thus one cannot tell whether they
originate from genuine transmitters; and 2) lack of the
transmitters’ information makes it very difﬁcult or im-
possible for state-of-the-art IDSs to identify which ECU
has mounted an attack.

To overcome these limitations and defend against var-
ious vehicle attacks, we propose a new anomaly-based
IDS, called Clock-based IDS (CIDS). The need of CIDS
for vehicles is motivated through an analysis of three
representative in-vehicle network attacks — fabrication,
suspension, and masquerade attacks. Our analysis shows
that state-of-the-art IDSs are insufﬁcient, especially in
detecting the masquerade attack due to the absence of
the transmitters’ information in messages. CIDS over-

USENIX Association  

25th USENIX Security Symposium  911

comes these limitations of existing IDSs by ﬁngerprint-
ing in-vehicle ECUs. Researchers have proposed vari-
ous schemes for ﬁngerprinting network devices by esti-
mating their clock skews through the timestamps carried
in their control packet headers [17, 19, 34, 42]. How-
ever, since such embedded timestamps are not available
for in-vehicle networks making them inapplicable, CIDS
ﬁngerprints in-vehicle ECUs in a very different way.

CIDS monitors the intervals of (commonly seen) peri-
odic in-vehicle messages, and then exploits them to esti-
mate the clock skews of their transmitters which are then
used to ﬁngerprint the transmitters. That is, instead of
assuming or requiring timestamps to be carried in mes-
sages for ﬁngerprinting, CIDS exploits the periodic fea-
ture (seen at receivers) of in-vehicle network messages
for ﬁngerprinting transmitter ECUs. This makes CIDS
invulnerable to attackers who use faked timestamps and
thus clock skews — a problem that timestamp-based ﬁn-
gerprinting schemes cannot handle. Based on the thus-
obtained ﬁngerprints, CIDS constructs a norm model
of ECUs’ clock behaviors using the Recursive Least
Squares (RLS) algorithm and detects intrusions with a
Cumulative Sum (CUSUM) analysis. This enables CIDS
to detect not only attacks that have already been demon-
strated or discussed in literature, but also those that are
more acute and cannot be detected by state-of-the-art
IDSs. Our experimental evaluations show that CIDS de-
tects various types of in-vehicle network intrusions with
a low false-positive rate of 0.055%. Unlike state-of-the-
art IDSs, if an intrusion is detected in CIDS, its ﬁnger-
printing capability facilitates identiﬁcation of the (com-
promised) ECU that mounted the attack. We validate
these capabilities of CIDS through experimental evalu-
ations on a CAN bus prototype and on real vehicles.

We focus on building CIDS for Control Area Net-
work (CAN), which is the de facto standard in-vehicle
network.
Its applicability to other in-vehicle network
protocols is also discussed in Section 6. Considering
the ubiquity of CAN and its direct relationship with the
drivers/passengers’ safety, it is critically important to
build as capable a CAN bus IDS as possible.

This paper makes the following contributions:
• Development of a novel scheme of ﬁngerprinting

ECUs by exploiting message periodicity;

• Proposal of CIDS, which models the norm behav-
ior of in-vehicle ECUs’ clocks based on ﬁngerprints
and then detects in-vehicle network intrusions;

• Implementation and validation of CIDS on a CAN

bus prototype as well as on 3 real vehicles.

The rest of the paper is organized as follows. Sec-
tion 2 provides the necessary background of CAN and
IDS-related work, and Section 3 details the attack model

Arbitration

ID

Control
R
B
0

DLC

R
T
R

I
D
E

S
O
F

Data

Data

CRC

ACK

CRC

CRC 
Del

A
C
K

ACK 
Del

EOF

Figure 1: Format of a CAN data frame.

we consider. Section 4 details the design of CIDS, which
is evaluated in Section 5 on a CAN bus prototype as well
as on three real vehicles. Section 6 discusses CIDS fur-
ther, such as its overhead and extension to emerging in-
vehicle networks. Finally, we conclude the paper in Sec-
tion 7.

2 Background

For completeness, we ﬁrst provide necessary background
on the CAN protocol, and then discuss the related work
on security solutions for in-vehicle networks.

2.1 Primer on CAN Protocol
CAN frame. CAN is the most widely deployed in-
vehicle communication protocol, which interconnects
ECUs/nodes through a multi-master, message broadcast
bus system [4]. To maintain data consistency and make
control decisions, data is exchanged between ECUs via
CAN frames, the format of which is shown in Fig. 1.
A CAN frame contains ﬁelds such as ID, Data Length
Code (DLC), Data, and CRC. Since CAN is message-
oriented, instead of containing the transmitter/receiver
address, a CAN frame contains a unique ID which rep-
resents its priority and meaning. For example, a frame
with ID=0x20 may contain wheel speed values whereas
a frame with ID=0x55 may contain temperature values.
Arbitration. Once the CAN bus is detected idle,
nodes with buffered messages to transmit, attempt to ac-
cess the bus. Multiple nodes could attempt to access
the bus simultaneously, i.e., contention occurs for access.
Such a contention is resolved via bus arbitration as fol-
lows. Each node ﬁrst transmits the ID value of its CAN
frame one bit at a time, starting with the most signiﬁ-
cant bit. Since CAN is designed to logically behave as
a wired-AND gate, some contending nodes see an out-
put of 0 from the bus, although they had transmitted 1.
Such nodes withdraw from bus contention and switch
to the receive mode. As a result, among the contend-
ing nodes, the ECU sending the message with the lowest
ID value wins arbitration, and gains exclusive access for
message transmission. Those which have lost arbitration
re-attempt to transmit once the bus becomes idle again.
Synchronization. For proper bitwise message trans-
mission and reception, hard and soft bit synchronizations
are achieved, respectively, by using the Start-of-Frame
(SOF) signal and bit stufﬁng in CAN frames [4]. Al-

912  25th USENIX Security Symposium 

USENIX Association

though these provide alignment of bit edges for message
exchange, they do not synchronize the clocks of ECUs,
i.e., CAN lacks clock synchronization. Thus, since time
instants for ECUs are provided by their own quartz crys-
tal clocks, these clocks, in reality, run at different fre-
quencies, resulting in random drifting of clocks: a drift
of 2400ms over a period of 24 hours is possible [27].

2.2 Related Work
To defend against various types of vehicle cyber attacks,
there have been two main streams of security solutions:
message authentication and intrusion detection.

Message authentication. In the area of Internet se-
curity, cryptographic message authentication provides
strong protection against forgery. Thus, researchers have
attempted to borrow such approaches from the domain
of Internet security to address in-vehicle network secu-
rity problems. However, since the maximum payload
length allowed in the CAN data ﬁeld is only 8 bytes, the
available space for appending a cryptographically secure
Message Authentication Code (MAC) is very limited,
i.e., the protocol speciﬁcation limits its maximum cryp-
tographic strength. To overcome this difﬁculty, rather
than appending a MAC in one CAN frame’s data ﬁeld,
the authors of [38] proposed to truncate it across multi-
ple frames. Instead of the data ﬁeld, the authors of [33]
proposed to use multiple CRC ﬁelds to include 64 bits of
CBC-MAC. The authors of [15] suggested to exploit an
out-of-band channel for message authentication.

Although such preventive measures provide some de-
gree of security, they alone cannot guarantee complete
security due to their inability to handle certain critical
attacks, e.g., Denial-of-Service (DoS). Moreover, their
operations not only require a signiﬁcant amount of pro-
cessing power but also increase message latencies and
bus utilization. Since in-vehicle networks must operate
in real time and ECUs are resource-limited for cost rea-
sons, unlike in the Internet, these “costs” of preventive
measures hinder their adoption [30]. More importantly,
when an adversary has full access to any data stored
in RAM and/or FLASH, including data used for imple-
menting security mechanisms (e.g., shared secret keys),
some cryptographic solutions become incapable [24].

Intrusion detection. To overcome such limitations of
preventive measures, different Intrusion Detection Sys-
tems (IDSs) have been proposed. Some state-of-the-art
IDSs exploit the fact that most CAN messages are peri-
odic, i.e., sent at ﬁxed time intervals. The authors of [30]
proposed an IDS which monitors the intervals of periodic
messages, measures their entropies, and exploits them
for intrusion detection. Similarly, a method of model-
ing the distribution of message intervals, and utilizing it
for intrusion detection was proposed in [23]. In addition

to message frequency, researchers also proposed to ver-
ify the message contents. The authors of [31] exploited
in-vehicle sensors to verify message range, correlation,
etc. Abnormal measurements on brake-related sensors
were detected by using the tire-friction model [10].

Although existing IDSs are capable of detecting most
attacks through the above approaches, they fail to cover
some critical attacks which are more acute, and thus are
not sufﬁcient to provide security. We will elaborate on
such shortcomings of state-of-the-art IDSs while ana-
lyzing the attack scenarios under consideration in Sec-
tion 3.3.

3 Attack Model

We ﬁrst discuss the adversary model under considera-
tion, and then the three representative attack scenarios.

3.1 Adversary Model
Adversaries can physically/remotely compromise more
than one in-vehicle ECU via numerous attack surfaces
and means [9]. We consider an adversary who wants to
manipulate or impair in-vehicle functions. The adversary
can achieve this by either injecting arbitrary messages
with a spoofed ID into the in-vehicle network, which we
refer to as attack messages, or by stopping/suspending
message transmissions of the compromised ECU.

Strong and weak attackers. Depending on their
hardware, software, and attack surfaces, ECUs of dif-
ferent vehicles have different degrees of vulnerabilities,
thus providing attackers different capabilities. So, we
consider two different types of compromised ECUs: fully
and weakly compromised ECUs.

Through a weakly compromised ECU, the attacker is
assumed to be able to stop/suspend the ECU from trans-
mitting certain messages or keep the ECU in listen-only
mode, but cannot inject any fabricated messages. We
call such an attacker with limited capabilities a weak
attacker, and will use this term interchangeably with
“weakly compromised ECU”.

In contrast, with a fully compromised ECU, the at-
tacker is assumed to have full control of it and access
to memory data. Thus, in addition to what a weak at-
tacker can do, the attacker controlling a fully compro-
mised ECU can mount attacks by injecting arbitrary at-
tack messages. We call such an attacker with more attack
capabilities a strong attacker, and will use this term in-
terchangeably with a “fully compromised ECU”. Even
when preventive security mechanisms (e.g., MAC) are
built into the ECUs, since the strong attacker has full ac-
cess to any data stored in their memory, including data
used for implementing security mechanisms (e.g., shared
secret keys), it can disable them [24]. On the other hand,

USENIX Association  

25th USENIX Security Symposium  913

(Strong)

ECU

A

B0

ECU

B

B0

ECU

C

20

(Weak)

ECU

A

ECU

B

B0

From time

Tsusp

B0

ECU

C

20

Without Attack

20

B0

B0

20

B0

20

B0

B0

B0

B0

B0

20

B0

B0

B0

With Attack

CAN Bus

B0

B0

Time

Without Attack

20

B0

20

B0

With Attack

-15(cid:220)
B0

B0
-15(cid:220)

-10(cid:220)
B0

20

20

Tsusp

CAN Bus

-5(cid:220)
B0

Time

(Strong)

(Weak)

ECU

A

B0

From time

Tmasq

ECU

B

B0

ECU

C

20

CAN Bus

Without Attack

20

B0

20

B0

With Attack

B0

B0

Tmasq

20

B0

20

B0

B0

B0

Time

(a) Fabrication attack.

(b) Suspension attack.

(c) Masquerade attack.

Figure 2: Three representative attack scenarios on in-vehicle networks.

a weak attacker can only stop, or listen to message trans-
missions, but cannot start a new one.

Foster et al. [13] have recently proved the possible ex-
istence of these two types of attackers in in-vehicle net-
works. They have shown that the ﬁrmware versions of
telematics units can affect/limit the attacker’s capabili-
ties in injecting and monitoring in-vehicle network mes-
sages. Speciﬁcally, for a certain ﬁrmware version of the
telematics unit, an attacker having control of that ECU
was shown to be able to receive CAN messages but un-
able to send the messages. On the other hand, for some
other ﬁrmware versions, the attacker was capable of both
sending and receiving CAN messages to and from the in-
vehicle network. In other words, the ﬁrmware version of
an ECU determines which type of an attacker — strong
or weak — it can become, if compromised.

types of attackers can exist,

To further comprehend how and why these two
different
let’s consider
one of the most common CAN controllers, Microchip
MCP2515 [1]. For ECUs with such a controller, various
operation modes like conﬁguration, normal, and listen-
only can be selected by user instructions through the
Serial Peripheral Interface (SPI). Thus, user-level fea-
tures for conﬁguring the CAN controller allow attackers
to easily enter different modes (e.g., listen-only mode
for a weak attacker).
In contrast, there are no such
features allowing attackers to easily inject forged mes-
sages. In other words, the speciﬁcation of the ECU hard-
ware/software, if compromised, can restrict the adver-
sary to become a weak attacker only. Note that the re-
quired functionalities of a strong attacker subsume those
of a weak attacker. It is thus easier for an adversary to be-
come a weak attacker than a strong attacker, let alone re-
searchers have already demonstrated how to create such
a strong attacker [9, 20, 23, 24].

3.2 Attack Scenarios

masquerade.1

Fabrication attack. Through an in-vehicle ECU com-
promised to be a strong attacker, the adversary fabricates
and injects messages with forged ID, DLC, and data.
The objective of this attack is to override any periodic
messages sent by a legitimate safety-critical ECU so that
their receiver ECUs get distracted or become inoperable.
For example, as shown in Fig. 2(a), the strong attacker A
injects several attack messages with ID=0xB0, which is
usually sent by a legitimate ECU B, at a high frequency.
Thus, other nodes which normally receive message 0xB0
are forced to receive the fabricated attack messages more
often than the legitimate ones. We refer to such a case
as A mounting a fabrication attack on message 0xB0 or
its genuine transmitter B. Demonstrated attacks such as
controlling vehicle maneuver [20] and monopolizing the
CAN bus with highest priority messages [16] exemplify
a fabrication attack.

Suspension attack. To mount a suspension attack,
the adversary needs only one weakly compromised ECU,
i.e., become a weak attacker. As one type of Denial-of-
Service (DoS) attack, the objective of this attack is to
stop/suspend the weakly compromised ECU’s message
transmissions, thus preventing the delivery/propagation
of information it acquired, to other ECUs. For some
ECUs, they must receive certain information from other
ECUs to function properly. Therefore, the suspension at-
tack can harm not only the (weakly) compromised ECU
itself but also other receiver ECUs. An example of this
attack is shown in Fig. 2(b) where the weak attacker hav-
ing control of the Electric Power Steering ECU B stops
transmitting its measured steering wheel angle value. So,
the Electronic Stability Control (ESC) ECU A, which re-
quires the steering wheel angle value from B for detect-
ing and reducing the loss of traction, no longer receives
its updates and thus malfunctions.

Masquerade attack. To mount a masquerade attack,
the adversary needs to compromise two ECUs, one as
a strong attacker and the other as a weak attacker. The

Based on the adversary model discussed so far, we con-
sider the following attack scenarios that can severely im-
pair in-vehicle functions:
fabrication, suspension, and

1In this paper, we focus on only these three attack scenarios and
do not consider others as they may be less feasible or harmful, or be
detectable by existing IDSs.

914  25th USENIX Security Symposium 

USENIX Association

objective of this attack is to manipulate an ECU, while
shielding the fact that an ECU is compromised. Fig. 2(c)
shows an example where the adversary controls a strong
attacker A and a weak attacker B. Until time Tmasq, the
adversary monitors and learns which messages are sent at
what frequency by its weaker attacker, e.g., B sends mes-
sage 0xB0 every 20ms. Since most in-vehicle network
messages are periodic and broadcast over CAN, it is easy
to learn their IDs and intervals. Once it has learned the
ID and frequency of a message, at time Tmasq, the ad-
versary stops the transmission of its weak attacker and
utilizes its strong attacker A to fabricate and inject attack
messages with ID=0xB0. Stopping B’s transmission and
exploiting A for transmission of attack messages are to
overcome the weak attacker’s inability of injecting mes-
sages. After Tmasq, the original transmitter of 0xB0, B,
does not send that message any longer, whereas A sends
it instead at its original frequency. So, when the CAN
bus trafﬁc is observed, the frequency of message 0xB0
remains the same, whereas its transmitter has changed.
We refer to such a case as A mounting a masquerade at-
tack on message 0xB0 or its original transmitter B.

In fact, in order to attack and remotely stop a Jeep
Cherokee running on a highway, Miller et al. [25] had to
control its ABS collision prevention system by mount-
ing a masquerade (not fabrication) attack. In contrast to
other vehicles which they had previously examined (e.g.,
Toyota Prius), the Jeep Cherokee’s brake was not con-
trollable via the fabrication attack as its ABS collision
prevention system, which was the attack vector for en-
gaging brakes, was switched off when the fabrication at-
tack was mounted. On the other hand, when mounting
the masquerade attack, the system was not switched off,
thus allowing them to control the Jeep Cherokee’s brak-
ing maneuver.

attacks,

the

Using masquerade

adversary can
not only inject attack messages from the compro-
mised/impersonating ECU but also cause other severe
problems, signiﬁcantly degrading the in-vehicle net-
work performance. The impersonating ECU sending a
message instead of another ECU implies that it would
generate more messages to periodically transmit than be-
fore, making its transmit buffer more likely overloaded.
This may, in turn, lead to severe consequences, such
as non-abortable transmission requests [12], deadline
violation [18], and signiﬁcant priority inversion [32].
Moreover, the original sequence of messages may also
change, thus failing to meet the requirement of some
in-vehicle messages to be sent sequentially in a correct
order for proper vehicle operations. These network
problems from a masquerade attack occur while not
deviating much from the norm network behavior (e.g.,
message frequency remains the same). This is in sharp
contrast to the cases of mounting a fabrication attack

or a suspension attack, which may also incur similar
problems. Such problems have been identiﬁed to be
critical since they degrade the real-time performance
of CAN signiﬁcantly, and thus undermine vehicle
safety [12, 18, 32]. The masquerade attack can thus
cause more problems to the in-vehicle network than just
injecting attack messages.

3.3 Defense Against the Attacks
When the fabrication or suspension attack is mounted,
the frequency of certain messages signiﬁcantly and ab-
normally increases or decreases, respectively. Thus, if
state-of-the-art IDSs [16, 23, 30, 31], which monitor the
message frequencies, were to be used, the attacks can be
detected.

When mounting the masquerade attack, however, the
adversary does not change the original frequency of mes-
sages. Thus, the adversary may use this attack to evade
state-of-the-art IDSs. Moreover, if the adversary does
not change the content of messages as well, it can be-
have like a legitimate ECU. However, the adversary may
later mount other types of attacks (e.g., a fabrication at-
tack) through the impersonating ECU. Hence, defending
against the masquerade attack implies not only detect-
ing the attack reactively, but also preventing other attacks
proactively.

4 Clock-Based Detection

Although state-of-the-art IDSs are capable of detecting
some basic attacks such as fabrication attack and suspen-
sion attack, they fail to detect more sophisticated ones
such as the masquerade attack for the following reasons.
• No authenticity — CAN messages lack information
on their transmitters. So, existing IDSs do not know
whether or not the messages on the CAN bus were
sent by the genuine transmitter, and hence cannot
detect any changes of the message transmitter.

• Inability of identifying a compromised ECU —
Lack of the transmitter’s information makes it very
difﬁcult or impossible for state-of-the-art IDSs to
identify which of compromised ECUs mounted an
attack.

If CAN frames do not carry any information on their
transmitters, how could an IDS identify them and de-
tect intrusions such as the masquerade attacks? Which
behavior of CAN should the IDS model for detection of
such intrusions? We answer these questions by devel-
oping a novel IDS, CIDS, which exploits message fre-
quency to ﬁngerprint the transmitter ECUs, and models
a norm behavior based on their ﬁngerprints for intrusion

USENIX Association  

25th USENIX Security Symposium  915

detection. We focus on detecting intrusions in periodic
messages as most in-vehicle messages are sent periodi-
cally [32, 36].

4.1 Fingerprinting ECUs
For each in-vehicle ECU in CAN, the time instants of
periodic message transmissions are determined by its
quartz crystal clock [27]. We follow the nomenclature
of clocks of the NTP speciﬁcation [26] and Paxson [35].
Let Ctrue be a “true” clock which reports the true time at
any moment and Ci be some other non-true clock. We
deﬁne the terms “clock offset, frequency, and skew” as
follows.

• offset: difference in the time reported by clock Ci
and the true clock Ctrue. We deﬁne relative offset as
the offset between two non-true clocks.

• frequency: the rate at which clock Ci advances.
Thus, the frequency at time t is C�i(t) ≡ dCi(t)/dt.
• skew: difference between the frequencies of clock
Ci and the true clock Ctrue. We deﬁne relative skew
as the difference in skews of two non-true clocks.

If two clocks have relative offset and skew of 0, then
they are said to be synchronized. Otherwise, we consider
they are unsynchronized. Since CAN lacks clock syn-
chronization, it is considered to be unsynchronized.

Clock skew as a ﬁngerprint. The clock offsets and
skews of unsynchronized nodes depend solely on their
local clocks, thus being distinct from others. As others
have also concluded [17, 19, 42], clock skews and offsets
can therefore be considered as ﬁngerprints of nodes. Var-
ious studies have exploited this fact to ﬁngerprint phys-
ical devices [17, 19, 34, 42]. However, they are not ap-
plicable to our problem as they exclusively rely on the
timestamps carried in the packet headers, which are, as
discussed before, not available in in-vehicle networks.
Kohno et al. [19] considered an alternative to embed-
ded timestamps: using Fourier Transform for clock skew
estimation. However, as their approach relies on the
unique characteristics of the Internet (e.g., multi-hop de-
lays, large network topology), it cannot be directly ap-
plied to in-vehicle networks.

To build an effective IDS, which can detect various
types of attack including the masquerade attack, it should
be capable of verifying the transmitter of each message.
However, since such information is not present in CAN
messages, we must ﬁngerprint ECUs with other “leaked”
information. Unlike the existing approaches that exploit
embedded timestamps, we exploit message periodicity to
extract and estimate the transmitters’ clock skews, which
are then used to ﬁngerprint the transmitter ECUs.

t=0

Ideal

Actual

ECU A

ECU R

T
T+O1

2T
2T+O2

3T
3T+O3

d0+n0

T+O1+d1+n1

2T+O2+d2+n2

3T+O3+d3+n3

Trx =

T+O1+(cid:1104)d1+(cid:1104)n1

T+O2-O1+(cid:1104)d2+(cid:1104)n2 T+O3-O2+(cid:1104)d3+(cid:1104)n3

Figure 3: Timing analysis of message arrivals.

Clock skew estimation. Consider an ECU A which
broadcasts a message every T ms and an ECU R which
periodically receives that message. From the perspec-
tive of R, since only its timestamp is available, we con-
sider its clock as the true clock. As shown in Fig. 3,
due to the clock skew, periodic messages are sent at
times with small offsets from the ideal values (e.g., T ,
2T , 3T , ···). Let t = 0 be the time when the ﬁrst mes-
sage was sent from A, and Oi be the clock offset of A
when it sends the i-th message since t = 0. Then, after
a network delay of di, ECU R would receive that mes-
sage and put an arrival timestamp of iT + Oi + di + ni,
where ni denotes the noise in R’s timestamp quantiza-
tion [42]. Thus, the intervals between each arrival times-
tamp, Trx,i = T +ΔOi +Δdi +Δni, where ΔXi denotes the
difference of X between step i and i − 1, and O0 = 0.
Since the change in Oi within one time step is negligible
and ni is a zero-mean Gaussian noise term [2], the ex-
pected value of the timestamp intervals, μTrx = E[Trx,i],
can be expressed as:

μTrx = E[T + ΔOi + Δdi + Δni]
= T + E[ΔOi + Δdi + Δni]
≈ T,

(1)

where the second equality holds since T is a pre-
determined constant. Since the data lengths of CAN pe-
riodic messages, i.e., DLCs, are constant over time, for
now, we consider E[Δdi] = 0. Later in Section 4.4, we
will discuss the case when di is not constant, and how it
may affect the performance of CIDS.

Based on the arrival timestamp of the ﬁrst message,
d0 + n0, and the average of timestamp intervals, μTrx, we
extrapolate and determine the estimated arrival time of
the i-th message as iμTrx + d0 + n0, whereas the actual
measured arrival time is iT + Oi + di + ni. As we are
estimating subsequent arrival times, μTrx is determined
by past measurements. Since T is constant over time and
thus again μTrx ≈ T , the average difference between the
estimated and measured times is:

E[D] = E[i(T − μTrx ) +O i + Δd + Δn] ≈ E[Oi].

(2)

That is, from message periodicity, we can estimate the
average clock offset, E[Oi], which will indeed be dis-
tinct for different transmitters. Since clock offset is

916  25th USENIX Security Symposium 

USENIX Association

� RLS algorithm

a0 ← arrival timestamp of most recently rxed message
n ← 1
while n ≤ N do

if current time � an−1 then

λ−1P[k−1]t[k]
1+λ−1t2[k]P[k−1]

G[k] ←
P[k] ← λ−1(P[k− 1]− G[k]t[k]P[k− 1])
return S[k] ← S[k− 1] +G[k ]e[k]

Algorithm 1 Clock skew estimation with RLS
1: Initialize: S[0] = 0, P[0] = δ I
2: function SKEWUPDATE(t,e)
3:
4:
5:
6: end function
7: for kth step do
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27: end for

end if
end while
μT [k] ← 1
O[k] ← 1
Oacc[k] ← Oacc[k− 1] +|O[k ]|
e[k] ← Oacc[k]− S[k− 1]t[k]
S[k] ← SKEWUPDATE(t,e)

/* No longer receives the message */
an,··· ,aN ← signiﬁcantly high values
Tn,··· ,TN ← signiﬁcantly high values
break

an ← arrival timestamp of nth message
Tn ← an − an−1
n ← n + 1

N ∑N
i=1 Ti
N−1 ∑N
i=2 ai − (a1 + (i− 1)μT [k− 1])

else

� Timestamp interval

� Avg. timestamp interval

� Accumulated offset
� Identiﬁcation error
� Clock skew

slowly varying and non-zero [17, 42], E[Oi] �= 0, whereas
E[ΔOi] = 0.
If ECU R were to determine the average clock offset
for every N received messages, since it is derived in ref-
erence to the ﬁrst message (of N messages), it represents
only the average of newly incurred offsets. Thus, to ob-
tain the total amount of incurred offset, which we call
the accumulated clock offset, the absolute values of the
average clock offsets have to be summed up. By deﬁni-
tion, the slope of the accumulated clock offset would thus
represent the clock skew, which is constant as we will
show and as others have also concluded [19, 29, 35, 40].
This enables CIDS to estimate the clock skew from ar-
rival timestamps and thus ﬁngerprint the message trans-
mitter for intrusion detection. We will later show, via ex-
perimental evaluations on a CAN bus prototype and on 3
real vehicles, that the thus-derived clock skew is indeed
a ﬁngerprint of an in-vehicle ECU.

4.2 CIDS — Per-message Detection
By determining the clock skew from observation of mes-
sage intervals, transmitter ECUs can be ﬁngerprinted.
We exploit this in designing CIDS, a clock-based IDS
for in-vehicle networks which detects intrusions in two
different ways: per-message detection and message-

pairwise detection, where the latter supplements the for-
mer in reducing false positive/negative results. Next, we
ﬁrst discuss per-message detection and then pairwise de-
tection.

Modeling. For a given message ID, CIDS derives the
accumulated clock offset inherent in the arrival times-
tamps. Since clock skew is constant, the accumulated
clock offset is linear in time, and hence CIDS describes it
as a linear regression model. A linear parameter identiﬁ-
cation problem is thus formulated as:

Oacc[k] = S[k]·t[k] +e[k ],

(3)

where at step k, Oacc[k] is the accumulated clock offset,
S[k] the regression parameter, t[k] the elapsed time, and
e[k] the identiﬁcation error. The regression parameter
S represents the slope of the linear model and thus the
estimated clock skew. The identiﬁcation error, e, repre-
sents the residual which is not explained by the model.
In CIDS, Oacc, S, t, and e are updated every N messages,
i.e., kN messages are examined up to step k.

To determine the unknown parameter S, we use the
Recursive Least Squares (RLS) algorithm [14], which
uses the residual as an objective function to minimize the
sum of squares of the modeling errors. Hence, in RLS,
the identiﬁcation error skews towards 0, i.e., has 0 mean.
We will discuss the computational overhead of RLS as
well as other possible solutions in Section 6.

Algorithm 1 describes how the clock skew is estimated
using RLS. First, CIDS measures the arrival times and
their intervals of N messages for a given ID. If the in-
tended message has not been received for a long time —
possibly due to suspension attack — as in line 13–14,
CIDS sets the remaining timestamp and interval values
signiﬁcantly higher. Once N values are measured, CIDS
determines the accumulated clock offset and accordingly,
the identiﬁcation error. Based on the thus-derived value,
the gain, G, and the covariance, P, are updated with RLS
for identifying the regression parameter S, i.e., estimate
clock skew. This procedure of clock skew estimation
continues iteratively during the operation of CIDS and, if
uncompromised, outputs an identiﬁcation error skewed
towards 0 and a constant clock skew. This way, the norm
clock behavior of the transmitter can be described as a
linear model with the clock skew being the slope.
In
RLS, a forgetting factor, λ , is used to give exponentially
less weights to older samples and thus provide freshness.
In CIDS, we set λ =0.9995.

Detection. For a given message ID, CIDS runs RLS
for clock skew estimation, constructs a norm model on
clock behavior, and veriﬁes whether there are any abnor-
mal measurements deviating from it, i.e., intrusions.

Consider a fabrication attack in which the adversary
injects an attack message with ID=0x01, which is orig-
inally sent every 10ms by some ECU. The fabrication

USENIX Association  

25th USENIX Security Symposium  917

attack signiﬁcantly increases the absolute average differ-
ence between the estimated and measured arrival times
of 0x01. As a result, due to a sudden increase in the
rate at which the accumulated clock offset changes, a
high identiﬁcation error results. Similarly, when the sus-
pension attack is mounted, the absolute average differ-
ence also increases and thus a high error is also incurred.
When a masquerade attack is mounted, since the adver-
sary sends the message through a different ECU than its
original one, the increase rate of accumulated clock off-
set, i.e., clock skew, suddenly changes and also results in
a high identiﬁcation error. In summary, unlike when the
mean of identiﬁcation error should usually skew towards
0, which is the norm clock behavior, its mean suddenly
shifts towards a high non-zero value when there is an in-
trusion.

CIDS exploits the Cumulative Sum (CUSUM) method,
which derives the cumulative sums of the deviations from
a target value to detect sudden shifts. Since it is cumu-
lative, even minor drifting from the target value leads to
steadily increasing or decreasing cumulative values. It
is therefore optimal in detecting small persistent changes
and is widely used for change-point detection [8]. CIDS
detects intrusions via CUSUM as follows. At each step
of clock skew estimation, CIDS updates the mean and
variance of the identiﬁcation errors (e), μe and σ 2
e , re-
spectively. In CIDS, these values represent the CUSUM
target values of e (i.e., norm clock behavior), and thus
require proper tracking. Hence, as a precaution of ab-
normal values incurring from an attack to be reﬂected
into the target values, μe and σ 2
e are updated only if
| e−μe
| < 3. Then, per derived identiﬁcation error e, the
upper and lower control limits of CUSUM, L+ and L−
are updated as [41]:

σe

L+ ← max(cid:31)0,L+ + (e− μe)/σe − κ(cid:30)
L− ← max(cid:31)0,L− − (e− μe)/σe − κ(cid:30)

(4)

where κ is a parameter reﬂecting the number of standard
deviations CIDS intends to detect. Note that κ can be
learned ofﬂine, or by monitoring normal in-vehicle traf-
ﬁc. If either of the control limits, L+ or L−, exceeds a
threshold ΓL, a sudden positive or negative shift in value
has been detected, respectively, and thus CIDS declares it
as an intrusion. As the general rule of thumb for CUSUM
is to have a threshold of 4 or 5 [28], we set ΓL = 5.

4.3 CIDS — Message-pairwise Detection
In addition to per-message detection, CIDS also alarms
intrusions via message-pairwise detection, which exam-
ines the correlation between the average clock offsets in
two periodic messages. Consider two messages M1 and
M2 periodically sent by an ECU A. Since these messages

originate from the same transmitter, their instantaneous
average clock offsets are likely equivalent. Thus, the cor-
relation coefﬁcient, ρ, between their average clock off-
sets (derived per step) would show a high value close to
1, i.e., correlated. On the other hand, if the two messages
were sent by different ECUs, ρ � 0, i.e., uncorrelated.
Modeling and detection. If clock offsets in two mes-
sages are highly correlated (ρ > 0.8), their relationship
can be linear. So, CIDS describes them as a linear re-
gression model: OM2 [k] = αOM1[k] +e corr[k], where OMi
denotes the average clock offset of message Mi at step
k, α the regression parameter, and ecorr[k] the identiﬁca-
tion error. As per-message detection, message-pairwise
detection is also based on a linear model. Thus, we ap-
ply the same detection method, CUSUM. Since message-
pairwise detection seeks intrusions from a different per-
spective than per-message detection, it reduces false pos-
itive/negative results. Note, however,
that message-
pairwise detection is only applicable when two mes-
sages’ clock offsets are highly correlated, whereas per-
message detection is applicable to any periodic message.
Moreover, albeit effective, it requires pairwise computa-
tions. Therefore, we use message-pairwise detection as
an optional feature of CIDS. We will later show via ex-
perimental evaluations how message-pairwise detection
further improves the performance of CIDS.

4.4 Veriﬁcation

To reduce possible false positives/negatives, CIDS also
performs a veriﬁcation process. Suppose that a possible
intrusion was alarmed due to a high identiﬁcation error
when verifying message Vi, the i-th message of V . Al-
though such a high error can be due to an intrusion, it
can also be due to an incorrect computation of average
clock offset. In Section 4.1, we considered E[Δdi] =0
and could thus extract and determine the average clock
offset. Although this is true in most cases, occasionally
E[Δdi] �= 0, which affects the accuracy of deriving the
true clock offset and thus the detection result. In CAN,
E[Δdi] �= 0 only occurs if the transmission of Vi was de-
layed due to the bus being busy or its transmitter losing
arbitration when attempting to send Vi. Note that the lat-
ter also results in the bus being busy before the trans-
mission/reception of Vi. Thus, CIDS also checks if the
possibility of E[Δdi] �= 0 is the main cause of a (possibly
false) alarm of intrusion by verifying whether the CAN
bus was busy right before receiving Vi. This way, CIDS
enhances its detection accuracy. However, as discussed
before, usually E[Δdi] =0 in an actual CAN bus due to
its high speed, its messages having short lengths, and low
bus load. In other words, the nature of CAN bus commu-
nication helps CIDS reduce false positives/negatives.

918  25th USENIX Security Symposium 

USENIX Association

(a) CAN bus prototype.

(b) The vehicle used for experiment.

(c) Connection to the vehicle.

Figure 4: Different evaluation settings: (a) CAN bus prototype; (b) Honda Accord 2013 used for experiments on real
vehicle; and (c) three prototype nodes communicating with real ECUs through the OBD-II port.

4.5 Root-cause Analysis
When an intrusion is detected for some message
ID, CIDS can also identify which compromised ECU
mounted the attack.
It can extract the clock skew for
that attacked message ID, compare it with other clock
skew values extracted from other message IDs, and ex-
ploit the comparison result in determining whether they
originated from the same transmitter. This way, CIDS can
at least reduce the scope of ECUs which may (or may
not) have mounted the attack, thus facilitating a root-
cause analysis.

5 Evaluation

We now validate that clock skews can be used as ﬁnger-
prints of transmitter ECUs, and evaluate the performance
of CIDS on a CAN bus prototype and real vehicles.

CAN bus prototype: As shown in Fig. 4(a), we built
a prototype with 3 CAN nodes, each of which consists of
an Arduino UNO board and a SeeedStudio CAN shield.
The CAN bus shield consists of a Microchip MCP2515
CAN controller, MCP2551 CAN transceiver, and a 120Ω
terminal resistor to provide CAN bus communication ca-
pabilities. This prototype was set up to operate at a
500Kbps bus speed as in typical CAN buses. The ﬁrst
node A was programmed to send messages 0x11 and
0x13 every 50ms, and the second node B to send mes-
sage 0x55 at the same frequency. The third node R was
programmed to run CIDS.

Real vehicle: A 2013 Honda Accord (Fig. 4(b)) is also
used for our experiments in an isolated and controlled
(for safety) environment. As shown in Fig. 4(c), via the
On-Board Diagnostic (OBD-II) system port [3], we con-
nected our CAN bus prototype nodes — which function
as an adversary or CIDS — to the in-vehicle network.
Through the OBD-II port, the three nodes were able to
communicate with real ECUs.

CAN log data: To further validate that CIDS’s ﬁn-
gerprinting is applicable to other vehicles, we also re-
fer to CAN trafﬁc data logged from a Toyota Camry

2010 by Ruth et al. [36] and data logged from a Dodge
Ram Pickup 2010 by Daily [11]. Both data were logged
through a Gryphon S3 and Hercules software. In the Toy-
ota Camry 2010, there were 42 distinct messages trans-
mitted on the CAN bus: 39 of them sent periodically at
intervals ranging from 10ms to 5 seconds, and 3 of them
sent sporadically. In the Dodge Ram Pickup 2010, there
were 55 distinct messages which were all sent periodi-
cally on the CAN bus.

In order to identify which messages originate from the
same real ECU and thus exploit it as a ground truth, we
used the naive method discussed in [32]. The messages,
which originate from the same ECU and have the same
preset message interval, were shown to have the same
number of transmissions on the bus, when traced for at
least a few minutes. Such a method can be an alterna-
tive to ﬁngerprinting, but it requires pairwise compar-
isons and cannot be completed in real time as required
in the design of CIDS, which is essential for intrusion de-
tection in real in-vehicle networks.

While running CIDS, we determined offsets and skews
for every 20 received samples, i.e., N = 20, and set κ = 5.

5.1 Clock Skew as a Fingerprint
We ﬁrst evaluate the validity of CIDS’s ﬁngerprinting
of the transmitter ECUs based on the estimated clock
skews. We evaluate skew estimates in microseconds per
second (μs/s) or parts per million (ppm).

CAN bus prototype. Fig. 5(a) plots our evaluation
results of CIDS’s ﬁngerprinting on the CAN bus proto-
type: accumulated clock offsets of messages 0x11, 0x13,
and 0x55. Note that the slopes in this ﬁgure represent
the estimated clock skews. All the derived accumulated
clock offsets were found to be linear in time, i.e., con-
stant estimated skews. Messages 0x11 and 0x13, both of
which were sent from node A, exhibited the same con-
stant clock skew of 13.4ppm. On the other hand, the
message 0x55 sent from a different node B showed a dif-
ferent clock skew of 27.2ppm. Thus, the clock skews
derived by CIDS can be used to differentiate ECUs.

USENIX Association  

25th USENIX Security Symposium  919

0x11 by A
0x13 by A
0x55 by B

]
s
m

[
 
t
e
s
f
f

]
s
m

[
 
t
e
s
f
f

l

O
 
k
c
o
C
 
d
e
t
a
u
m
u
c
c
A

l

10

8

6

4

2

0

l

O
 
k
c
o
C
 
d
e
t
a
u
m
u
c
c
A

l

]
s
m

[
 
t
e
s
f
f

l

O
 
k
c
o
C
 
d
e
t
a
u
m
u
c
c
A

l

600

500

400

300

200

100

0

0

50

40

30

20

10

0

0

0x1B0 by A
0x1D0 by A
0x1A6 by B
0x294 by C
0x295 by C
0x309 by D

200

400

600

800

1000

1200

1400

1600

1800

2000

Time [Sec]

(b) Honda Accord 2013.

0x200 by A
0x215 by B
0x300 by B
0x6F9 by C
0x3E6 by C
0x6FD by C
0x700 by C
0x101 by D
0x6FE by D

20

40

60

Time [Sec]

80

100

120

(d) Dodge Ram Pickup 2010.

0

50

100

150

Time [Sec]

200

250

300

(a) CAN bus prototype.

]
s
m

[
 
t

e
s
f
f

O
 
k
c
o
C
d
e

 

l

t

l

a
u
m
u
c
c
A

100

90

80

70

60

50

40

30

20

10

0

0

0x20 by A
0xB2 by A
0x223 by B
0x224 by B
0x2C1 by C
0x2C4 by D
0x3A0 by E
0x4C3 by F
0x620 by G

0x2C1

20

40

60

80

100

Time [Sec]

120

140

160

180

200

(c) Toyota Camry 2010.

Figure 5: Accumulated clock offsets derived by CIDS in different evaluation settings.

Honda Accord 2013. For CIDS’s evaluation on a
real vehicle, the CAN prototype nodes logged the in-
vehicle CAN trafﬁc of the Honda Accord 2013, and
ran CIDS on messages 0x1B0, 0x1D0, 0x1A6, 0x294,
0x295, and 0x309. The approach in [32] was adopted
to verify that messages {0x1B0, 0x1D0} were sent from
the same ECU, {0x294, 0x295} both sent from another
ECU, whereas others were sent from different ECUs.
Utilizing these facts, one can conclude from Fig. 5(b)
that the clock offsets and the skews derived in CIDS are
equivalent only for those messages sent from the same
ECU; 0x1B0 and 0x1D0 showed a skew of 78.4ppm,
0x294 and 0x295 showed a skew of 199.8ppm, while
messages 0x1A6 and 0x309 showed very different skews
of 265.7ppm and 95.78ppm, respectively. This result
again shows that clock skews between different ECUs
are distinct and can thus be used as the ﬁngerprints of
the corresponding ECUs.

Toyota Camry 2010. To show that the applicability
of CIDS’s ﬁngerprinting is not limited to the speciﬁc ve-
hicle model used, we also conducted experiments on a
different vehicle: running CIDS’s ﬁngerprinting on the
Toyota Camry logged data. Similarly to the real vehicle
evaluation in Section 5.1, the approach in [32] was used
as the ground truth. It was veriﬁed that messages {0x20,
0xB2} within the CAN log data were all sent from some
ECU A. Also, {0x223, 0x224} were both sent from some
ECU B, whereas 0x2C1, 0x2C4, 0x3A0, 0x4C3, and
0x620 were each sent from a different ECU. As shown
in Fig. 5(c), messages 0x20 and 0xB2 both showed a

clock skew of approximately 345.3ppm, whereas 0x223
and 0x224 showed a different clock skew of 276.5ppm.
0x2C4, 0x3A0, 0x4C3, and 0x620 showed very different
clock skews of 460.1ppm, 142.5ppm, 26.1ppm and 58.7
ppm, respectively.

We made an interesting observation on message
0x2C1, showing a clock skew of 334.1ppm, which was
different from the skews of messages {0x20, 0xB2} only
by 3%, despite the fact that it was sent by a different
ECU. This may confuse CIDS in determining whether
they were sent by the same ECU or not. However, in
such a case, CIDS can further examine the correlation be-
tween clock offsets and can thus ﬁngerprint with a higher
accuracy, which we will discuss and evaluate further in
Section 5.4.

For this vehicle,

Dodge Ram Pickup 2010. We also ran CIDS’s ﬁn-
gerprinting on the CAN log data of a Dodge Ram
Pickup 2010.
it was veriﬁed that
message 0x200 was sent from some ECU A, {0x215,
0x300} sent from B, {0x6F9, 0x3E6, 0x6FD, 0x700}
sent from C, and {0x101, 0x6FE} sent from D. Fig. 5(d)
shows that CIDS determined that 0x200 has a clock
skew of 351.7ppm, {0x215, 0x300} to have approxi-
mately 295.3ppm, {0x6F9, 0x3E6, 0x6FD, 0x700} to
have 24.5ppm, and {0x101, 0x6FE} to have 110.3ppm,
thus correctly ﬁngerprinting their transmitters.
These results of a Toyota Camry and a Dodge Ram
Pickup CAN log data again afﬁrm the fact that the clock
skews derived by CIDS are diverse and can indeed be
used as ﬁngerprints of in-vehicle ECUs. Moreover, they

920  25th USENIX Security Symposium 

USENIX Association

40

30

20

10

0

0

30

20

10

0

)

c
c
a
O

(
 
t

e
s
f
f

O
 
k
c
o
C

l

 
.

m
u
c
c
A

)
e
(
 
r
o
r
r

 

E
n
o

i
t

a
c
i
f
i
t

n
e
d

I

w/o attack

w/ attack

)

c
c
a
O

(
 
t
e
s
f
f

200

400

600

800

Time [Sec]

8

6

4

2

0

3

2

1

0

O
 
k
c
o
C

l

 
.

m
u
c
c
A

)
e
(
 
r
o
r
r

E
 
n
o
i
t
a
c
i
f
i
t
n
e
d
I

(cid:1)106

w/o attack

w/ attack

0

200

400

600

800

Time [Sec]

(cid:1)106

)

c
c
a
O

150

(
 
t

e
s
f
f

O
 
k
c
o
C

l

 
.

m
u
c
c
A

100

50

0

0

w/o attack

w/ attack

500

1000

1500

Time [Sec]

-1

0

200

400

600

800

Time [Sec]

0

500

1000

1500

Time [Sec]

a
c
i
f
i
t

n
e
d

I

)

c
c
a
O

(
 
t

e
s
f
f

O
 
k
c
o
C

l

 
.

m
u
c
c
A

)
e
(
 
r
o
r
r

 

E
n
o

i
t

(cid:1)107

w/o attack

w/ attack

0

(cid:1)106

500

1000

1500

Time [Sec]

3

2

1

0

3

2

1

0

-1

0

500

1000

1500

Time [Sec]

) (cid:1)107

6

+
L
(
 
t
i

m
L

i

 
l

o
r
t

n
o
C

 
r
e
p
p
U

4

2

0

0

500

1000

1500

Time [Sec]

10

0

-10

600

400

200

)
e
(
 
r
o
r
r

 

E
n
o

i
t

a
c
i
f
i
t

n
e
d

I

)
+
L
(
 
t
i

m
L

i

 
l

o
r
t

n
o
C

 
r
e
p
p
U

-10

0

200

400

600

800

Time [Sec]

)
+
L
(
 
t
i

m
L

i

 
l

o
r
t

n
o
C

 
r
e
p
p
U

8000

6000

4000

2000

0

0

200

400

600

800

Time [Sec]

) (cid:1)109

2

+
L
(
 
t
i

i

m
L
 
l
o
r
t
n
o
C

 
r
e
p
p
U

1.5

1

0.5

0

0

200

400

600

800

Time [Sec]

0

0

500

1000

1500

Time [Sec]

(a) Fabrication attack.

(b) Suspension attack.

(a) Fabrication attack.

(b) Suspension attack.

Figure 6: CIDS defending fabrication attack (left) and
suspension attack (right) in a CAN bus prototype.

Figure 7: CIDS defending fabrication attack (left) and
suspension attack (right) in a Honda Accord 2013.

show that CIDS’s ﬁngerprinting is not limited to a spe-
ciﬁc vehicle model, and can thus be applied to other ve-
hicle models.

5.2 Defending Against Fabrication and

Suspension Attacks

On both the CAN bus prototype and the real vehicle set-
ting (Honda Accord 2013), we launch the fabrication and
suspension attacks, and evaluate CIDS’s effectiveness in
detecting them.2 To this end, we consider CIDS to only
perform per-message detection, and will later evaluate
CIDS with message-pairwise detection.

CAN bus prototype. For evaluation of CIDS defend-
ing against fabrication attack on the CAN bus proto-
type, B was programmed to inject a fabricated message at
t = 400 secs with ID=0x11, which is a periodic message
usually sent by A, i.e., B launches a fabrication attack on
A. ECU R was running CIDS on message 0x11 and de-
rived accumulated clock offset (Oacc), identiﬁcation er-
ror (e), and control limits (L+, L−). For the suspension
attack, A was instead programmed to stop transmitting
0x11 at t = 400 secs.

Fig. 6(a) shows how such values changed for mes-
sage 0x11 in the presence and absence of a fabrication
attack. As soon as B mounted a fabrication attack, as dis-
cussed in Section 4.2, there was a sudden positive shift in
the accumulated clock offset, thus yielding a high iden-

2As the attacks cannot be emulated using the CAN log data, we do

not consider their use for evaluating CIDS against the attacks.

tiﬁcation error. Due to such a shift, the upper control
limit, L+, of CUSUM suddenly increased and exceeded
its threshold ΓL =5, i.e., detecting an intrusion. Sim-
ilarly, Fig. 6(b) shows that since the suspension attack
also shifted the accumulated clock offset signiﬁcantly,
CIDS was able to detect the attack.

Real vehicle. To evaluate CIDS against the fabrication
attack under the real vehicle setting, one CAN prototype
node R was programmed to run CIDS, and another node
A as an adversary mounting the attack on a real ECU.
The attack was mounted by injecting a fabricated attack
message with ID=0x1B0, which was sent every 20ms by
some real in-vehicle ECU, i.e., A mounted the fabrica-
tion attack on a Honda Accord ECU sending 0x1B0. For
the suspension attack, the message ﬁlter of R was reset
at t = 420 secs so as to no longer receive 0x1B0, thus
emulating the suspension attack.

Fig. 7(a) shows how accumulated clock offsets (Oacc),
identiﬁcation errors (e), and upper control limits (L+)
changed for both cases of with and without a fabrica-
tion attack. Again, the attack message injected at around
t = 420 secs caused a sudden increase in Oacc and e, thus
increasing L+ to exceed ΓL =5. As a result, CIDS de-
clares the detection of an attack. After the attack, since
0x1B0 was still periodically sent by the real in-vehicle
ECU, the clock skew — i.e., the slope of Oacc graph —
remains unchanged. Similarly, as shown in Fig. 7(b), the
suspension attack increases the offset values, thus caus-
ing L+ to exceed the threshold, i.e., the suspension attack
was detected by CIDS.

USENIX Association  

25th USENIX Security Symposium  921

0x55 (before attack)
0x55 (after attack)

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

)
F
M
P

(
 

n
o

i
t
c
n
u
F
 
s
s
a
M
 
y
t
i
l
i

b
a
b
o
r
P

50.5~51.5ms

0
48.5

49

49.5

50

50.5

51

51.5

Message Interval [ms]

0x1B0 (before attack)
0x1B0 (after attack)

1

0.8

0.6

0.4

0.2

)
F
M
P

(
 

n
o

i
t
c
n
u
F
 
s
s
a
M
 
y
t
i
l
i

b
a
b
o
r
P

20

15

c
c
a

O

10

5

0

0

500

400

300

200

100

c
c
a

O

0x55
0x11

Mistimed

 

5
5
x
0
e
g
a
s
s
e
m

 
f

o

 

−

L

 
/
 

+

L

100

200

300

400

Time [Sec]

500

600

700

800

(a) CAN bus prototype.

0x1B0 (w/o attack)
0x1B0 (w/ attack)

0
B
1
x
0

 

e
g
a
s
s
e
m

 
f

o

 

−

L

 
/
 

+

L

400

350

300

250

200

150

100

50

0

0

L+
L−

100

200

300

400

Time [Sec]

500

600

700

800

x 104

2

L+
L−

1.5

1

0.5

0
18.5

19

19.5

20

20.5

Message Interval [ms]

21

21.5

0

0

500

1000

1500

Time [Sec]

2000

2500

0

0

500

1000

1500

2000

2500

Time [Sec]

(b) Real vehicle.

Figure 8: Masquerade attack — Probability mass function of message intervals (left), changes in accumulated clock
offsets (middle), and control limits (right) derived in CIDS.

5.3 Defending Against Masquerade Attack

We now evaluate the performance of CIDS in detecting a
masquerade attack.

CAN bus prototype. To evaluate CIDS’s defense
against the masquerade attack in the CAN bus prototype,
nodes A and B were considered to have been compro-
mised as strong and weak attackers as in Fig. 2(c), re-
spectively. A was programmed to mount a masquerade
attack on B, i.e., stop B transmitting message 0x55 and
instead send it through A onwards, once Tmasq = 250 secs
had elapsed. As usual, messages 0x11 and 0x13 were pe-
riodically sent by A, and CIDS was run by R.

Fig. 8(a) (left) shows the Probability Mass Function
(PMF) of the intervals of message 0x55: before and af-
ter the attack was mounted. In contrast to the fabrica-
tion attack, since the attacker sent the attack message at
its original frequency after masquerading, the distribu-
tion did not deviate much from that before the attack.
However, at Tmasq, since there was some delay when the
transmitter was switched from one node to another, the
ﬁrst masquerade attack message was sent 51.04ms after
its previous transmission, whereas it should have been
approximately 50ms which is the preset message interval
of 0x55. Due to such a slightly mistimed masquerade at-
tack, the PMF graph shows a message interval with an
abnormal deviation from the mean. We will later eval-
uate the perfectly timed masquerade attack — a much
more severe case than a mistimed attack — on a real ve-
hicle, and show the efﬁcacy of CIDS in detecting it.

The resulting changes in Oacc, L+, and L− at R are
also shown in Fig. 8(a) (middle and right). The change
in the ECU transmitting message 0x55 caused the slope

(i.e., clock skew) in Oacc graph to change after the at-
tack was mounted. Since the measurements of Oacc af-
ter Tmasq signiﬁcantly deviated from their expected val-
ues, which is determined by the estimated clock skew of
t < Tmasq, the CUSUM lower control limit, L−, in CIDS
exceeded the threshold, thus declaring detection of an in-
trusion. Since the transmitter of 0x55 was changed (to
ECU A), its clock skew after t = Tmasq was equivalent
to the clock skew in 0x11. Accordingly, via root-cause
analysis, CIDS identiﬁes the compromised ECU to be
ECU A. Unlike the previous results, since the change
in slope was negative, persistent identiﬁcation error with
high negative values caused L− to exceed the threshold.
Real vehicle. To evaluate CIDS’s defense against the
masquerade attack in a real vehicle, we consider a sce-
nario in which real in-vehicle ECUs V1 and V2 trans-
mitting 0x1A6 and 0x1B0 are compromised as a strong
and a weak attacker, respectively. Of the three CAN pro-
totype nodes (A, B, and R), which were connected to
the real in-vehicle network via OBD-II, we programmed
node R to run CIDS on in-vehicle message 0x1B0 and an-
other node B to simply log the CAN trafﬁc. To generate a
scenario of real ECU V1 mounting a masquerade attack
on real ECU V2, R was programmed further to receive
message 0x1A6 instead of 0x1B0, but still record the
received messages’ ID to be 0x1B0, once Tmasq = 1100
seconds had elapsed. That is, we let R interpret 0x1A6
as 0x1B0 for t > Tmasq, i.e., the transmitter of 0x1B0
changes from V2 to V1. Such a change in interpretation
was achieved by programming R to modify its message
acceptance ﬁlter from only accepting 0x1B0 to only ac-
cepting 0x1A6. Since 0x1B0 and 0x1A6 were observed
to be always transmitted nearly at the same time, such a

922  25th USENIX Security Symposium 

USENIX Association

0
D
1
x
0
n

 

i
 
t

e
s
f
f

o

l

 
k
c
o
c
 
e
g
a
r
e
v
A

1

0.5

0

−0.5

−1
−1

Correlation=0.9213

−0.5

0

0.5

Average clock offset in 0x1B0

6
A
1
x
0
n

 

i
 
t

e
s
f
f

l

o
 
k
c
o
c
 
e
g
a
r
e
v
A

2

1

0

−1

−2
−1

1

Correlation=0.0026

−0.5

0

0.5

Average clock offset in 0x1B0

2
B
x
0
 
n
i
 
t
e
s
f
f
o
 
k
c
o
c
 
e
g
a
r
e
v
A

l

0.2

0.1

0

−0.1

−0.2

−0.3

−0.3

1

Correlation=0.9860

−0.2
0.1
Average clock offset in 0x20

−0.1

0

1
C
2
x
0
 
n
i
 
t
e
s
f
f
o
 
k
c
o
c
 
e
g
a
r
e
v
A

l

1

0.5

0

−0.5

−1

−1.5

−0.3

0.2

Correlation=0.0331

−0.2
0.1
Average clock offset in 0x20

−0.1

0

0.2

(a) Honda Accord 2013.

(b) Toyota Camry 2010.

Figure 9: Correlated and uncorrelated clock offsets.

w/ attack
w/o attack

200

400

600

800

1000 1200 1400 1600 1800 2000

Time [Sec]

(a) Accumulated clock offset.

(b) Control limits.

160

140

120

100

80

60

40

20

0

0

]
s
m

[
 
)

c
c
a
O

l

(
 
t
e
s
f
f
o
 
k
c
o
c
 
d
e
t
a
u
m
u
c
c
A

l

Figure 10: Defense against the worst-case masquerade attack via message-pairwise detection.

setting replicates the timed masquerade attack. During
such a process, B continuously logged 0x1B0 so that we
can obtain a reference for circumstances when no attacks
are mounted.

Fig. 8(b) (left) shows the PMF of the message inter-
vals of 0x1B0 before and after the attack. Since the mes-
sage periodicity remained the same, the distribution of
the messages intervals did not change. Moreover, since
we considered a timed masquerade attack, in contrast to
the result in Fig. 8(a), there were no such abnormal mes-
sage intervals. Such a result indicates that state-of-the-
art IDSs, which try to ﬁnd abnormal message frequen-
cies, cannot detect such an attack. Although the distri-
bution of message intervals remained unchanged, due to
the change in ECU transmitting 0x1B0 (V2 → V1), the
accumulated clock offset suddenly exhibited a different
trend in its change, i.e., a different clock skew after the
attack. Here, the original trend in offset changes was de-
termined by the data obtained from B. So, as shown in
Fig. 8(b) (right), CIDS was able to detect a sudden shift in
its identiﬁcation error and thus outputted a high level of
CUSUM upper control limit, i.e., an intrusion detection.
CIDS’s capability of detecting various types of masquer-
ade attack is evaluated further in Section 5.5.

In conclusion, through its modeling and detection pro-
cesses, CIDS can detect not only the fabrication attack
but also the masquerade attack, i.e., is capable of doing
not only what existing solutions can do, but also more.

5.4 Message-pairwise Detection

We evaluate the feasibility and efﬁciency of message-
pairwise detection in CIDS. To validate its practicabil-
ity in the real-world, we ﬁrst examine whether there ex-
ists pairs of messages inside real vehicles with correlated
clock offsets — the condition for CIDS to run message-
pairwise detection.

Fig. 9(a) shows two cases of correlated and uncorre-
lated clock offsets of in-vehicle messages collected from
the Honda Accord 2013. Fig. 9(a) (left) shows that the
average clock offsets of messages 0x1B0 and 0x1D0,
which were determined to have been sent from the same
ECU, showed a high correlation of 0.9213, i.e., linear re-
lationship. In contrast, as shown in Fig. 9(a) (right), aver-
age clock offsets of messages 0x1B0 and 0x1A6, which
were sent every 20ms from different ECUs, showed a
near 0 correlation.

By the Birthday paradox, some ECUs in the vehicle
may probably have near-equivalent clock skews — as it
was for messages 0x20 and 0x2C1 in the examined Toy-
ota Camry 2010 (see Fig. 5(c)). Although clock skews
may be near-equivalent, instantaneous clock offsets of
two different ECUs cannot be near-equivalent and are
thus uncorrelated as they run different processes. The
results in Fig. 9(b) corroborate such a fact by showing
that clock offsets of messages 0x20 and 0xB2, which
were sent by the same ECU, had a high correlation of
0.9860, whereas offsets of messages 0x20 and 0x2C1 —

USENIX Association  

25th USENIX Security Symposium  923

n
o

i
t
c
e

t

e
D

 
f

o

 
y
t
i
l
i

b
a
b
o
r
P

1

0.98

0.96

0.94

0.02

0

0

Fabrication
Fabrication
Fabrication
Suspension
Suspension
Suspension
Mistimed Masquerade
Mistimed Masquerade
Mistimed Masquerade
Timed Masquerade
Timed Masquerade
Timed Masquerade

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

Probability of False Alarms

2
(cid:1)10-3

n
o

i
t
c
e

t

e
D

 
f

o

 
y
t
i
l
i

b
a
b
o
r
P

1

0.98

0.96

0.94

0.02

0

0

Fabrication
Fabrication
Fabrication
Suspension
Suspension
Suspension
Mistimed Masquerade
Mistimed Masquerade
Mistimed Masquerade
Timed Masquerade
Timed Masquerade
Timed Masquerade

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

Probability of False Alarms

2
(cid:1)10-3

(a) Per-message detection.

(b) Per-message + Message-pairwise detection.

Figure 11: ROC curves of CIDS in the real vehicle.

sent by different ECUs with similar clock skews — had
a low correlation of 0.0331. Thus, for messages with
near-equivalent clock skews, CIDS can further examine
the correlation between their clock offsets, and correctly
determine their transmitters.3 These facts and observa-
tions indicate the feasibility and efﬁciency of message-
pairwise detection in CIDS.

To show that message-pairwise detection can sup-
port per-message detection in decreasing false posi-
tives/negatives by examining offset correlations, we con-
sider a scenario in which an attacker V1 has mounted
a masquerade attack on a Honda Accord ECU V2 at
tmasq = 800 secs. We refer to V2 as the ECU which orig-
inally transmits message 0x1B0. To consider the worst
case in detecting the masquerade attack, we assume that
the clock skews of V1 and V2 are nearly equivalent,
similarly to messages 0x20 and 0x2C1 in the Toyota
Camry. We replicated such a worst-case scenario by ran-
domly permuting the acquired offset values of 0x1B0 for
t > tmasq, and considering the permuted values to be out-
put from V1. As shown in Fig. 10(a), this leads to a situ-
ation where the clock skew does not change even though
the message transmitter has been changed from one ECU
to another. Although the clock skew remained equivalent
at t = tmasq, the correlation between offsets of 0x1B0 and
0x1D0 suddenly dropped from 0.9533 to 0.1201, i.e., a
linear to non-linear relationship. As a result, as shown in
Fig. 10(b), the control limits in CIDS’s message-pairwise
detection exceeded the threshold ΓL = 5. On the other
hand, since the clock skews before and after the attack
were equivalent, per-message detection was not able to
detect the intrusion.

5.5 False Alarm Rate
We also examined the false alarm rate of CIDS under the
real vehicle setting. The results obtained from the CAN

3If the two ECUs’ clock behaviors are still not distinguishable,
CIDS can be set up to exclude them for examination so that the risk
of false positives signiﬁcantly decreases. However, this may impact
CIDS’s capability of detecting attacks mounted through those ECUs.

bus prototype are omitted due to their insigniﬁcance, i.e.,
not many false alarms occurred due to its less complex
bus trafﬁc. Based on data recorded for 30 minutes from
the Honda Accord 2013 — approximately 2.25 million
messages on the CAN bus — four attack datasets were
constructed to each contain 300 different intrusions. The
intrusions either had different injection timings, suspen-
sion timings, or changes in clock skews: each in the form
of fabrication attack, suspension attack, mistimed mas-
querade attack, and timed masquerade attack. For each
dataset, we varied the κ parameter of CIDS to acquire one
false positive rate (false-alarm rate) and one false nega-
tive rate (1−detection rate).
Fig. 11(a) shows the Receiver Operating Characteris-
tic (ROC) curve of CIDS, which represents its trade-off
between false alarm and detection, executing only per-
message detection on the attack datasets. Clearly, CIDS
is shown to be able to detect fabrication, suspension, and
masquerade attacks with a high probability. Since the
timed masquerade attack is the most difﬁcult to detect,
it showed the highest false positive rate among all the at-
tack scenarios considered: a false positive rate of 0.055%
while not missing any anomalies (100% true positives).
Even for false positives < 0.055%, 97% of the anoma-
lies were detected by CIDS. However, these false pos-
itives can be of great concern for in-vehicle networks.
Therefore, to eliminate such false positives, CIDS can
additionally run message-pairwise detection. Fig. 11(b)
shows the ROC curve of CIDS executing not only per-
message detection but also message-pairwise detection
for further veriﬁcation. Accordingly, CIDS was able to
detect all types of attacks considered without having any
false positives, which is in contrast to CIDS with only
per-message detection, i.e., all false positives were elim-
inated via message-pairwise detection.

6 Discussion

Discussed below are the overhead, deployment, limita-
tions, and applications of CIDS.

924  25th USENIX Security Symposium 

USENIX Association

Identiﬁcation algorithm. To estimate clock skew,
one can also use other algorithms than RLS, such as Total
Least Squares (TLS) and Damped Least Squares (DLS),
which perform orthogonal linear and non-linear regres-
sion, respectively. Although they might identify the
clock skew with a higher accuracy than RLS, their gains
are offset by the accompanying high complexity. TLS
requires Singular Value Decomposition (SVD), which
is computationally expensive, and DLS requires a large
number of iterations for curve ﬁtting. RLS is known to
have a computation complexity of O(N2) per iteration,
where N is the size of the data matrix. However, in CIDS,
only a scalar clock offset is exploited for identiﬁcation,
and thus the computational complexity is relatively low.
Defeating CIDS. There may be several ways the ad-
versary may attempt to defeat CIDS. First, the adversary
may try to compromise the ECU running CIDS and dis-
able it. However, if cross-validation for CIDS was to be
exploited, such an attempt can be nulliﬁed. For the detec-
tion of intrusions, CIDS only requires an ECU to record
the timestamps of message arrivals. Such a low overhead
makes it feasible for CIDS to be installed distributively
across several in-vehicle ECUs for cross-validation. Sup-
pose using CIDS, ECU A monitors attacks on messages
{M1, M2}, ECU B monitors {M2, M3}, and ECU C mon-
itors {M1, M3}. Since CIDS regards the receiver’s time
clock as the true clock, cross-validation provides mul-
tiple perspectives of clock behaviors for each message
ID, e.g., two different perspectives of M2 from A and
B. Thus, even when an ECU running CIDS gets com-
promised, cross-validation via CIDS can handle such a
problem.

Another way the adversary may try to defeat CIDS is to
adapt to how its algorithm is running and thus deceive it.
The adversary may ﬁgure out the clock skew of the tar-
get ECU and then heat up or cool down the compromised
ECU so that its clock skew changes to match that of the
target. In such a case, the clock skew can be matched and
thus may bypass CIDS’s per-message detection. How-
ever, as discussed in Section 5.4, unless the adversary
also matches the instantaneous clock offset, which is af-
fected by the ECU’s momentary workload and tempera-
ture, CIDS can detect the intrusion via message-pairwise
detection.

Upon intrusion detection. False alarms for intrusion
detection systems, especially in in-vehicle networks, are
critical. Thus, CIDS should also deal with them as accu-
rately as possible. To meet this requirement, if an intru-
sion has been determined, even after going through the
veriﬁcation process, CIDS can follow the following steps
for further examination:

1. If an intrusion was detected while using only per-
message detection, examine it further via message-
pairwise detection.

2. If still alarmed as an intrusion and the attacked ECU

is a safety-critical ECU, go straight to step 4.

3. If not, communicate with other ECUs for cross-
validation as they would provide different perspec-
tives of the clock skew results.
If communicat-
ing with other ECUs incurs too much overhead (in
terms of bus load, processing overhead, etc.), send
trafﬁc data for a remote diagnosis.

4. Request re-patching of ﬁrmware and advise the

driver to stop the vehicle.

Limitation of CIDS. CIDS is shown to be effective in
detecting various types of in-vehicle network intrusions.
One limitation of CIDS might be that since it can only
extract clock skews from periodic messages, it would be
difﬁcult to ﬁngerprint ECUs which are sending aperiodic
messages. That is, if the attacker injects messages ape-
riodically, although CIDS can still detect the intrusion,
it would not be able to pinpoint where the attack mes-
sage came from, i.e., ﬁnding the root-cause of attacks
launched with or on aperiodic messages. Recall that
CIDS can achieve this only for periodic messages. In fu-
ture, we would like to ﬁnd new features other than clock
skew, which can ﬁngerprint ECUs, regardless of whether
they send messages periodically or aperiodically.

Applicability to other in-vehicle networks. Al-
though most modern in-vehicle networks are based on
CAN, some may be equipped with other protocols, such
as CAN-FD, TTCAN and FlexRay, for more complex
operations. CAN-FD is an enhanced version of CAN,
providing ﬂexible and higher data rates [5]. Since its
basic components conform to CAN and thus also lacks
synchronization, CIDS can be applied to CAN-FD. For
protocols such as TTCAN [21] and FlexRay [22], nodes
are periodically synchronized for determinative timing of
message exchanges. The interval between two consecu-
tive synchronizations depends on how each protocol is
deployed [32]. For TTCAN, it can be up to 216 = 65536
bits long, i.e., 131ms in a 500Kbps bus [37]. This lets
some messages be sent multiple times between consec-
utive synchronizations. So, if the time interval is long,
CIDS would still be able to extract clock skews from
messages which are sent multiple times, whereas, if the
period is short, CIDS may not be feasible. However, the
fact that TTCAN and FlexRay have high implementation
cost, whereas for CAN-FD it is minimal, makes CAN-
FD a favorite candidate for next-generation in-vehicle
networks [6, 39]. This means that CIDS can be applicable
to not only current but also future in-vehicle networks.

7 Conclusion

New security breaches in vehicles have made vehicle se-
curity one of the most critical issues. To defend against

USENIX Association  

25th USENIX Security Symposium  925

vehicle attacks, several security mechanisms have been
proposed in the literature. They can cope with some at-
tacks but cannot cover other safety-critical attacks, such
as the masquerade attack. To remedy this problem,
we have proposed a new IDS called CIDS, which ex-
tracts clock skews from message intervals, ﬁngerprints
the transmitter ECUs, and models their clock behaviors
using RLS. Then, based on the thus-constructed model,
CIDS detects intrusions via CUSUM analysis. Based on
our experiments on a CAN bus prototype and on real ve-
hicles, CIDS is shown to be capable of detecting various
types of in-vehicle network intrusions. CIDS can address
all attacks that existing IDSs can and cannot handle as
well as facilitates root-cause analysis. Thus, it has po-
tential for signiﬁcantly enhancing vehicle security and
safety.

8 Acknowledgments

We would like to thank the anonymous reviewers and
the shepherd, Tadayoshi Kohno, for constructive sugges-
tions. The work reported in this paper was supported in
part by the NSF/Intel Grant CNS-1505785 and the DG-
IST Global Research Laboratory Program through NRF
funded by MSIP of Korea (2013K1A1A2A02078326).

References
[1] Microchip MCP2515

www.microchip.com/MCP2515.

Datasheet.

[Online]

Available:

[2] Microchip TB078, PLL Jitter and Its Effects in the CAN Protocol.
[3] On-Board Diagnostic System [Online] http://www.obdii.com.
[4] CAN Speciﬁcation v2.0. Robert Bosch GmbH (1991).
[5] CAN with Flexible Data-Rate Speciﬁcation Version 1.0. Robert

Bosch GmbH (2012).

[6] Inﬁneon: CAN FD Success Goes at Expense of FlexRay. [Online]

http://www.eetimes.com/. EETimes (Feb. 2015).

[7] Hackers Remotely Kill a Jeep on the Highway - With Me in It.

[Online] http://www.wired.com.

[8] BASSEVILLE, M., AND NIKIFOROV, I. Detection of abrupt
changes: Theory and application. In Prentice Hall information
and system sciences series (1993).

[9] CHECKOWAY, S., MCCOY, D., KANTOR, B., ANDERSON, D.,
SHACHAM, H., SAVAGE, S., KOSCHER, K., CZESKIS, A.,
ROESNER, F., AND KOHNO, T. Comprehensive Experimental
Analyses of Automotive Attack Surfaces.
In USENIX Security
(2011).

[10] CHO, K. T., PARK, T., AND SHIN, K. G. CPS Approach to
Checking Norm Operation of a Brake-by-Wire System. In ICCPS
(2015).

[11] DAILY, J. Analysis of critical speed yaw scuffs using spiral

curves. In SAE Technical Paper 2012-01-0606 (2012).

[13] FOSTER, I., PRUDHOMME, A., KOSCHER, K., AND SAVAGE,
S. Fast and Vulnerable: A Story of Telematic Failures. In WOOT
(2015).

[14] HAYKIN, S. Adaptive ﬁlter theory.

(1991).

In 2nd ed. Prentice-Hall

[15] HERREWEGE, A., SINGELEE, D., AND VERBAUWHEDE, I. Ca-
nauth - a simple, backward compatible broadcast authentication
protocol for can bus. In ECRYPT Workshop on Lightweight Cryp-
tography (2011).

[16] HOPPE, T., KILTZ, S., AND DITTMANN, J. Security threats to
automotive can networks - practical examples and selected short-
term countermeasures.
In Reliability Engineering and System
Safety (Jan. 2011).

[17] JANA, S., AND KASERA, S. K. On fast and accurate detection of
unauthorized wireless access points using clock skews. In ACM
MobiCom (2008).

[18] KHAN, D., BRIL, R., AND NAVET, N.

Integrating hardware
limitations in can scbedulability analysis. In WFCS (May. 2010).
[19] KOHNO, T., BROIDO, A., AND CLAFFY, K. Remote physical
device ﬁngerprinting. In IEEE Symposium on Security and Pri-
vacy (2005).

[20] KOSCHER, K., CZESKIS, A., ROESNER, F., PATEL, S.,
KOHNO, T., CHECKOWAY, S., MCCOY, D., KANTOR, B., AN-
DERSON, D., SHACHAM, H., AND SAVAGE, S. Experimental
security analysis of a modern automobile. In IEEE Security and
Privacy (2010).

[21] LEEN, G., AND HEFFERNAN, D. Ttcan: a new time-triggered
In Elsevier Microprocessors and Mi-

controller area network.
crosystems (2002).

[22] MILBREDT, P., HORAUER, M., AND STEININGER, A. An in-

vestigation of the clique problem in ﬂexray. SIES (2008).

[23] MILLER, C., AND VALASEK, C. Adventures in automotive net-

works and control units. Defcon 21 (2013).

[24] MILLER, C., AND VALASEK, C. A survey of remote automotive

attack surfaces. Black Hat USA (2014).

[25] MILLER, C., AND VALASEK, C. Remote exploitation of an un-

altered passenger vehicle. Black Hat USA (2015).

[26] MILLS, D. L. Network time protocol: Speciﬁcation, impleme-

nation, and analysis. RFC 1305.

[27] MOHALIK, S., RAJEEV, A. C., DIXIT, M. G., RAMESH, S.,
SUMAN, P. V., PANDYA, P. K., AND JIANG, S. Model check-
ing based analysis of end-to-end latency in embedded, real-time
systems with clock drifts. In DAC (2008).

[28] MONTGOMERY, D. Introduction to statistical quality control. In

4th edition, Wiley (2000).

[29] MOON, S. B., SKELLY, P., AND TOWSLEY, D. Estimation and
In

removal of clock skew from network delay measurements.
INFOCOM (1999).

[30] MUTER, M., AND ASAJ, N. Entropy-based anomaly detection

for in-vehicle networks. IEEE IVS (2011).

[31] MUTER, M., GROLL, A., , AND FREILING, F. C. A structured
approach to anomaly detection for in-vehicle networks. In Infor-
mation Assurance and Security (IAS), Sixth International Confer-
ence (2010).

[32] NATALE, M. D., ZENG, H., GIUSTO, P., AND GHOSAL, A. Un-
derstanding and using the controller area network communication
protocol: Theory and practice. In Springer Science & Business
Media (2012).

[12] DAVIS, R., KOLLMANN, S., POLLEX, V., AND SLOMKA, F.
Controller area network (can) schedulability analysis with ﬁfo
queues. ECRTS (2011).

[33] NILSSON, D., LARSON, D., AND JONSSON, E. Efﬁcient In-
Vehicle Delayed Data Authentication Based on Compound Mes-
sage Authentication Codes. In VTC-Fall (2008).

926  25th USENIX Security Symposium 

USENIX Association

[34] PASZTOR, A., AND VEITCH, D. Pc based precision timing with-

out gps. In ACM SIGMETRICS (2002).

[35] PAXSON, V. On calibrating measurements of packet transit times.

In SIGMETRICS (1998).

[36] RUTH, R., BARTLETT, W., AND DAILY, J. Accuracy of event
data in the 2010 and 2011 Toyota camry during steady state and
braking conditions. In SAE International Journal on Passenger
Cars (2012).

[37] RYANA, C., HEFFERNANB, D., AND LEENA, G. Clock syn-
chronisation on multiple ttcan network channels. In Elsevier Mi-
croprocessors and Microsystems (2004).

[38] SZILAGYI, C., AND KOOPMAN, P. Low cost multicast network
authentication for embedded control systems. In Proceedings of
the 5th Workshop on Embedded Systems Security (2010).

[39] TALBOT, S. C., AND REN, S. Comparison of ﬁeldbus systems,
In ICDCSW

can, ttcan, ﬂexray and lin in passenger vehicles.
(2009).

[40] VEITCH, D., BABU, S., AND PASZTOR, A. Robust synchro-

nization of software cclock across the internet. In IMC (2004).

[41] WOODALL, W. H., AND ADAMS, B. The statistical design of

cusum charts. In Quality Engineering, 5(4), (1993).

[42] ZANDER, S., AND MURDOCH, S. An improved clock-skew
measurement technique for revealing hidden services. In USENIX
Security (2008).

USENIX Association  

25th USENIX Security Symposium  927

