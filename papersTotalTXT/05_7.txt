Charm: A Framework for Rapidly Prototyping Cryptosystems

Joseph A. Akinyele, Matthew D. Green, and Aviel D. Rubin

Johns Hopkins University

{akinye1j, mgreen, rubin}@cs.jhu.edu

1 Abstract

We present Charm, an extensible Python-based frame-
work for rapidly prototyping cryptographic systems. Charm
was designed from the ground up to support the develop-
ment of advanced cryptographic schemes and protocols. It
includes support for multiple cryptographic settings such as
integer and elliptic curve groups. Moreover, we provide an
extensive library of re-usable routines such as secret shar-
ing and hash functions, and the infrastructure necessary to
quickly implement interactive protocols.

Our framework, shown in Figure 1, utilizes a developer-
friendly high-level language with operator overloading so
that algorithms can be expressed as mathematical expres-
sions. In addition, we take advantage of automatic memory
management and typing features to reduce programmer er-
rors. Our goal is to provide a tool that allows developers and
researchers to quickly implement advanced cryptographic
algorithms while alleviating them of low-level implementa-
tion details such as with C or C++.

Charm provides a series of message space conversion
routines that enable different cryptosystems to interoper-
ate. In addition, we provide support for embedding cryp-
tosystems in existing applications. This includes support
for automatically handling serialization of public/private
keys and ciphertexts. We have implemented several cryp-
tographic algorithms in the research literature. We also im-
plemented the ﬁrst (to the best of our knowledge) imple-
mentations of new cryptographic schemes such as multi-
authority ciphertext-policy attribute-based encryption, a
stateful hash-and-sign RSA digital signature, and anony-
mous ring/group signatures. Our techniques result in an
order of magnitude reduction in code size with only a neg-
ligible impact to performance.

The Charm framework is modular with low-level na-
tive modules implementing performance critical details and
high-level modules providing advanced features. Compu-
tationally intensive operations are encapsulated in C math
libraries and exposed in Charm via the Python/C extensions
API. We provide a benchmarking module for schemes and
protocols to measure efﬁciency. Furthermore, we provide

Figure 1: Charm architecture overview. There are four major
components built on top of Charm: adapters, schemes, a proto-
col engine, and a toolbox. 1) An adapter interface that alters the
input/output or security properties of a scheme. This promotes
code re-use by removing incompatibilities between implementa-
tions. 2) A library of implemented cryptosystems accessed via
standard APIs. 3) Protocols infrastructure to support the develop-
ment of interactive protocols via a dedicated protocol engine. 4)
An extensible library of common routines, including secret shar-
ing, X.509 certiﬁcate handling, parameter generation, policy pars-
ing and hash functions.

a protocol engine that handles arbitrary data serialization
and network transmission between interactive parties. This
allows developers to focus on the details of their protocol
rather than on low-level network implementation speciﬁcs.
Charm is in its 3rd alpha release, and the ﬁrst beta re-
lease is planned for mid-February 2012. The code and a full
paper describing the system are available at http://charm-
crypto.com.

This work was sponsored by NSF Award CNS1010928 and HHS

Grant Number 90TR0003/01.

AdaptersSchemesToolboxGroups (Integer, Pairing, Elliptic Curve)C Math Libraries (OpenSSL, GMP, PBC, MIRACL, etc.)Protocol Engine & CompilerBenchmark ModulePairingMathIntegerMathECMathCryptobasePython/C Base Modules1Protocols234