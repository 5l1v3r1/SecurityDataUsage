PathCu’er:	  Severing	  the	  Self-­‐

Propaga6on	  Path	  of	  XSS	  JavaScript	  

Worms	  in	  Social	  Web	  Networks	  
Yinzhi	  Cao§,	  Vinod	  Yegneswaran†,	  Phillip	  Porras†,	  and	  

Yan	  Chen§	  

§Northwestern	  Lab	  for	  Internet	  and	  Security	  Technology,	  Northwestern	  

University,	  Evanston,	  IL	  

	  †SRI	  Interna6onal,	  Menlo	  Park,	  CA	  

1	  

Introduc6on	  

•  Social	  web	  networks	  

–  PlaRorms	  where	  people	  share	  their	  perspec6ves,	  opinions,	  
–  OSNs,	  Blogs,	  Social	  bookmarking	  etc.	  

thoughts	  and	  experiences	  
•  XSS	  worm	  threat	  is	  severe.	  

–  First	  worm:	  MySpace	  Samy	  (2005)	  
–  More	  and	  more	  prevalent:	  Renren,	  Yamanner,	  etc.	  
–  Akin	  to	  virus:	  human	  need	  to	  visit	  infected	  pages	  
–  Characteris6c:	  Fast	  spreading	  
In	  this	  paper,	  	  
–  Target:	  Prevent	  XSS	  worm	  propaga6on	  
–  Method:	  View	  separa6on	  &	  Request	  authen6ca6on	  

Number	  of	  infected	  clients	  a_er	  20	  hours	  
(Social	  Networks’	  XSS	  Worms,	  Faghani	  et	  al.)	  

• 

2	  

Roadmap	  

•  Introduc6on	  
•  Background	  
– A’ack	  Steps	  
– XSS	  Taxonomy	  
•  Related	  Work	  
•  Our	  Approach	  
•  Implementa6on	  
•  Evalua6on	  

3	  

Background	  
•  Step	  1	  –	  En6cement	  and	  Exploita6on	  
•  Step	  2	  –	  Privilege	  Escala6on	  
•  Step	  3	  –	  Replica6on	  
•  Step	  4	  –	  Propaga6on	  

Samy’s	  page	  

Download	  

Modify	  benign	  
user’s	  account	  

Repeat	  
Process	  

Other	  Users	  

Get	  infected	  

Benign	  User	  

4	  

XSS	  Taxonomy	  
XSS	  A’acks	  

Server-­‐side	  XSS	  

Client-­‐side	  XSS	  

Stored	  	  XSS	   Reﬂected	  XSS	  

Plugin	  XSS	  

Content	  
Sniﬃng	  
XSS	  
Java	  XSS	  

DOM-­‐based	  
XSS	  

Our	  

MySpace	  Samy	  
Worm	  
Yamanner	  
Worm	  

Flash	  	  XSS	  

Renren	  Worm	  
SpaceFlash	  Worm	  

Experimental	  

Worm	  

5	  

Related	  Work	  

•  Group	  one:	  	  Prevent	  XSS	  vulnerabili6es	  

– Incomplete	  coverage	  (BluePrint,	  Plug-­‐in	  Patches,	  	  

Barth	  et	  al.,	  and	  Saxena	  et	  al.)	  

•  Group	  two:	  Prevent	  XSS	  worms	  

– No	  early-­‐stage	  preven6on	  (Spectator	  and	  Xu	  et	  al.)	  
– Not	  resistant	  to	  polymorphic	  worm	  (Sun	  et	  al.)	  

•  Our	  goal:	  Prevent	  all	  the	  XSS	  worms	  with	  
early-­‐stage	  preven6on	  and	  resistance	  to	  
polymorphic	  worms	  

6	  

Our	  Approach	  

•  Two	  key	  concepts:	  (1)	  request	  authen6ca6on	  

and	  (2)	  view	  separa6on	  

We	  use	  request	  
authen+ca+on.	  

Download	  

Modify	  benign	  
user’s	  account	  

View	  separa+on	  is	  
always	  enforced.	  

Samy’s	  page	  

Access	  

Benign	  User	  

7	  

View	  Separa6on	  

•  For	  example,	  blog	  A,	  blog	  B,	  blog	  C	  and	  so	  on.	  
•  Or	  more	  ﬁne-­‐grained,	  diﬀerent	  pages	  in	  the	  

same	  blog.	  

•  Isola6ng	  contents	  from	  the	  same	  origin	  

– iframe	  tag	  with	  sandbox	  proper6es	  in	  HTML5	  
– Pseudodomain	  encapsula6on	  (men6oned	  later)	  

View	  One	  

View	  Two	  

8	  

Request	  Authen6ca6on	  

•  For	  example,	  requests	  from	  blog	  A	  does	  not	  

have	  permissions	  to	  modify	  blog	  B	  

•  Iden6fying	  which	  view	  a	  client-­‐side	  request	  is	  

from.	  
– Secret	  token	  
– Referer	  header	  

•  Check	  if	  the	  view	  has	  the	  permission	  

9	  

Our	  Approach	  

Download	  

Modify	  benign	  
user’s	  account	  

View	  one	  does	  not	  
have	  the	  permission.	  

Iden6fy	  that	  it	  is	  from	  
View	  One.	  If	  we	  cannot	  
iden6fy,	  deny.	  
Isola6ng	  views	  at	  
client	  side.	  

View	  One	  

Access	  

View	  Two	  

Benign	  User	  

10	  

Roadmap	  

• 
Introduc6on	  
•  Background	  
•  Related	  Work	  
•  Our	  Approach	  
• 

•  Evalua6on	  

Implementa6on	  
–  Implementa6on	  One	  (Server	  Modiﬁca6on)	  
–  Implementa6on	  Two	  (Proxy)	  

–  Case	  Study	  of	  Five	  Real-­‐world	  Worms	  and	  Two	  
–  Performance	  

Experimental	  Worms	  (only	  two	  covered	  in	  the	  talk)	  

11	  

	  	  	  Implementa6on	  One	  (Server	  

Modiﬁca6on)	  

•  Prototype	  examples:	  WordPress,	  Elgg	  
•  Dividing	  views:	  by	  blogs	  
•  Permissions	  for	  diﬀerent	  views:	  can	  only	  

modify	  its	  own	  blog.	  

12	  

	  	  	  View	  Isola6on	  	  

	  for	  Server	  Modiﬁca6on	  

•  Isola6ng	  views	  at	  client	  side.	  
– Pseudodomain	  encapsula6on.	  

isolate.x.com	  
content.x.com	  

a’acker	  

It	  cannot	  break	  
isolate.x.com	  
(diﬀerent	  origin).	  

isolate.x.com	  
content.x.com	  

Secret	  token	  is	  
required.	  

content.x.com	  

13	  

	  	  	  Request	  Authen6ca6on	  	  
for	  Server	  Modiﬁca6on	  
•  Iden6fying	  requests	  from	  client-­‐side	  

– Secret	  token	  

•  Inser6on	  posi6on:	  Each	  request	  that	  will	  modify	  server-­‐
side	  contents.	  

•  Checking	  requests’	  permission	  

– Checking	  posi6on:	  Database	  opera6on.	  (A	  narrow	  

interface	  that	  each	  modifying	  request	  will	  go	  
through.)	  

14	  

	  	  	  	  	  	  	  	  Implementa6on	  Two	  (Proxy)	  
•  Dividing	  views:	  by	  diﬀerent	  client-­‐side	  URLs.	  
•  Permissions	  for	  diﬀerent	  views:	  	  

– Possible	  outgoing	  post	  URL	  from	  those	  URLs	  

15	  

	  	  	  	  	  	  	  	  View	  Isola6on	  for	  Proxy	  

•  Isola6ng	  views	  at	  client	  side	  

– The	  same	  as	  implementa6on	  one.	  

Proxy	  

isolate.x.com	  

Redirect	  to	  
isolate.x.com	  

Request	  
content.x.com/y.php	  

<iframe	  src	  =	  
“content.x.com/y.php?
token	  =	  ***	  

Web	  
Server	  

isolate.x.com	  
content.x.com	  

16	  

	  	  	  	  	  	  	  	  Request	  Authen6ca6on	  for	  Proxy	  
•  Iden6fying	  requests	  from	  client-­‐side	  

– Referer	  header	  

•  Speciﬁed	  by	  the	  browser.	  A’ackers	  cannot	  change	  it.	  

•  Checking	  requests’	  permissions	  

– Checking	  posi6on:	  Proxy.	  
– Method:	  See	  if	  the	  view	  has	  the	  permission	  to	  

send	  the	  request.	  

17	  

	  	  	  	  	  	  	  	  	  	  Case	  Study	  for	  Real	  World	  	  	  	  	  	  

Worms	  

•  XSS	  Worm	  in	  Renren	  (Facebook	  in	  China)	  

Flash	  

insert	  malicious	  
scripts	  inside	  the	  web	  
page	  

18	  

Share	  on	  the	  
behalf	  of	  
current	  user	  

View	  One	  

share	  

click	  

Request	  
to	  share	  

View	  Two	  

19	  

•  Yamanner	  Worm	  

Click	  

Send	  emails	  to	  
all	  your	  contacts	  

20	  

Compose	  email	  

Diﬀerent	  
views	  

Email	  body	  

Send	  email	  

21	  

Evalua6on	  

•  Memory	  Overhead	  

– Normally,	  #	  of	  frames	  is	  not	  high	  since	  comments	  

can	  be	  hidden.	  

•  Rendering	  Time	  Overhead.	  

– Less	  than	  3.5%	  for	  Elgg	  

22	  

Conclusions	  

•  We	  cut	  oﬀ	  the	  propaga6on	  path	  of	  XSS	  worms	  

through	  view	  separa6on	  by	  psuedodomain	  
encapsula6on	  and	  request	  authen6ca6on.	  

•  We	  implement	  PathCu’er	  by	  proxy	  assistance	  

and	  server	  modiﬁca6on.	  

•  We	  evaluate	  PathCu’er	  on	  5	  real-­‐world	  
worms	  and	  2	  proof-­‐of-­‐concept	  worms.	  

23	  

	  

	  	  

	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  Thanks!	  

	  	  	  	  	  	  	  	  	  	  Ques6ons?	  

24	  

	  

	  

	  

	  	  

	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  Backup	  

25	  

	  	  	  	  	  	  	  	  	  	  	  Comparison	  with	  Exis6ng	  Works	  

Group	  Two:	  Worm	  preven6on	  

Group	  One:	  Mi6ga6ng	  XSS	  

Spectator	  

	  Sun	  et	  al.	  

	  Xu	  et	  al.	  

	  BluePrint	  

	  Plug-­‐in	  
Patches	  

	  Barth	  et	  al.	   	  Saxena	  et	  al.	   	  PathCu’er	  

Blocking	  Step	  	  
Polymorphic	  
Worm	  

4	  

Yes	  

3	  

	  No	  

4	  

	  Yes	  

1	  

	  Yes	  

1	  

	  Yes	  

1	  

	  Yes	  

2	  

	  Yes	  

1	  

	  Yes	  

	  Yes	  

Plug-­‐in	  	  XSS	  
Worms	  

Early-­‐Stage	  
Preven6on	  	  
Types	  of	  XSS	  
that	  Can	  Be	  
Defended	  

Deployment	  

Passive/Ac6ve	  
Monitoring	  	  

All	  
Server	  or	  
Proxy	  

No	  	  

Yes	  	  

No	  
Passively	  	  
Observable	  	  
Worms	  	  

	  Yes	  
Tradi6onal	  
Server-­‐side	  
XSS	  Worms	  	  

	  All	  

	  Yes	  

	  Yes	  

	  Yes	  
Content	  
Sniﬃng	  XSS	  
Worms	  

DOM-­‐Based	  
XSS	  Worms	  

All	  
Server	  or	  
Proxy	  

Client	  	  

Server	  

Server	  

Client	  

Client	  

Client	  

Ac6ve	  

Passive	  

Passive	  

Ac6ve	  

Ac6ve	  

Ac6ve	  

Ac6ve	  

Ac6ve	  

26	  

Limita6on	  

•  Need	  to	  know	  the	  seman6cs	  of	  web	  

applica6on	  

•  Only	  prevent	  worm	  behavior	  but	  not	  all	  the	  

damages	  

27	  

Exis6ng	  solu6ons	  

•  Spectator	  

But	  it	  can	  only	  detect	  the	  
worm	  when	  it	  spreads	  for	  a	  
while!	  

proxy	  

the	  same	  
injected	  tag	  

the	  same	  
injected	  tag	  

…	  	  if	  it	  reaches	  a	  threshold,	  
report	  it.	  

28	  

Exis6ng	  solu6ons	  

•  Esorics	  09	  

The	  same	  payload	  
Deny!	  

Payload:	  
abcdefg	  

Payload:	  
abcdefg	  

But	  	  
(1)	  Payload	  may	  change.	  
(2)	  Pure	  client-­‐side	  solu6on.	  

Firefox	  Plugin	  

malicious	  

benign	  

29	  

URL	  graph	  provided	  by	  the	  server	  or	  a	  
third-­‐party	  

blogX/index.php	  

blogX/post-­‐comment.php	  

blogX/op6ons.php	  
…	  
blogX/x.php	  

blogX/update-­‐
op6ons.php	  

blogY/index.php	  

30	  

