Node Failure Localization via Network Tomography ∗

Liang Ma

Ting He

IBM T. J. Watson Research
Yorktown Heights, NY, USA

liang.ma@ieee.org

IBM T. J. Watson Research
Yorktown Heights, NY, USA

the@us.ibm.com

Ananthram Swami

Army Research Laboratory

Adelphi, MD, USA

a.swami@ieee.org

Don Towsley

University of Massachusetts

Amherst, MA, USA

Kin K. Leung
Imperial College

London, UK

Jessica Lowe

DSTL

Salisbury, UK

towsley@cs.umass.edu

kin.leung@imperial.ac.uk

jjlowe@dstl.gov.uk

Abstract
We investigate the problem of localizing node failures in
a communication network from end-to-end path measure-
ments, under the assumption that a path behaves normally if
and only if it does not contain any failed nodes. To uniquely
localize node failures, the measurement paths must show dif-
ferent symptoms under diﬀerent failure events, i.e., for any
two distinct sets of failed nodes, there must be a measure-
ment path traversing one and only one of them. This condi-
tion is, however, impractical to test for large networks. Our
ﬁrst contribution is a characterization of this condition in
terms of easily veriﬁable conditions on the network topol-
ogy with given monitor placements under three families of
probing mechanisms, which diﬀer in whether measurement
paths are (i) arbitrarily controllable, (ii) controllable but
cycle-free, or (iii) uncontrollable (i.e., determined by the de-
fault routing protocol). Our second contribution is a char-
acterization of the maximum identiﬁability of node failures,
measured by the maximum number of simultaneous failures
that can always be uniquely localized. Speciﬁcally, we bound
the maximal identiﬁability from both the upper and the
lower bounds which diﬀer by at most one, and show that
these bounds can be evaluated in polynomial time. Finally,
we quantify the impact of the probing mechanism on the
capability of node failure localization under diﬀerent prob-
ing mechanisms on both random and real network topolo-
gies. We observe that despite a higher implementation cost,
probing along controllable paths can signiﬁcantly improve a
network’s capability to localize simultaneous node failures.

∗

Research was sponsored by the U.S. Army Research Laboratory and
the U.K. Ministry of Defence and was accomplished under Agreement
Number W911NF-06-3-0001. The views and conclusions contained in
this document are those of the authors and should not be interpreted
as representing the oﬃcial policies, either expressed or implied, of
the U.S. Army Research Laboratory, the U.S. Government, the U.K.
Ministry of Defence or the U.K. Government. The U.S. and U.K.
Governments are authorized to reproduce and distribute reprints for
Government purposes notwithstanding any copyright notation hereon.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright 2014 ACM 978-1-4503-3213-2/14/11 ...$15.00.
http://dx.doi.org/10.1145/2663716.2663723.

Categories and Subject Descriptors
C.2.3 [Computer-communication Networks]: Network
Operations—Network monitoring; G.2.2 [Discrete Math-
ematics]: Graph Theory—Network problems

Keywords
Network Tomography; Node Failure Localization; Identiﬁa-
bility Condition; Maximum Identiﬁability

1.

INTRODUCTION

Eﬀective monitoring of network performance is essential
for network operators in building a reliable communication
network that is robust against service disruptions. In order
to achieve this goal, the monitoring infrastructure must be
able to detect network misbehaviors (e.g., unusually high
loss/latency, unreachability) and localize the sources of the
anomaly (e.g., malfunction of certain routers) in an accu-
rate and timely manner. Knowledge of where problematic
network elements reside in the network is particularly use-
ful for fast service recovery, e.g., the network operator can
migrate aﬀected services and/or reroute traﬃc. However,
localizing network elements that cause a service disruption
can be challenging. The straightforward approach of directly
monitoring the health of individual elements is not always
feasible due to traﬃc overhead, access control, or lack of pro-
tocol support at internal nodes. Moreover, built-in monitor-
ing agents running on network elements cannot detect prob-
lems caused by misconﬁgured/unanticipated interactions be-
tween network layers, where end-to-end communication is
disrupted but individual network elements along the path
remain functional (a.k.a.
silent failures) [1]. These limi-
tations call for a diﬀerent approach that can diagnose the
health of network elements from the health of end-to-end
communications perceived between measurement points.

This diﬀerent approach is generally known as network to-
mography [2], where a canonical application is inferring in-
ternal network characteristics by measuring end-to-end per-
formance from a subset of nodes with monitoring capabil-
ities, referred to as monitors. Unlike direct measurement,
network tomography only relies on end-to-end performance
(e.g., path connectivity) experienced by data packets, thus
addressing issues such as overhead, lack of protocol support,
and silent failures. In cases where the network characteristic
of interest is binary (e.g., normal or failed ), the problem is
known as Boolean network tomography [3].

195In this paper, we study an application of Boolean network
tomography to localize node failures from measurements of
path states. Assuming that a measurement path is normal
if and only if all nodes on this path behave normally, we
formulate the problem as a system of Boolean equations,
where the unknown variables are the binary node states,
and the known constants are the observed states of mea-
surement paths. The goal of Boolean network tomography
is essentially to solve this system of Boolean equations.

Because the observations are coarse-grained (path nor-
mal/failed), it is usually impossible to uniquely identify node
states from path measurements. For example, if two nodes
always appear together in measurement paths, then upon
observing failures of all these paths, we can at most deduce
that one of these nodes (or both) has failed but cannot de-
termine which one. Observing that there are often multiple
explanations for given path failures, existing work mostly
focuses on ﬁnding the most probable explanation that in-
volves the minimum set of failed nodes. There is, however,
no guarantee that nodes in this minimum set have failed or
that nodes outside the set have not. Generally, to distin-
guish between two possible failure sets, there must exist a
measurement path that traverses one and only one of these
two sets. There is, however, a lack of understanding of what
this requires in terms of observable network settings such as
topology, monitor placement, and measurement routing.

In this paper, we consider two closely related problems:
In a network with any given monitor placement, (1) if the
number of simultaneous node failures is bounded by k, then
under what conditions can one uniquely localize failed nodes
from path measurements? (2) what is the maximum num-
ber of simultaneous node failures (i.e., the largest value
of k) that can be uniquely localized in this network? We
study both problems in the context of the following fami-
lies of probing mechanisms: (i) Controllable Arbitrary-path
Probing (CAP), where measurement paths are arbitrarily
controllable, (ii) Controllable Simple-path Probing (CSP),
where measurement paths are controllable but cycle-free,
and (iii) Uncontrollable Probing (UP), where measurement
paths are determined by the default routing protocol. These
probing mechanisms assume diﬀerent levels of control over
the routing of probing packets and are feasible in diﬀerent
network scenarios (see Section 2.3); answers to the above
two problems under these probing mechanisms thus provide
insights on how the level of control bestowed on the moni-
toring system aﬀects its capability in failure localization.

In the sequel, we assume that node failures are persistent,
i.e., a failed node remains failed throughout the measure-
ment process and leads to failures of all paths traversing it.

1.1 Related Work

Based on the number of simultaneously failed elements,
existing work can be broadly classiﬁed into single failure
localization and multiple failure localization. Single failure
localization assumes that multiple simultaneous failures hap-
pen with negligible probability. Under this assumption, [4,5]
propose eﬃcient algorithms for monitor placement such that
any single failure can be detected and localized. To improve
the resolution in characterizing failures, range tomography
in [6] not only localizes the failure, but also estimates its
severity (e.g., congestion level). These works, however, ig-
nore the fact that multiple failures occur more frequently
than one may imagine [7]. In this paper, we consider the
general case of localizing multiple failures.

Multiple failure localization often faces inherent uncer-
tainty in the number of failures. Most existing works ad-
dress this uncertainty by attempting to ﬁnd the minimum
set of network elements whose failures can explain the ob-
served path states. Under the assumption that failures are
low-probability events, this approach generates the most
probable failure set among all possibilities. Using this ap-
proach, [8,9] propose solutions for networks with tree topolo-
gies, which are later extended to general topologies by [1].
Similarly, [11] proposes to localize link failures by mini-
mizing false positives; however, it cannot guarantee unique
failure localization.
In a Bayesian formulation, [12] pro-
poses a two-staged solution which ﬁrst estimates the failure
(loss rate above threshold) probabilities of diﬀerent links
and then infers the most likely failure set for subsequent
measurements. Augmenting path measurements with (par-
tially) available control plane information (e.g., routing mes-
sages), [13,14] propose a greedy heuristic for troubleshooting
network unreachability in multi-AS (Autonomous System)
networks that has better accuracy than benchmarks using
only path measurements.

Little is known when we insist on uniquely localizing net-
work failures. Given a set of monitors known to uniquely
localize failures on paths between themselves, [15] develops
an algorithm to remove redundant monitors such that all
failures remain identiﬁable. If the number of failed links is
upper bounded by k and the monitors can probe arbitrary
cycles or paths containing cycles, [16] proves that the net-
work must be (k + 2)-edge-connected to identify any failures
up to k links using one monitor, which is then used to derive
requirements on monitor placement for general topologies.
However, the condition remains unknown if the failures are
associated with nodes instead of links, or constraints (e.g.,
cycle-free) are imposed on measurement paths by the rout-
ing protocols (see discussions in Section 4.1 for why the re-
sults of [16] do not apply to our problem). In this paper,
we investigate the fundamental relationships between node
failure identiﬁability and explicit network settings such as
topology, placement of monitors, and probing mechanism,
with focus on developing eﬃcient algorithms to characterize
the capability of failure localization under given settings.

1.2 Summary of Contributions

We study, for the ﬁrst time, the fundamental capability
of a network with arbitrarily given monitor placements to
uniquely localize node failures from binary end-to-end mea-
surements between monitors. Our contributions are ﬁve-
fold:

1) We propose a novel measure, referred to as maximum
identiﬁability, to characterize a network’s capability in fail-
ure localization as the maximum number of simultaneous
node failures it can uniquely localize.

2) We establish abstract necessary/suﬃcient conditions
for uniquely localizing a bounded number of failures, which
are applicable to all probing mechanisms.

3) We translate the abstract conditions into more concrete
conditions in terms of network topology, placement of mon-
itors, and measurement paths under three diﬀerent probing
mechanisms (CAP, CSP, and UP), which can be tested in
polynomial time.

4) We show that a special relationship between the above
necessary/suﬃcient conditions leads to tight upper and lower
bounds on the maximum identiﬁability that narrows its value
to at most two consecutive integers. The bounds are polynomial-

196Table 1: Graph-related Notations

Symbol Meaning

V , L set of nodes/links

M, N

N (M )

set of monitors/non-monitors (M ∪ N = V ,
µ := |M |, σ := |N |)
set of non-monitors that are neighbors of at
least one monitor in M

G − L′

G + L′

L(V, W ) L(V, W ) = {link vw : ∀v ∈ V, w ∈ W, v 6= w}
delete links: G − L′ = (V, L \ L′), where “\” is
setminus
add links: G + L′ = (V, L ∪ L′), where the end-
points of links in L′ must be in V
delete nodes: G−V ′ = (V \V ′, L\L(V ′)), where
L(V ′) is the set of links incident to nodes in V ′
add nodes: G + V ′ = (V ∪ V ′, L)

G − V ′

G + V ′

time computable under CAP and CSP; while they are NP-
hard to compute under UP, we give a greedy heuristic to
compute a pair of relaxed bounds that frequently coincide
with the original bounds in practice.

5) We extensively compare the maximum identiﬁability
under diﬀerent probing mechanisms on random and real
topologies. Our comparison shows that although control-
lable probing, especially CAP, is more diﬃcult to implement,
it signiﬁcantly improves the capability of failure localization
in terms of maximum identiﬁability.

Note that the proposed model captures network state at a
small time scale (time for conducting probing) and all above
results are valid as long as node failures are persistent dur-
ing probing. Moreover, we have limited our observations to
binary states (normal/failed) of measurement paths.
It is
possible in some networks to obtain extra information from
probes, e.g., rerouted paths after a default path fails, in
which case our solution provides lower bounds on the max-
imum identiﬁability. Furthermore, we do not make any as-
sumption on the distribution or correlation of node failures
across the network. In some application scenarios (e.g., dat-
acenter networks), failures of some nodes may be correlated
(e.g., all routers sharing the same power/chiller). We leave
the characterization of maximum identiﬁability in the pres-
ence of such additional information to future work.

The rest of the paper is organized as follows. Section 2
formulates the problem. Section 3 presents abstract condi-
tions for identifying node failures, followed by concrete, veri-
ﬁable conditions for speciﬁc families of probing mechanisms
in Section 4. Based on the derived conditions, Section 5
presents bounds on the maximum identiﬁability that can be
eﬃciently evaluated. The bounds are evaluated on various
synthetic/real topologies in Section 6 to study the impact
of the probing mechanism on the capability of node failure
localization. Finally, Section 7 concludes the paper.

2. PROBLEM FORMULATION

2.1 Models and Assumptions

We assume that the network topology is known and can
be modeled as an undirected graph1 G = (V, L), where V
In G, the number
and L are the sets of nodes and links.
of neighbors of node v is called the degree of v. Note that
graph G can represent a logical topology where each node

in G corresponds to a physical subnetwork. Without loss of
generality, we assume G is connected, as diﬀerent connected
components have to be monitored separately.

A subset of nodes M (M ⊆ V ) are monitors that can ini-
tiate and collect measurements. The rest of the nodes, de-
noted by N := V \ M , are non-monitors. Let µ := |M | and
σ := |N | denote the numbers of monitors and non-monitors.
We assume that monitors do not fail during the measure-
ment process, as failed monitors can be directly detected and
ﬁltered out within the monitoring system. Non-monitors, on
the other hand, may fail, and a failure event may involve si-
multaneous failures of multiple non-monitors. Depending on
the adopted probing mechanism, monitors can measure and
determine the states of nodes by sending probes along cer-
tain paths. Let P denote the set of all possible measurement
paths under a given probing mechanism; for given G and
M , diﬀerent probing mechanisms can lead to diﬀerent sets
of measurement paths, which will be speciﬁed later. We use
node state (path state) to refer to the state, failed or normal,
of nodes (paths), where a path fails if and only if at least
one node on the path fails. To avoid trivial cases, we assume
that each non-monitor is traversed by at least one measure-
ment path, as otherwise the non-monitor is unobservable to
the monitoring system and has to be excluded in failure lo-
calization. Table 1 summarizes graph-related notations used
in this paper (following the convention of [10]).

Let w = (W1, . . . , Wσ)T be the binary column vector of
the states of all non-monitors and c = (C1, . . . , Cγ)T the
binary column vector of the states of all measurement paths.
For both node and path states, 0 represents “normal” and
1 represents “failed”. We can relate the path states to the
node states through the following Boolean linear system:

R ⊙ w = c,

(1)

where R = (Rij) is a γ × σ measurement matrix , with
each entry Rij ∈ {0, 1} denoting whether non-monitor vj is
present on path Pi (1: yes, 0: no), and “⊙” is the Boolean
matrix product, i.e., Ci = ∨σ
j=1(Rij ∧ Wj). The goal of
Boolean network tomography is to invert this Boolean linear
system to solve for w given R and c. Intuitively, node fail-
ures are identiﬁable if and only if (1) has a unique solution.

2.2 Deﬁnitions

Let a failure set F be a set of non-monitors (F ⊆ N ) that
may fail simultaneously. The challenge in failure localization
is that the solution to (1) is usually not unique, i.e., there
are multiple possible failure sets leading to the observed path
states. To reduce ambiguity, we limit the solution space to a
predetermined collection Ψ of likely failure sets and only seek
to ensure uniqueness within this collection. Let PF denote
the set of all measurement paths aﬀected by a failure set F
(i.e., traversing at least one node in F ). We now formally de-
ﬁne the notion of identiﬁability in node failure localization.

Definition 1. Given a network G, a set of measurement

paths P , and a collection Ψ of likely failure sets in G:

1. Two failure sets F1 and F2 in Ψ can be distinguished
from each other if and only if PF1 6= PF2 , i.e., ∃ a path
that traverses one and only one of F1 and F2.

2. In Ψ, failure set F is identiﬁable if and only if F can

be distinguished from every other failure set in Ψ.

3. Ψ is identiﬁable if and only if every failure set in Ψ is

1We use the terms network and graph interchangeably.

identiﬁable.

197It is clear from the deﬁnition that whether a failure set
is identiﬁable or not depends on the collection of potential
failure sets it is compared against. Furthermore, Ψ being
identiﬁable means that we can always uniquely localize node
failures as long as the set of failed nodes falls into Ψ. Since
a failure set may contain more than one node, we deﬁne
the following notions to characterize network capability in
localizing simultaneous node failures.

Definition 2. Given a network G and a set of measure-

ment paths P in G:

1. We say G is k-identiﬁable (0 ≤ k ≤ σ) if the collection
Ψ of all subsets of N with cardinality bounded by k is
identiﬁable, i.e., any failure of up to k nodes can be
uniquely localized.

2. The maximum identiﬁability of G, denoted by Ω(G), is
the maximum value of k such that G is k-identiﬁable.

The maximum identiﬁability of a network characterizes
its capability to localize failures in the worst case. That is,
no matter where the failures occur, as long as the number of
failed nodes is bounded by Ω, we can uniquely localize the
failures from observed path states. Note that it is possible to
uniquely localize a larger number of failures when they occur
at a particular set of nodes, but localization cannot be guar-
anteed if the failures occur elsewhere. Both k-identiﬁability
and maximum identiﬁability are deﬁned with respect to a
given P , which will be clear from the context.

2.3 Classiﬁcation of Probing Mechanisms

Given the topology G and the monitor locations M , the
probing mechanism plays a crucial role in failure localization
by determining the set of measurement paths P . Depending
on the ﬂexibility of probing and the cost of deployment, we
consider three families of probing mechanisms:

1. Controllable Arbitrary-path Probing (CAP): P includes
any path/cycle, allowing repeated nodes/links, as long
as each path/cycle starts and ends at monitors.

2. Controllable Simple-path Probing (CSP): P includes
any simple path between distinct monitors, not includ-
ing repeated nodes.

3. Uncontrollable Probing (UP): P is the set of paths
between monitors determined by the routing protocol
used by the network, not controllable by the monitors.
In particular, although CAP allows probes to traverse each
node/link an arbitrary number of times, it suﬃces for probes
to traverse each link at most once in either direction for the
sake of localizing node failures.

These probing mechanisms clearly provide decreasing ﬂex-
ibility to the monitors and therefore decreasing capability to
localize failures. Further, they also oﬀer decreasing deploy-
ment cost. At the IP layer, CAP is feasible only if (strict)
source routing (an IP option) [17] is enabled at all non-
monitors, which allows them to modify the source and the
destination addresses in packet headers hop by hop to probe
a path prescribed by the monitor initiating the measurement
probe2. If implemented at the application layer (e.g., to lo-
calize failures in overlay networks), CAP requires equivalent
“source routing” to be supported by the application. Simi-
larly, CSP is feasible under source routing (or equivalent ca-
pability at the application layer). It is also feasible under an
2The probe can follow the reverse path to return to the
original monitor, thus eﬀectively probing any path with at
least one end at a monitor.

v1

m2

m1

v3

m3

v2

v4

Figure 1: Sample network with three monitors: m1,
m2, and m3.

emerging networking paradigm called software-deﬁned net-
working (SDN) [18], where monitors can instruct the SDN
controller to set up arbitrary cycle-free paths for the prob-
ing traﬃc. Note that the cycle-free constraint is crucial in
SDN, as data forwarding is performed in a distributed man-
ner by switches according to forwarding tables conﬁgured
by the controller during route setup, which will encounter
forwarding loops if the path has cycles. In contrast, UP only
requires basic data forwarding and is generally feasible.

In this paper, we quantify how the ﬂexibility of probing
schemes aﬀects the network’s capability in failure localiza-
tion. Although concrete results are only provided for the
above families of probing mechanisms, our framework and
our abstract identiﬁability conditions (see Section 3) can
also be used to evaluate the failure localization capability of
other probing mechanisms.

2.4 Objective

Given a network topology G, a set of monitors M , and a
probing mechanism (CAP, CSP, or UP), we seek to answer
the following closely-related questions: (i) Given a bound
k on the number of simultaneous failures, can we uniquely
localize up to k failed nodes from observed path states? (ii)
What is the maximum number of simultaneous failures we
can localize? Clearly, answers to these questions require
algorithms that can eﬃciently test for k-identiﬁability and
determine the maximum identiﬁability.

2.5 Illustrative Example

Consider the sample network in Fig. 1 with three moni-
tors (m1–m3) and four non-monitors (v1–v4). Clearly, the
monitors’ capability to identify failures of the non-monitors
depends on the probing mechanism, i.e., which paths are
measurable between the monitors. In this example, we will
examine this capability and how it can be improved by re-
laxing constraints on measurement paths. Under UP, sup-
pose that the default routing protocol only allows the mon-
itors to probe the following paths: P1 = m1v2v1m2, P2 =
m1v2v4m3, and P3 = m2v3m3, which form a measurement
matrix RUP:

P1 = m1v2v1m2

P2 = m1v2v4m3

⇛ R

UP

=

P3 = m2v3m3

 

W1 W2 W3 W4
0
1
0

1
0
0

1
1
0

0
0
1

!

,

(2)

where RUP
ij = 1 if and only if node vj is on path Pi. Then we
have RUP⊙w = c, where c is the binary vector of path states
observed at the destination monitors. Based on Deﬁnition 1,
we can verify that any single node failure is identiﬁable, as
for every two non-monitors, there is a measurement path
traversing one and only one of them. However, these three
paths cannot identify simultaneous failures of two nodes.
This is because if node v2 fails, then we cannot determine if
v1 (or v4) fails or not. Identiﬁability can be improved if more
measurement paths are allowed. For example, under CSP,

198besides the three paths in (2), we can probe three additional
paths: P4 = m1v2v3m2, P5 = m1v1m2, and P6 = m2v4m3,
yielding an expanded measurement matrix in (3):

does not “contain” any other column3 [20]. In our problem,
the existence of a disjunct testing matrix translates into a
suﬃcient identiﬁability condition as follows.

P1 = m1v2v1m2

P2 = m1v2v4m3

P3 = m2v3m3

P4 = m1v2v3m2

P5 = m1v1m2

P6 = m2v4m3

⇛ R

CSP =

W1 W2 W3 W4

1
0
0
0
1
0




1
1
0
1
0
0

0
0
1
1
0
0

0
1
0
0
0
1




UP

) R

(3)
Using the six paths in (3), we can identify up to three
failed nodes, a notable improvement over UP. However, if
v1, v3, and v4 all fail, then there is no measurement path
under CSP that can be used to determine the state of v2.
Nevertheless, if CAP is supported, then we can send probes
along a cycle P7 = m1v2m1. In conjunction with the paths
in (3), this yields the measurement matrix in (4):

P5 = m1v1m2

P7 = m1v2m1

P3 = m2v3m3

P6 = m2v4m3

⇛ R

CAP =




W1 W2 W3 W4
0
0
0
1

1
0
0
0

0
1
0
0

0
0
1
0




(4)

Since the paths in (4) can independently determine the
state of each non-monitor, CAP achieves full identiﬁability
for the network in Fig. 1.

This example shows that in addition to the network topol-
ogy and the monitor placement, the probing mechanism also
signiﬁcantly aﬀects a network’s capability to localize failures.
In the rest of the paper, we will study this relationship both
theoretically and algorithmically.

3. ABSTRACT IDENTIFIABILITY

CONDI-TIONS

The deﬁnitions of identiﬁability in Deﬁnitions 1 and 2 are
based on the enumeration of all possible failure scenarios
and does not directly allow eﬃcient testing and characteri-
zation of identiﬁability. To address this issue, we need more
explicit identiﬁability conditions that can support eﬃcient
algorithm design. In this section, we will establish abstract
suﬃcient/necessary conditions for k-identiﬁability under an
arbitrary probing mechanism, which will later be developed
into more concrete conditions for speciﬁc families of probing
mechanisms.

Our suﬃcient condition is inspired by a result known in
a related ﬁeld called combinatorial group testing [19].
In
short, group testing aims to ﬁnd abnormal elements in a
given set by running tests on subsets of elements, each test
indicating whether any element in the subset is abnormal.
This is analogous to our problem where abnormal elements
are failed nodes and tests are conducted by probing mea-
surement paths. A subtle but critical diﬀerence is that in
our problem, the subsets of elements that can be tested to-
gether are limited by the set of measurement paths P , which
are in turn limited by the topology, probing mechanism, and
placement of monitors.

Most existing solutions for (nonadaptive) group testing
aim at constructing a disjunct testing matrix. Speciﬁcally,
a testing matrix R is a binary matrix, where Ri,j = 1 if
and only if element j is included in the i-th test. Then R
is called k-disjunct if the Boolean sum of any k columns

Lemma 3

(Abstract sufficient condition). Any set

of up to k failed nodes is identiﬁable if for any non-monitor
v and failure set F with |F | ≤ k (v 6∈ F ), there is a mea-
surement path going through v but no node in F .

Proof. Consider two distinct failure sets F and F ′, each
containing no more than k nodes. There exists a node v in
only one of these sets; suppose v ∈ F ′ \ F . By the condi-
tion in the lemma, ∃ a path p traversing v but not F , thus
distinguishing F from F ′.

Our necessary condition is based on the simple observation
that to identify k failures, we must be able to identify the
remaining k − s (1 ≤ s ≤ k − 1) failures after identifying
and removing s of the failed nodes from the network, which
leads to the following necessary condition.

Lemma 4

(Abstract necessary condition). Any set
of up to k failed nodes is identiﬁable only if for any set V ′ of
non-monitors with |V ′| < k, any set of up to k − |V ′| node
failures is identiﬁable in G − V ′.

Proof. Suppose that ∃ two non-empty sets V ′ and V ′′
of non-monitors, with V ′ ∩ V ′′ = ∅ and |V ′| + |V ′′| = k,
such that V ′′ is not identiﬁable in G − V ′. Then the union
F = V ′ ∪ V ′′ must be unidentiﬁable in G, as even if we have
identiﬁed failures in V ′, we still cannot identify the rest of
the failures.

Although neither of the above conditions directly lead to
eﬃcient testing algorithms, the signiﬁcance of these condi-
tions is that they are valid without relying on the probing
mechanism being used. Moreover, we will show in the next
section that these conditions provide theoretical foundations
for eﬃcient testing under speciﬁc families of probing mecha-
nisms (CAP, CSP, and UP). Eﬃcient testing for other fami-
lies of probing mechanisms can also be explored using these
abstract conditions.

4. VERIFIABLE IDENTIFIABILITY

CON-DITIONS

In this section, we develop the abstract conditions in Sec-
tion 3 into concrete conditions suitable for eﬃcient testing
for the three families of probing mechanisms in Section 2.3.

4.1 Conditions under CAP

Under CAP, we can essentially “ping” any node from a
monitor along any path. In the face of failures, this implies
that a monitor’s ability to determine the state of a node
depends on its connectivity to the monitors after removing
nodes that are known/hypothesized to have failed. This
observation allows us to translate the abstract conditions
in Section 3 into more concrete identiﬁability conditions as
follows.

Theorem 5

(k-identifiability under CAP). Network

G is k-identiﬁable under CAP:

a) if for any set V ′ of up to k non-monitors, each con-

nected component in G − V ′ contains a monitor;

3That is, for any subset of k column indices S and any other
column index j /∈ S, there exists a row index i such that
Ri,j = 1 and Ri,j ′ = 0 for all j′ ∈ S.

199N\N(M)

N(M)

M

N\N(M)

N(M)

N\N(M)

N(M)

m1
…

mi

…

μm

v1

v2

v3

v4

G

(a)

v2

v3

v1

v4

m’

G*

(b)

m’

v2

v3

v1

v4

G

mi

(c)

Figure 2: Auxiliary graphs: (a) Original graph G;
(b) G∗ of G; (c) Gmi of G w.r.t. monitor mi.

b) only if for any set V ′ of up to k −1 non-monitors, each

connected component in G − V ′ contains a monitor.

Proof. Suppose condition (a) holds, and consider a can-
didate failure set V ′ and a non-monitor v (v 6∈ V ′). Since
the connected component in G − V ′ that contains v has a
monitor, there must exist a path connecting v to a monitor
that does not traverse any node in V ′. Following this path
from the monitor to v and then back to the monitor then
gives a path measurable under CAP that satisﬁes Lemma 3.
Thus, condition (a) is suﬃcient.

Suppose condition (b) does not hold, i.e., there exists a
non-monitor v that is disconnected from all monitors in G −
V ′ for a set V ′ of up to k − 1 non-monitors (v 6∈ V ′). Then if
nodes in V ′ fail, no remaining measurement path can probe
v, and thus it is impossible to determine whether v has failed
or not. This violates the condition in Lemma 4, and thus
condition (b) is necessary.

Simple as they look, these conditions still cannot be tested
eﬃciently because they enumerate over a combinatorial num-
ber of sets V ′. Fortunately, we are able to reduce them into
explicit conditions on the vertex-connectivity of a related
topology, which can then be tested in polynomial time. We
use the following notions from graph theory.

Definition 6.

[10] Graph G of |V | vertices is said to be
k-vertex-connected if k ≤ |V | − 1 and deleting any subset
of up to k − 1 vertices does not disconnect G. The vertex-
connectivity of G, denoted by δ(G), is the maximum k such
that G is k-vertex-connected.

In our problem, the key observation is that requiring each
connected component in G−V ′ to contain a monitor is equiv-
alent to requiring each connected component in G − M − V ′
(i.e., after removing all monitors) to contain a neighbor of a
monitor. Thus, if we add virtual links between these neigh-
bors, the resulting graph G − M − V ′ + L(N (M ), N (M ))
should be connected. However, this does not mean the con-
ditions are equivalent, because if G − M − V ′ is already
connected, G − M − V ′ + L(N (M ), N (M )) will certainly
be connected but G − M − V ′ may not contain any neigh-
bors of monitors. This special case can be avoided by in-
troducing a virtual monitor m′ connected to all neighbors
of monitors via virtual links, resulting in an auxiliary graph

G∗ := G − M + {m′} + L(cid:0)N (M ), N (M )(cid:1) + L(cid:0){m′}, N (M )(cid:1)

as illustrated in Fig. 2 (b). We will show that requiring
at least one monitor per connected component in G − V ′ is
equivalent to requiring G∗ − V ′ to be connected.

The beauty of this new condition is that it reduces the
tests over all possible V ′ to a single test of the vertex-
connectivity of G∗, as stated below.

Lemma 7. Each connected component in G − V ′ contains
a monitor for any set V ′ of up to s (s ≤ σ −1) non-monitors
if and only if G∗ is (s + 1)-vertex-connected.

Proof. We ﬁrst show the equivalence between the ﬁrst
condition and the connectivity of G∗ − V ′. If the ﬁrst con-
dition holds, then each connected component in G − M − V ′
contains a neighbor of a monitor. Since these neighbors are
connected with each other and also with m′ in G∗ − V ′, G∗ −
V ′ is connected. If the ﬁrst condition is violated, i.e., there
exists a connected component in G − M − V ′ without any
neighbor of any monitor, then this component must be dis-
connected from m′, and hence G∗ −V ′ must be disconnected.
We then show that requiring G∗ − V ′ to be connected for
any V ′ of up to s non-monitors is equivalent to requiring it
to be connected for any V ′ of up to s nodes in G∗, including
m′, i.e., requiring G∗ to be (s + 1)-vertex-connected. It suf-
ﬁces to show that G∗ − V ′ being connected for any V ′ of up
to s non-monitors implies the connectivity of G∗ −{m′}−V ′′
for any V ′′ of up to s − 1 non-monitors. Fixing a V ′′ of up
to s−1 non-monitors, we assert that each connected compo-
nent of G∗ −{m′}−V ′′ must contain a neighbor of a monitor,
as otherwise G∗ − V ′′ will be disconnected. Since all these
neighbors are connected via virtual links, G∗ − {m′} − V ′′
must be connected.

Lemma 7 allows us to rewrite the identiﬁability conditions

in Theorem 5 in terms of the vertex-connectivity of G∗.

Corollary 8. Network G is k-identiﬁable under CAP:
a) if G∗ is (k + 1)-vertex-connected (k ≤ σ − 1);
b) only if G∗ is k-vertex-connected (k ≤ σ).

A special case not covered by this corollary is the case of
k = σ (the total number of non-monitors), i.e., if we wish to
know whether the failure of any subset of non-monitors is
identiﬁable. We address this case separately in the following
proposition.

Proposition 9. Network G is σ-identiﬁable under CAP
if and only if each non-monitor is the neighbor of a monitor.

Proof. If each non-monitor has a monitor as a neighbor,
then their states can be determined independently through
1-hop probing, and hence any failure set is identiﬁable. On
the other hand, if there exists a non-monitor v that is only
reachable by monitors via other non-monitors, then the state
of v cannot be determined in the case that all the other non-
monitors fail, and hence G is not σ-identiﬁable.

Discussion: A previous study [16] has provided necessary
and suﬃcient conditions for a related problem of link failure
localization, under the assumption that probes can traverse
paths/cycles with possibly repeated nodes but no repeated
links. Although the problem is analogous to node failure
localization, the results of [16] do not apply to our problem4.

Testing algorithm: A key advantage of the newly de-
rived conditions over the abstract conditions in Section 3 is
that they can be tested eﬃciently. Given a value of k, we

4Solving node failure localization using the results of [16]
requires a topology transformation that maps each node to
a link while maintaining adjacency between nodes and fea-
sibility of measurement paths. To our knowledge, no such
transformation exists whose output satisﬁes the assumptions
of [16] (undirected graph, measurement paths not containing
repeated links).

200can evaluate the vertex-connectivity of G∗, δ(G∗), by the al-
gorithm for determining network vertex connectivity in [21]
in O(σ3.75) time and compare the result with k + 1 or k to
test the conditions in Corollary 8.

monitor m as illustrated in Fig. 2 (c), where m′ is again a
virtual monitor. We will show that the last condition is
equivalent to requiring Gm − F to be connected, and thus
the following holds.

4.2 Conditions under CSP

Under CSP, we restrict measurement paths P be the set of
simple paths between monitors, i.e., paths starting/ending
at distinct monitors and containing no cycles. As in the case
of CAP, our goal here is again to translate the abstract con-
ditions in Section 3 into concrete suﬃcient/necessary con-
ditions that can be eﬃciently veriﬁed. We ﬁrst give the
following result analogous to Theorem 5.

Theorem 10

(k-identifiability under CSP). Network

G is k-identiﬁable under CSP:

a) if for any node set V ′, |V ′| ≤ k + 1, containing at
most one monitor, each connected component in G −V ′
contains a monitor;

b) only if for any node set V ′, |V ′| ≤ k, containing at
most one monitor, each connected component in G −V ′
contains a monitor.

Proof. Suppose condition (a) holds, and consider a can-
didate failure set F , |F | ≤ k and a non-monitor v 6∈ F . We
argue that v must have two simple vertex disjoint paths to
monitors in G − F , and thus concatenating these paths pro-
vides a monitor-monitor simple path that traverses v but not
F , satisfying the abstract suﬃcient condition in Lemma 3.
Indeed, if such paths do not exist, i.e., ∃ a (monitor or non-
monitor) node w (w 6= v) that resides on all paths from v
to monitors in G − F , then v will be disconnected from all
monitors in G − F − {w}, i.e., the connected component con-
taining v in G − V ′, where V ′ = F ∪ {w}, has no monitor,
contradicting condition (a).

Suppose condition (b) does not hold, i.e., there exists a
non-monitor v, a (monitor or non-monitor) node w, and a
set of up to k − 1 non-monitors F (v 6= w and v, w 6∈ F )
such that the connected component containing v in G − V ′,
V ′ = F ∪ {w}, contains no monitor. Then any path from
v to monitors in G − F must traverse w, which means no
monitor-monitor simple path in G −F will traverse v (as any
monitor-monitor path traversing v must form a cycle at w).
This violates the necessary condition in Lemma 4 because if
node v fails, the failure cannot be identiﬁed in G − F .

As expected, due to the restriction to simple paths, the
identiﬁability conditions in Theorem 10 are stronger than
those in Theorem 5. As with Theorem 5, the conditions
in Theorem 10 do not directly lead to eﬃcient tests, and
we again seek equivalent conditions in terms of topological
properties. Each condition in the form of Theorem 10 (a–b)
covers two cases: (i) V ′ only contains non-monitors; (ii) V ′
contains a monitor and |V ′| − 1 non-monitors. The ﬁrst case
has been converted to a vertex-connectivity condition on an
auxiliary topology G∗ by Lemma 7; we now establish a sim-
ilar condition for the second case using similar arguments.
Fix a set V ′ = F ∪ {m}, where m is a monitor in M and
F a set of non-monitors. Again, the key observation is that
each connected component in G − V ′ containing a monitor
is equivalent to each connected component in G − M − F
containing a neighbor of a monitor other than m (i.e., a node
in N (M \ {m})). To capture this, we introduce another

auxiliary graph Gm := G − M + {m′} + L(cid:0)N (M \ {m}),
N (M \{m})(cid:1)+L(cid:0){m′}, N (M \{m})(cid:1) with respect to (w.r.t.)

Lemma 11. The following two conditions are equivalent:
(1) Each connected component in G − V ′ contains a mon-
itor for any set V ′ consisting of monitor m (m ∈ M )
and up to s (s ≤ σ − 1) non-monitors;

(2) Gm is (s + 1)-vertex-connected.

Proof. The proof is similar to that of Lemma 7. If the
ﬁrst condition holds, then each connected component in G −
M −F for F := V ′\{m} contains a node in N (M \{m}), and
thus Gm − F is connected. If the ﬁrst condition is violated,
then there is a connected component in G − M − F that does
not contain any node in N (M \{m}). This component must
be disconnected from m′ in Gm − F , and thus Gm − F must
be disconnected. Hence, the ﬁrst condition is equivalent
to Gm − F being connected for any set F of up to s non-
monitors. Moreover, Gm − F being connected for any set F
of up to s non-monitors implies that Gm − {m′} − F ′ (m′
is the virtual monitor in Gm) is connected for any F ′ of up
to s − 1 non-monitors, because otherwise Gm − F ′ will be
disconnected. Therefore, the ﬁrst condition is equivalent to
Gm − F being connected for any set F of up to s nodes in
Gm, i.e., the ﬁrst and second conditions in Lemma 11 are
equivalent.

Based on Lemmas 7 and 11, we can rewrite Theorem 10

as follows.

Corollary 12. Network G is k-identiﬁable under CSP:
a) if G∗ is (k + 2)-vertex-connected, and Gm is (k + 1)-
vertex-connected for each monitor m ∈ M (k ≤ σ − 2);
b) only if G∗ is (k + 1)-vertex-connected, and Gm is k-
vertex-connected for each monitor m ∈ M (k ≤ σ − 1).

Special cases left out by this corollary are the cases of k =
σ and k = σ − 1, which are addressed separately as follows.

Proposition 13. Network G is σ-identiﬁable under CSP
if and only if each non-monitor has at least two monitors as
neighbors.

Proof. If each non-monitor has at least two monitors
as neighbors, then their states can be determined indepen-
dently by cycle-free 2-hop probing between monitors, and
thus the network is σ-identiﬁable. On the other hand, sup-
pose ∃ a non-monitor v with zero or only one monitor neigh-
bor. Then ∄ simple paths going through v without travers-
ing another non-monitor, and hence the state of v cannot be
determined if all the other non-monitors fail.

Proposition 14. Network G is (σ − 1)-identiﬁable under
CSP if and only if all but one non-monitor, denoted by v,
have at least two monitors as neighbors, and v either has (i)
two or more monitors as neighbors, or (ii) one monitor and
all the other non-monitors (i.e., N \ {v}) as neighbors.

Proof. a) Necessity: Suppose that G is (σ−1)-identiﬁable
under CSP. If it is also σ-identiﬁable, then each non-monitor
must have at least two monitors as neighbors according to
Proposition 13. Otherwise, we have Ω(G) = σ − 1. In this
case, ∃ at least one non-monitor, denoted by v, with at most
one monitor neighbor. Let N (v) denote all neighbors of v

201including monitors. Suppose that v has λ neighbors (i.e.,
|N (v)| = λ). Then there are two cases:
(i) N (v) con-

tains a monitor, denoted by em; (ii) all nodes in N (v) are
non-monitors. In case (i), the sets F1 = N (v) \ {em} and

F2 = F1 ∪ {v} are not distinguishable because ∄ monitor-to-
monitor simple paths traversing v but not nodes in F1. In
case (ii), the sets F1 = N (v) \ {w} (where w is an arbitrary
node in N (v)) and F2 = F1 ∪ {v} are not distinguishable
as all monitor-to-monitor simple paths traversing v must go
through at least one node in F1. Based on (i–ii), we conclude
that Ω(G) ≤ λ − 1, where λ is the degree of any non-monitor
with at most one monitor neighbor. For Ω(G) = σ − 1, we
must have λ ≥ σ, which can only be satisﬁed if all such non-
monitors have one monitor and all the other non-monitors
as neighbors. Moreover, if there are two such non-monitors
v and u, then the sets F ∪{v} and F ∪{u}, where F = N \{v,
u}, are not distinguishable as all monitor-to-monitor simple
paths traversing v must go through F or u and vice versa.
Therefore, such non-monitor must be unique.

b) Suﬃciency: If each non-monitor has at least two moni-
tors as neighbors, then G is σ-identiﬁable (hence also (σ−1)-
identiﬁable) according to Proposition 13. If all but one non-
monitor v have at least two monitors as neighbors, and v has

one monitor em and all the other non-monitors (i.e., N \ {v})

as neighbors, then for any two failure sets F1 and F2 with
|Fi| ≤ σ − 1 (i = 1, 2), there are two cases: (i) F1 and F2
diﬀer on a non-monitor other than v; (ii) F1 and F2 only
diﬀer on v. In case (i), since the states of all non-monitors
other than v can be independently determined, F1 and F2
are distinguishable. In case (ii), suppose that F1 = F ∪ {v}
and F2 = F for F ⊆ N \ {v}. Since |F1| ≤ σ − 1, |F | ≤ σ − 2
and ∃ a non-monitor w ∈ (N \ {v}) \ F . We know that v
is a neighbor of w (as v is a neighbor of all the other non-
monitors) and w is a neighbor of a monitor m other than

em (as it has at least two monitor neighbors). Thus, emvwm

is a monitor-to-monitor simple path traversing v but not F ,
whose measurement can distinguish F1 and F2. Therefore,
G is (σ − 1)-identiﬁable under CSP.

Testing algorithm: Similar to the case of CAP, we can
use the algorithm in [21] to compute the vertex-connectivities
of the auxiliary graphs G∗ and Gm (∀m ∈ M ), and then com-
pare the results with k + 2 and k + 1 (or k + 1 and k) to test
the conditions in Corollary 12 for any given k. The overall
complexity of the test is O(µσ3.75).

4.3 Conditions under UP

Under UP, monitors have no control over the paths be-
tween monitors, and the set of measurement paths P is lim-
ited to the paths between monitors predetermined by the
network’s native routing protocol. In contrast to the pre-
vious cases (CAP, CSP), identiﬁability under UP can no
longer be characterized in terms of topological properties.
We can, nevertheless, establish conditions more explicit than
the abstract conditions in Section 3. The idea is to examine
how many non-monitors need to be removed to disconnect
all measurement paths traversing a given non-monitor v. If
the number is suﬃciently large (greater than k), then we
can still infer the state of v from some measurement path
when a set of other non-monitors fail; if the number is too
small (smaller than or equal to k − 1), then we will not be
able to determine the state of v as the failures of all paths
traversing v can already be explained by the failures of other
non-monitors. This intuition leads to the following results.

In the sequel, Pv ⊆ P denotes the set of measurement
paths traversing a non-monitor v, and Sv := {Pw : w ∈
N, w 6= v} denotes the collection of path sets traversing
non-monitors in N \ {v}. We use MSC(v) to denote the
minimum set cover of Pv by Sv, i.e., MSC(v) := |V ′| for

Note that covering is only feasible if v is not on any 2-hop
measurement path (i.e., monitor-v-monitor), in which case

the minimum set V ′ ⊆ N \ {v} such that Pv ⊆ Sw∈V ′ Pw.
we know Pv ⊆ Sw∈N,w6=v Pw and thus MSC(v) ≤ σ − 1. If

v is on a 2-hop path, then we deﬁne MSC(v) := σ.

Theorem 15

(k-identifiability under UP). Network

G is k-identiﬁable under UP with measurement paths P :

a) if MSC(v) > k for any non-monitor v;
b) only if MSC(v) > k − 1 for any non-monitor v.

Proof. Suppose condition (a) holds. Then for any candi-
date failure set F with |F | ≤ k and any other non-monitor v

(v 6∈ F ), there must be a path in Pv that is not in Sw∈F Pw,

i.e., traversing v but not F , which satisﬁes the abstract suf-
ﬁcient condition in Lemma 3.

Suppose condition (b) does not hold, i.e., there exists a
non-monitor v and a set of non-monitors V ′ with |V ′| ≤ k−1

and v 6∈ V ′, such that Pv ⊆ Sw∈V ′ Pw. Then given failures

of all nodes in V ′, the state of v has no impact on observed
path states and is thus unidentiﬁable, violating the abstract
necessary condition in Lemma 4.

Testing algorithm: The conditions in Theorem 15 pro-
vide an explicit way of testing the k-identiﬁability under UP,
using tests of the form MSC(v) > s. Unfortunately, evaluat-
ing such a test, known as the decision problem of the set cov-
ering problem, is known to be NP-complete. Nevertheless,
we can use approximation algorithms to compute bounds
on MSC(v). The best-known algorithm with approximation
guarantee is the greedy algorithm, which iteratively selects
the set in Sv that contains the largest number of uncovered
paths in Pv until all the paths in Pv are covered (assuming
that v is not on any 2-hop path).

Let GSC(v) denote the number of sets selected by the

greedy algorithm. This immediately provides an upper bound:
MSC(v) ≤ GSC(v). Moreover, since the greedy algorithm
has an approximation ratio of log(|Pv|) + 1 [22], we can also
bound MSC(v) from below: MSC(v) ≥ GSC(v)/(log(|Pv|)+
1). Applying these bounds to Theorem 15 yields a pair of
relaxed conditions:

• G is k-identiﬁable under UP if k < ⌈minv∈N

GSC(v)
log(|Pv |)+1 ⌉;

• G is not k-identiﬁable under UP if k > minv∈N GSC(v).

These conditions can be tested by running the greedy al-
gorithm for all non-monitors, each taking time O(|Pv|2σ) =
O(|P |2σ), and the overall test has a complexity of O(|P |2σ2)
(or O(µ4σ2) if there is a measurement path between each
pair of monitors). However, we point out that it is un-
likely that one can obtain stronger conditions based on The-
orem 15 that are polynomial-time veriﬁable, as the greedy al-
gorithm is known to give the best approximation for MSC(v).

4.4 Special Case: 1-identiﬁability

In practice, the most common failure event consists of the
failure of a single node. Thus, a question of particular in-
terest is whether G is 1-identiﬁable under a given placement
of monitors and a given probing mechanism. Although our

202previous results (Corollaries 8 and 12, Theorem 15) provide
an answer to the above question if the suﬃcient condition
is satisﬁed or the necessary condition is violated for k = 1,
the answer remains unknown if G satisﬁes the necessary con-
dition but violates the suﬃcient condition. To address this
case, we develop explicit methods to test the 1-identiﬁability.

4.4.1 Conditions for 1-identiﬁability

We start with a generic necessary and suﬃcient condition
that applies to all probing mechanisms. Recall that Pv de-
notes the set of measurement paths traversing a non-monitor
v. By Deﬁnition 1, we have the following claim:

Claim 16. G is 1-identiﬁable if and only if:
(1) Pv 6= ∅ for any v ∈ N , and
(2) Pv 6= Pw for any v, w ∈ N and v 6= w.

In Claim 16, the ﬁrst condition guarantees that any non-
empty failure set is distinguishable from the empty set (i.e.,
no failure), and the second condition guarantees that the ob-
served path states can uniquely localize the failed node. An
eﬃcient test of these conditions, however, requires diﬀerent
strategies under diﬀerent probing mechanisms.

4.4.2 Test under CAP

Under CAP, we know from Corollary 8 that for G to be
1-identiﬁable, the auxiliary graph G∗ must be connected.
Below, we will show that this condition is also suﬃcient.

Lemma 17. Network G is 1-identiﬁable under CAP if and

only if G∗ is connected, i.e., G has at least one monitor.

Proof. It suﬃces to show that G∗ being connected is suf-
ﬁcient for the 1-identiﬁability of G, which we prove by con-
struction. First, it is easy to see that G∗ is connected if and
only if G has at least one monitor, denoted by m (recall that
G is assumed to be connected). We build a spanning tree
of G rooted at m, and sequentially probe each non-monitor
in a breadth-ﬁrst or depth-ﬁrst order until (i) ﬁnding a ﬁrst
failure or (ii) completing probing without any failure. As
each non-monitor is only probed after all its predecessors in
the tree have been probed, we know in case (i) that the last
probed non-monitor has failed, and in case (ii) that no node
has failed. Therefore, G is 1-identiﬁable.

Testing for 1-identiﬁability under CAP is therefore re-

duced to determining if the network has a monitor.

4.4.3 Test under CSP

Under CSP, we derive conditions that are equivalent to

those in Section 4.4.1 but easier to test.

Condition (1) in Claim 16 requires that every non-monitor
reside on a monitor-monitor simple path. While an exhaus-
tive search for such a path will incur exponential complex-
ity, we can test for its existence eﬃciently using the follow-
ing observation. The idea is to construct an extended graph
G′
:= G + {m′} + L({m′}, M ), i.e., by adding a virtual
monitor m′ and connecting it to all the monitors; see an
illustration in Fig. 3. We claim that a non-monitor v is on
a monitor-monitor simple path if and only if the size of the
minimum vertex cut between v and m′ in G′ is at least two.
Indeed, by Menger’s Theorem [10], the size of the min-
imum vertex cut between v and m′ (minimum v-m′ vertex
cut) equals the maximum number of vertex-independent 5
5Two paths are vertex-independent if they have no common
vertex except for the endpoints.

simple paths between them. Therefore, a minimum v-m′
vertex cut of size at least two implies the existence of two
vertex-independent simple paths between v and m′, illus-
trated as paths vm2m′ and vmim′ in Fig. 3. Truncating
these two paths (vm2m′ and vmim′) at the ﬁrst monitors
(along the way from v to m′) and concatenating the remain-
ing two path segments gives a monitor-to-monitor simple
path traversing v, i.e., m2vmi in Fig. 3. On the other hand,
if ∃ a monitor-to-monitor simple path traversing v, then it
can be split into two simple paths connecting v to two dis-
tinct monitors, which implies a minimum v-m′ cut of at least
two vertices in the extended graph G′ as each of these two
distinct monitors connects to m′ by a virtual link.

Condition (2) in Claim 16 is violated if and only if there
exist two non-monitors v 6= w such that all monitor-to-
monitor simple paths traversing v must traverse w (i.e.,
Pv ⊆ Pw) and vice versa. Since Pv ⊆ Pw means that there is
no monitor-to-monitor simple path traversing v in G − {w},
by the above argument, we see that Pv ⊆ Pw if and only if
the size of the minimum vertex cut between v and m′ in a
w := G − {w} + {m′} + L({m′}, M ) is smaller
new graph G′
than two. Therefore, condition (2) in Claim 16 is satisﬁed
if and only if for every two distinct non-monitors v and w,
either the minimum v-m′ cut in G′
w or the minimum w-m′
cut in G′
v has a size of at least two.

In summary, the necessary and suﬃcient condition for 1-
identiﬁability under CSP is (Cv,w denotes the minimum ver-
tex cut between v and w):

i) |Cv,m′ | ≥ 2 in G′ for each v ∈ N , and
ii) |Cv,m′ | ≥ 2 in G′
w or |Cw,m′ | ≥ 2 in G′

v for all v, w ∈ N

and v 6= w.

Since for a graph G of |V | nodes and |L| links, |Cv,w| ≥ 2
can be tested in O(|V | + |L|) time6, the overall test takes
O(σ2(|V | + |L|)) = O(σ2(µ + σ)2) time.

4.4.4 Test under UP

Under UP, the total number of measurement paths |P | is
reduced to O(µ2) (from exponentially many as in the case of
CAP/CSP) since the measurable routes are predetermined.
This reduction makes it feasible to directly test the generic
conditions (1–2) in Claim 16 by testing condition (1) for
each non-monitor and condition (2) for each pair of non-
monitors. The overall complexity of this test is O(σ2µ2),
dominated by the testing of condition (2) in Claim 16.

5. CHARACTERIZATION OF MAXIMUM

IDENTIFIABILITY

Although it is challenging to determine the exact value
of the maximum identiﬁability Ω(G) without a (polynomial-
time veriﬁable) necessary and suﬃcient condition for testing
k-identiﬁability (it remains open as to whether it is NP-
hard to determine the value of Ω(G)), we will show that the
conditions derived in Section 4 have a nice structure that
allows us to provide tight upper and lower bounds on Ω(G).

5.1 Maximum Identiﬁability under CAP

Observing that both the suﬃcient and the necessary con-
ditions in Corollary 8 are imposed on the same property, i.e.,
vertex-connectivity of the auxiliary graph G∗, we obtain a
6For example, we can compute the biconnected component
decomposition [23] and test if v and w belong to the same
biconnected component.

203m’

m2 mi

m1

μm

G

v

Figure 3: Extended graph G′.

tight characterization of the maximum identiﬁability under
CAP as follows. Here δ(G) is the vertex connectivity of G
deﬁned in Deﬁnition 6.

Theorem 18

(Maximum Identifiability under CAP).

If δ(G∗) ≤ σ − 1, the maximum identiﬁability of G under
CAP, ΩCAP(G), is bounded by δ(G∗) − 1 ≤ ΩCAP(G) ≤ δ(G∗).
Proof. Given δ(G∗), we know that G∗ is δ(G∗)-vertex-
connected but not (δ(G∗) + 1)-vertex-connected. By Corol-
lary 8, this means that G is (δ(G∗) − 1)-identiﬁable but not
(δ(G∗) + 1)-identiﬁable, which yields the above bounds on
the maximum identiﬁability. Note that applying Corollary 8
requires δ(G∗) ≤ σ − 1.

Remark:

In the special case of δ(G∗) = σ (note that
δ(G∗) ≤ σ by deﬁnition), G∗ must be a clique, which means
that all non-monitors must be neighbors of monitors. By
Proposition 9, this implies that ΩCAP(G) = σ.

Evaluation algorithm: Using the algorithm for deter-
mining network vertex connectivity in [21], we can compute
δ(G∗) and evaluate ΩCAP(G) by the bounds in Theorem 18
in O(σ3.75) time. The special case of ΩCAP(G) = σ can
be checked separately in O(σ) time using the condition in
Proposition 9.

5.2 Maximum Identiﬁability under CSP

As in the case of CAP, we can leverage the analogy be-
tween the suﬃcient and the necessary conditions in Corol-
lary 12 to bound the maximum identiﬁability under CSP
from both sides. Speciﬁcally, let δmin := minm:m∈M δ(Gm)
be the minimum vertex-connectivity for auxiliary graphs
Gm. Then the maximum identiﬁability is bounded as follows.

Theorem 19

(Maximum Identifiability under CSP).

If min(δmin, δ(G∗) − 1) ≤ σ − 2, the maximum identiﬁabil-
ity of G under CSP, ΩCSP(G), is bounded by min(δmin − 1,
δ(G∗) − 2) ≤ ΩCSP(G) ≤ min(δmin, δ(G∗) − 1).

In particular, if δ(G∗) = 1 (i.e., there is a cut-vertex in
G∗), then ΩCSP(G) = 0, i.e., even single-node failures cannot
always be localized.

The only cases when min(δmin, δ(G∗) − 1) ≤ σ − 2 is vi-
olated are: (i) δmin = δ(G∗) = σ, or (ii) δmin = σ − 1 and
δ(G∗) = σ. In case (i), Gm is a clique for all m ∈ M , i.e.,
each non-monitor still has a monitor as a neighbor after re-
moving m; by Proposition 13, this implies that ΩCSP(G) =
σ.
In case (ii), Corollary 12 (a) can still be applied to
show that ΩCSP(G) ≥ σ − 2, and one can verify that the
condition in Proposition 13 is violated, which implies that
ΩCSP(G) ≤ σ − 1. In fact, we can leverage Proposition 14 to
uniquely determine ΩCSP(G) in this case. If condition (ii) in
Proposition 14 is satisﬁed, then ΩCSP(G) = σ − 1; otherwise,
ΩCSP(G) = σ − 2.

Evaluation algorithm: Evaluating ΩCSP(G) by Theo-
rem 19 involves computing the vertex-connectivities of the
auxiliary graphs G∗ and Gm (∀m ∈ M ) using the algorithm
for determining network vertex connectivity in [21], which
altogether takes O(µσ3.75) time.

5.3 Maximum Identiﬁability under UP

Let ∆ := minv∈N MSC(v) be the minimum set cover over
all non-monitors. The conditions in Theorem 15 imply the
following bounds on the maximum identiﬁability under UP.

Theorem 20

(Maximum Identifiability under UP).

The maximum identiﬁability of G under UP, ΩUP(G), with
measurement paths P is bounded by ∆ − 1 ≤ ΩUP(G) ≤ ∆.

Proof. Since MSC(v) > ∆ − 1 for all v ∈ N , G is (∆ −
1)-identiﬁable by Theorem 15 (a). Meanwhile, since there
exists a node v ∈ N with MSC(v) = ∆, G is not (∆ + 1)-
identiﬁable by Theorem 15 (b). Together, they imply the
bounds on ΩUP(G).

Remark: Recall that ∆ ≤ σ by deﬁnition. In the special
case of ∆ = σ, we know that all non-monitors are on 2-
hop measurement paths, whose states can be determined
independently. Thus, ΩUP(G) = σ in this case.

Evaluation algorithm: The original bounds in Theo-
rem 20 are hard to evaluate due to the NP-hardness of com-
puting MSC(·). As in Section 4.3, we resort to the greedy
algorithm, which implies the following relaxed bounds:

l min

v∈N

GSC(v)

log(|Pv|) + 1m − 1 ≤ ΩUP(G) ≤ min

v∈N

GSC(v).

(5)

Proof. By deﬁnition of vertex-connectivity, G∗ is δ(G∗)-
vertex-connected, and Gm is δmin-vertex-connected for each
monitor m ∈ M . This satisﬁes the condition in Corol-
lary 12 (a) for k = min(δmin − 1, δ(G∗) − 2), and thus
ΩCSP(G) ≥ min(δmin − 1, δ(G∗) − 2). Meanwhile, since G∗ is
not (δ(G∗) + 1)-vertex-connected, and Gm is not (δmin + 1)-
vertex-connected for some m ∈ M , the condition in Corol-
lary 12 (b) is violated for k = min(δmin + 1, δ(G∗)) (which
requires min(δmin + 1, δ(G∗)) ≤ σ − 1). Thus, ΩCSP(G) ≤
min(δmin, δ(G∗) − 1).

Remark: Because the set of links in Gm is a subset of
those in G∗ while the nodes are the same, we always have
δmin ≤ δ(G∗). Therefore, the above bounds simplify to:

• δmin − 2 ≤ ΩCSP(G) ≤ δmin − 1 if δmin = δ(G∗);

• δmin − 1 ≤ ΩCSP(G) ≤ δmin if δmin < δ(G∗).

Evaluating these bounds involves invoking the greedy algo-
rithm for each non-monitor, with an overall complexity of
O(|P |2σ2) (or O(µ4σ2) if all monitors can probe each other).

6.

IMPACT OF PROBING MECHANISM

Given the above results, we are now ready to quantify the
impact of the probing mechanism on node failure localiza-
tion. We aim to quantify this impact by evaluating, using
our bounds on the maximum identiﬁability, the number of
simultaneous failures we can uniquely localize in a given net-
work with a given monitor placement under each of the three
probing mechanisms (CAP, CSP, UP). In this study, we as-
sume (hop count-based) shortest path routing as the default
routing protocol under UP, i.e., the measurement paths un-
der UP are the shortest paths between monitors, with ties
broken arbitrarily.

2046.1 Topologies for Evaluation

We evaluate the proposed metrics on both synthetic and

real network topologies detailed as follows.

6.1.1

Synthetic Topologies

We ﬁrst consider synthetic topologies generated accord-
ing to four widely used random graph models: Erd¨os-R´enyi
(ER) graphs, Random Geometric (RG) graphs, Barab´asi-
Albert (BA) graphs, and Random Power Law (RPL) graphs.
We randomly generate graph realizations of each model7,
with each realization containing 20 nodes (i.e., |V | = 20).
The generated graphs are then used to evaluate the impact
of probing mechanisms. We now describe the models and
present the corresponding results separately.

Erd¨os-R´enyi (ER) graph: The ER graph [24] is gener-
ated by independently connecting each pair of nodes by a
link with a ﬁxed probability p. The result is a purely random
topology where all graphs with an equal number of links are
equally likely to be selected (note that the number of nodes
is a predetermined parameter).

Random Geometric (RG) graph: The RG graph [25]
is frequently used to model the topology of wireless ad hoc
networks.
It generates a random graph by ﬁrst randomly
distributing nodes in a unit square, and then connecting each
pair of nodes by a link if their distance is no larger than a
threshold dc, which denotes the node communication range.
The resulting topology contains well-connected sub-graphs
in densely populated areas and poorly-connected sub-graphs
in sparsely populated areas.

Barab´asi-Albert (BA) graphs: The BA model [26] pro-
vides a random power-law graph generated by the following
preferential attachment mechanism. We begin with a small
connected graph G0 := ({v1, v2, v3, v4}, {v1v2, v1v3, v1v4})
and add nodes sequentially. For each new node v, we connect
v to nmin existing nodes, where nmin speciﬁes (a lower bound
on) the minimum node degree, such that the probability of
connecting the new node to existing node w is proportional
to the degree of w. If the number of existing nodes is smaller
than nmin, then v connects to all the existing nodes. The
BA graph has been used to model many naturally occurring
networks, e.g., citation networks, and social networks.

Random Power Law (RPL) graphs: The BA model
introduces an artifact that all node degrees are lower bounded
by nmin. Alternatively, the RPL graph [27] provides another
way of generating power-law graphs by directly specifying a
sequence of expected node degrees (d1, ..., d|V |) according to
the power law, i.e., di = iα (α > 0). The generation of a
RPL graph is similar to that of an ER graph, except that
instead of connecting each pair of nodes with the same prob-
ability, nodes i and j in a RPL graph are connected by a

link with probability pij = didj/P|V |

k=1 dk.

Remark: Our motivation for performing evaluations on
random topologies is that they allow comprehensive evalua-
tion without artifacts of speciﬁc network deployments, which
are common in real topologies. Moreover, the selected graph
models can provide insights on how the topological property
aﬀects node failure localization.

6.1.2 Real Topologies

For real topologies, we use the Autonomous System (AS)
topologies collected by the Rocketfuel [28] and the CAIDA
[29] projects, which represents IP-level connections between
7All realizations are guaranteed to be connected, as we dis-
card disconnected realizations in the generation process.

Algorithm 1: Enhanced Random Monitor Placement
(ERMP)

input : Network topology G, all possible measurement

paths Q under UP, number of monitors µ

output: Set of monitors M
1 M ← {all degree-1 nodes} ∪

{one in every two neighboring degree-2 nodes};

M ← {endpoints of the longest path in Q};

2 if M = ∅ then
3
4 end
5 U ← V \ (Sm,m′∈M Vmm′ );
6 while U 6= ∅ do
7

m = arg maxw∈V \M |U ∩ V(w, M )|;
U ← U \ V(m, M );
M ← M ∪ {m};

8

9

// uncovered nodes

10 end
11 if |M | < µ then
12
13 end

M ← M ∪{µ−|M | nodes randomly selected from V \M }

backbone/gateway routers of several ASes from major In-
ternet Service Providers (ISPs) around the globe.

6.2 Placement of Monitors

Since the maximum identiﬁability Ω depends on the given
placement of monitors, we want to randomize this given
monitor placement for a comprehensive evaluation. A purely
random placement, however, is likely to lead to trivial Ω,
since Ω = 0 whenever there is a non-monitor not traversed
by any measurement path. Speciﬁcally, ΩCSP and ΩUP will
be zero if any degree-1 node or any two neighboring degree-2
nodes are non-monitors; moreover, ΩUP will also be zero if
not all non-monitors lie on shortest paths between monitors.
To avoid these trivial cases, we adopt an Enhanced Random
Monitor Placement (ERMP) strategy, which consists of the
following two steps.

Step (i): place monitors to avoid the obvious cases of zero-
maximum identiﬁability mentioned above;
Step (ii): place additional monitors, if available, randomly.

See Algorithm 1 for the pseudo code of ERMP. It is assumed
that the total number of monitors is suﬃcient for step (i)
above. Note that ERMP is only used for evaluating Ω, while
our bounds established in Section 5 are valid under arbitrary
monitor placements, i.e., the expression of our bounds does
not depend on the choice of monitor placement algorithm
or the fraction of monitors (µ/|V |). The optimization of
monitor placement to achieve a desired level of identiﬁability
will be pursued separately in a future work.

Speciﬁcally, it suﬃces to consider the most restrictive prob-
ing mechanism UP. Given the set of all potentially measure-
ment paths Q under UP (here it is the set of all-pair shortest
paths), let Vvw denote the set of nodes covered by the path
between nodes v and w (inclusive). Given a set of existing
monitors M ⊆ V and a candidate monitor w ∈ V \ M , de-

ﬁne V(w, M ) := Sm∈M Vwm as the set of nodes covered by

the paths between w and the existing monitors. We perform
step (i) above by a greedy heuristic. We ﬁrst jump-start the
monitor placement with an initial set of monitors required
to achieve a non-zero value for ΩCSP (line 1); if this initial
set is empty, we select the two monitors covering the maxi-
mum number of nodes (line 3). We then enlarge this set by
selecting a new monitor in each iteration whose paths to the
existing monitors cover the maximum number of uncovered
nodes (line 7), until all nodes are covered by at least one

205d
n
u
o
b
 
r
e
w
o
l
 
g
v
a

5

4

3

2

1

0

 

original bound
relaxed bound

ER

RG

BA

RPL

 

d
n
u
o
b
 
r
e
p
p
u
 
g
v
a

5

4

3

2

1

0

 

original bound
relaxed bound

 

ER

RG

BA

RPL

d
n
u
o
b
 
r
e
w
o
l
 
g
v
a

7

6

5

4

3

2

1

0

 

original bound
relaxed bound

ER

RG

BA

RPL

 

d
n
u
o
b
 
r
e
p
p
u
 
g
v
a

7

6

5

4

3

2

1

0

 

 

original bound
relaxed bound

ER

RG

BA

RPL

(a) Average lower bound

(b) Average upper bound

(a) Average lower bound

(b) Average upper bound

Figure 4: Original and relaxed bounds on the max-
imum identiﬁability ΩUP under UP for sparsely-
connected random topologies (|V | = 20, µ = 10,
E[|L|] = 51, 100 graph instances per model).

Figure 5: Original and relaxed bounds on the max-
imum identiﬁability ΩUP under UP for densely-
connected random topologies (|V | = 20, µ = 10,
E[|L|] = 99, 100 graph instances per model).

measurement path under UP (line 10). Finally, extra moni-
tors, if any, are placed randomly among the remaining nodes.

6.3 Impact on Identiﬁability

6.3.1 Tightness of Bounds

To measure the impact of probing on the maximum iden-
tiﬁability Ω, we need tight bounds on Ω under all probing
mechanisms. Although we have achieved this theoretically
by deriving upper and lower bounds that diﬀer by at most
one (Theorems 18, 19, 20), only the bounds under CAP and
CSP can be evaluated eﬃciently, and the bounds under UP
have to be relaxed by a logarithmic factor to be computable
in polynomial time (see (5)). The ﬁrst question is therefore
how tight the relaxed bounds are.

To this end, we compare the original bounds (Theorem 20)
and the relaxed bounds (5) on a variety of topologies syn-
thetically generated from the models in Section 6.1.1 in two
scenarios, i.e., sparsely-connected and densely-connected topolo-
gies. To make the models comparable in each scenario, we
have tuned each model to generate graphs with the same
number of nodes and (average) number of links. We eval-
uate both bounds on multiple graph instances per model,
each with a ﬁxed number of monitors placed by ERMP,
and present the average lower/upper bounds in Fig. 4 and
Fig. 5. As expected, in both scenarios, the relaxed lower
bounds are quite loose due to the logarithmic factor, but
the relaxed upper bounds coincide with the original bounds
for all graph instances. This indicates that although the
relaxed upper bound minv∈N GSC(v) can be a logarithmic-
factor larger than the original upper bound ∆ in the worst
case, this worst case rarely occurs, and we can approximate
∆ by minv∈N GSC(v) to apply Theorem 20. This provides
a tight characterization of ΩUP for large networks, where
computing the original bounds is infeasible.

6.3.2 Comparison of Probing Mechanisms

We are now ready to compare8 ΩCAP, ΩCSP, and ΩUP.
Comparison Using Random Topologies: Similar to
Section 6.3.1, ΩCAP, ΩCSP, and ΩUP are compared on both
sparsely-connected and densely-connected topologies gener-
ated from the four random graph models. Under each sce-
nario, we generate multiple graph instances from each of
the four models and sequentially place monitors in each in-
stance using ERMP such that the set of monitors grows
strictly monotonically as the number of monitors increases.

8In the case of 0 ≤ Ω ≤ 1, we use the tests in Section 4.4 to
uniquely determine the value of Ω.

We then evaluate our bounds on the maximum identiﬁabil-
ity ΩCAP, ΩCSP, and ΩUP for each graph instance under each
monitor placement.

The average results in sparsely-connected networks are
shown in Fig. 6. The results show large diﬀerences in the
maximum identiﬁabilities of the diﬀerent probing mecha-
nisms: while UP can barely localize a single node failure
even if half of the nodes are monitors, CAP can provide
unique localization even if up to 90% of the non-monitors
simultaneously fail. We also observe that the maximum
identiﬁability is larger for ER graphs and smaller for BA
graphs. Intuitively, this is because while nodes in ER graphs
have uniform connectivity, those in BA graphs have highly
variable connectivity, which creates poorly connected sub-
graphs whose node failures are more diﬃcult to localize.
Note that Ω eventually decreases as the number of monitors
µ increases, as the maximum identiﬁability is always upper
bounded by the total number of non-monitors (σ = |V |−µ);
we have veriﬁed that the normalized maximum identiﬁability
Ω/σ increases monotonically with µ.

The average results for densely-connected networks are
reported in Fig. 7.
In comparison to Fig. 6, both CAP
and CSP achieve greater maximum identiﬁability in densely-
connected networks; in particular, CAP uniquely localizes
arbitrary node failures, i.e., ΩCAP = σ, for all the graph
models when µ/|V | ≥ 45%. Meanwhile, as Fig. 7 shows,
increasing the number of links (and hence the density of
the graphs) hardly aﬀects the maximum identiﬁability un-
der UP. Intuitively, this is because densely-connected graphs
yield more measurement paths between each pair of moni-
tors under controllable probing mechanisms (CAP and CSP),
thus enabling them to identify more simultaneous failures.
In contrast, there is only one measurement path (the short-
est path) between each pair of monitors under UP, indepen-
dent of the number of links in the network. Therefore, UP
exhibits similar maximum identiﬁability for both sparsely-
connected and densely-connected topologies.

Comparison Using AS Topologies: For AS topologies,
we ﬁrst compute the minimum number of monitors required
by step (i) of ERMP, denoted by µc, and then vary the frac-
tion of monitors µ/|V | such that µ ≥ µc for all the topolo-
gies. To facilitate comparison, we use the same range of
values for µ/|V | for each dataset. For each topology, we in-
dependently select 20 sets of monitors using ERMP (only
µ − µc monitors in each set are randomly placed), under
which ΩCAP, ΩCSP, and ΩUP are evaluated.

Fig. 8 shows bounds on the maximum identiﬁability av-
eraged over diﬀerent monitor placements for the Rocketfuel
AS topologies. In the selected Rocketfuel topologies (Fig. 8),

206Ω

Ω

12

10

8

6

4

2

0

 
2

12

10

8

6

4

2

0

 
2

CAP
CSP
UP
upper bound (Ω=σ)

 

Ω

4

6
µ

(a) ER

8

10

CAP
CSP
UP
upper bound (Ω=σ)

 

Ω

4

6
µ

(c) BA

8

10

12

10

8

6

4

2

0

 
2

12

10

8

6

4

2

0

 
2

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(b) RG

8

10

 

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(d) RPL

8

10

Figure 6: Bounds on the maximum identiﬁability
Ω under CAP, CSP, and UP for sparsely-connected
random topologies (|V | = 20, µ = 2, . . . , 10, E[|L|] = 51,
50 graph instances per model).

Ω

Ω

15

10

5

0

 
2

15

10

5

0

 
2

 

15

 

10

Ω

5

0

 
2

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(a) ER

8

10

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(b) RG

8

10

 

15

 

10

Ω

5

0

 
2

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(c) BA

8

10

CAP
CSP
UP
upper bound (Ω=σ)

4

6
µ

(d) RPL

8

10

Figure 7: Bounds on the maximum identiﬁability
Ω under CAP, CSP, and UP for densely-connected
random topologies (|V | = 20, µ = 2, . . . , 10, E[|L|] = 99,
50 graph instances per model).

AS6461 has the maximum ratio µc/|V | of approximately
0.665. Thus, we start the simulation from µ/|V | = 0.665.
Similar to the case of random topologies, the results show
clear diﬀerences between the maximum identiﬁability under
diﬀerent probing mechanisms, especially between ΩCAP and
the other two. For most of the networks, UP and CSP only
guarantee unique localization of single-node failures, while
CAP can handle multi-node failures for all the networks.
We also observe a much larger gap between ΩCAP and ΩCSP
than the gap between ΩCSP and ΩUP, as the AS topolo-
gies are relatively sparse, leaving monitors little ﬂexibility
in selecting probing paths under cycle-free constraints (i.e.,
CSP). Across the networks, we observe that the ordering
of the normalized maximum identiﬁability Ω/σ is roughly
consistent with the minimum monitor fraction of monitors

 

 

 

25

20

15

Ω

10

5

0

 

30

25

20

Ω

15

10

5

0

 

CAP
CSP
UP
Ω=σ

0.7

0.75

0.8
µ/|V|

0.85

0.9

0.95

(a) AS1755: |V | = 172,
|L| = 381, µc = 69

 

CAP
CSP
UP
Ω=σ

0.7

0.75

0.8
µ/|V|

0.85

0.9

0.95

(c) AS3967: |V | = 201,
|L| = 434, µc = 106

15

10

Ω

5

0

 

30

25

20

Ω

15

10

5

0

 

CAP
CSP
UP
Ω=σ

0.7

0.75

0.8
µ/|V|

0.85

0.9

0.95

(b) AS6461: |V | = 182,
|L| = 294, µc = 121

 

CAP
CSP
UP
Ω=σ

0.7

0.75

0.8
µ/|V|

0.85

0.9

0.95

(d) AS3257: |V | = 240,
|L| = 404, µc = 123

Figure 8: Bounds on maximum Identiﬁability for
Rocketfuel AS Topologies.

20

15

Ω

10

5

0

 

 

CAP
CSP
UP
Ω=σ

0.9

0.92

0.94
µ/|V|

0.96

0.98

Ω

35

30

25

20

15

10

5

0

 

 

CAP
CSP
UP
Ω=σ

0.9

0.92

0.94
µ/|V|

0.96

0.98

(a) AS28583:
|L| = 415, µc = 211

|V | = 284,

(b) AS10024:
|L| = 336, µc = 270

|V | = 318,

 

15

 

20

15

Ω

10

5

0

 

CAP
CSP
UP
Ω=σ

0.9

0.92

0.94
µ/|V|

0.96

0.98

10

Ω

5

0

 

CAP
CSP
UP
Ω=σ

0.9

0.92

0.94
µ/|V|

0.96

0.98

(c) AS15706:
|L| = 874, µc = 282

|V | = 325,

(d) AS26788:
|L| = 483, µc = 316

|V | = 355,

Figure 9: Bounds on maximum Identiﬁability for
CAIDA AS Topologies.

µc/|V | required by ERMP: the larger µc/|V |, the smaller
Ω/σ.

Because ISP topologies have evolved since the Rocket-
fuel project, we repeat the above evaluation on a recent
dataset obtained by the CAIDA project; see results in Fig. 9.
Compared with the Rocketfuel ASes, we observe that the
CAIDA ASes require more monitors (computed by step (i) of
ERMP), e.g., the largest fraction µc/|V | is 0.89 for AS26788
while the smallest is 0.74 for AS28583. Hence, we start from
µ/|V | = 0.89 in Fig. 9. Similar to Fig. 8, we again observe
a huge gap between ΩCAP and the other two, and Ω/σ is in-
versely related to µc/|V |. In addition, Fig. 9 also shows that
under the minimum monitor placement, even the most ﬂex-
ible probing mechanism, CAP, can only localize failures of
a couple of nodes. Our results suggest that without control

207of probing paths (i.e., UP), randomly placed monitors are
unlikely to guarantee unique failure localization; therefore,
optimized monitor placement is needed to handle simultane-
ous failures of multiple nodes. Moreover, these results also
imply that in the absence of deploying monitors at the vast
majority of nodes, implementing controllable probing is an
eﬀective way to guarantee unique failure localization.

7. CONCLUSION

We have studied the fundamental capability of a network
to localize failed nodes from the health condition of end-to-
end paths between monitors. We proposed a novel measure,
called the maximum identiﬁability, to quantify this capabil-
ity as the maximum number of simultaneous failures that
can be uniquely localized. We studied this measure in de-
tail for three representative families of probing mechanisms
that oﬀer diﬀerent tradeoﬀs between the controllability of
probes and the cost of implementation. For each family
of probing mechanisms, we established necessary/suﬃcient
conditions for unique failure localization based on the net-
work topology, the placement of monitors, the constraints
on measurement paths, and the maximum number of simul-
taneous failures. We further showed that these conditions
lead to tight upper/lower bounds on the maximum identiﬁ-
ability that diﬀer by at most one. We showed that both the
conditions and the bounds can be evaluated eﬃciently us-
ing polynomial-time algorithms. Our evaluations on random
and real network topologies reveal that although incurring a
higher implementation cost, giving the monitors more con-
trol over the routing of probes can signiﬁcantly improve their
capability to localize simultaneous failures.

8. REFERENCES
[1] R. R. Kompella, J. Yates, A. G. Greenberg, and A. C.
Snoeren, “Detection and localization of network black
holes,” in IEEE INFOCOM , 2007.

[2] M. Coates, A. O. Hero, R. Nowak, and B. Yu,
“Internet tomography,” IEEE Signal Processing
Magazine, vol. 19, pp. 47–65, 2002.

[3] D. Ghita, C. Karakus, K. Argyraki, and P. Thiran,

“Shifting network tomography toward a practical
goal,” in ACM CoNEXT , 2011.

[4] Y. Bejerano and R. Rastogi, “Robust monitoring of

link delays and faults in IP networks,” in IEEE
INFOCOM , 2003.

[5] J. D. Horton and A. L´opez-Ortiz, “On the number of

distributed measurement points for network
tomography,” in ACM IMC , 2003.

[11] H. Zeng, P. Kazemian, G. Varghese, and N. McKeown,

“Automatic test packet generation,” in ACM
CoNEXT , 2012.

[12] H. Nguyen and P. Thiran, “The boolean solution to
the congested IP link location problem: Theory and
practice,” in IEEE INFOCOM , 2007.

[13] A. Dhamdhere, R. Teixeira, C. Dovrolis, and C. Diot,

“Netdiagnoser: Troubleshooting network
unreachabilities using end-to-end probes and routing
data,” in ACM CoNEXT , 2007.

[14] Y. Huang, N. Feamster, and R. Teixeira, “Practical

issues with using network tomography for fault
diagnosis,” ACM SIGCOMM Computer
Communication Review , vol. 38, pp. 53–58, 2008.

[15] H. X. Nguyen and P. Thiran, “Active measurement for

multiple link failures diagnosis in IP networks,” in
Passive and Active Measurement, 2004.

[16] S. Ahuja, S. Ramasubramanian, and M. Krunz,

“SRLG failure localization in all-optical networks
using monitoring cycles and paths,” in IEEE
INFOCOM , 2008.
[17] [Online]. Available:

http://www.ietf.org/rfc/rfc0791.txt

[18] “Open networking foundation.” [Online]. Available:

http://www.opennetworkingfoundation.org

[19] R. Dorfman, “The detection of defective members of

large populations,” The Annals of Mathematical
Statistics, vol. 14, 1943.

[20] H.-G. Yeh, “d-Disjunct matrices: Bounds and Lovasz

local lemma,” Discrete Math, vol. 253, pp. 97–107,
2002.

[21] H. Gabow, “Using expander graphs to ﬁnd vertex

connectivity,” Journal of the ACM , vol. 53, no. 5, pp.
800–844, September 2006.

[22] V. Chvatal, “A greedy heuristic for the set-covering

problem,” Mathematics of Operations Research, vol. 4,
pp. 233–235, 1979.

[23] R. Tarjan, “Depth-ﬁrst search and linear graph

algorithms,” SIAM Journal on Computing, vol. 1, pp.
146–160, 1972.

[24] P. Erd¨os and A. R´enyi, “On the evolution of random
graphs,” Publications of the Mathematical Institute of
the Hungarian Academy of Sciences, vol. 5, pp. 17–61,
1960.

[25] P. Gupta and P. Kumar, “Critical power for

asymptotic connectivity in wireless networks,”
Stochastic Analysis, Control, Optimization and
Applications, pp. 547–566, 1999.

[6] S. Zarifzadeh, M. Gowdagere, and C. Dovrolis, “Range

[26] R. Albert and A.-L. Barab´asi, “Statistical mechanics

tomography: Combining the practicality of boolean
tomography with the resolution of analog
tomography,” in ACM IMC , 2012.

[7] A. Markopoulou, G. Iannaccone, S. Bhattacharyya,

C.-N. Chuah, and C. Diot, “Characterization of
failures in an IP backbone,” in IEEE INFOCOM ,
2004.

[8] N. Duﬃeld, “Simple network performance

tomography,” in ACM IMC , 2003.

[9] ——, “Network tomography of binary network

performance characteristics,” IEEE Transactions on
Information Theory, vol. 52, pp. 5373–5388, 2006.

[10] R. Diestel, Graph theory. Springer-Verlag Heidelberg,

New York, 2005.

of complex networks,” Reviews of Modern Physics,
vol. 74, pp. 47–97, Jan. 2002.

[27] F. Chung and L. Lu, Complex Graphs and Networks.

American Mathematical Society, 2006.

[28] “Rocketfuel: An ISP topology mapping engine,”

University of Washington, 2002. [Online]. Available:
http://www.cs.washington.edu/research/networking/
rocketfuel/

[29] “Macroscopic Internet Topology Data Kit (ITDK),”

The Cooperative Association for Internet Data
Analysis (CAIDA), April 2013. [Online]. Available:
http://www.caida.org/data/active/
internet-topology-data-kit/

208