ANDaNA: Anonymous Named Data Networking Application

Steven DiBenedetto

Colorado State University
dibenede@cs.colostate.edu

Paolo Gasti
Gene Tsudik
University of California, Irvine
{pgasti,gtsudik}@uci.edu

Ersin Uzun

Palo Alto Research Center

ersin.uzun@parc.com

Abstract

Content-centric networking — also known as
information-centric networking (ICN) — shifts empha-
sis from hosts and interfaces (as in today’s Internet) to
data. Named data becomes addressable and routable,
while locations that currently store that data become ir-
relevant to applications.

Named Data Networking (NDN) is a large collabora-
tive research effort that exempliﬁes the content-centric
approach to networking. NDN has some innate privacy-
friendly features, such as lack of source and destina-
tion addresses on packets. However, as discussed in
this paper, NDN architecture prompts some privacy con-
cerns mainly stemming from the semantic richness of
names. We examine privacy-relevant characteristics of
NDN and present an initial attempt to achieve communi-
cation privacy. Speciﬁcally, we design an NDN add-on
tool, called ANDaNA, that borrows a number of features
from Tor. As we demonstrate via experiments, it provides
comparable anonymity with lower relative overhead.

1

Introduction
Although the Internet, as a whole, is a huge global
In the
success story, it is showing clear signs of age.
1970s, when core ideas underlying today’s Internet were
developed, telephony was the only example of effec-
tive global-scale communications. Thus, while the com-
munication solution offered by the Internet’s TCP/IP
suite was unique and ground-breaking, the communica-
tion paradigm it focused on was similar to that of tele-
phony: a point-to-point conversation between two en-
tities. The communication world has changed dramat-
ically since then and today’s Internet has to accommo-
date:
information-intensive services, exabytes of con-
tent created and consumed daily over the Web as well as
a menagerie of mobile devices connected to it. To keep
pace with these changes and move the Internet into the
future, a number of research efforts to design new Inter-
net architectures have taken off in the last few years.

Named-Data Networking (NDN) [32] is one such ef-

fort that exempliﬁes the content-centric approach [23,
27, 28] to networking. NDN names content instead of
locations (i.e., hosts or interfaces) and thus transforms
content into a ﬁrst-class entity. NDN also stipulates that
each piece of content must be signed by its producer.
This allows decoupling of trust in content from trust in
the entity that might store and/or disseminate that con-
tent. These NDN features facilitate automatic caching of
content to optimize bandwidth use and enable effective
simultaneous utilization of multiple network interfaces.
However, NDN introduces certain challenges that
must be addressed in order for it to be a serious can-
didate for the future Internet architecture. One major
argument for a new architecture is the inadequate level
of security and privacy in today’s Internet. We view
anonymity as being a critical feature in any new network
architecture. It helps people overcome communication
restrictions and boundaries as well as evade censorship.
In addition, some applications (e.g., e-cash or anony-
mous publishing) can be successfully deployed only if
the underlying network allows users to hide their iden-
tity [14]. Even if end-users do not care about anonymity
with respect to services they access, they might still want
to hide their activities from employers, governments and
ISPs, since those might censor, misuse or accidentally
leak sensitive information [19].

Lack of source/destination addresses in NDN helps
privacy, since NDN packets carry information only
about what is requested but not who is requesting it.
However, a closer look reveals that this is insufﬁcient. In
particular, NDN design introduces three important pri-
vacy challenges:

1. Name privacy: NDN content names are incen-
tivized to be semantically related to the content it-
self. Similar to HTTP headers, names reveal sig-
niﬁcantly more information about content than IP
addresses. Moreover, an observer can easily de-
termine when two requests refer to the same (even
encrypted) content.

2. Content privacy: NDN allows any entity that
knows a name to retrieve corresponding content.
Encryption in NDN is used to enforce access con-

trol and is not applied to publicly available content.
Thus, consumers wanting to retrieve public content
cannot rely on encryption to hide what they access.
3. Cache privacy: as with current web proxies, net-
work neighbors may learn about each others’ con-
tent access using timing information to identify
cache hits.

4. Signature privacy:

since digital signatures in
NDN content packets are required to be publicly
veriﬁable, identity of a content signer may leak sen-
sitive information.

In this paper, we attempt to address these challenges. We
present an initial approach, called ANDaNA that can be
viewed as an adaptation of onion routing to NDN. Our
approach is in-line with NDN principles. It is designed
to take advantage of NDN strengths and work around
its weaknesses. We optimized ANDaNA for small- to
medium-size interactive communication – such as web-
browsing and instant messaging – that are characterized
by moderate amounts of low-latency trafﬁc [11].

We provide a security analysis of the proposed ap-
proach under a realistic adversarial model.
Specif-
ically, we deﬁne anonymity and unlinkability under
this security model and show that these properties hold
for ANDaNA. Moreover, ANDaNA is secure with fewer
anonymizing router hops than Tor. We prototyped
ANDaNA and assessed its performance via experiments
over a network testbed. Results show that ANDaNA in-
troduces less overhead than Tor, especially, for antici-
pated trafﬁc patterns.

We believe that this work is both timely and impor-
tant. The former – because of the recent surge of in-
terest in content-centric networking and NDN being a
good example of this paradigm. (Also, while NDN is
sufﬁciently mature to have a functional prototype suit-
able for experimental use, it is still at an early enough
stage to be open to change.) The latter – because it rep-
resents the ﬁrst attempt to identify and address privacy
problems in a viable candidate for the future Internet ar-
chitecture.

Before discussing details of our approach, we present

further motivation for this work.

Why NDN? There are multiple efforts to develop new
content-centric architectures and NDN is only one of
those. We focus on NDN because it stands out in sev-
eral aspects. First, it combines some revolutionary ideas
about content-based routing that have attracted consider-
able attention from the networking research community.
Second, it builds upon an open-source code-base called
CCNx [12], that is led and continuously maintained by
an industrial research lab (PARC). At the time of this
writing (summer 2011), NDN is one of the very few
content-centric architectural proposals with a reasonably

mature prototype available to the research community.1
Third, NDN is one of only four projects selected by NSF
Future Internet Architectures (FIA) program [20].

On the other hand, NDN is an on-going research
project and is thus subject to continuous change. How-
ever, we believe that it represents a good example of
content-centric networking design and at least some of
its concepts will inﬂuence the future of networking.
More importantly, ideas, techniques and analysis dis-
cussed in this paper are not speciﬁc, or limited to, NDN;
they are applicable to a wide range of designs, including
host-, location- and content-addressable networks.
Approach. NDN follows the proven design principle
of IP and claims to be the “thin waist” of the communi-
cations protocol stack. Thus, pushing security or privacy
services (that are not critical for all types of communica-
tion) into this thin waist would contradict its design prin-
ciple. Consequently, as in the case of IP, we believe that
privacy tools should run on top of NDN. Looking at pri-
vacy and anonymity techniques in today’s Internet, one
well-established approach is an overlay anonymization
network, exempliﬁed by Tor [18]. Tor and its relatives
employ layers of concentric encryption and intermedi-
ate nodes responsible for peeling off layers as packets
travel through the overlay. This is commonly referred
to as onion routing. Our approach falls into roughly the
same category. However, as we discover and discuss in
this paper, the task of adapting an anonymization over-
lay approach to NDN is not as simple as it might initially
seem.
Scope.
The primary focus of this paper is privacy.
Security and other features of NDN are taken as given
without justifying their existence. A number of impor-
tant NDN-related security topics are out of scope of this
paper, including: trust management, certiﬁcation and re-
vocation of credentials as well as routing security.
Organization. We start with NDN overview and pri-
vacy analysis in Section 2. Section 3 summarizes related
work, followed by the description of ANDaNA in Sec-
tion 4. Section 5 introduces a formal model for provable
anonymity and security analysis of ANDaNA. Implemen-
tation details and performance evaluation results are dis-
cussed in Section 6. The paper concludes in Section 7.
2 NDN Overview

NDN [32] is a communication architecture based
on named content.2 Rather than addressing content
by its location, NDN refers to it by name. Content
name is composed of one or more variable-length com-
ponents that are opaque to the network. Component
1We are aware of only two other content-centric architecture pro-

posals – [33] and [36] – that have public prototypes.

2Note that we use the terms ”content” and ”data” interchangeably

throughout this paper.

boundaries are explicitly delimited by “/”. For ex-
ample, the name of a CNN news content might be:
/ndn/cnn/news/2011aug20. Large pieces of con-
tent can be split into fragments with predictable names:
fragment 137 of a YouTube video could be named:
/ndn/youtube/videos/video-749.avi/137.

Since the main abstraction is content, there is no ex-
plicit notion of “hosts” in NDN. (However, their exis-
tence is assumed.) Communication adheres to the pull
model: content is delivered to consumers only upon ex-
plicit request. A consumer requests content by sending
an interest packet. If an entity (a router or a host) can
“satisfy” a given interest, it returns the corresponding
content packet. Interest and content are the only types
of packets in NDN. A content packet with name X in
NDN is never forwarded or routed unless it is preceded
by an interest for name X.3

When a router receives an interest for name X and
there are no pending interests for the same name in its
PIT (Pending Interests Table), it forwards this interest to
the next hop according to its routing table. For each for-
warded interest, a router stores some state information,
including the name in the interest and the interface on
which it was received. However, if an interest for X ar-
rives while there is an entry for the same name in the PIT,
the router collapses the present interest (and any subse-
quent ones for X) storing only the interface on which it
was received. When content is returned, the router for-
wards it out on all interfaces where an interest for X has
been received and ﬂushes the corresponding PIT entry.
Note that, since no additional information is needed to
deliver content, an interest does not carry a source ad-
dress. More detailed discussion of NDN routing can be
found in [27].

In NDN, each network entity can provide content
caching, which is limited only by resource availabil-
ity. For popular content, this allows interests to be sat-
isﬁed from cached copies distributed over the network,
thus maximizing resource utilization. NDN deals with
content authenticity and integrity by making digital sig-
natures mandatory on all content packets. A signature
binds content with its name, and provides origin au-
thentication no matter how or from where it is retrieved.
NDN calls entities that publish new content producers.
Whereas, as follows from the above discussion, entities
that request content are called consumers. (Consumers
and producers are clearly overlapping sets.) Although
content signature veriﬁcation is optional in NDN, a sig-
nature must be veriﬁable by any NDN entity. To make
this possible, content packets carry additional metadata,
3Strictly speaking, content named X(cid:48) (cid:54)= X can be delivered in
response to an interest for X but only if X is a preﬁx of X(cid:48). As an
example, the full name of each content packet contains the hash of that
content; however, this hash value is usually not known to consumers
and is typically omitted from interests.

such as the ID of the content publisher and information
on locating the public key needed for veriﬁcation. Pub-
lic keys are treated as regular content: since all content
is signed, each public key content is effectively a “cer-
tiﬁcate”. NDN does not mandate any particular certiﬁ-
cation infrastructure, relegating trust management to in-
dividual applications.

Private or restricted content in NDN is protected via
encryption by the content publisher. Once content is dis-
tributed unencrypted, there is no mechanism to apply
subsequent encryption. Speciﬁc applications may pro-
vide a means to explicitly request encryption of content
by publishers. However, NDN does not currently allow
consumers to selectively conceal content corresponding
to their interests.

From the privacy perspective, lack of source and des-
tination addresses in NDN packets is a clear advantage
over IP. In practice, this means that the adversary that
eavesdrops on a link close to a content producer can not
immediately identify the consumer(s) who expressed in-
terest in that content. Moreover, two features of standard
NDN routers: (1) content caching and (2) collapsing of
redundant interests, reduce the utility of eavesdropping
near a content producer since not all interests for the
same content reach its producer.

On the other hand, NDN provides no protection
against an adversary that monitors local activity of a spe-
ciﬁc consumer. As most content names are expected to
be semantically relevant to content itself, interests can
leak a lot of information about the content they aim to
retrieve. To mitigate this issue, NDN allows the use
of “encrypted names”, whereby a producer encrypts the
tail-end (a few components) of a name [27]. 4 However,
this simple approach does not provide much privacy: the
adversary can link multiple interests for the same con-
tent – or those sharing the same name preﬁx – issued by
different consumers. Moreover, an adversary can always
replay an interest to see what (possibly cached) content
it returns, even if a name of content is not semantically
relevant.
3 Related Work

The goal of anonymizing tools and techniques is to
decouple actions from entities that perform them. The
most basic approach to anonymity is to use a trusted
anonymizing proxy. A proxy is typically interposed be-
tween a sender and a receiver in order to hide identity
of the former from the latter. The Anonymizer [3] and
Lucent Personalized Web Assistant [22] are examples of
this approach. While relatively efﬁcient, it is susceptible
to a (local) passive adversary that monitors all proxy ac-

4For

name

such

example,

as:
/ndn/xerox/parc/Alice/family/photos/Hawaii might
be replaced with /ndn/xerox/parc/Alice/encrypted-part.

a

tivity. Also, a centralized proxy necessitates centralized
(global) trust and represents a single point of failure.

A more sophisticated decentralized approach is used
in mix networks [13]. Typically, a mix network achieves
anonymity by repeatedly routing a message from one
proxy to another, such that the message gradually loses
any relationship with its originator. Messages must be
made unintelligible to potentially untrusted intermediate
nodes. Chaum’s initial proposal [13] deﬁnes an anony-
mous email system, wherein a sender envelops a mes-
sage with several concentric layers of public key encryp-
tion. The resulting message is then forwarded to a se-
quence of mix servers, that gradually remove one layer
of encryption at a time and forward the message to the
next mix server.

Subsequent research generally falls into two classes:
delay-tolerant applications (e.g. email, ﬁle sharing) and
real-time or low-latency applications (e.g. web brows-
ing, VoIP, SSH). These two classes achieve different
tradeoffs between performance (in terms of latency and
bandwidth) and anonymity. For example, Babel [24],
Mixmaster [30] and Mixminion [16] belong to the ﬁrst
category. Their goal is to provide anonymity with re-
spect to the global eavesdropper adversary. Each mix
introduces spurious trafﬁc and randomized trafﬁc delays
in order to inhibit correlation between input and out-
put trafﬁc. However, unpredictable trafﬁc characteris-
tics and high delays make these techniques unsuitable
for many applications.

Low-latency anonymizing networks are at the other
end of the spectrum. They try to minimize extra latency
by forwarding trafﬁc as fast as possible. Because of this,
strategies used in anonymization of delay-tolerant trafﬁc
– batching (delaying) and re-ordering of trafﬁc in mixes,
as well as introduction of decoy trafﬁc — are generally
not applicable. For example, [40] shows how trafﬁc pat-
terns can be used for de-anonymization in low-latency
anonymity systems. Notable low-latency tools are sum-
marized below.

Crowds [37] is a low-latency anonymizing network
for HTTP trafﬁc. It differs from traditional mix-based
approaches as it lacks layered encryption. For each mes-
sage it receives, an anonymizer probabilistically chooses
to either forward it to a random next hop within the
Crowds network or deliver it to its ﬁnal destination.
Since messages are not encrypted, Crowds is vulnerable
to local eavesdroppers and predecessor attacks [43].

Morphmix [38, 39] is a fully distributed peer-to-
peer mix network that uses layered encryption. Unlike
Crowds, it does not require a lookup service to keep
track of all participating nodes. Senders selects the ﬁrst
anonymizer and each anonymizer along an “anonymous
tunnel” picks the next hop to dynamically build tunnels.
Tarzan [21] is another fully distributed peer-to-peer mix

network. It builds a universally veriﬁable set of neigh-
bors (called mimics) for every node to keep track of
other other Tarzan participants. Every node selects its
mimics pseudo-randomly.

Tor [18] is the best-known and most-used low-latency
anonymizing tool.
It is based on onion routing and
layered encryption. Tor uses a central directory to lo-
cate participating nodes and requires users to build a
three-hop anonymizing circuit by choosing three ran-
dom nodes. The ﬁrst is called the guard, the second
– the middle, and the third — exit node. Once set up,
each circuit in Tor lasts about 10 minutes. For better
performance, bandwidth available to nodes is taken into
account during circuit establishment and multiple TCP
connections are multiplexed over one circuit. Commu-
nication between Tor nodes is secured via SSL. How-
ever, Tor does not introduce any decoy trafﬁc or random-
ization to hide trafﬁc patterns. Another anonymization
tool, I2P [26], adopts many ideas of Tor, while using a
distributed untrusted directory service to keep track of
its participants. I2P also replaces Tor’s circuit-switching
operation with packet-switching to achieve better load
balancing and fault-tolerance.

A consumer privacy technique for

Information-
Centric Networks (ICNs) is proposed in [4]. Instead of
using encryption, it leverages cooperation from content
producers and requires them to mix sensitive informa-
tion with so-called “cover” content. This approach re-
quires producers to cooperate and store a large amount
of cover trafﬁc.
It also does not provide consumer-
producer unlinkability or protection against malicious
producers.

Telex [44] is an alternative to mix networks de-
signed to evade state-level censorship. It uses stegano-
graphic techniques to hide messages in SSL handshakes.
Users connect to innocuous-looking unblocked websites
through SSL. Sympathetic ISP-s that forward user’s traf-
ﬁc recover hidden messages and deliver them to the in-
tended destination. While novel, this approach presents
signiﬁcant deployment challenges and requires support
from the network infrastructure. Furthermore, the threat
model in Telex is quite different from that of the other
anonymizing tools presented above. Moreover, estab-
lished TCP ﬁngerprinting techniques can easily detect
differences between a Telex station and a censored web-
site. Another analogous technique – called Cirripede
[25] – was recently proposed.
4 ANDaNA

ANDaNA is a onion routing overlay network, built
on top of NDN, that provides privacy and anonymity
to consumers.
In particular, ANDaNA prevents adver-
saries from linking consumers with the content they
are retrieving. Following the terminology introduced

in [37], ANDaNA provides beyond suspicion5 degree of
anonymity to its users.

ANDaNA uses multiple concentric layers of encryp-
tion and routes messages from consumers through a
chain of at least two onion routers. Each router removes
a layer of encryption and forwards the decrypted mes-
sages to the next hop. Due to its low-latency focus,
ANDaNA does not guarantee privacy in presence of a
global eavesdropper. However, since it is geared for a
world-wide (or at least geographically distributed) net-
work spanning a multitude of administrative domains,
the existence of such an adversary is unlikely. For this
reason, we restrict the adversarial capabilities to eaves-
dropping on, injecting, removing or modifying mes-
sages on a subset of available links. An adversary
can compromise NDN routers and ANDaNA nodes at
will. Nonetheless, consumers beneﬁt from anonymity as
long as they use at least one non-compromised ANDaNA
node. Details of our adversarial model and formal pri-
vacy guarantees are discussed in Section 5.
4.1 Design

We now present two techniques — asymmetric and
session-based — that provide privacy and anonymity for
NDN trafﬁc. Trafﬁc is routed through ephemeral cir-
cuits, that are deﬁned as a pair of distinct anonymizing
routers (ARs). An AR is a NDN node (e.g. a router or a
host) that chooses to be part of ANDaNA. An ephemeral
circuit transports only one (or only a few) encrypted in-
terest(s).
It disappears either when the corresponding
content gets delivered, or after a short timeout (hence
“ephemeral”). A timeout interval is needed so that the
consumer can re-issue the same encrypted interest in
case of packet loss. We refer to the ﬁrst AR as entry
router and the second – as exit router. They must not
belong to the same administrative domain and must not
share the same name preﬁx. Optionally, consumers can
select ARs according to some parameters, such as adver-
tised bandwidth, availability or average load. As pointed
out in [5, 31], there is a well know natural tension be-
tween non-uniform (i.e. performance-driven) choice of
routers and anonymity. Consumers should consider this
when selecting ARs.

To build an ephemeral circuit, a consumer retrieves
the list of ARs and corresponding public keys. Although
we do not mandate any particular technique, a consumer
can retrieve this list using, e.g., a directory service [18]
or a decentralized (peer-to-peer) mechanism. AR pub-
lic keys can be authenticated using decentralized tech-
niques (such as web-of-trust [2]) or a PKI infrastruc-
ture.6

5For any packet observed by the adversary, an entity is considered
beyond suspicion if it is as likely to be the sender of this packet as any
other entity.

6Note that implicit replication implemented through caching al-

A prospective AR joins ANDaNA by advertising its
public key, together with its identity deﬁned as: names-
pace, organization and public key ﬁngerprint. An AR
also publishes auxiliary information, such as total band-
width, average load, and uptime.

As mentioned earlier, both interest and content pack-
ets leak information. Even if names in interests are hid-
den, three components of content packets — signatures,
names and content itself — contain potentially sensitive
information. Of course, content producers could sim-
ply generate a new key-pair to sign each content packet.
This would be impractical, since high costs of key gen-
eration and distribution would make it difﬁcult for con-
sumers to authenticate content. (Note that key-evolving
schemes [8] do not help, since veriﬁcation keys gener-
ally evolve in a way that is predictable to all parties, in-
cluding the adversary.) Alternatively, the original con-
tent signature could be replaced with that generated by
an AR. However, this would preclude end-to-end con-
tent veriﬁability and thus break the NDN trust model.

For this reason, ANDaNA implements encrypted en-
capsulation of original content, using two symmetric
keys securely distributed by the consumer to the ARs
during setup of the ephemeral circuit. Upon receiving a
content packet, the exit router encrypts it, together with
the original (cleartext) name and signature, under the
ﬁrst key provided by the consumer. Then, treating the
ciphertext as payload for a new content packet, the exit
router signs and sends it to the entry router. The latter
strips this signature and the name and encrypts the re-
maining ciphertext under the second symmetric key pro-
vided by the consumer. Next, it forwards the ciphertext
with the original encrypted name and a fresh (its own)
signature. After decrypting the payload, the consumer
discards the signature from the entry router and veriﬁes
the one from the content producer.

Because decryption is deterministic, an encrypted in-
terest sent to an AR always produces the same output.
Since ARs are a public resource, the adversary can use
them to decrypt previously observed interests.
It can
thus observe the corresponding output and correlate in-
coming/outgoing interests. This is a well-known attack
and there are several ways to mitigate it, such as en-
crypted channels between communicating parties [18]
and mixing (for delay-tolerant trafﬁc) [24]. However,
such techniques tend to have signiﬁcant impact on com-
putational costs and latency. Instead, we use standard
NDN features of interest aggregation and caching to pre-
vent such attacks, as described next.

In NDN, a router (not just an AR) that receives dupli-
cate interests collapses them. An interest is considered
a duplicate, if it arrives while another interest referring

lows the construction of a directory system with better resilience
against denial-of-service (DoS) attacks than IP.

to the same content has not been satisﬁed. Also, if the
original interest has been satisﬁed and the correspond-
ing content is still in cache, a new interest requesting
the same piece of data is satisﬁed with cached content.
In this case, the router does not forward any interests.
Therefore, the adversary must wait for the expiration of
cached content.

As part of ANDaNA, the consumer includes its current
timestamp within each encryption layer. ARs reject in-
terests with timestamps outside a pre-deﬁned time win-
dow. Thus, consumers need to be loosely synchronized
with ARs that must reserve at least (rate × window) of
cache, where rate is the router’s wire-rate and window
is the interval within which interests are accepted.
In
this way, if an interest is received multiple times by an
AR (e.g. in case of loss of the corresponding data packet
between the AR and the consumer), the AR is able to
satisfy it using its cache.

The encryption algorithm used by consumers to con-
ceal names in interests must be secure against adap-
tive chosen ciphertext (CCA) attacks.7 CCA-security
[9] implies, among other things, probabilistic encryption
and non-malleability. The former prevents the adversary
from determining whether two encrypted interests cor-
respond to the same unencrypted interest. Whereas, the
latter implies that the adversary cannot modify interests
to defeat the mechanism described above.

We now describe two ﬂavors of anonymization pro-
tocols: asymmetric and session-based.
In order to al-
low efﬁcient routing of interest packets, the encrypted
component is encoded at the end of the name with both
ﬂavors.
Asymmetric: To issue an interest, a consumer selects
a pair of ARs and uses their public keys to encrypt the
interest, as described above and in Algorithm 1. A con-
sumer also generates two symmetric keys: k1 and k2
that will be used to encrypt the content packet on the
way back. We use Epk(·) and Ek(·) to denote (CCA-
secure) public key and symmetric encryption schemes,
respectively.

To account for the delay due to extra hops needed
to reach the second AR (and reduce the number of dis-
carded interests), a consumer adds half of the estimated
round trip time (RTT) to the innermost timestamp. Each
AR removes the outermost encryption layer, as detailed
in Algorithm 2. Since Epk(·) is CCA-secure, the decryp-
tion process fails if the ciphertext has been modiﬁed in
transit or was not encrypted under the AR’s public key.
Content corresponding to the encrypted interest is en-
crypted on the way back, as detailed in Algorithm 3, us-

7Technically,

in order to guarantee correctness an encryption
scheme suitable for ANDaNA must also be robust [1]. However, since
CCA-secure encryption schemes used in practice are also robust, we
omit this requirement in the rest of the paper.

Algorithm 1: Encrypted Interest Generation
input : Interest int; Set of (cid:96) ARs and their keys:

R = {(ARi, pki) | 0 < i ≤ (cid:96) , pki ∈ PK}

output: Encrypted interest intpki,pkj ; symmetric keys k1, k2
1: Select (ARi, pki), (ARj , pkj ) from R
2: if ARi = ARj or ARi, ARj are from same organization or

ARi, ARj share the same name preﬁx then

Go to line 1

3:
4: end if
5: k1 ← {0, 1}κ ; k2 ← {0, 1}κ
6: eint = AR2/Epkj (int | k2 | curr timestamp + RT T /2)
7: eint = AR1/Epki (eint | k1 | curr timestamp)
8: Output eint, k1, k2

Algorithm 2: AR Handling of Encrypted Interests
input : Encrypted Interest intpki,pkj , where

pki, pkj ∈ PK ∪ {⊥} (where “⊥” denotes “no
encryption”)

output: Interest intpkj ; symmetric key k1
1: (intpkj , k1, timestamp) = Dski (intpki,pkj )
2: if Step 1 fails or timestamp is not current then
3:
4: else
5:
6:
7: end if

Save tuple (intpki,pkj , intpkj , k1) to internal state
Output intpkj , k1

Discard intpki,pkj

Algorithm 3: AR Content Routing
input : Content: datak2 in response to intpkj , where

pkj ∈ PK ∪ {⊥}

where name in intpk2 matches that in datak2

output: Encrypted data packet datak1,k2
1: Retrieve tuple (intpki,pkj , intpkj , k1) from internal state
2: if k2 (cid:54)= ⊥ then Remove signature and name from datak2
3: Create new empty data packet pkt
4: Set name on pkt as the name on intpki,pkj
5: Set the data in pkt as Ek1 (datak2 )
6: Sign pkt with AR’s key
7: Output pkt as datak1,k2

ing Ek(·) and symmetric keys supplied by the consumer.
Session-based Variant.
This variant aims to reduce
(amortize) the use of public key encryption thus lower-
ing the computational cost and ciphertext size. Before
sending any interests through ephemeral circuits, a con-
sumer (Alice) establishes a shared secret key with each
selected AR. This is done via a 2-packet interest/content
handshake. We do not describe the details of symmet-
ric key setup, since there are standard ways of doing
it. We provide two options: one using Difﬁe-Hellman
key exchange [17], and the other – using SSL/TLS-style
protocol whereby Alice encrypts a key for ARi. Once a
symmetric key kai is shared with ARi, Alice can estab-
lish any number of ephemeral circuits using it as either
ﬁrst or second AR hop. Also at setup time, Alice and
ARi agree on session identiﬁer value – sidai – that is in-
cluded (in cleartext) in subsequent interests so that ARi

can identify the appropriate entry for Alice and kai.

The main advantage of the session-based approach
is better performance: both consumers and routers only
perform symmetric operations after initial key setup.
However, one drawback is that, since the session iden-
tiﬁer sid is not encrypted, packets corresponding to the
same sid are easily linkable.

We note that our design neither encourages nor pre-
vents consumers from mixing asymmetric and session-
based variants for the same or different ephemeral cir-
cuits.
4.2 System and Security Model

In order for our discussion to relate to prior work,
we use the notion of “indistinguishable conﬁgurations”
from the framework introduced in [19]; the actual deﬁ-
nitions are in Section 5.

Our security analysis considers the worst case sce-
nario, i.e., interests being satisﬁed by the content pro-
ducer rather than a router’s cache. While, in normal
conditions, encrypted interests are satisﬁed by caches
only in case of packet loss, fully decrypted interests may
not have to reach to content producers. A system se-
cure in case of cache misses is also secure when interests
are satisﬁed by content cached at routers along the way.
(Recall that, when an interest is satisﬁed by a router’s
cache, it is not forwarded any further.) This limits the
adversary’s ability to observe interests in transit.

lowing actions:

Adversary Goals and Capabilities.
The goal of an
adversary is to link consumers with their actions. In par-
ticular, it may want to determine what content is being
requested by a particular user and/or which users are re-
questing speciﬁc content. A somewhat related goal is
determining which cache (if any) is satisfying a con-
sumer’s requests. Our adversary is local and active: it
controls only a subset of network entities and can per-
form any action usually allowed to such entities. More-
over, it is capable of selectively compromising addi-
tional network entities according to its local information.
Our model allows the adversary to perform the fol-
• Deploy compromised routers: ANDaNA is an
open network, therefore an adversary can deploy
compromised anonymizers and regular routers. As
such, routers may exhibit malicious behavior in-
cluding injection, delay, alteration, or drop trafﬁc.
• Compromise existing routers: An adversary can
select any router (either ARs or regular routers) in
the network and compromise it. As a result, the ad-
versary learns all the private information (e.g. de-
cryption keys, pending decrypted interests, cache
content, etc.) of such router.
• Control content producers: Content producers
are not part of ANDaNA. As such, the network has

no control over them. An adversary can compro-
mise existing content producers or deploy compro-
mised ones and convince users to pull content from
them. We also assume that the content providers
are publicly accessible, and therefore the adversary
is able to retrieve content from them.
• Deploy compromised caches: Similarly to com-
promised content producers, an adversary can com-
promise routers’ cache or deploy its own caches.
The behavior of a compromised cache includes
monitoring cache requests and replying with cor-
rupted data.
• Observe and replay trafﬁc: An adversary can tap
a link carrying anonymized trafﬁc. By doing this
it learns, among other things, packet contents and
trafﬁc patterns. The trafﬁc observed by an adver-
sary can be replayed by any compromised router.

An adversary can iteratively compromise entities of its
choice, and use the information it gathers to determine
what should be compromised next.
In order to make
our model realistic, the time required by an adversary
to compromise or deploy a router, a cache or a con-
tent producer is signiﬁcantly higher that the round-trip
time (RTT) of an anonymized interest and correspond-
ing data. This implies that all the state information re-
covered from a newly compromised router only refers to
packets received after the adversary decides to compro-
mise such router.

A powerful class of attacks against anonymizing net-
works is called ﬁngerprinting [29, 41].
Inter-packet
time intervals are usually not hidden in low latency
onion routing networks because packets are dispatched
as quickly as possible. This behavior can be exploited
by an adversary, who can correlate inter-packet intervals
on two links and use this information to determine if
the observed packets belong to the same consumer [41].
This class of attacks is signiﬁcantly harder to execute on
ANDaNA because of the nature of ephemeral circuits and
because of the use of caches on routers. Ephemeral cir-
cuits do not allow the adversary to gather enough pack-
ets with uniform delays since they are used to transport
only one or a very small number of interests and corre-
sponding data. Active adversaries who can control the
communication link of a content provider can add mea-
surable delays to some of the packets in order to identify
consumers. However, consumers may be able to retrieve
the same content through caches making such attack in-
effective. Throughput ﬁngerprinting consists in measur-
ing the throughput of the circuit used by a consumer to
identify the slowest anonymizer in the consumer’s cir-
cuit [29]. Throughput ﬁngerprinting is difﬁcult to per-
form in ANDaNA since each ephemeral circuit does not
carry enough information to mount an attack.
In par-
ticular, the authors of [29] report that a successful at-

tack requires at least a few minutes of trafﬁc on Tor.
Similarly, ephemeral circuits provide an effective pro-
tection against known attacks such as the predecessor
attack [43].
Consumers, Producers and ARs. Each consumer runs
several processes that generate interests. For our analy-
sis, interests are created by a speciﬁc interface of a host,
and the corresponding content is delivered back to the
same interface. Interest encryption is either performed
on the consumer’s host, or on an entity that routes con-
sumer’s trafﬁc. In the latter case, the channel between
the user and the anonymizing entity is considered se-
cure.

Content is generated by producers, i.e., entities that
can sign data. We do not assume the correspondence
between a producer and a particular host. Content can
be either stored in routers’ caches, at servers or dynami-
cally generated in response to an interest.

ARs perform interests decryption and content encap-
sulation. Each AR advertises a public key for signature
veriﬁcation and one or more public keys for encryption.
ARs must refresh their encryption keys frequently, dis-
carding old keys after a short grace period. In order to
simplify key distribution and allow consumer to imme-
diately trust new public keys from routers, we use a sim-
ple key hierarchy where a long lived public key owned
by the router (the signing key), is used to certify short
lived encryption keys. The signing key may be certiﬁed
by other entities using techniques like web-of-trust or
PKI.
Denial-of-service Attacks. ANDaNA is envisioned as a
public overlay network and is clearly susceptible to DoS
attacks. Since anyone can join ANDaNA as an AR or
use it as a consumer, we make no distinction between
insider and outsider attacks. The adversary can send nu-
merous interests to ARs or construct ephemeral circuits
longer than two hops in order to maximize effective-
ness of attacks. Moreover, it can consume AR resources
by sending malformed encrypted interests that require
ARs to perform expensive and ultimately useless public
key decryption. Similar to Tor, before establishing an
ephemeral circuit, an AR can ask a consumer to solve an
easy-to-verify/expensive-to-solve puzzle. This and sim-
ilar techniques for ANDaNA are subjects of future work.
In a setting with long-lived circuits, such as Tor, disrupt-
ing a node effectively shuts down all circuits that include
it. Due to the short lifespan of our ephemeral circuits,
the same attack on ANDaNA only causes a very small
number of interests/data packets per user to be dropped.
Abuse.
Similar to any other anonymity service,
ANDaNA can be abused for a variety of nefarious pur-
poses. We do not elaborate on this topic. However, exit
policies similar to those in Tor [18] can be used with
ANDaNA based on content names.

5 Security Analysis

In this section we propose a formal model for eval-
uating the security of ANDaNA. We deﬁne consumer
anonymity and unlinkability with respect to an adver-
sary within this model. We ﬁnally provide necessary
and sufﬁcient conditions for anonymity and unlinkabil-
ity. As our analysis shows, we are able to obtain a level
of anonymity comparable to Tor with two — rather than
Tor’s three — ARs thanks to the lack of source addresses
in NDN interests.

In general, efﬁcacy of ANDaNA depends on the in-
ability of the adversary to correlate input and output
of a non-compromised AR, and its inability to observe
all producer and consumers at the same time. Since
ANDaNA is designed for low-latency trafﬁc, we do not
intentionally delay messages or introduce dummy pack-
ets, other than some limited padding. This is similar to
how Tor and other low-latency anonymizing networks
forward trafﬁc, and implies that trafﬁc patterns remain
almost unchanged as they pass through the network [31].
It is well known that, in Tor, this allows the adversary
that observes both ends of a communication ﬂow to con-
ﬁrm a suspected link between them [5, 35]. For this rea-
son, a global passive adversary can violate anonymity
properties of both Tor and ANDaNA. However, we be-
lieve that such an adversary is unrealistic in a geographi-
cally distributed network spanning over multiple admin-
istrative domains, and designing against it would result
in overkill.

We assume that any adversary monitoring all inter-
faces of an AR can correlate entering encrypted trafﬁc
with its exiting, decrypted counterpart using timing in-
formation. However, we believe that the short lifespan
of ephemeral circuits – and therefore the limited num-
ber of related packets traveling through a single AR –
severely limits the adversary’s ability to carry out this
attack. Unfortunately, at the time of this writing we
do not have enough experimental evidence to conﬁrm
this. For the sake of safety, in the analysis below we
assume that, by compromising all interfaces of an AR,
the adversary also compromises the AR itself. There-
fore, a non-compromised AR must have at least one non-
compromised interface. To sum up, we assume that:

Assumption 5.1. Adv cannot correlate input and out-
put of a non-compromised AR.

Our analysis is based on indistinguishable conﬁgura-
tions. A conﬁguration deﬁnes consumers’ activity with
respect to a particular network. Adv only controls a sub-
set of network entities and observes only some pack-
ets. Therefore, it cannot distinguish between two con-
ﬁgurations that vary only in the activity that it cannot
directly observe or in the content of encrypted pack-
ets that it cannot decrypt.
In order to provide mean-

ingful anonymity guarantees, we identify a set of con-
ﬁgurations that have one or more equivalent counter-
parts. However, unlike [19], our analysis takes into ac-
count the infrastructure underlying ANDaNA, i.e., the
network topology and packets exchanged over the ac-
tual network. We believe that this makes our model and
analysis both realistic and ﬁne-grained, since it accounts
for all adversarial advantages related to the underlying
network structure. Packets sent by a non-compromised
consumer u to a non-compromised AR r transit through
several — possibly compromised — NDN routers that
are not part of ANDaNA. The model of [19] considers r
compromised even if only one link between u and r is
controlled by the adversary. Whereas, in our model, r is
considered to be non-compromised.

Notation and Deﬁnitions

Table 1 summarizes our notation. The intersection of
P and C might not be empty, which reﬂects the fact that
consumers can act as producers and vice versa. Sim-
ilarly, our model does not prevent routers from being
producers and/or consumers. Therefore, R∩P and R∩C
might be non-empty.
The adversary is deﬁned as a 4-tuple: Adv =
(PAdv, CAdv, RAdv, IFAdv) ⊂ (P, C, R, IF) where indi-
vidual components specify (respectively) sets of: com-
promised producers, consumers, routers and interfaces.
If r ∈ RAdv, then Adv controls all interfaces and has ac-
cess to all decryption key and state information of r. If
all interfaces of r are in IFAdv, then r ∈ RAdv. In other
words, for the sake of this analysis, controlling all in-
terfaces of a router is equivalent to learning that router’s
decryption/secret key. We emphasize that for r ∈ R to
be non-compromised, at least one of its interfaces must
be non-compromised. If p ∈ PAdv, Adv controls p’s
interfaces, monitors interests received by p and controls
both content and timing of p’s responses to incoming in-
terests. If c ∈ CAdv, then Adv controls all ﬁelds and
timing of interests. Finally, if if ∈ IFAdv, then Adv can
listen to all trafﬁc ﬂowing through if, as well as send-
ing new trafﬁc from it. IFAdv includes all the interfaces
of compromised consumers, producers and routers plus
additional interfaces eavesdropped on by Adv.

For ease of notation, we do not explicitly indicate the
name of the next router in interest packets nor symmetric
keys chosen by consumers. We denote encrypted inter-
ests as:

intpk1,pk2 = Epk1 (Epk2 (int))

with pk1, pk2 ∈ PK ∪{⊥} where ⊥ indicates a special
symbol for “no encryption”. If pk1 = ⊥ then pk2 = ⊥.
The size of public keys is a function of the global se-
curity parameter κ. For simplicity, we denote intpk1,⊥
as intpk1. When an AR receives intpk1,pk2 and if it is in
possession of the decryption key corresponding to pk1, it

removes the outer layer of encryption. While E is CCA-
secure (and therefore also CPA-secure), we do not re-
quire E to be key private [6]. Key privacy prevents an
observer from learning the public key used to generate
a ciphertext. In ANDaNA, knowledge of the public key
used to encrypt the outer layer of an interest does not re-
veal any more information than the (cleartext) name on
the interest.

We deﬁne the anonymity set with respect to interface
ifr
i as:

= {d | Pr [d →int r | int ; ifr

i ] > 0}

Aif r

i

In other words, for each interface ifr
i of router r, Aif r
contains all entities that could have sent int with non-
zero probability. We deﬁne pathint = {ifr
i}.
i | int ; ifr
This is the sequence of interfaces traversed by int. We
use it to deﬁne the anonymity set of an interest with re-
spect Adv:

i

(cid:44) (cid:92)

Aint
Adv

Aif r

i

pathint∩IFAdv

Adv such that u ∈ Aint

Intuitively, if u is far away from a compromised entity
d, then all sets Aint
Adv are a large
subset of C. Adv can rule out possible senders of an in-
terest (i.e., determine if u /∈ Aint
Adv) only if it controls
at least one entity (routers, interfaces) along each path
that u does not share with other consumers. The level of
anonymity of u ∈ Aint
Adv with respect to Adv is propor-
tional to the size of Aint
Adv. In particular, if u is the only
member of Aint
Adv, it has no anonymity, since int must
have been issued by u.

A conﬁguration is a description of the network activ-
ity. Each conﬁguration maps consumers to their actions,
deﬁned as the interest they issue and the corresponding
content producers. More formally, a conﬁguration is a
relation:

C : C → {(r1, r2, p, intpk1,pk2)}

with (r1, r2, p, intpk1,pk2) ∈ R2×P×{0, 1}∗, that maps
a consumer to: a pair of routers deﬁning an ephemeral
circuit, an interest (encrypted for this circuit) and a pro-
ducer. C(u) is a 4-tuple that represents one action of u
in C. Ci is the selection on the i-th component of C,
i.e., if C(u) = (r1, r2, p, intpk1,pk2), then C1(u) = r1,
C2(u) = r2, C3(u) = p and C4(u) = intpk1,pk2.
We say that two conﬁgurations C and C(cid:48) are “indis-
tinguishable with respect to Adv” if Adv can only de-
termine with probability at most 1/2 + ε which conﬁg-
uration corresponds to the observed network, for some
ε negligible in the security parameter κ. We denote two
such conﬁgurations as C ≡Adv C(cid:48).

We now show that assumption 5.1 holds if a pas-
sive adversary observes only input and output values of

set of all consumers, u ∈ C
set of all content producers, p ∈ P
set of all routers, r ∈ R
set of all interfaces on all network devices
i-th interface on router r

C
P
R
IF
i ∈ IF
ifr
PK set of all public keys

(pki, ski)

public/priv. encryption keypair of an AR ri

Adv
d
d →int r
int ; ifr
i
Epk(·)
intpk1,pk2

adversary
an entity, i.e., a router or a host
entity d sends interest int to some interface of router r
router r receives interest int on interface ifr
i
CCA-secure hybrid encryption scheme
interest encrypted under public keys pk1, pk2

⊥ no encryption

Table 1. Notation.

an AR (i.e., it cannot use timing information or other
side-channels), and the underlying encryption scheme
is semantically secure. Claim 5.1 below states that, for
any encrypted interest, Adv cannot determine if it corre-
sponds to an interest decrypted by a non-compromised
router, by observing the two and with no additional in-
formation.

Claim 5.1. Given any CPA-secure public key encryp-
tion scheme E and two same-length interests int0, int1
chosen by Adv, Adv has only negligible advantage over
1/2 in determining the value of a randomly selected bit
, with pk1 ∈ PK
b, given intb
, int0
and pk2 ∈ PK ∪ {⊥}.
Due to the lack of space, Claim 5.1 is formally justiﬁed
in Appendix A.
Anonymity Deﬁnitions and Conditions

and int1

pk1,pk2

pk2

pk2

In this section we present formal deﬁnitions of
anonymity for our model. We introduce the notions of
consumer anonymity, producer anonymity and producer
and consumer unlinkability. We show that ephemeral
circuits composed of two anonymizing routers — at
least one of which is not compromised — provide con-
sumer and producer anonymity. This, in turn, implies
consumer and producer unlinkability. Due to the lack
of space, we defer formal proofs of the theorems in this
section to Appendix A.
A consumer u enjoys consumer anonymity if Adv
cannot determine whether u or a different user u(cid:48) is
retrieving some speciﬁc content. This notion is for-
malized using indistinguishable conﬁgurations: given a
conﬁguration C in which u retrieves content t, u has
consumer anonymity if there exist another conﬁguration
C(cid:48) in which u(cid:48) retrieves t and Adv cannot determine
whether he is observing C or C(cid:48). More formally:
Deﬁnition 5.1 (Consumer anonymity). u ∈ (C \ CAdv)
has consumer anonymity in conﬁguration C with respect
to Adv if there exists C(cid:48) ≡Adv C such that C(cid:48)(u(cid:48)) =
C(u) and u(cid:48) (cid:54)= u.
Theorem 5.1. u ∈ (C\ CAdv) has consumer anonymity
in C with respect to Adv if there exists u(cid:48) (cid:54)= u such that
any of the following conditions hold:
1. u, u(cid:48) ∈ AC4(u)

Adv

2. C1(u) = C1(u(cid:48)), C1(u) /∈ R and C1(u) ∈ A
3. C2(u) = C2(u(cid:48)), C2(u) /∈ R and C2(u) ∈ Aint

where C4(u) = intpk1,pk2

intpk2
Adv

Adv

where C4(u) = intpk1,pk2

Informally, the theorem above states that ANDaNA pro-
vides consumer anonymity with respect to Adv if: 1.
Adv cannot observe encrypted interests coming from u
and u(cid:48), or it cannot distinguish between the two con-
sumers due to anonymity provided by the network layer;
or 2. u, u(cid:48) share an non-compromised ﬁrst router in at
least one ephemeral circuit; or 3. u, u(cid:48) share an non-
compromised second router in at least one ephemeral
circuit.

to

Similarly

consumer

anonymity,

producer
anonymity is deﬁned in terms of indistinguishable
conﬁgurations.
In particular, a producer p enjoys
anonymity with respect
to Adv which observes
intpk1,pk2 if Adv cannot distinguish between a conﬁgu-
ration C where p produces the content corresponding to
int and a conﬁguration C(cid:48) where p(cid:48) and not p produces
that content.
Deﬁnition 5.2 (Producer anonymity). Given intpk1,pk2
for p ∈ P, u ∈ C has producer anonymity in conﬁgu-
ration C with respect to p, Adv if there exists an indis-
tinguishable conﬁguration C(cid:48) such that intpk1,pk2 is sent
by a non-compromised consumer to a producer different
from p.

Theorem 5.2. u has producer anonymity in C with re-
spect to p, Adv if any of the following conditions hold:
1. There exists C(u) such that C1(u) (the ﬁrst
is not compromised and
anonymizing router)
C4(u) = intpk1,pk2, C1(u) = C1(u(cid:48)) and C3(u) =
p (cid:54)= C3(u(cid:48)) for some non-compromised u(cid:48) ∈ C, or
2. There exists C(u) such that C2(u) (the sec-
ond anonymizing router) is not compromised and
C4(u) = intpk1,pk2, C2(u) = C2(u(cid:48)) and C3(u) =
p (cid:54)= C3(u(cid:48)) for some non-compromised u(cid:48) ∈ C

Finally, we deﬁne producer and consumer unlinkability
as:
Deﬁnition 5.3 (Producer and consumer unlinkability).
We say that u ∈ (C \ CAdv) and p ∈ P are unlinkable in
C with respect to Adv if there exists C(cid:48) ≡Adv C where
u’s interests are sent to a producer p(cid:48) (cid:54)= p.

Corollary 5.1. Consumer u ∈ (C\ CAdv) and producer
p ∈ P are unlinkable in conﬁguration C with respect
to Adv if p has producer anonymity with respect to u’s
interests or u has consumer anonymity and there exists
a conﬁguration C(cid:48) ≡Adv C where C(cid:48)(u(cid:48)) = C(u) with
(cid:54)= u and u(cid:48)’s interests have a destination different
u(cid:48)
from p.
Corollary 5.2. Consumer u ∈ (C\ CAdv) and producer
p ∈ P are unlinkable in conﬁguration C with respect to
Adv if both producer and consumer anonymity hold.

We emphasize that

this

result also holds

for

ephemeral circuits with length greater than two ARs.
6

Implementation and Performance
ANDaNA is implemented as an application-level ser-
vice consisting of client “stack” (used by consumers)
and server program that runs on ANDaNA ARs. Both
are written in C and interface to NDN through Unix
domain sockets.8 Cryptographic algorithms are imple-
mented using OpenSSL [42]. Hybrid encryption is ob-
tained using RSA-OAEP [10] and AES+HMAC [15, 7].
The latter is also used for symmetric encryption. We
use SHA-256 for HMAC and 1024- and 128-bit keys
for RSA and AES, respectively. Loose time synchro-
nization among ANDaNA client and servers are achieved
using pool.ntp.org, a public pool of NTP servers.

ANDaNA client encrypts interests from user appli-
cations.
In order to hide all possible sources of de-
anonymizing information, encryption is performed over
the full interest packet, including: name, scope, exclu-
sion ﬁlters and duplicate suppression string ﬁelds. Fol-
lowing NDN “rules”, ANDaNA AR announces the abil-
ity to serve the root (“/”) namespace and receives all
trafﬁc sent from (or to) the local NDN routing process.
This allows trafﬁc to be routed through ANDaNA by
default, requiring no changes to existing applications.
For more granularity, consumers can vary the default
namespace, e.g., “/andana/”. However, this would
require privacy-seeking applications to explicitly direct
their trafﬁc to that namespace, similar to today’s conﬁg-
urable proxy settings.

ANDaNA servers run as applications on NDN routers.
Each server is responsible for its relay and session cre-
ation namespaces. The former is a globally routable
namespace used for receiving both session-based and
asymmetrically encrypted Interests.
Clients using
session-based encryption in ANDaNA need to ﬁrst es-
tablish symmetric keys with servers. To start a new
session with a server, a clients sends an interest in the
createsession namespace, registered by the server
code as a sub-preﬁx of the relay namespace.

8At the time of this writing, there is no direct function interface to

NDN

We deployed our prototype and run a series of tests
on the Open Network Laboratory (ONL) [34]. ONL is a
testbed developed by Washington University to enable
experimental evaluation of advanced networking con-
cepts in a realistic environment. To guarantee highly re-
producible results, ONL provides reservation-based ex-
clusive access to most of its host and network resources.
All our experiments used single-core Linux machines
with 512 MB of RAM and gigabit switches (one ma-
chine per switch).

We compare plain NDN and ANDaNA on a simple
line topology with four switches and four Linux ma-
chines, each corresponding to an NDN node. Static
routing is established between nodes. The ﬁrst NDN
node in the line topology acts as a consumer and runs
ccngetfile — a small tool from CCNx open-source
library that retrieves data published as NDN content and
stores it in a local ﬁle. We performed tests with 1, 10,
and 100MB ﬁles; each ﬁle was retrieved from the NDN
repository of the machine at the other end of the line
topology. Results of this comparison for 10MB ﬁles
are summarized in Fig. 1. Due to space constraints, we
illustrate all ﬁle retrieval results in Appendix B. Re-
sults show that computational overhead introduced by
ANDaNA roughly doubles download times over plain
NDN. This is assuming an almost-perfect world where
ARs topologically align with the best path and link
bandwidths are abundant.

In order to compare ANDaNA’s computational over-
head with a similar anonymizing tool, we deployed Tor
over ONL and measured its overhead over TCP/IP. We
measured performance of TCP/IP baseline deploying
ﬁve switches, connected in a line, and two Linux ma-
chines (one at each end): the ﬁrst acting as client (run-
ning curl), the second – as server (running lighttpd
HTTP server). Performance of Tor was measured on a
topology that closely mimics that of TCP/IP baseline:
ﬁve switches, connecting three Tor relays, a client and a
server. To ensure “line” topology, Tor client is conﬁg-
ured to use explicit entry and exit nodes; DNS lookups
are avoided by using IP addresses in all tests.

Before discussing the results, we mention some com-
parison details. NDN is a research project and its code
is optimized for functionality rather than performance.
It provides content authentication through digital signa-
tures – a computationally expensive feature not present
in either TCP/IP or Tor. NDN stack currently runs as a
user-space application, in contrast to TCP/IP that runs
in kernel-space. Finally, in all our experiments, NDN
had to run on top of TCP/IP (rather than at layer 2) due
to limitations of the underlying ONL testbed. Conse-
quently, we believe a fair comparison between ANDaNA
and Tor can only be achieved by focusing the analysis
on relative overhead imposed by each, over the network

Figure 1. Left: RTT for 10MB of content over NDN
(limited anonymity). Right: RTT for 10MB of content
over ANDaNA (full anonymity).

Figure 2. Comparison of 1, 10, and 100MB ﬁle down-
load times over Tor, ANDaNA-S and ANDaNA-A with
respect to respective baselines. Left: transfer time and
circuit setup time. Right: transfer time only.

it is deployed, i.e., NDN and TCP/IP respectively.

Figure 2 shows the performance of ANDaNA and
Tor with respect to their baselines. The graph on the
left shows the measurements including the time re-
quired to setup a Tor circuit and all ephemeral cir-
cuits for ANDaNA. Session-based ANDaNA is denoted
by ANDaNA-S, while ANDaNA with asymmetric encryp-
tion is referred to as ANDaNA-A. For small- to medium-
size ﬁles (1-10MB), overhead of ANDaNA-A is between
1.5× and 1.75×. As expected, ANDaNA-S exhibits
lower overhead (1.45× to 1.7×) due to more efﬁcient
symmetric encryption.

In comparison, Tor’s download time for the same
amount of data is between 2.3 and 7 times higher than
that of TCP/IP. This imposes signiﬁcant overhead for
content size that ﬁts many typical web pages. Whereas,
ANDaNA is efﬁcient in anonymizing such trafﬁc pat-
terns. Large ﬁle transfers are more efﬁcient with Tor,
which increases the total download time by about 1.4
times, compared to 2.4 and 2.1 of ANDaNA-A and
ANDaNA-S.

The right-side graph in Figure 2 shows the rela-
tive speed of three approaches without including circuit
setup time. Our measurements show that overhead of

ephemeral circuit creation in ANDaNA-S is negligible.
Since a new ephemeral circuit must be selected for ev-
ery interest with ANDaNA-A, we simply report the same
values from the previous graph. Results conﬁrm that
overhead of circuit creation in Tor is signiﬁcant when
retrieving small-size content. Removing this initializa-
tion phase from the measurements signiﬁcantly reduces
Tor’s overhead. However, the overhead of ANDaNA with
respect to its baseline is still smaller than that of Tor for
content up to 10MB.

In absolute terms (comparing raw download times),
Tor + TCP/IP performs better than ANDaNA + NDN in
our testbed experiments. However, we believe that, in
a realistic geographically-distributed deployment setting
with limited-bandwidth links, ANDaNA + NDN would
provide a signiﬁcant performance advantage over Tor +
TCP/IP due to its shorter (ephemeral) circuits. In other
words, we anticipate that shorter circuits and content
caching in ANDaNA + NDN would result in apprecia-
bly lower overall download times than Tor + TCP/IP in
a global internet setting.

 0 20 40 60 80 100 120 0 2 4 6 8 10 12 14 16 18RTT (ms)Start Time (s) 0 20 40 60 80 100 120 0 2 4 6 8 10 12 14 16 18RTT (ms)Start Time (s) 1 2 3 4 5 6 7 8 1 10 100Download Time RatioFile Size (MB)Tor/HTTPANDaNA-S/NDNANDaNA-A/NDN 1 2 3 4 5 6 7 8 1 10 100Download Time RatioFile Size (MB)Tor/HTTPANDaNA-S/NDNANDaNA-A/NDN7 Conclusions and Future Work

Content-centric networking is a major transition from
today’s world that focuses on communication end-
points. NDN project represents one of the most visible
current research efforts aiming to bring content-centric
networking into the foreground by using it as a possi-
ble future Internet architecture. Despite some privacy-
friendly features and side-effects, NDN poses some in-
teresting privacy challenges. This work presents an ini-
tial attempt to provide anonymity in NDN. The main
contribution of this work is threefold: (1) exploration
of privacy issues in NDN, (2) design of an anonymiza-
tion tool – ANDaNA, and (3) its security analysis and
performance assessment.

At the same time, particularly because the entire
NDN project (and, of course, ANDaNA) represent work-
in-progress, one of the main goals of this paper is to so-
licit comments from the security research community.
Also, since our work merely scratches the surface of pri-
vacy issues in content-centric networking and NDN, a
number of issues are left for future work, including:

• More performance experimentation with ANDaNA,
especially, in larger testbeds and under various traf-
ﬁc load / congestion scenarios. (This should lead to
better code proﬁling and lower overhead.)

• Comprehensive directory service for effective
large-scale distribution of up-to-date AR informa-
tion.

• In-depth study of both privacy and performance
trade-offs in the use of asymmetric vs. symmetric
ANDaNA variants.

• DoS mitigation measures, such as computational

puzzles for circuit establishment.

• Red-teaming experiments to assess realistic privacy

attainable with ANDaNA.

• Modiﬁcation of ANDaNA to support other emerg-
ing content-centric architectures and comparative
experiments among them.

Acknowledgments

We thank NDSS’12 anonymous reviewers for their
valuable feedback. We are also grateful to Van Jacob-
son, Jim Thornton, Kasper Rasmussen, Yanbin Lu, Lixia
Zhang and Mark Baugher for their helpful input and
comments on earlier drafts of this paper. This work was
conducted in the context of the NSF project: “CNS-
1040802: FIA: Collaborative Research: Named Data
Networking (NDN)”.

References
[1] M. Abdalla, M. Bellare, and G. Neven. Robust en-
cryption. In Theory of Cryptography Conference,
TCC 2010, 2010.

[2] A. Abdul-Rahman. The PGP Trust Model, 1997.

[3] Anonymizer anonymous surﬁng. http://www.

anonymizer.com/.

[4] S. Arianfar, T. Koponen, S. Shenker, and B. Ragha-
van. On preserving privacy in content-oriented
In ACM SIGCOMM Workshop on
networks.
Information-Centric Networking, 2011.

[5] K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and
D. Sicker. Low-resource routing attacks against
In The 2007 Workshop on
anonymous systems.
Privacy in the Electronic Society, 2007.

[6] M. Bellare, B. A., D. A., and D. Pointcheval. Key-
privacy in public-key encryption. In ASIACRYPT,
2001.

[7] M. Bellare, R. Canetti, and H. Krawczyk. Key-
ing hash functions for message authentication. In
CRYPTO, 1996.

[8] M. Bellare and S. Miner. A forward-secure digital

signature scheme. In CRYPTO, 1999.

[9] M. Bellare and C. Namprempre. Authenticated
encryption: Relations among notions and analysis
of the generic composition paradigm. Journal of
Cryptology, 21(4), 2008.

[10] M. Bellare and P. Rogaway. Optimal asymmetric

encryption. In EUROCRYPT, 1994.

[11] T. Callahan, M. Allman, and V. Paxson. A longi-
In The 11th interna-
tudinal view of http trafﬁc.
tional conference on passive and active measure-
ment, 2010.

[12] Content centric networking (CCNx) project.

http://www.ccnx.org.

[13] D. Chaum. Untraceable electronic mail, return ad-
dresses, and digital pseudonyms. Communications
of the ACM, 24(2), 1981.

[14] D. Chaum. Security without identiﬁcation: Trans-
action systems to make big brother obsolete. Com-
munications of the ACM, 28(10), 1985.

[15] J. Daemen and V. Rijmen. The design of Rijndael:
AES - the advanced encryption standard. Springer,
2002.

[16] G. Danezis, R. Dingledine, and N. Mathewson.
Mixminion: Design of a type III anonymous re-
mailer protocol. In The 2003 IEEE Symposium on
Security and Privacy, 2003.

[17] W. Difﬁe and M. Hellman. New directions in cryp-
tography. Information Theory, IEEE Transactions
on, 22(6), 1976.

[18] R. Dingledine, N. Mathewsonn, and P. Syverson.
Tor: The second-generation onion router. In The
13th USENIX Security Symposium, 2004.

[19] J. Feigenbaum, A. Johnson, and P. Syverson. A
model of onion routing with provable anonymity.
In Financial Cryptography, 2007.

[20] National science foundation (NSF) future of inter-
net architecture (FIA) program. http://www.
nets-fia.net/.

[21] M. Freedman and R. Morris. Tarzan: A peer-to-
peer anonymizing network layer. In The 9th ACM
Conference on Computer and Communications Se-
curity, 2002.

[22] E. Gabber, P. Gibbons, D. Kristol, Y. Matias, and
A. Mayer. Consistent, yet anonymous, web access
with lpwa. Communications of the ACM, 42(2),
1999.

[23] M. Gritter and D. Cheriton. An architecture for
content routing support in the internet. In USENIX
Symposium on Internet Technologies and Systems.
USENIX Association, 2001.

[24] C. G¨ulc¨u and G. Tsudik. Mixing e-mail with Ba-
bel. In Network and Distributed Security Sympo-
sium, 1996.

[25] A. Houmansadr, G. Ngyuen, M. Caesar, and
N. Borisov. Cirripede: Circumvention infrastruc-
ture using router redirection with plausible denia-
bility. In The 18th ACM Conference on Computer
and Communications Security, 2011.

[26] I2P anonymous networking project. http://

www.i2p2.de/.

[27] V. Jacobson, D. Smetters, J. Thornton, M. Plass,
N. Briggs, and R. Braynard. Networking named
The 5th international conference on
content.
Emerging networking experiments and technolo-
gies, 2009.

[28] T. Koponen, M. Chawla, B. Chun, A. Ermolin-
skiy, K. Kim, S. Shenker, and I. Stoica. A
data-oriented (and beyond) network architecture.
ACM SIGCOMM Computer Communication Re-
view, 37(4):181–192, 2007.

[29] P. Mittal, A. Khurshid, J. Juen, M. Caesar, and
N. Borisov. Stealthy trafﬁc analysis of low-latency
anonymous communication using throughput ﬁn-
gerprinting. In The 18th ACM Conference on Com-
puter and communications security, 2011.

[30] U. M¨oller, L. Cottrell, P. Palfrader, and L. Sas-
IETF

saman. Mixmaster protocol — Version 2.
Internet Draft, 2003.

[31] S. Murdoch and R. Watson. Metrics for security
and performance in low-latency anonymity sys-
In Privacy Enhancing Technologies Wor-
tems.
shop, 2008.

[32] Named data networking project (NDN). http:

//named-data.org.

[33] NetInf: networkd of information project. http:

//www.netinf.org/.

[34] Open network lab. http://onl.wustl.edu.

[35] L. Overlier and P. Syverson. Locating hidden
servers. In IEEE Symposium on Security and Pri-
vacy. IEEE, 2006.

[36] PURSUIT - a fp7 european union project -. http:

//www.fp7-pursuit.eu/PursuitWeb/.

[37] M. Reiter and A. Rubin. Crowds: Anonymity for
web transactions. ACM Transactions on Informa-
tion and System Security, 1(1), 1998.

[38] M. Rennhard and B. Plattner.

Introducing mor-
phmix: Peer-to-peer based anonymous internet us-
age with collusion detection. In Workshop on Pri-
vacy in the Electronic Society, Washington, DC,
USA, 2002.

[39] M. Rennhard and B. Plattner. Practical anonymity
for the masses with morphmix. In Financial Cryp-
tography, 2004.

[40] A. Serjantov and P. Sewell. Passive attack analy-
sis for connection-based anonymity systems. Eu-
ropean Symposium on Research in Computer Se-
curity, 2003.

[41] V. Shmatikov and M. Wang. Timing analysis in
low-latency mix networks: Attacks and defenses.
European Symposium on Research in Computer
Security, 2006.

[42] The OpenSSL Project. OpenSSL: The open source

toolkit for SSL/TLS. www.openssl.org.

[43] M. Wright, M. Adler, B. Levine, and C. Shields.
The predecessor attack: An analysis of a threat to
anonymous communications systems. ACM Trans-
actions on Information and System Security (TIS-
SEC), 7(4), 2004.

[44] E. Wustrow, S. Wolchok, I. Goldberg, and J. A.
Halderman. Telex: Anticensorship in the network
infrastructure. In The 20th USENIX Security Sym-
posium, 2011.

A Security Proofs
Justiﬁcation of Claim 5.1: Suppose that Claim 5.1 is
false. Then, Adv can be used to construct an algorithm
Sim that breaks the CPA-secure encryption scheme E
as follows: Sim plays the CPA-security game with a
challenger, that selects a public key pk. Sim selects a
public key pk2 and initializes Adv, that eventually re-
turns two interests int0, int1 of its choice. Sim sends
c0 = Epk2(int0) and c1 = Epk2(int1) to the challenger,
that returns c∗ = Epk(cb) = Epk(Epk2(intb)). Sim sends
(c∗, c0, c1) to the challenger that eventually returns its
choice b(cid:48). Sim outputs b(cid:48) as its choice. The output of
Sim is b(cid:48) = b iff Adv guesses b(cid:48) correctly. Since Adv
guesses b(cid:48) correctly with non negligible advantage over
1/2, Sim breaks the CPA-security of E with non negli-
gible advantage. This violates the hypothesis of Claim
5.1, and, therefore, such Adv cannot exist.

Proof of Theorem 5.1 — Consumer Anonymity (sketch).
We prove that each condition in Theorem 5.1 implies
consumer anonymity:
1. Assume that, for each u(cid:48) (cid:54)= u there exists no con-
ﬁguration C(cid:48) ≡Adv C with respect to Adv such
that C(cid:48)(u(cid:48)) = C(u). Adv cannot determine that
C(u) /∈ C(cid:48) using only C2(u), C3(u) and C4(u): if
1(u(cid:48)) for some C(cid:48) ≡Adv C and u(cid:48) (i.e.
C1(u) = C(cid:48)
there exist an indistinguishable conﬁguration with
respect to Adv where a consumer different from u
sends an interest to C1(u) through interface ifC1(u)
and u, u(cid:48) ∈ A
), then there must exist a tu-
ple C(cid:48)(u(cid:48)) = C(u) since (a possibly compromised)
r cannot process interests coming from consumers
in the same anonymity set differently – that would
imply that they are not in the same anonymity set.
Therefore, for each conﬁguration C(cid:48) ≡Adv C, and
1(u(cid:48)) = C1(u) ⇒ ∃C(cid:48)(u(cid:48)) =
for each u(cid:48) (cid:54)= u ∃C(cid:48)
C(u).
1(u(cid:48)) (cid:54)= C1(u) for all C(cid:48) ≡Adv C
For this reason, C(cid:48)
1(u(cid:48)) = C1(u).C(u) /∈
and for all u(cid:48) (cid:54)= u, i.e. ∀C(cid:48)
C(cid:48). This is true if and only if Adv controls at
i ∈ pathC4(u) for which u(cid:48)
least one interface ifr
i ∈
is not in the anonymity set of ifr

i , i.e., ∃ifr

if C1(u)
i

i

i

=

pk1,pk2

=

2, p(cid:48), int1

pk1,pk(cid:48)

2

)

pk1,pk2

(i.e., condition 1 of

pk1,pk2 and int0

pk2, int1

(r1, r(cid:48)
2, p, p(cid:48), int0, int1.

pathC4(u) ∩ IFAdv s.t. u(cid:48) /∈ Aif r
Since this con-
tradicts the hypothesis, there must exist a conﬁgu-
ration C(cid:48) indistinguishable from C with respect to
Adv such that C(cid:48)(u(cid:48)) = C(u).
(cid:54)= u, Adv can
2. We assume that, for each u(cid:48)
from u from
distinguish between interests
those from u(cid:48)
theorem
5.1 does not hold). We show how to prove
theorem 5.1 by reduction. Assume that
there
exists an efﬁcient adversary Adv such that
CAdv = C \ {u, u(cid:48)} and RAdv = R \ {r1} (i.e.,
Adv compromised all entities, except u, u(cid:48) and r1).
Suppose that C(u) = (r1, r2, p, int0
),
C(u(cid:48))
for
some
r2, r(cid:48)
For each C(cid:48), Adv out-
puts: 1 on input of C and 0 on input of C(cid:48) with
non-negligible probability, where C(cid:48)(u) = C(u(cid:48))
and C(cid:48)(u(cid:48)) = C(u). In other words, there is no
conﬁguration for which C ≡Adv C(cid:48) holds. We
sketch how Adv can be used as a subroutine in a
simulator Sim that breaks Claim 5.1.
Sim creates a random network topology N and in-
puts it to Adv. Sim also inputs the information that
Adv would obtain by compromising all entities in
N except u, u(cid:48) and r1. As such, Sim also includes
intb
pk2 received from the chal-
lenger of Claim 5.1 to the input of Adv. Then, Sim
sends to Adv conﬁgurations C and C(cid:48), where C
is identical to C(cid:48), except that C(u) = C(cid:48)(u(cid:48)) and
C(u(cid:48)) = C(cid:48)(u), and C(u) (cid:54)= C(u(cid:48)). We have that
b = 1 iff Adv outputs 1. Since existence of Sim
violates Claim 5.1, Adv cannot exits.
(cid:54)= u, Adv can
distinguish between interests from u from those
from u(cid:48) (i.e., condition 1 of theorem 5.1 does
the ﬁrst router in u’s and
not hold) and that
u(cid:48)’s paths is compromised,
i.e., condition 2
of theorem 5.1 does not hold. We then prove
theorem 5.1 by reduction. Assume that
there
exists an efﬁcient adversary Adv such that
CAdv = C \ {u, u(cid:48)} and RAdv = R \ {r2} (i.e.,
Adv compromised all entities, except u, u(cid:48) and r2).
Suppose that C(u) = (r1, r2, p, int0
),
C(u(cid:48))
some
for
For each C(cid:48), Adv out-
r1, r(cid:48)
puts 1 on input of C, and 0 on input of C(cid:48), where
C(cid:48)(u) = C(u(cid:48)) and C(cid:48)(u(cid:48)) = C(u).
In other
words, there is no conﬁguration where C ≡Adv C(cid:48)
holds. We sketch how Adv can be used as a
subroutine in a simulator Sim to determine, given
intpk2 and int(cid:48)
Sim creates a random network topology N and in-
puts it to Adv. Sim also inputs the information
that Adv would obtain by compromising all enti-

3. We assume that, for each u(cid:48)

pk2, whether int = int(cid:48).

1, p, p(cid:48), int0, int1.

1, r2, p(cid:48), int1
(r(cid:48)
pk(cid:48)

)

1,pk2

ties in N except for u, u(cid:48) and r2. Sim interacts
with the challenger of Claim 5.1 setting the in-
nermost key of its challenge, denoted as pk2, to
⊥. Sim receives intb
pk1 for some int0, int1 of its
choice, and adds intb
to the
input of Adv. Then Sim sends to Adv conﬁgu-
rations C and C(cid:48), where C is identical to C(cid:48) ex-
cept that C(u) = C(cid:48)(u(cid:48)) and C(u(cid:48)) = C(cid:48)(u), and
C(u) (cid:54)= C(u(cid:48)). We have that b = 1 iff Adv outputs
1. Since the existence of Sim would violate Claim
5.1, Adv cannot exits.

and intb

, intb

pk1,pk2

pk2

pk2

=

int(cid:48)

and

2

pk1,pk(cid:48)

pk1,pk(cid:48)

to C except

Proof of Theorem 5.2 — Producer Anonymity (sketch).
We prove that each condition in Theorem 5.2 implies
producer anonymity:
1. Let C4(u(cid:48))
let C(cid:48)
that C(cid:48)(u) =
be
identical
(C1(u), C2(u), C3(u), C4(u(cid:48))) and C(cid:48)(u(cid:48)) =
(C1(u(cid:48)), C2(u(cid:48)), C3(u(cid:48)), C4(u)).
In other words,
C(cid:48) is a conﬁguration where intpk1,pk2 is sent to
a producer different from p. In this setting, Adv
can only distinguish C(cid:48) and C by distinguishing
C(cid:48)(u) and C(cid:48)(u(cid:48)). Claim 5.1 guarantees that
Adv that observes intpk1,pk2 and int(cid:48)
cannot
determine which corresponds to int and which –
to int(cid:48). Moreover, Assumption 5.1 prevents Adv
from linking the output of non-compromised router
C1(u) with intpk1,pk2 and int(cid:48)
. Therefore,
C ≡Adv C(cid:48).
and let
pk1,pk(cid:48)
C(cid:48) be identical
that C(cid:48)(u) =
(C1(u), C2(u), C3(u), C4(u(cid:48))) and C(cid:48)(u(cid:48)) =
(C1(u(cid:48)), C2(u(cid:48)), C3(u(cid:48)), C4(u)). We assume that
C1(u) and C1(u(cid:48)) are compromised.
In this set-
ting, Adv can only distinguish between C(cid:48) and C
by distinguishing C(cid:48)(u) and C(cid:48)(u(cid:48)). Claim 5.1
guarantees that any Adv that observes intpk1,pk2
and int(cid:48)
cannot determine which corresponds
to int and which – to int(cid:48). Moreover, Assumption
5.1 prevents Adv from linking the output of non-
compromised router C2(u) with intpk2 and int(cid:48)
.
pk(cid:48)
Therefore, C ≡Adv C(cid:48).

let C4(u(cid:48)) = int(cid:48)
to C except

2. Similarly,

pk1,pk(cid:48)

pk1,pk(cid:48)

2

2

2

2

2

B Performance Evaluation: Additional Results

Figure 3. Round trip time for transferring 1, 10 and 100MB of content over NDN (limited anonymity)

 0 20 40 60 80 100 120 0 0.5 1 1.5 2 2.5 3RTT (ms)Start Time (s) 0 20 40 60 80 100 120 0 2 4 6 8 10 12 14 16 18RTT (ms)Start Time (s) 0 20 40 60 80 100 120 0 20 40 60 80 100 120 140 160RTT (ms)Start Time (s)Figure 4. Round trip time for transferring 1, 10 and 100MB of content over ANDaNA (full anonymity).

 0 20 40 60 80 100 120 0 0.5 1 1.5 2 2.5 3RTT (ms)Start Time (s) 0 20 40 60 80 100 120 0 2 4 6 8 10 12 14 16 18RTT (ms)Start Time (s) 0 20 40 60 80 100 120 0 20 40 60 80 100 120 140 160RTT (ms)Start Time (s)