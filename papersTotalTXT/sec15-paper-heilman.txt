Eclipse Attacks on Bitcoin’s Peer-to-Peer Network
Ethan Heilman and Alison Kendler, Boston University; Aviv Zohar, The Hebrew University of 

Jerusalem and MSR Israel; Sharon Goldberg, Boston University

https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/heilman

This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-931971-232Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXEclipse Attacks on Bitcoin’s Peer-to-Peer Network

Ethan Heilman∗

Alison Kendler∗

Aviv Zohar†

Sharon Goldberg∗

∗Boston University

†Hebrew University/MSR Israel

Abstract

We present eclipse attacks on bitcoin’s peer-to-peer net-
work. Our attack allows an adversary controlling a sufﬁ-
cient number of IP addresses to monopolize all connec-
tions to and from a victim bitcoin node. The attacker can
then exploit the victim for attacks on bitcoin’s mining
and consensus system, including N-conﬁrmation double
spending, selﬁsh mining, and adversarial forks in the
blockchain. We take a detailed look at bitcoin’s peer-
to-peer network, and quantify the resources involved in
our attack via probabilistic analysis, Monte Carlo simu-
lations, measurements and experiments with live bitcoin
nodes. Finally, we present countermeasures, inspired by
botnet architectures, that are designed to raise the bar for
eclipse attacks while preserving the openness and decen-
tralization of bitcoin’s current network architecture.

1

Introduction

While cryptocurrency has been studied since the
1980s [22, 25, 28], bitcoin is the ﬁrst to see widespread
adoption.A key reason for bitcoin’s success is its baked-
in decentralization.
Instead of using a central bank to
regulate currency, bitcoin uses a decentralized network
of nodes that use computational proofs-of-work to reach
consensus on a distributed public ledger of transactions,
aka., the blockchain. Satoshi Nakamoto [52] argues that
bitcoin is secure against attackers that seek to shift the
blockchain to an inconsistent/incorrect state, as long as
these attackers control less than half of the computa-
tional power in the network. But underlying this security
analysis is the crucial assumption of perfect information;
namely, that all members of the bitcoin ecosystem can
observe the proofs-of-work done by their peers.

While the last few years have seen extensive research
into the security of bitcoin’s computational proof-of-
work protocol e.g., [14, 29, 36, 37, 45, 49, 50, 52, 58, 60],
less attention has been paid to the peer-to-peer network

used to broadcast information between bitcoin nodes (see
Section 8). The bitcoin peer-to-peer network, which
is bundled into the core bitcoind implementation, aka.,
the Satoshi client, is designed to be open, decentralized,
and independent of a public-key infrastructure. As such,
cryptographic authentication between peers is not used,
and nodes are identiﬁed by their IP addresses (Section 2).
Each node uses a randomized protocol to select eight
peers with which it forms long-lived outgoing connec-
tions, and to propagate and store addresses of other po-
tential peers in the network. Nodes with public IPs also
accept up to 117 unsolicited incoming connections from
any IP address. Nodes exchange views of the state of the
blockchain with their incoming and outgoing peers.
Eclipse attacks. This openness, however, also makes it
possible for adversarial nodes to join and attack the peer-
to-peer network. In this paper, we present and quantify
the resources required for eclipse attacks on nodes with
public IPs running bitcoind version 0.9.3. In an eclipse
attack [27, 61, 62], the attacker monopolizes all of the
victim’s incoming and outgoing connections, thus iso-
lating the victim from the rest of its peers in the net-
work. The attacker can then ﬁlter the victim’s view
of the blockchain, force the victim to waste compute
power on obsolete views of the blockchain, or coopt
the victim’s compute power for its own nefarious pur-
poses (Section 1.1). We present off-path attacks, where
the attacker controls endhosts, but not key network in-
frastructure between the victim and the rest of the bit-
coin network. Our attack involves rapidly and repeatedly
forming unsolicited incoming connections to the victim
from a set of endhosts at attacker-controlled IP addresses,
sending bogus network information, and waiting until the
victim restarts (Section 3). With high probability, the
victim then forms all eight of its outgoing connections to
attacker-controlled addresses, and the attacker also mo-
nopolizes the victim’s 117 incoming connections.

Our eclipse attack uses extremely low-rate TCP con-
nections, so the main challenge for the attacker is to

USENIX Association  

24th USENIX Security Symposium  129

1

obtain a sufﬁcient number of IP addresses (Section 4).
We consider two attack types: (1) infrastructure attacks,
modeling the threat of an ISP, company, or nation-state
that holds several contiguous IP address blocks and seeks
to subvert bitcoin by attacking its peer-to-peer network,
and (2) botnet attacks, launched by bots with addresses in
diverse IP address ranges. We use probabilistic analysis,
(Section 4) measurements (Section 5), and experiments
on our own live bitcoin nodes (Section 6) to ﬁnd that
while botnet attacks require far fewer IP addresses, there
are hundreds of organizations that have sufﬁcient IP re-
sources to launch eclipse attacks (Section 4.2.1). For ex-
ample, we show how an infrastructure attacker with 32
distinct /24 IP address blocks (8192 address total), or a
botnet of 4600 bots, can always eclipse a victim with at
least 85% probability; this is independent of the number
of nodes in the network. Moreover, 400 bots sufﬁced in
tests on our live bitcoin nodes. To put this in context,
if 8192 attack nodes joined today’s network (containing
≈ 7200 public-IP nodes [4]) and honestly followed the
peer-to-peer protocol, they could eclipse a target with
probability about (

7200+8192 )8 = 0.6%.

8192

Our attack is only for nodes with public IPs; nodes
with private IPs may be affected if all of their outgoing
connections are to eclipsed public-IP nodes.
Countermeasures.
Large miners, merchant clients
and online wallets have been known to modify bit-
coin’s networking code to reduce the risk of network-
based attacks. Two countermeasures are typically rec-
ommended [3]: (1) disabling incoming connections, and
(2) choosing ‘speciﬁc’ outgoing connections to well-
connected peers or known miners (i.e., use whitelists).
However, there are several problems with scaling this to
the full bitcoin network. First, if incoming connections
are banned, how do new nodes join the network? Sec-
ond, how does one decide which ‘speciﬁc’ peers to con-
nect to? Should bitcoin nodes form a private network?
If so, how do they ensure compute power is sufﬁciently
decentralized to prevent mining attacks?

Indeed, if bitcoin is to live up to its promise as an open
and decentralized cryptocurrency, we believe its peer-to-
peer network should be open and decentralized as well.
Thus, our next contribution is a set of countermeasures
that preserve openness by allowing unsolicited incom-
ing connections, while raising the bar for eclipse attacks
(Section 7). Today, an attacker with enough addresses
can eclipse any victim that accepts incoming connections
and then restarts. Our countermeasures ensure that, with
high probability, if a victim stores enough legitimate ad-
dresses that accept incoming connections, then the vic-
tim be cannot eclipsed regardless of the number of IP
addresses the attacker controls. Our countermeasures 1,
2, and 6 have been deployed in bitcoind v0.10.1; we also
developed a patch [40] with Countermeasures 3,4.

Implications of eclipse attacks

1.1
Apart from disrupting the bitcoin network or selectively
ﬁltering a victim’s view of the blockchain, eclipse attacks
are a useful building block for other attacks.
Engineering block races. A block race occurs when
two miners discover blocks at the same time; one block
will become part of the blockchain, while the other “or-
phan block” will be ignored, yielding no mining rewards
for the miner that discovered it. An attacker that eclipses
many miners can engineer block races by hording blocks
discovered by eclipsed miners, and releasing blocks to
both the eclipsed and non-eclipsed miners once a com-
peting block has been found. Thus, the eclipsed miners
waste effort on orphan blocks.
Splitting mining power.
Eclipsing an x-fraction of
miners eliminates their mining power from the rest of
the network, making it easier to launch mining attacks
(e.g., the 51% attack [52]). To hide the change in min-
ing power under natural variations [19], miners could be
eclipsed gradually or intermittently.
Selﬁsh mining. With selﬁsh mining [14,29,37,60], the
attacker strategically withholds blocks to win more than
its fair share of mining rewards. The attack’s success
is parameterized by two values: α, the ratio of mining
power controlled by the attacker, and γ, the ratio of hon-
est mining power that will mine on the attacker’s blocks
during a block race. If γ is large, then α can be small. By
eclipsing miners, the attacker increases γ, and thus de-
creases α so that selﬁsh mining is easier. To do this, the
attacker drops any blocks discovered by eclipsed miners
that compete with the blocks discovered by the selﬁsh
miners. Next, the attacker increases γ by feeding only
the selﬁsh miner’s view of the blockchain to the eclipsed
miner; this coopts the eclipsed miner’s compute power,
using it to mine on the selﬁsh-miner’s blockchain.
Attacks on miners can harm the entire bitcoin ecosys-
tem; mining pools are also vulnerable if their gateways
to the public bitcoin network can be eclipsed. Eclipsing
can also be used for double-spend attacks on non-miners,
where the attacker spends some bitcoins multiple times:
0-conﬁrmation double spend.
In a 0-conﬁrmation
transaction, a customer pays a transaction to a mer-
chant who releases goods to the customer before seeing
a block conﬁrmation i.e., seeing the transaction in the
blockchain [18]. These transactions are used when it is
inappropriate to wait the 5-10 minutes typically needed
to for a block conﬁrmation [20], e.g., in retail point-of-
sale systems like BitPay [5], or online gambling sites like
Betcoin [57]. To launch a double-spend attack against
the merchant [46], the attacker eclipses the merchant’s
bitcoin node, sends the merchant a transaction T for
goods, and sends transaction T (cid:30) double-spending those

130  24th USENIX Security Symposium 

USENIX Association

2

bitcoins to the rest of the network. The merchant releases
the goods to the attacker, but since the attacker controls
all of the merchant’s connections, the merchant cannot
tell the rest of the network about T , which meanwhile
conﬁrms T(cid:31). The attacker thus obtains the goods with-
out paying. 0-conﬁrmation double-spends have occurred
in the wild [57]. This attack is as effective as a Finney
attack [39], but uses eclipsing instead of mining power.

N-conﬁrmation double spend.
If the attacker has
eclipsed an x-fraction of miners,
it can also launch
N-conﬁrmation double-spending attacks on an eclipsed
merchant. In an N-conﬁrmation transaction, a merchant
releases goods only after the transaction is conﬁrmed in a
block of depth N−1 in the blockchain [18]. The attacker
sends its transaction to the eclipsed miners, who incor-
porate it into their (obsolete) view of the blockchain.
The attacker then shows this view of blockchain to the
eclipsed merchant, receives the goods, and sends both the
merchant and eclipsed miners the (non-obsolete) view of
blockchain from the non-eclipsed miners. The eclipsed
miners’ blockchain is orphaned, and the attacker ob-
tains goods without paying. This is similar to an attack
launched by a mining pool [10], but our attacker eclipses
miners instead of using his own mining power.

Other attacks exist, e.g., a transaction hiding attack on
nodes running in SPV mode [16].

2 Bitcoin’s Peer-to-Peer Network

We now describe bitcoin’s peer-to-peer network, based
on bitcoind version 0.9.3, the most current release from
9/27/2014 to 2/16/2015, whose networking code was
largely unchanged since 2013. This client was origi-
nally written by Satoshi Nakamoto, and has near univer-
sal market share for public-IP nodes (97% of public-IP
nodes according to Bitnode.io on 2/11/2015 [4]).

Peers in the bitcoin network are identiﬁed by their IP
addresses. A node with a public IP can initiate up to
eight outgoing connections with other bitcoin nodes, and
accept up to 117 incoming connections.1 A node with a
private IP only initiates eight outgoing connections. Con-
nections are over TCP. Nodes only propagate and store
public IPs; a node can determine if its peer has a public
IP by comparing the IP packet header with the bitcoin
VERSION message. A node can also connect via Tor; we
do not study this, see [16, 17] instead. We now describe
how nodes propagate and store network information, and
how they select outgoing connections.

2.1 Propagating network information
Network information propagates through the bitcoin net-
work via DNS seeders and ADDR messages.
DNS seeders.
A DNS seeder is a server that re-
sponds to DNS queries from bitcoin nodes with a (not
cryptographically-authenticated) list of IP addresses for
bitcoin nodes. The seeder obtains these addresses by pe-
riodically crawling the bitcoin network. The bitcoin net-
work has six seeders which are queried in two cases only.
The ﬁrst when a new node joins the network for the ﬁrst
time; it tries to connect to the seeders to get a list of active
IPs, and otherwise fails over to a hardcoded list of about
600 IP addresses. The second is when an existing node
restarts and reconnects to new peers; here, the seeder is
queried only if 11 seconds have elapsed since the node
began attempting to establish connections and the node
has less than two outgoing connections.
ADDR messages. ADDR messages, containing up to 1000
IP address and their timestamps, are used to obtain net-
work information from peers. Nodes accept unsolicited
ADDR messages. An ADDR message is solicited only upon
establishing a outgoing connection with a peer; the peer
responds with up to three ADDR message each containing
up to 1000 addresses randomly selected from its tables.
Nodes push ADDR messages to peers in two cases. Each
day, a node sends its own IP address in a ADDR message to
each peer. Also, when a node receives an ADDR message
with no more than 10 addresses, it forwards the ADDR
message to two randomly-selected connected peers.

2.2 Storing network information
Public IPs are stored in a node’s tried and new tables.
Tables are stored on disk and persist when a node restarts.
The tried table. The tried table consists of 64 buck-
ets, each of which can store up to 64 unique addresses
for peers to whom the node has successfully established
an incoming or outgoing connection. Along with each
stored peer’s address, the node keeps the timestamp for
the most recent successful connection to this peer.

Each peer’s address is mapped to a bucket in tried by
taking the hash of the peer’s (a) IP address and (b) group,
where the group deﬁned is the /16 IPv4 preﬁx containing
the peer’s IP address.A bucket is selected as follows:

SK = random value chosen when node is born.
IP = the peer’s IP address and port number.
Group = the peer’s group

i = Hash( SK, IP ) % 4
Bucket = Hash( SK, Group, i ) % 64
return Bucket

1This is a conﬁgurable. Our analysis only assumes that nodes have
8 outgoing connections, which was conﬁrmed by [51]’s measurements.

Thus, every IP address maps to a single bucket in tried,
and each group maps to up to four buckets.

USENIX Association  

24th USENIX Security Symposium  131

3

When a node successfully connects to a peer,

the
peer’s address is inserted into the appropriate tried
bucket. If the bucket is full (i.e., contains 64 addresses),
then bitcoin eviction is used:
four addresses are ran-
domly selected from the bucket, and the oldest is (1)
replaced by the new peer’s address in tried, and then
(2) inserted into the new table. If the peer’s address is
already present in the bucket, the timestamp associated
with the peer’s address is updated. The timestamp is
also updated when an actively connected peer sends a
VERSION, ADDR, INVENTORY, GETDATA or PING message
and more than 20 minutes elapsed since the last update.
The new table.
The new table consists of 256 buck-
ets, each of which can hold up 64 addresses for peers to
whom the node has not yet initiated a successful connec-
tion. A node populates the new table with information
learned from the DNS seeders, or from ADDR messages.
Every address a inserted in new belongs to (1) a group,
deﬁned in our description of the tried table, and (2) a
source group, the group the contains the IP address of
the connected peer or DNS seeder from which the node
learned address a. The bucket is selected as follows:

SK = random value chosen when node is born.
Group
Src_Group = /16 containing IP of peer sending IP.

= /16 containing IP to be inserted.

i = Hash( SK, Src_Group, Group ) % 32
Bucket = Hash( SK, Src_Group, i) % 256
return Bucket

Each (group, source group) pair hashes to a single new
bucket, while each group selects up to 32 buckets in new.
Each bucket holds unique addresses. If a bucket is full,
then a function called isTerrible is run over all 64 ad-
dresses in the bucket; if any one of the addresses is ter-
rible, in that it is (a) more than 30 days old, or (b) has
had too many failed connection attempts, then the terri-
ble address is evicted in favor of the new address; other-
wise, bitcoin eviction is used with the small change that
the evicted address is discarded.

2.3 Selecting peers
New outgoing connections are selected if a node restarts
or if an outgoing connection is dropped by the network.
A bitcoin node never deliberately drops a connection, ex-
cept when a blacklisting condition is met (e.g., the peer
sends ADDR messages that are too large).

A node with ω ∈ [0,7] outgoing connections selects
the ω + 1th connection as follows:
(1) Decide whether to select from tried or new, where

and ρ is the ratio between the number of addresses stored
in tried and the number of addresses stored in new.
(2) Select a random address from the table, with a bias
towards addresses with fresher timestamps: (i) Choose
a random non-empty bucket in the table. (ii) Choose a
random position in that bucket. (ii) If there is an address
at that position, return the address with probability

p(r,τ) =min(1, 1.2r
1+τ )

(2)

else, reject the address and return to (i). The acceptance
probability p(r,τ) is a function of r, the number of ad-
dresses that have been rejected so far, and τ, the dif-
ference between the address’s timestamp and the current
time in measured in ten minute increments.2
(3) Connect to the address. If connection fails, go to (1).

3 The Eclipse Attack

Our attack is for a victim with a public IP. Our attacker
(1) populates the tried table with addresses for its at-
tack nodes, and (2) overwrites addresses in the new ta-
ble with “trash” IP addresses that are not part of the
bitcoin network. The “trash” addresses are unallocated
(e.g., listed as “available” by [56]) or as “reserved for
future use” by [43] (e.g., 252.0.0.0/8). We ﬁll new with
“trash” because, unlike attacker addresses, “trash” is not
a scarce resource. The attack continues until (3) the
victim node restarts and chooses new outgoing connec-
tions from the tried and new tables in its persistant stor-
age (Section 2.3). With high probability, the victim es-
tablishes all eight outgoing connections to attacker ad-
dresses; all eight addresses will be from tried, since the
victim cannot connect to the “trash” in new. Finally, the
attacker (5) occupies the victim’s remaining 117 incom-
ing connections. We now detail each step of our attack.

3.1 Populating tried and new
The attacker exploits the following to ﬁll tried and new:
1. Addresses from unsolicited incoming connections
are stored in the tried table; thus, the attacker can in-
sert an address into the victim’s tried table simply by
connecting to the victim from that address. Moreover,
the bitcoin eviction discipline means that the attacker’s
fresher addresses are likely to evict any older legitimate
addresses stored in the tried table (Section 2.2).

2. A node accepts unsolicited ADDR messages; these
addresses are inserted directly into the new table without
testing their connectivity (Section 2.2). Thus, when our
attacker connects to the victim from an adversarial ad-
dress, it can also send ADDR messages with 1000 “trash”

Pr[Select from tried] =

√ρ(9− ω)

(ω + 1) +√ρ(9− ω)

(1)

2The algorithm also considers the number of failed connections to

this address; we omit this because it does not affect our analysis.

4

132  24th USENIX Security Symposium 

USENIX Association

addresses. Eventually, the trash overwrites all legitimate
addresses in new. We use “trash” because we do not want
to waste our IP address resources on overwriting new.

3. Nodes only rarely solicit network information from
peers and DNS seeders (Section 2.1). Thus, while the at-
tacker overwrites the victim’s tried and new tables, the
victim almost never counteracts the ﬂood of adversarial
information by querying legitimate peers or seeders.

3.2 Restarting the victim
Our attack requires the victim to restart so it can con-
nect to adversarial addresses. There are several reasons
why a bitcoin node could restart, including ISP outages,
power failures, and upgrades, failures or attacks on the
host OS; indeed, [16] found that a node with a public IP
has a 25% chance of going ofﬂine after 10 hours. An-
other predictable reason to restart is a software update;
on 1/10/2014, for example, bitnodes.io saw 942 nodes
running Satoshi client version 0.9.3, and by 29/12/2014,
that number had risen to 3018 nodes, corresponding to
over 2000 restarts. Since updating is often not optional,
especially when it corresponds to critical security issues;
2013 saw three such bitcoin upgrades, and the heartbleed
bug [53] caused one in 2014. Also, since the community
needs to be notiﬁed about an upgrade in advance, the at-
tacker could watch for notiﬁcations and then commence
its attack [2]. Restarts can also be deliberately elicited
via DDoS [47, 65], memory exhaustion [16], or packets-
of-death (which have been found for bitcoind [6,7]). The
bottom line is that the security of the peer-to-peer net-
work should not rely on 100% node uptime.

3.3 Selecting outgoing connections
Our attack succeeds if, upon restart, the victim makes
all its outgoing connections to attacker addresses. To
do this, we exploit the bias towards selecting addresses
with fresh timestamps from tried; by investing extra
time into the attack, our attacker ensures its addresses are
fresh, while all legitimate addresses become increasingly
stale. We analyze this with few simple assumptions:
1. An f -fraction of the addresses in the victim’s tried
table are controlled by the adversary and the remaining
1 − f -fraction are legitimate. (Section 4 analyzes how
many addresses the adversary therefore must control.)
2. All addresses in new are “trash”; all connections to
addresses in new fail, and the victim is forced to connect
to addresses from tried (Section 2.3).
3. The attack proceeds in rounds, and repeats each round
until the moment that the victim restarts. During a single
round, the attacker connects to the victim from each of
its adversarial IP addresses. A round takes time τa, so all
adversarial addresses in tried are younger than τa.

4. An f (cid:30)-fraction addresses in tried are actively con-
nected to the victim before the victim restarts. The times-
tamps on these legitimate addresses are updated every 20
minute or more (Section 2.2). We assume these times-
tamps are fresh (i.e., τ = 0) when the victim restarts; this
is the worst case for the attacker.
5. The time invested in the attack τ(cid:31) is the time elapsed
from the moment the adversary starts the attack, until
the victim restarts. If the victim did not obtain new le-
gitimate network information during of the attack, then,
excluding the f (cid:30)-fraction described above, the legitimate
addresses in tried are older than τ(cid:31).
Success probability.
If the adversary owns an f -
fraction of the addresses in tried, the probability that
an adversarial address is accepted on the ﬁrst try is
p(1,τa)· f where p(1,τa) is as in equation (2); here we
use the fact that the adversary’s addresses are no older
than τa, the length of the round. If r − 1 addresses were
rejected during this attempt to select an address from
tried, then the probability that an adversarial address
is accepted on the rth try is bounded by

p(r,τa)· f

r−1
∏
i=1

g(i, f , f (cid:30),τa,τ(cid:31))

where

g(i, f , f (cid:30),τa,τ(cid:31)) = (1− p(i,τa))· f + (1− p(i,0))· f (cid:30)

+ (1− p(i,τ(cid:31)))· (1− f − f (cid:30))

is the probability that an address was rejected on the ith
try given that it was also rejected on the i− 1th try. An
adversarial address is thus accepted with probability

∞
∑

r=1

p(r,τa)· f

r−1
∏
i=1

q( f , f (cid:30),τa,τ(cid:31)) =

g(i, f , f (cid:30),τa,τ(cid:31))

(3)
and the victim is eclipsed if all eight outgoing connec-
tions are to adversarial addresses, which happens with
probability q( f , f (cid:30),τa,τ(cid:31))8. Figure 1 plots q( f , f (cid:30),τa,τ(cid:31))8
vs f for τa = 27 minutes and different choices of τ(cid:31);
we assume that f (cid:30) = 8
64×64, which corresponds to a full
tried table containing eight addresses that are actively
connected before the victim restarts.
Random selection. Figure 1 also shows success proba-
bility if addresses were just selected uniformly at random
from each table. We do this by plotting f 8 vs f . Without
random selection, the adversary has a 90% success prob-
ability even if it only ﬁlls f = 72% of tried, as long as
it attacks for τ(cid:31) = 48 hours with τa = 27 minute rounds.
With random selection, 90% success probability requires
f = 98.7% of tried to be attacker addresses.

USENIX Association  

24th USENIX Security Symposium  133

5

134  24th USENIX Security Symposium 

USENIX Association

Figure1:Probabilityofeclipsinganodeq(f,f(cid:31),τa,τ(cid:30))8(equation(3))vsfthefractionofadversarialaddressesintried,fordifferentvaluesoftimeinvestedintheat-tackτ(cid:30).Roundlengthisτa=27minutes,andf(cid:31)=864×64.Thedottedlineshowstheprobabilityofeclipsinganodeifrandomselectionisusedinstead.3.4MonopolizingtheeclipsedvictimFigure1assumesthatthevictimhasexactlyeightout-goingconnections;allwerequireintermsofincomingconnectionsisthatthevictimhasafewopenslotstoac-ceptincomingTCPconnectionsfromtheattacker.WhileitisoftenassumedthatthenumberofTCPconnectionsacomputercanmakeislimitedbytheOSorthenumberofsourceports,thisappliesonlywhenOS-providedTCPsocketsareused;adedicatedattackercanopenanarbitrarynumberofTCPconnectionsus-ingacustomTCPstack.AcustomTCPstack(seee.g.,zmap[35])requiresminimalCPUandmemory,andistypicallybottleneckedonlybybandwidth,andtheband-widthcostofourattackisminimal:Attackconnections.Toﬁllthetriedtable,ourattackerrepeatedlyconnectstothevictimfromeachofitsaddresses.EachconnectionconsistsofaTCPhand-shake,bitcoinVERSIONmessage,andthendisconnec-tionviaTCPRST;thiscosts371bytesupstreamand377bytesdownstream.SomeattackconnectionsalsosendoneADDRmessagecontaining1000addresses;theseADDRmessagescost120087bytesupstreamand437bytesdownstreamincludingTCPACKs.Monopolizingconnections.Ifthatattacksucceeds,thevictimhaseightoutgoingconnectionstotheattacknodes,andtheattackermustoccupythevictim’sremain-ingincomingconnections.Topreventothersfromcon-nectingtothevictim,theseTCPconnectionscouldbemaintainedfor30days,atwhichpointthevictim’sad-dressisterribleandforgottenbythenetwork.Whilebitcoinsupportsblockinventoryrequestsandthesend-ingofblocksandtransactions,thisconsumessigniﬁcantbandwidth;ourattackerthusdoesnottorespondtoin-ventoryrequests.Assuch,settingupeachTCPconnec-tioncosts377bytesupstreamand377bytesdownstream,andismaintainedbyping-pongpacketsandTCPACKsconsuming164bytesevery80minutes.WeexperimentallyconﬁrmedthatabitcoinnodewillacceptallincomingconnectionsfromthesameIPad-dress.(WepresumethisisdonetoallowmultiplenodesbehindaNATtoconnecttothesamenode.)Main-tainingthedefault117incomingTCPconnectionscosts164×11780×60≈4bytespersecond,easilyallowingonecom-putertomonopolizemultiplevictimsatthesametime.Asanaside,thisalsoallowsforconnectionstarvationattacks[32],whereanattackermonopolizesallthein-comingconnectionsinthepeer-to-peernetwork,makingitimpossiblefornewnodestoconnecttonewpeers.4HowManyAttackAddresses?Section3.3showedthatthesuccessofourattackdependsheavilyonτ(cid:30),thetimeinvestedintheattack,andf,thefractionofattackeraddressesinthevictim’striedta-ble.Wenowuseprobabilisticanalysistodeterminehowmanyaddressestheattackermustcontrolforagivenvalueoff;it’simportanttoremember,however,thateveniffissmall,ourattackercanstillsucceedbyin-creasingτ(cid:30).RecallfromSection2.2thatbitcoiniscare-fultoensurethatanodedoesnotstoretoomanyIPaddressesfromthesamegroup(i.e.,/16IPv4addressblock).Wethereforeconsidertwoattackvariants:Botnetattack(Section4.1).TheattackerholdsseveralIPaddresses,eachinadistinctgroup.Thismodelsat-tacksbyabotnetofhostsscatteredindiverseIPaddressblocks.Section4.1.1explainswhymanybotnetshaveenoughIPaddressdiversityforthisattack.Infrastructureattack(Section4.2).Theattackercon-trolsseveralIPaddressblocks,andcaninterceptbitcointrafﬁcsenttoanyIPaddressintheblock,i.e.,theat-tackerholdsmultiplesetsofaddressesinthesamegroup.Thismodelsacompanyornation-statethatseekstoun-derminebitcoinbyattackingitsnetwork.Section4.2.1discussesorganizationsthatcanlaunchthisattack.Wefocushereontried;AppendixBconsidershowtosend“trash”-ﬁlledADDRmessagesthatoverwritenew.4.1BotnetattackThebotnetattackerholdstaddressesindistinctgroups.Wemodeleachaddressashashingtoauniformly-randombucketintried,sothenumberofaddresseshashingtoeachbucketisbinomallydistributed3asB(t,164).Howmanyofthe64×64entriesintried3B(n,p)isabinomialdistributioncountingsuccessesinasequenceofnindependentyes/notrials,eachyielding‘yes’withprobabilityp.6USENIX Association  

24th USENIX Security Symposium  135

Figure2:Botnetattack:theexpectednumberofad-dressesstoredintriedfordifferentscenariosvsthenumberofaddresses(bots)t.Valueswerecomputedfromequations(4),(7)and(8),andconﬁrmedbyMonteCarlosimulations(with100trials/datapoint).cantheattackeroccupy?Wemodelvariousscenarios,andplotresultsinFigure2.1.Initiallyempty.Inthebestcasefortheattacker,all64bucketsareinitiallyemptyandtheexpectednumberofadversarialaddressesstoredinthetriedtableis64E[min(64,B(t,164))](4)2.Bitcoineviction.Nowconsidertheworstcasefortheattacker,whereeachbucketiisfullof64legitimateaddresses.Theseaddresses,however,willbeolderthanallAidistinctadversarialaddressesthattheadversaryat-temptstoinsertintotobucketi.Sincethebitcoinevic-tiondisciplinerequireseachnewlyinsertedaddresstoselectfourrandomaddressesstoredinthebucketandtoevicttheoldest,ifoneofthefourselectedaddressesisalegitimateaddress(whichwillbeolderthanallofthead-versary’saddresses),thelegitimateaddresswillbeover-writtenbytheadversarialaddresses.Fora=0....Ai,letYabethenumberofadversarialad-dressesactuallystoredinbucketi,giventhattheadver-saryinsertedauniqueaddressesintobucketi.LetXa=1iftheathinsertedaddresssuccessfullyoverwritesalegit-imateaddress,andXa=0otherwise.Then,E[Xa|Ya−1]=1−(Ya−164)4anditfollowsthatE[Ya|Ya−1]=Ya−1+1−(Ya−164)4(5)E[Y1]=1(6)where(6)followsbecausethebucketisinitiallyfulloflegitimateaddresses.WenowhavearecurrencerelationforE[Ya],whichwecansolvenumerically.Theexpectednumberofadversarialaddressesinallbucketsisthus64t∑a=1E[Ya]Pr[B(t,164)=a](7)3.Randomeviction.Weagainconsidertheattacker’sworstcase,whereeachbucketisfulloflegitimatead-dresses,butnowweassumethateachinsertedaddressevictsarandomly-selectedaddress.(Thisisnotwhatbit-coindoes,butweanalyzeitforcomparison.)ApplyingLemmaA.1(AppendixA)weﬁndtheexpectednumberofadversarialaddressesinallbucketsis4096(1−(40954096)t)(8)4.Exploitingmultiplerounds.Oureclipseattackpro-ceedsinrounds;ineachroundtheattackerrepeatedlyin-sertseachofhistaddressesintothetriedtable.Whileeachaddressalwaysmapstothesamebucketintriedineachround,bitcoinevictionmapseachaddresstoadifferentslotinthatbucketineveryround.Thus,anad-versarialaddressthatisnotstoredintoitstriedbucketattheendofoneround,mightstillbesuccessfullystoredintothatbucketinafutureround.Thusfar,thissectionhasonlyconsideredasingleround.But,moreaddressescanbestoredintriedbyrepeatingtheattackformulti-plerounds.Aftersufﬁcientrounds,theexpectednumberofaddressesisgivenbyequation(4),i.e.,theattackper-formsasinthebest-casefortheattacker!4.1.1Whocanlaunchabotnetattack?The‘initiallyempty’lineinFigure2indicatesthatabot-netexploitingmultipleroundscancompletelyﬁlltriedwith≈6000addresses.Whilesuchanattackcannoteas-ilybelaunchedfromalegitimatecloudservice(whichtypicallyallocates<20addressespertenant[1,8,9]),botnetsofthissizeandlargerthanthishaveattackedbitcoin[45,47,65];theMinerbotnet,forexample,had29,000hostswithpublicIPs[54].Whilesomebotnetin-festationsconcentrateinafewIPaddressranges[63],itisimportanttorememberthatourbotnetattackre-quiresnomorethan≈6000groups;manybotnetsareor-dersofmagnitudelarger[59].Forexample,theWalow-dacbotnetwasmostlyinranges58.x-100.xand188.x-233.x[63],whichcreates42×28+55×28=24832groups.RandomlysamplingfromthelistofhostsintheCarnabotnet[26]5000times,weﬁndthat1250botsgivesonaverage402distinctgroups,enoughtoat-tackourlivebitcoinnodes(Section6).Furthermore,wesoonshowinFigure3thataninfrastructureattackwiths>200groupseasilyﬁllseverybucketintried;thus,withs>400groups,theattackperformsasinFigure2,evenifmanybotsareinthesamegroup..4.2InfrastructureattackTheattackerholdsaddressesinsdistinctgroups.Wede-terminehowmuchoftriedcanbeﬁlledbyanattackercontrollingsgroupsscontainingtIPaddresses/group.7136  24th USENIX Security Symposium 

USENIX Association

Figure3:Infrastructureattack.E[Γ](expectednumberofnon-emptybuckets)intriedvss(numberofgroups).Figure4:Infrastructureattackwiths=32groups:theexpectednumberofaddressesstoredintriedfordif-ferentscenariosvsthenumberofaddressespergroupt.Resultsobtainedbytakingtheproductofequation(9)andequationsfromthefullversion[41],andconﬁrmedbyMonteCarlosimulations(100trials/datapoint).ThehorizontallineassumesallE[Γ]bucketsper(9)arefull.Howmanygroups?Wemodeltheprocessofpop-ulatingtried(perSection2.2)bysupposingthatfourindependenthashfunctionsmapeachofthesgroupstooneof64bucketsintried.Thus,ifΓ∈[0,64]countsthenumberofnon-emptybucketsintried,weuseLemmaA.1toﬁndthatE[Γ]=64(cid:31)1−(6364)4s(cid:30)≈(1−e−4s64)(9)Figure3plotsE[Γ];weexpecttoﬁll55.5of64bucketswiths=32,andallbutonebucketwiths>67groups.Howfullisthetriedtable?Thefullversion[41]de-terminestheexpectednumberofaddressesstoredperbucketfortheﬁrstthreescenariosdescribedinSec-tion4.1;theexpectedfractionE[f]oftriedﬁlledbyadversarialaddressesisplottedininFigure4.Thehori-zontallineinFigure4showwhathappensifeachofE[Γ]bucketsperequation(9)isfullofattackaddresses.Theadversary’staskiseasiestwhenallbucketsareinitiallyempty,orwhenasufﬁcientnumberofroundsareused;asingle/24addressblockof256addressessufﬁcestoﬁlleachbucketwhens=32grouipsisused.Moreover,asinSection4.1,anattackthatexploitsmul-tipleroundsperformsasinthe‘initiallyempty’scenario.Concretely,with32groupsof256addresseseach(8192addressesintotal)anadversarycanexpecttoﬁllaboutf=86%ofthetriedtableafterasufﬁcientnumberofFigure5:Histogramofthenumberoforganizationswithsgroups.Forthe/24data,werequiret=256addressespergroup;for/23,werequiret=512.rounds.Theattackerisalmostaseffectiveinthebitcoin-evictionscenariowithonlyoneround;meanwhile,oneroundismuchlesseffectivewithrandomeviction.4.2.1Whocanlaunchaninfrastructureattack?WhichorganizationshaveenoughIPaddressresourcestolaunchinfrastructureattacks?WecompileddatamappingIPv4addressallocationtoorganizations,usingCAIDA’sAStoorganizationdataset[23]andAStopre-ﬁxdataset[24]fromJuly2014,supplementingourdatawithinformationfromtheRIPEdatabase[55].Wede-terminedhowmanygroups(i.e.,addressesinthesame/16IPv4addressblock)andaddressespergroupareal-locatedtoeachorganization;seeFigure5.Thereare448organizationswithovers=32groupsandatleastt=256addressespergroup;iftheseorganizationsinvestτ(cid:29)=5hoursintoanattackwithaτa=27-minuteround,thentheyeclipsethevictimwithprobabilitygreaterthan80%.NationalISPsinvariouscountriesholdasufﬁcientnumberofgroups(s≥32)forthispurpose;forexam-ple,inSudan(SudaneseMobile),Columbia(ETB),UAE(Etisalat),Guatemala(Telgua),Tunisia(TunisiaTele-com),SaudiArabia(SaudiTelecomCompany)andDo-minica(CableandWireless).TheUnitedStatesDepart-mentoftheInteriorhasenoughgroups(s=35),asdoestheS.KoreanMinistryofInformationandCommunica-tion(s=41),asdohundredsofothers.4.3Summary:infrastructureorbotnet?Figures4,2showthatthebotnetattackisfarsuperiortotheinfrastructureattack.Fillingf=98%ofthevic-tim’striedtablerequiresa4600nodebotnet(attack-ingforasufﬁcientnumberofrounds,perequation(4)).Bycontrast,aninfrastructureattackerneeds16,000ad-dresses,consistingofs=63groups(equation(9))witht=256addressespergroup.However,perSection3.3,ifourattackerincreasesthetimeinvestedintheattackτ(cid:29),itcanbefarlessaggressiveaboutﬁllingtried.Forexample,perFigure1,attackingforτ(cid:29)=24hourswithτa=27minuterounds,oursuccessprobabilityexceeds8USENIX Association  

24th USENIX Security Symposium  137

oldest#Ageofaddresses(indays)addraddr%live<11−55−1010−30>3038d*24328%367128792941d*16228%232927443942d*24419%254529955042d*19523%234023644543d*21920%6657235023103d40968%7226452368191674127d40968%902903288972491271d40968%7506933568091488240d40966%41944532793121373d40965%91412163856Table1:Ageandchurnofaddressesintriedforournodes(markedwith*)anddonatedpeersﬁles.85%withjustf=72%;intheworstcasefortheattacker,thisrequiresonly3000bots,oraninfrastructureattackofs=20groupsandt=256addressespergroup(5120ad-dresses).Thesameattack(f=72%,τa=27minutes)runningforjust4hoursstillhas>55%successproba-bility.Toputthisincontext,if3000botsjoinedtoday’snetwork(with<7200public-IPnodes[4])andhonestlyfollowedthepeer-to-peerprotocol,theycouldeclipseavictimwithprobability≈(30007200+3000)8=0.006%.5MeasuringLiveBitcoinNodesWebrieﬂyconsiderhowparametersaffectingthesuccessofoureclipseattackslookon“typical”bitcoinnodes.WethusinstrumentedﬁvebitcoinnodeswithpublicIPsthatweran(continuously,withoutrestarting)for43daysfrom12/23/2014to2/4/2015.Wealsoanalyzeseveralpeersﬁlesthatothersdonatedtouson2/15/2015.Notethatthereisevidenceofwidevariationsinmetricsfornodesofdifferentagesandindifferentregions[46];assuch,ouranalysis(Section3-4)andsomeofourexperi-ments(Section6)focusontheattacker’sworst-casesce-nario,wheretablesareinitiallyfulloffreshaddresses.Numberofconnections.Ourattackrequiresthevictimtohaveavailableslotsforincomingconnections.Figure6showsthenumberofconnectionsovertimeforoneofourbitcoinnodes,brokenoutbyconnectionstopublicorprivateIPs.Thereareplentyofavailableslots;whileournodecanaccommodate125connections,weneverseemorethan60atatime.Similarmeasurementsin[17]indicatethat80%ofbitcoinpeersallowatleast40incomingconnections.Ournodesaw,onaverage,9.9connectionstopublicIPsoverthecourseofitslifetime;ofthese,8correspondtooutgoingconnections,whichmeanswerarelyseeincomingconnectionsfrompublicIPs.Resultsforourothernodesaresimilar.Connectionlength.Becausepublicbitcoinnodesrarelydropoutgoingconnectionstotheirpeers(exceptuponrestart,networkfailure,orduetoblacklisting,seeSection2.3),manyconnectionsarefairlylonglived.Whenwesampledournodeson2/4/2015,acrossallofFigure6:(Top)Incoming+outgoingconnectionsvstimeforoneofournodes.(Bottom)Numberofaddressesintriedvstimeforallournodes.ournodes,17%ofconnectionshadlastedmorethan15days,andofthese,65.6%weretopublicIPs.Ontheotherhand,manybitcoinnodesrestartfrequently;wesawthat43%ofconnectionslastedlessthantwodaysandofthese,97%weretonodeswithprivateIPs.ThismayexplainwhyweseesofewincomingconnectionsfrompublicIPs;manypublic-IPnodessticktotheirma-turelong-termpeers,ratherthanouryoung-ishnodes.Sizeoftriedandnewtables.Inourworstcaseattack,wesupposedthatthetriedandnewtableswerecom-pletelyfulloffreshaddresses.WhileourBitcoinnodes’newtablesﬁlledupquitequickly(99%within48hours),Table1revealsthattheirtriedtableswerefarfromfulloffreshaddresses.Evenafter43days,thetriedta-blesforournodeswerenomorethan300/4096≈8%full.ThislikelyfollowsbecauseournodeshadveryfewincomingconnectionsfrompublicIPs;thus,mostad-dressesintriedresultfromsuccessfuloutgoingcon-nectionstopublicIPs(infrequently)drawnfromnew.Freshnessoftried.Eventhosefewaddressesintriedarenotespeciallyfresh.Table1showstheagedistributionoftheaddressesintriedforournodesandfromdonatedpeersﬁles.Forournodes,17%ofad-dressesweremorethan30daysold,and48%weremorethan10daysold;theseaddresseswillthereforebelesspreferredthantheadversarialonesinsertedduringaneclipseattack,eveniftheadversarydoesnotinvestmuchtimeτ(cid:30)inattackingthevictim.Churn.Table1alsoshowsthatasmallfractionofaddressesintriedwereonlinewhenwetriedconnect-ingtothemon2/17/2015.4Thissuggestsfurthervul-nerabilitytoeclipseattacks,becauseifmostlegitimateaddressesintriedareofﬂinewhenavictimresets,thevictimislikelytoconnecttoanadversarialaddress.4Forconsistencywiththerestofthissection,wetestedournodestablesfrom2/4/2015.Wealsorepeatedthistestfortablestakenfromournodeson2/17/2015,andtheresultsdidnotdeviatemorethan6%fromthoseofTable1.9Attacker resources

addrs/
grp t
256
256
256
256
256
2
1
1
1
1
1

total
addrs
8192
5120
5120
5120
5120
4600
200
400
400
600
400

τ(cid:31), time
invest
10 h
1 hr
2 hr
4 hr
1 hr
5 h
1 hr
1 hr
4 hr
1 hr
1 hr

tried Wins

τa,
round
43 m
27 m
27 m
27 m
27 m
26 m
74 s
90 s
90 s
209 s
90 s

Total pre-attack
tried
4090
278
278
278
346
4093
278
278
278
278
298

new
16384
16380
16380
16380
16381
16080
16380
16380
16380
16380
16380

Experiment

Total post-attack
tried
4096
3087
3088
3088
3116
4096
448
648
650
848
698

new
16384
16383
16383
16384
16384
16384
16384
16384
16384
16384
16384

Attack addrs
new
15871
14974
14920
14819
14341
16383
16375
16384
16383
16384
16384

3404
2947
2966
2972
2942
4015
200
400
400
600
400

Predicted

Attack addrs
new
98% 16064
82% 15040
78% 15040
86% 15040
84% 15040
100% 16384
60% 16384
88% 16384
84% 16384
96% 16384
84% 16384

tried Wins
87%
77%
87%
91%
75%
96%
11%
34%
61%
47%
28%

3501
2868
2868
2868
2868
4048
200
400
400
600
400

Table 2: Summary of our experiments.

Attack Type
Infra (Worstcase)
Infra (Transplant)
Infra (Transplant)
Infra (Transplant)
Infra (Live)
Bots (Worstcase)
Bots (Transplant)
Bots (Transplant)
Bots (Transplant)
Bots (Transplant)
Bots (Live)

grps
s
32
20
20
20
20
2300
200
400
400
600
400

6 Experiments

We now validate our analysis with experiments.
Methodology.
In each of our experiments, the vic-
tim (bitcoind) node is on a virtual machine on the at-
tacking machine; we also instrument the victim’s code.
The victim node runs on the public bitcoin network (aka,
mainnet). The attacking machine can read all the vic-
tim’s packets to/from the public bitcoin network, and
can therefore forge TCP connections from arbitrary IP
addresses. To launch the attack, the attacking machine
forges TCP connections from each of its attacker ad-
dresses, making an incoming connection to the victim,
sending a VERSION message and sometimes also an ADDR
message (per Appendix B) and then disconnecting; the
attack connections, which are launched at regular inter-
vals, rarely occupy all of the victim’s available slots for
incoming connections. To avoid harming the public bit-
coin network, (1) we use “reserved for future use” [43]
IPs in 240.0.0.0/8-249.0.0.0/8 as attack addresses, and
252.0.0.0/8 as “trash” sent in ADDR messages, and (2) we
drop any ADDR messages the (polluted) victim attempts
to send to the public network.

At the end of the attack, we repeatedly restart the vic-
tim and see what outgoing connections it makes, drop-
ping connections to the “trash” addresses and forging
connections for the attacker addresses.
If all 8 outgo-
ing connections are to attacker addresses, the attack suc-
ceeds, and otherwise it fails. Each experiment restarts the
victim 50 times, and reports the fraction of successes. At
each restart, we revert the victim’s tables to their state at
the end of the attack, and rewind the victim’s system time
to the moment the attack ended (to avoid dating times-
tamps in tried and new). We restart the victim 50 times
to measure the success rate of our (probabilistic) attack;
in a real attack, the victim would only restart once.
Initial conditions. We try various initial conditions:
1. Worst case.
In the attacker’s worst-case scenario,
the victim initially has tried and new tables that are
completely full of legitimate addresses with fresh times-
tamps. To set up the initial condition, we run our at-

tack for no longer than one hour on a freshly-born vic-
tim node, ﬁlling tried and new with IP addresses from
251.0.0.0/8, 253.0.0.0/8 and 254.0.0.0/8, which we des-
ignate as “legitimate addresses”; these addresses are no
older than one hour when the attack starts. We then
restart the victim and commence attacking it.
2. Transplant case.
In our transplant experiments, we
copied the tried and new tables from one of our ﬁve
live bitcoin nodes on 8/2/2015, installed them in a fresh
victim with a different public IP address, restarted the
victim, waited for it to establish eight outgoing connec-
tions, and then commenced attacking. This allowed us to
try various attacks with a consistent initial condition.
3. Live case.
Finally, on 2/17/2015 and 2/18/2015
we attacked our live bitcoin nodes while they were con-
nected to the public bitcoin network; at this point our
nodes had been online for 52 or 53 days.
Results (Table 2).
Results are in Table 2. The ﬁrst
ﬁve columns summarize attacker resources (the number
of groups s, addresses per group t, time invested in the
attack τ(cid:31), and length of a round τa per Sections 3-4). The
next two columns present the initial condition: the num-
ber of addresses in tried and new prior to the attack.
The following four columns give the size of tried and
new, and the number of attacker addresses they store, at
the end of the attack (when the victim ﬁrst restarts). The
wins columns counts the fraction of times our attack suc-
ceeds after restarting the victim 50 times.

The ﬁnal three columns give predictions from Sec-
tions 3.3, 4. The attack addrs columns give the expected
number of addresses in new (Appendix B) and tried.
For tried, we assume that the attacker runs his attack
for enough rounds so that the expected number of ad-
dresses in tried is governed by equation (4) for the bot-
net, and the ‘initially empty’ curve of Figure 4 for the
infrastructure attack. The ﬁnal column predicts success
per Section 3.3 using experimental values of τa, τ(cid:31), f , f (cid:31).
Observations. Our results indicate the following:
1. Success in worst case. Our experiments conﬁrm that
an infrastructure attack with 32 groups of size /24 (8192

138  24th USENIX Security Symposium 

USENIX Association

10

attack addresses total) succeeds in the worst case with
very high probability. We also conﬁrm that botnets are
superior to infrastructure attacks; 4600 bots had 100%
success even with a worst-case initial condition.
2. Accuracy of predictions.
Almost all of our at-
tacks had an experimental success rate that was higher
than the predicted success rate. To explain this, recall
that our predictions from Section 3.3 assume that legit-
imate addresses are exactly τ(cid:31) old (where τ(cid:31) is the time
invested in the attack); in practice, legitimate addresses
are likely to be even older, especially when we work with
tried tables of real nodes (Table 1). Thus, Section 3.3’s
predictions are a lower bound on the success rate.

Our experimental botnet attacks were dramatically
more successful than their predictions (e.g., 88% actual
vs. 34% predicted), most likely because the addresses
initially in tried were already very stale prior to the at-
tack (Table 1). Our infrastructure attacks were also more
successful then their predictions, but here the difference
was much less dramatic. To explain this, we look to the
new table. While our success-rate predictions assume
that new is completely overwritten, our infrastructure at-
tacks failed to completely overwrite the new table;5 thus,
we have some extra failures because the victim made out-
going connections to addresses in new.
3. Success in a ‘typical’ case.
Our attacks are suc-
cessful with even fewer addresses when we test them on
our live nodes, or on tables taken from those live nodes.
Most strikingly, a small botnet of 400 bots succeeds with
very high probability; while this botnet completely over-
writes new, it ﬁlls only 400/650 = 62% of tried, and
still manages to win with more than 80% probability.

7 Countermeasures

We have shown how an attacker with enough IP ad-
dresses and time can eclipse any target victim, regardless
of the state of the victim’s tried and new tables. We
now present countermeasures that make eclipse attacks
more difﬁcult. Our countermeasures are inspired by bot-
net architectures (Section 8), and designed to be faithful
to bitcoin’s network architecture.

The following ﬁve countermeasures ensure that: (1) If
the victim has h legitimate addresses in tried before the
attack, and a p-fraction of them accept incoming connec-
tions during the attack when the victim restarts, then even
an attacker with an unbounded number of addresses can-
not eclipse the victim with probability exceeding equa-
tion (10). (2) If the victim’s oldest outgoing connection is

5The new table holds 16384 addresses and from 6th last column of
Table 2 we see the new is not full for our infrastructure attacks. Indeed,
we predict this in Appendix B.

to a legitimate peer before the attack, then the eclipse at-
tack fails if that peer accepts incoming connections when
the victim restarts.
1. Deterministic random eviction. Replace bitcoin
eviction as follows: just as each address deterministically
hashes to a single bucket in tried and new (Section 2.2),
an address also deterministically hashes to a single slot
in that bucket. This way, an attacker cannot increase the
number of addresses stored by repeatedly inserting the
same address in multiple rounds (Section 4.1). Instead,
addresses stored in tried are given by the ‘random evic-
tion’ curves in Figures 2, 4, reducing the attack addresses
stored in tried.
2. Random selection.
Our attacks also exploit
the heavy bias towards forming outgoing connections
to addresses with fresh timestamps, so that an attacker
that owns only a small fraction f = 30% of the victim’s
tried table can increase its success probability (to say
50%) by increasing τ(cid:31), the time it invests in the attack
(Section 3.3). We can eliminate this advantage for the
attacker if addresses are selected at random from tried
and new; this way, a success rate of 50% always requires
the adversary to ﬁll 8√0.5 = 91.7% of tried, which re-
quires 40 groups in an infrastructure attack, or about
3680 peers in a botnet attack. Combining this with deter-
ministic random eviction, the ﬁgure jumps to 10194 bots
for 50% success probability.

These countermeasures harden the network, but still
allow an attacker with enough addresses to overwrite all
of tried. The next countermeasure remedies this:
3. Test before evict. Before storing an address in its
(deterministically-chosen) slot in a bucket in tried, ﬁrst
check if there is an older address stored in that slot. If
so, brieﬂy attempt to connect to the older address, and
if connection is successful, then the older address is not
evicted from the tried table; the new address is stored
in tried only if the connection fails.

We analyze these three countermeasures. Suppose that
there are h legitimate addresses in the tried table prior
to the attack, and model network churn by supposing
that each of the h legitimate addresses in tried is live
(i.e., accepts incoming connections) independently with
probability p. With test-before-evict, the adversary can-
not evict p×h legitimate addresses (in expectation) from
tried, regardless of the number of distinct addresses it
controls. Thus, even if the rest of tried is full of adver-
sarial addresses, the probability of eclipsing the victim is
bounded to about

This is in stark contrast to today’s protocol, where at-
tackers with enough addresses have unbounded success
probability even if tried is full of legitimate addresses.

64×64(cid:30)8
Pr[eclipse] = f 8 <(cid:31)1− p×h

(10)

USENIX Association  

24th USENIX Security Symposium  139

11

140  24th USENIX Security Symposium 

USENIX Association

Figure7:Theareabeloweachcurvecorrespondstoanumberofbotsathatcaneclipseavictimwithprobabil-ityatleast50%,giventhatthevictiminitiallyhashlegit-imateaddressesintried.Weshowonecurveperchurnratep.(Top)Withtestbeforeevict.(Bottom)Without.WeperformMonte-Carlosimulationsassumingchurnp,hlegitimateaddressesinitiallystoredintried,andabotnetinsertingaaddressesintotriedviaunsolicitedincomingconnections.TheareabeloweachcurveinFig-ure7isthenumberofbotsathatcaneclipseavictimwithprobabilityatleast50%,giventhatthereareinitiallyhlegitimateaddressesintried.Withtest-before-evict,thecurvesplateauhorizontallyath=4096(1−8√0.5)/p;aslongashisgreaterthanthisquantity,evenabotnetwithaninﬁnitenumberofaddresseshassuccessproba-bilityboundedby50%.Importantly,theplateauisab-sentwithouttest-before-evict;abotnetwithenoughad-dressescaneclipseavictimregardlessofthenumberoflegitimateaddresseshinitiallyintried.Thereisoneproblem,however.Ourbitcoinnodessawhighchurnrates(Table1).Withap=28%churnrate,forexample,boundingtheadversary’ssuccessprobabil-ityto10%requiresabouth=3700addressesintried;ournodeshadh<400.Ournextcountermeasurethusaddsmorelegitimateaddressestotried:4.FeelerConnections.Addanoutgoingconnectionthatestablishshort-livedtestconnectionstorandomly-selectedaddressesinnew.Ifconnectionsucceeds,theaddressisevictedfromnewandinsertedintotried;oth-erwise,theaddressisevictedfromnew.Feelerconnectionscleantrashoutofnewwhilein-creasingthenumberoffreshaddressintriedthatarelikelytobeonlinewhenanoderestarts.Ourﬁfthcoun-termeasureisorthogonaltothoseabove:5.Anchorconnections.InspiredbyTorentryguardrotationrates[33],weaddtwoconnectionsthatpersistbetweenrestarts.Thus,weaddananchortable,record-ingaddressesofcurrentoutgoingconnectionsandthetimeofﬁrstconnectiontoeachaddress.Uponrestart,thenodededicatestwoextraoutgoingconnectionstotheoldestanchoraddressesthatacceptincomingconnec-tions.Now,inadditiontodefeatingourothercounter-measures,asuccessfulattackermustalsodisruptanchorconnections;eclipseattacksfailifthevictimconnectstoananchoraddressnotcontrolledbytheattacker.Apartfromtheseﬁvecountermeasures,afewotherideascanraisethebarforeclipseattacks:6.Morebuckets.Amongthemostobviouscoun-termeasureistoincreasethesizeofthetriedandnewtables.Supposewedoubledthenumberofbucketsinthetriedtable.Ifweconsidertheinfrastructureattack,thebucketsﬁlledbysgroupsjumpsfrom(1−e−4s64)(perequation(9)to(1−e−4s128).Thus,aninfrastructureat-tackerneedsdoublethenumberofgroupsinordertoex-pecttoﬁllthesamefractionoftried.Similarly,abotnetneedstodoublethenumberofbots.Importantly,how-ever,thiscountermeasureishelpfulonlywhentriedalreadycontainsmanylegitimateaddresses,sothatat-tackerownsasmallerfractionoftheaddressesintried.However,iftriedismostlyempty(orcontainsmostlystaleaddressesfornodesthatarenolongeronline),theattackerwillstillownalargefractionoftheaddressesintried,eventhoughthenumberoftriedbucketshasincreased.Thus,thiscountermeasureshouldalsobeaccompaniedbyanothercountermeasure(e.g.,feelerconnections)thatincreasesthenumberoflegitimatead-dressesstoredintried.7.Moreoutgoingconnections.Figure6indicatesourtestbitcoinnodeshadatleast65connectionsslotsavailable,and[17]indicatesthat80%ofbitcoinpeersallowatleast40incomingconnections.Thus,wecanrequirenodestomakeafewadditionaloutgoingcon-nectionswithoutriskingthatthenetworkwillrunoutofconnectioncapacity.Indeed,recentmeasurements[51]indicatethatcertainnodes(e.g.,mining-poolgateways)dothisalready.Forexample,usingtwelveoutgoingcon-nectionsinsteadofeight(inadditiontothefeelerconnec-tionandtwoanchorconnections),decreasestheattack’ssuccessprobabilityfromf8tof12;toachieve50%suc-cessprobabilitytheinfrastructureattackernowneeds46groups,andthebotnetneeds11796bots.8.BanunsolicitedADDRmessages.AnodecouldchoosenottoacceptlargeunsolicitedADDRmessages(with>10addresses)fromincomingpeers,andonlyso-licitADDRmessagesfromoutgoingconnectionswhenitsnewtableistooempty.Thispreventsadversarialincom-ingconnectionsfromﬂoodingavictim’snewtablewithtrashaddresses.Wearguethatthischangeisnotharmful,sinceeveninthecurrentnetwork,thereisnoshortageofaddressinthenewtable(Section5).Tomakethismore12concrete, note that a node request ADDR messages upon
establishing an outgoing connection. The peer responds
with n randomly selected addresses from its tried and
new tables, where n is a random number between x and
2500 and x is 23% of the addresses the peer has stored.
If each peer sends, say, about n = 1700 addresses, then
new is already 8n/16384 = 83% full the moment that the
bitcoin node ﬁnishing establishing outgoing connections.

9. Diversify incoming connections.
Today, a bit-
coin node can have all of its incoming connections come
from the same IP address, making it far too easy for a sin-
gle computer to monopolize a victim’s incoming connec-
tions during an eclipse attack or connection-starvation at-
tack [32]. We suggest a node accept only a limited num-
ber of connections from the same IP address.

10. Anomaly detection.
Our attack has several spe-
ciﬁc “signatures” that make it detectable including: (1) a
ﬂurry of short-lived incoming TCP connections from di-
verse IP addresses, that send (2) large ADDR messages (3)
containing “trash” IP addresses. An attacker that sud-
denly connects a large number of nodes to the bitcoin
network could also be detected, as could one that uses
eclipsing per Section 1.1 to dramatically decrease the
network’s mining power. Thus, monitoring and anomaly
detection systems that look for this behavior are also be
useful; at the very least, they would force an eclipse at-
tacker to attack at low rate, or to waste resources on over-
writing new (instead of using “trash” IP addresses).

Status of our countermeasures.
We disclosed our
results to the bitcoin core developers in 02/2015. They
deployed Countermeasures 1, 2, and 6 in the bitcoind
v0.10.1 release, which now uses deterministic random
eviction, random selection, and scales up the number of
buckets in tried and new by a factor of four. To illus-
trate the efﬁcacy of this, consider the worst-case scenario
for the attacker where tried is completely full of legiti-
mate addresses. We use Lemma A.1 to estimate the suc-
cess rate of a botnet with t IP addresses as

16384 )t(cid:30)8
Pr[Eclipse] ≈(cid:31)1− ( 16383

(11)

Plotting (11) in Figure 8, we see that this botnet requires
163K addresses for a 50% success rate, and 284K ad-
dress for a 90% success rate. This is good news, but
we caution that ensuring that tried is full of legitimate
address is still a challenge (Section 5), especially since
there may be fewer than 16384 public-IP nodes in the
bitcoin network at a given time. Countermeasures 3 and
4 are designed to deal with this, and so we have also de-
veloped a patch with these two countermeasures; see [40]
for our implementation and its documentation.

1

0.8

0.6

0.4

0.2

]
e
s
p
i
l
c
E
[
r
P

0
0

0.5

1

1.5

2

Number of Addresses Inserted

2.5

3

3.5

4

4.5

5
x 105

Figure 8: Probability of eclipsing a node vs the number
of addresses (bots) t for bitcoind v0.10.1 (with Counter-
measures 1,2 and 6) when tried is initially full of legit-
imate addresses per equation (11).

8 Related Work

The bitcoin peer-to-peer (p2p) network. Recent work
considers how bitcoin’s network can delay or prevent
block propagation [31] or be used to deanonymize bit-
coin users [16, 17, 48]. These works discuss aspects of
bitcoin’s networking protocol, with [16] providing an ex-
cellent description of ADDR message propagation; we fo-
cus instead on the structure of the tried and new tables,
timestamps and their impact on address selection (Sec-
tion 2). [17] shows that nodes connecting over Tor can
be eclipsed by a Tor exit node that manipulates both bit-
coin and Tor. Other work has mapped bitcoin peers to au-
tonomous systems [38], geolocated peers and measured
churn [34], and used side channels to learn the bitcoin
network topology [16, 51].
p2p and botnet architectures.
There has been
extensive research on eclipse attacks [27, 61, 62] in
structured p2p networks built upon distributed hash ta-
bles (DHTs); see [64] for a survey. Many proposals
defend against eclipse attacks by adding more struc-
ture; [61] constrains peer degree, while others use con-
straints based on distance metrics like latency [42] or
DHT identiﬁers [13]. Bitcoin, by contrast, uses an un-
structured network. While we have focused on exploiting
speciﬁc quirks in bitcoin’s existing network, other works
e.g.,
[11, 15, 21, 44] design new unstructured networks
that are robust to Byzantine attacks. [44] blacklists mis-
behaving peers. Puppetcast’s [15] centralized solution is
based on public-key infrastructure [15], which is not ap-
propriate for bitcoin. Brahms [21] is fully decentralized,
and instead constrains the rate at which peers exchange
network information—a useful idea that is a signiﬁcant
departure from bitcoin’s current approach. Meanwhile,
our goals are also more modest than those in these works;
rather than requiring that each node is equally likely to
be sampled by an honest node, we just want to limit
eclipse attacks on initially well-connected nodes. Thus,
our countermeasures are inspired by botnet architectures,
which share this same goal. Rossow et al. [59] ﬁnds that
many botnets, like bitcoin, use unstructured peer-to-peer
networks and gossip (i.e., ADDR messages), and describes

USENIX Association  

24th USENIX Security Symposium  141

13

how botnets defend against attacks that ﬂood local ad-
dress tables with bogus information. The Sality botnet
refuses to evict “high-reputation” addresses; our anchor
countermeasure is similar (Section 7). Storm uses test-
before-evict [30], which we have also recommended for
bitcoin. Zeus [12] disallows connections from multiple
IP in the same /20, and regularly clean tables by testing
if peers are online; our feeler connections are similar.

9 Conclusion

We presented an eclipse attack on bitcoin’s peer-to-peer
network that undermines bitcoin’s core security guaran-
tees, allowing attacks on the mining and consensus sys-
tem, including N-conﬁrmation double spending and ad-
versarial forks in the blockchain. Our attack is for nodes
with public IPs. We developed mathematical models of
our attack, and validated them with Monte Carlo sim-
ulations, measurements and experiments. We demon-
strated the practically of our attack by performing it on
our own live bitcoin nodes, ﬁnding that an attacker with
32 distinct /24 IP address blocks, or a 4600-node botnet,
can eclipse a victim with over 85% probability in the at-
tacker’s worst case. Moreover, even a 400-node botnet
sufﬁced to attack our own live bitcoin nodes. Finally,
we proposed countermeasures that make eclipse attacks
more difﬁcult while still preserving bitcoin’s openness
and decentralization; several of these were incorporated
in a recent bitcoin software upgrade.

Acknowledgements

We thank Foteini Baldimtsi, Wil Koch, and the USENIX
Security reviewers for comments on this paper, various
bitcoin users for donating their peers ﬁles, and the bitcoin
core devs for discussions and for implementing Counter-
measures 1,2,6. E.H., A.K., S.G. were supported in part
by NSF award 1350733, and A.Z. by ISF Grants 616/13,
1773/13, and the Israel Smart Grid (ISG) Consortium.

References
[1] Amazon web services elastic ip. http://aws.amazon.com/

ec2/faqs/#elastic-ip. Accessed: 2014-06-18.

[2] Bitcoin: Common vulnerabilities and exposures.

https:
//en.bitcoin.it/wiki/Common_Vulnerabilities_and_
Exposures. Accessed: 2014-02-11.

[3] Bitcoin wiki: Double-spending. https://en.bitcoin.it/

wiki/Double-spending. Accessed: 2014-02-09.

[4] Bitnode.io snapshot of reachable nodes. https://getaddr.

bitnodes.io/nodes/. Accessed: 2014-02-11.

[5] Bitpay:

What

is

transaction

speed?

//support.bitpay.com/hc/en-us/articles/
202943915-What-is-Transaction-Speed-.
2014-02-09.

https:

Accessed:

[6] Bug bounty requested: 10 btc for huge dos bug in all current
bitcoin clients. Bitcoin Forum. https://bitcointalk.org/
index.php?topic=944369.msg10376763#msg10376763.
Accessed: 2014-06-17.

[7] CVE-2013-5700: Remote p2p crash via bloom ﬁlters. https:
//en.bitcoin.it/wiki/Common_Vulnerabilities_and_
Exposures. Accessed: 2014-02-11.

[8] Microsoft

azure

ip

address

pricing.

http://

azure.microsoft.com/en-us/pricing/details/
ip-addresses/. Accessed: 2014-06-18.

[9] Rackspace:

Requesting

additional

for

cloud

dresses
rackspace.com/knowledge_center/article/
requesting-additional-ipv4-addresses-for-cloud-servers.
Accessed: 2014-06-18.

servers.

ipv4

ad-
http://www.

[10] Ghash.io and double-spending against betcoin dice, October 30

2013.

[11] ANCEAUME, E., BUSNEL, Y., AND GAMBS, S. On the power
of the adversary to solve the node sampling problem. In Transac-
tions on Large-Scale Data-and Knowledge-Centered Systems XI.
Springer, 2013, pp. 102–126.

[12] ANDRIESSE, D., AND BOS, H. An analysis of the zeus peer-to-

peer protocol, April 2014.

[13] AWERBUCH, B., AND SCHEIDELER, C. Robust random number
generation for peer-to-peer systems. In Principles of Distributed
Systems. Springer, 2006, pp. 275–289.

[14] BAHACK, L. Theoretical bitcoin attacks with less than half of
the computational power (draft). arXiv preprint arXiv:1312.7013
(2013).

[15] BAKKER, A., AND VAN STEEN, M. Puppetcast: A secure peer
sampling protocol. In European Conference on Computer Net-
work Defense (EC2ND) (2008), IEEE, pp. 3–10.

[16] BIRYUKOV, A., KHOVRATOVICH, D., AND PUSTOGAROV, I.
Deanonymisation of clients in Bitcoin P2P network. In Proceed-
ings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security (2014), ACM, pp. 15–29.

[17] BIRYUKOV, A., AND PUSTOGAROV, I. Bitcoin over tor isn’t a

good idea. arXiv preprint arXiv:1410.6079 (2014).

[18] BITCOIN WIKI. Conﬁrmation. https://en.bitcoin.it/

wiki/Confirmation, February 2015.

[19] BITCOIN WISDOM. Bitcoin difﬁculty and hash rate chart.

https://bitcoinwisdom.com/bitcoin/difficulty,
February 2015.

[20] BLOCKCHAIN.IO.

time.

tion
avg-confirmation-time, February 2015.

Average

conﬁrma-
https://blockchain.info/charts/

transaction

[21] BORTNIKOV, E., GUREVICH, M., KEIDAR, I., KLIOT, G., AND
SHRAER, A. Brahms: Byzantine resilient random membership
sampling. Computer Networks 53, 13 (2009), 2340–2359.

[22] BRANDS, S. Untraceable off-line cash in wallets with observers

(extended abstract). In CRYPTO (1993).

[23] CAIDA. AS to Organization Mapping Dataset, July 2014.
[24] CAIDA. Routeviews preﬁx to AS Mappings Dataset for IPv4

and IPv6, July 2014.

[25] CAMENISCH, J., HOHENBERGER, S., AND LYSYANSKAYA, A.

Compact e-cash. In EUROCRYPT (2005).
census

[26] CARNABOTNET.

Internet

2012.

http:

//internetcensus2012.bitbucket.org/paper.html,
2012.

142  24th USENIX Security Symposium 

USENIX Association

14

[27] CASTRO, M., DRUSCHEL, P., GANESH, A., ROWSTRON, A.,
AND WALLACH, D. S. Secure routing for structured peer-to-
peer overlay networks. ACM SIGOPS Operating Systems Review
36, SI (2002), 299–314.

[46] KARAME, G., ANDROULAKI, E., AND CAPKUN, S. Two bit-
coins at the price of one? double-spending attacks on fast pay-
ments in bitcoin. IACR Cryptology ePrint Archive 2012 (2012),
248.

[28] CHAUM, D. Blind signature system. In CRYPTO (1983).
[29] COURTOIS, N. T., AND BAHACK, L. On subversive miner
strategies and block withholding attack in bitcoin digital cur-
rency. arXiv preprint arXiv:1402.1718 (2014).

[30] DAVIS, C. R., FERNANDEZ, J. M., NEVILLE, S., AND
MCHUGH, J. Sybil attacks as a mitigation strategy against the
storm botnet. In 3rd International Conference on Malicious and
Unwanted Software, 2008. (2008), IEEE, pp. 32–40.

[31] DECKER, C., AND WATTENHOFER, R. Information propagation
in the bitcoin network. In IEEE Thirteenth International Confer-
ence on Peer-to-Peer Computing (P2P) (2013), IEEE, pp. 1–10.
[32] DILLON, J. Bitcoin-development mailinglist: Protecting bitcoin
against network-wide dos attack. http://sourceforge.net/
p/bitcoin/mailman/message/31168096/, 2013. Accessed:
2014-02-11.

[33] DINGLEDINE, R., HOPPER, N., KADIANAKIS, G., AND MATH-
EWSON, N. One fast guard for life (or 9 months). In 7th Work-
shop on Hot Topics in Privacy Enhancing Technologies (HotPETs
2014) (2014).

[34] DONET,

J. A. D., P ´EREZ-SOLA, C., AND HERRERA-
JOANCOMART´I, J. The bitcoin p2p network. In Financial Cryp-
tography and Data Security. Springer, 2014, pp. 87–102.

[35] DURUMERIC, Z., WUSTROW, E., AND HALDERMAN, J. A.
ZMap: Fast Internet-wide scanning and its security applications.
In Proceedings of the 22nd USENIX Security Symposium (Aug.
2013).

[36] EYAL, I. The miner’s dilemma. arXiv preprint arXiv:1411.7099

(2014).

[37] EYAL, I., AND SIRER, E. G. Majority is not enough: Bitcoin
mining is vulnerable. In Financial Cryptography and Data Secu-
rity. Springer, 2014, pp. 436–454.

[38] FELD, S., SCH ¨ONFELD, M., AND WERNER, M. Analyzing the
deployment of bitcoin’s p2p network under an as-level perspec-
tive. Procedia Computer Science 32 (2014), 1121–1126.

[39] FINNEY, H.

https:
//bitcointalk.org/index.php?topic=3441.msg48384#
msg48384, 2011. Accessed: 2014-02-12.

Finney attack.

Bitcoin talk:

[40] HEILMAN, E. Bitcoin: Added test-before-evict discipline in ad-
drman, feeler connections. https://github.com/bitcoin/
bitcoin/pull/6355.

[41] HEILMAN, E., KENDLER, A., ZOHAR, A., AND GOLDBERG,
S. Eclipse attacks on bitcoins peer-to-peer network (full ver-
sion). Tech. Rep. 2015/263, ePrint Cryptology Archive, http:
//eprint.iacr.org/2015/263.pdf, 2015.

[42] HILDRUM, K., AND KUBIATOWICZ, J. Asymptotically efﬁcient
approaches to fault-tolerance in peer-to-peer networks. In Dis-
tributed Computing. Springer, 2003, pp. 321–336.

[43] IANA.

Iana

ipv4 address

space

registry.

http:

//www.iana.org/assignments/ipv4-address-space/
ipv4-address-space.xhtml, January 2015.

[44] JESI, G. P., MONTRESOR, A., AND VAN STEEN, M. Secure

peer sampling. Computer Networks 54, 12 (2010), 2086–2098.

[45] JOHNSON, B., LASZKA, A., GROSSKLAGS, J., VASEK, M.,
AND MOORE, T. Game-theoretic analysis of ddos attacks against
bitcoin mining pools. In Financial Cryptography and Data Secu-
rity. Springer, 2014, pp. 72–86.

[47] KING,

L.

Bitcoin
rise.

hit

by

’massive’

ddos

at-
http: // www.

as

tensions

tack
forbes. com/ sites/ leoking/ 2014/ 02/ 12/
bitcoin-hit-by-massive-ddos-attack-as-tensions-rise/
(December 2 2014).

Forbes

[48] KOSHY, P., KOSHY, D., AND MCDANIEL, P. An analysis of
In Financial

anonymity in bitcoin using p2p network trafﬁc.
Cryptography and Data Security. 2014.

[49] KROLL, J. A., DAVEY, I. C., AND FELTEN, E. W. The eco-
nomics of bitcoin mining, or bitcoin in the presence of adver-
saries. In Proceedings of WEIS (2013), vol. 2013.

[50] LASZKA, A., JOHNSON, B., AND GROSSKLAGS, J. When bit-
coin mining pools run dry. 2nd Workshop on Bitcoin Research
(BITCOIN) (2015).

[51] MILLER, A., LITTON, J., PACHULSKI, A., GUPTA, N., LEVIN,
D., SPRING, N., AND BHATTACHARJEE, B. Discovering bit-
coin’s network topology and inﬂuential nodes. Tech. rep., Uni-
versity of Maryland, 2015.

[52] NAKAMOTO, S. Bitcoin: A peer-to-peer electronic cash system.
[53] OPENSSL.
TLS heartbeat read overrun (CVE-2014-0160).
https://www.openssl.org/news/secadv_20140407.txt,
April 7 2014.

[54] PLOHMANN, D., AND GERHARDS-PADILLA, E. Case study of
the miner botnet. In Cyber Conﬂict (CYCON), 2012 4th Interna-
tional Conference on (2012), IEEE, pp. 1–16.

[55] RIPE.

Ripestat.

https://stat.ripe.net/data/

announced-prefixes, October 2014.

[56] RIPE. Latest delegations. ftp://ftp.ripe.net/pub/stats/

ripencc/delegated-ripencc-extended-latest, 2015.

[57] ROADTRAIN.

Bitcoin-talk: Ghash.io and double-spending
against betcoin dice.
https://bitcointalk.org/index.
php?topic=321630.msg3445371#msg3445371, 2013. Ac-
cessed: 2014-02-14.

[58] ROSENFELD, M. Analysis of hashrate-based double spending.

arXiv preprint arXiv:1402.2009 (2014).

[59] ROSSOW, C., ANDRIESSE, D., WERNER, T., STONE-GROSS,
B., PLOHMANN, D., DIETRICH, C. J., AND BOS, H. Sok:
P2pwned-modeling and evaluating the resilience of peer-to-peer
botnets.
In IEEE Symposium on Security and Privacy (2013),
IEEE, pp. 97–111.

[60] SHOMER, A. On the phase space of block-hiding strategies.

IACR Cryptology ePrint Archive 2014 (2014), 139.

[61] SINGH, A., NGAN, T.-W. J., DRUSCHEL, P., AND WALLACH,
D. S. Eclipse attacks on overlay networks: Threats and defenses.
In In IEEE INFOCOM (2006).

[62] SIT, E., AND MORRIS, R. Security considerations for peer-to-
peer distributed hash tables. In Peer-to-Peer Systems. Springer,
2002, pp. 261–269.

[63] STOCK, B., GOBEL, J., ENGELBERTH, M., FREILING, F. C.,
AND HOLZ, T. Walowdac: Analysis of a peer-to-peer botnet. In
European Conference on Computer Network Defense (EC2ND)
(2009), IEEE, pp. 13–20.

[64] URDANETA, G., PIERRE, G., AND STEEN, M. V. A survey of
dht security techniques. ACM Computing Surveys (CSUR) 43, 2
(2011), 8.

[65] VASEK, M., THORNTON, M., AND MOORE, T. Empirical anal-
ysis of denial-of-service attacks in the bitcoin ecosystem. In Fi-
nancial Cryptography and Data Security. Springer, 2014, pp. 57–
71.

USENIX Association  

24th USENIX Security Symposium  143

15

144  24th USENIX Security Symposium 

USENIX Association

Figure9:E[N]vss(thenumberofsourcegroups)fordif-ferentchoicesofg(numberofgroupspersourcegroup)whenoverwritingthenewtableperequation(13).AAUsefulLemmaLemmaA.1.Ifkitemsarerandomlyandindependentlyinsertedintonbuckets,andXisarandomvariablecountingthenumberofnon-emptybuckets,thenE[X]=n(cid:31)1−(n−1n)k(cid:30)≈n(1−e−kn)(12)Proof.LetXi=1ifbucketiisnon-empty,andXi=0otherwise.Theprobabilitythatthebucketiisemptyaftertheﬁrstitemisinsertedis(n−1n).AfterinsertingkitemsPr[Xi=1]=1−(cid:29)n−1n(cid:28)kItfollowsthatE[X]=n∑i=1E[Xi]=n∑i=1Pr[Xi=1]=n(1−(n−1n)k)(12)followssince(n−1n)≈e−1/nforn(cid:29)1.BOverwritingtheNewTableHowshouldtheattackersendADDRmessagesthatover-writethenewtablewith“trash”IPaddresses?Our“trash”isfromtheunallocatedClassAIPv4addressblock252.0.0.0/8,designatedbyIANAas“reservedforfutureuse”[43];anyconnectionstheseaddresseswillfail,forcingthevictimtochooseanaddressfromtried.Next,recall(Section2.2)thatthepair(group,sourcegroup)determinesthebucketinwhichanaddressinanADDRmessageisstored.Thus,iftheattackercontrolsnodesinsdifferentgroups,thensisthenumberofsourcegroups.WesupposethatnodesineachsourcegroupcanpushADDRmessagescontainingaddressesfromgdistinctgroups;the“trash”252.0.0.0/8addressblockgiveanup-perboundongof28=256.Eachgroupcontainsadis-tinctaddresses.Howlargeshoulds,g,andabesothatthenewtableisoverwrittenby“trash”addresses?B.1InfrastructurestrategyInaninfrastructureattack,thenumberofsourcegroupssisconstrained,andthenumberofgroupsgisessentiallyunconstrained.ByLemmaA.1,theexpectednumberofbucketsﬁlledbyassourcegroupsisE[N]=256(1−(255256)32s)(13)Weexpecttoﬁll≈251of256newbucketswiths=32.Each(group,sourcegroup)pairmapstoauniquebucketinnew,andeachbucketinnewcanhold64ad-dresses.Bitcoinevictionisused,andwesupposeeachnewbucketiscompletelyfulloflegitimateaddressesthatareolderthanalltheaddressesinsertedbytheadversaryviaADDRmessages.Sinceallaaddressesinaparticu-lar(group,sourcegroup)pairmaptoasinglebucket,itfollowsthatthenumberofaddressesthatactuallystoredinthatbucketisgivenbyE[Ya]intherecurrencerela-tionofequationsof(5)-(6).Witha=125addresses,theadversaryexpectstooverwriteE[Ya]=63.8ofthe64legitimateaddressesinthebucket.Wethusrequireeachsourcegrouptohave32peers,andeachpeertosendADDRmessageswith8distinctgroupsofa=125addresses.Thus,thereareg=32×8=256groupspersourcegroup,whichisexactlythemaximumnumberofgroupsavailableinourtrashIPaddressblock.EachpeersendsexactlyoneADDRmessagewith8×125=1000ad-dress,foratotalof256×125×sdistinctaddressessentbyallpeers.(Thereare224addressesinthe252.0.0.0/8block,soalltheseaddressesaredistinctifs<524.)B.2BotnetstrategyInabotnetattack,eachoftheattacker’stnodesisinadistinctsourcegroup.Fors=t>200,whichisthecaseforallourbotnetattacks,equation(13)showsthatthenumberofsourcegroupss=tisessentiallyuncon-strained.WethusrequireeachpeertosendasingleADDRmessagecontaining1000addresseswith250dis-tinctgroupsoffouraddresseseach.Sinces=tissolarge,wecanmodelthisbyassumingthateach(group,sourcegroup)pairselectsabucketinnewuniformlyatrandom,andinserts4addressesintothatbucket;thus,theexpectednumberofaddressesinsertedperbucketwillbetightlyconcentratedaround4×E[B(250t,1256]=3.9tFort>200,weexpectatleast780addresstobeinsertedintoeachbucket.Fromequations(5)and(6),weﬁndE[Y780]≈64,sothateachnewbucketislikelytobefull.16