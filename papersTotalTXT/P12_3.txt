Bypassing Space Explosion in Regular 

Expression Matching for Network Intrusion 

Detection and Prevention Systems 

Jignesh Patel,   Alex Liu   and   Eric Torng 

Dept. of Computer Science and Engineering 

Michigan State University 

Problem Statement 

  Core operation in IDS/IPS is Deep Packet Inspection 

–  Past DPI: string matching 
–  Current DPI: regular expression (RE) matching 

•  Example: SNORT, Bro 

  Problem: given a set of REs, how to quickly scan 

packet payload to determine which REs are matched? 

Jignesh Patel - Michigan State University 

2 

Solution using Automata 

  Common solution is to build an equivalent Finite State 

Automata based on DFA. 

  DFA size grows exponentially with number of REs. 

  Several alternate automata have been proposed 

D2FA, XFA, δFA etc. 

Jignesh Patel - Michigan State University 

3 

Limitations of Prior Work 

  Prior solution: Union then Minimize framework. 

–  First combined DFA for the whole RE set is built. 
–  Compression technique is applied to the combined DFA to 

get the alternate automata. 

Merge	  

RE1	  
RE2	  
:	  
:	  
REn	  

NFA1	  
NFA2	  

:	  
:	  

NFAn	  

NFA	  

Subset	  

construc4on	  

DFA	  
min.	  

Compression	  

Algorithm	  

DFA	  

Alternate	  
Automata	  

  Problems: 

automata, hence requires too much time and memory. 

–  The minimization/compression is applied on large combined 
–  The intermediate DFA might be too large to fit in memory. 
–  Whole automata needs to be rebuilt if new RE is added to set. 
4 

Jignesh Patel - Michigan State University 

Our Approach 

  Our approach: Minimize then Union framework. 

–  Build individual DFAs for each RE in the RE set. 
–  Compress each DFA to get individual alternate automata. 
–  Merge the all compressed alternate automata together. 

RE	  to	  Min	  DFA	  

RE1	  
RE2	  
:	  
:	  
REn	  

DFA1	  
DFA2	  

:	  
:	  

DFAn	  

Compression	  

Algorithm	  

Merge	  

Alt.	  Automata1	  
Alt.	  Automata2	  

:	  
:	  

Alt.	  Automatan	  

Alternate	  
Automata	  

  Advantages 

–  The compression algorithm is applied to small DFAs. 
–  Large intermediate DFA does not need to be built. 
–  Easy to add new RE to the set with one merge. 

  In this work we focus on the D2FA. 

Jignesh Patel - Michigan State University 

5 

D2FA Overview 

  D2FA [Kumar et al., 2006] uses 
common transitions between 
states to reduce the number of 
transitions. 

  To build a D2FA: 

1.  We choose a deferred state for each state in 

the DFA. 

2.  For each state, remove transitions that are 

common with its deferred state. 

Jignesh Patel - Michigan State University 

s8 

s7 

s2 

s1 

|∑| 

c1 

c1 

c3 

c2 

c1 

c2 

c3 

s6 

s5 

s4 

s3 

6 

D2FA Construction 

  Build Space Reduction Graph (SRG) 
  Find maximum spanning tree (MST) in SRG. 
  Use the MST to set deferred states. 

a 

from [0,3] 
∑-{a,b} 
fail 

a 
a 

1 
1 

b 
b 

a 

3/1 
3/1 

a 

c 
b 
∑-{a,d} 

0 
0 

b 
b 

b 

2 
2 

c 
c 

4 
4 

6/2 
6/2 

d 
d 

d 

from [4,7] 

fail 

a 

b 
b 

7/1 
7/1 

a 

d 

a 

a 
a 

5 
5 

d 

255 
255 

0 
0 

1 
1 

255 
255 

255 
255 

254 
254 

4 
4 

255 
255 

256 
256 

5 
5 

254 
254 

256 
256 

255 
255 

255 
255 

2 
2 

256 
256 

3 
3 

6 
6 

256 
256 

7 
7 

SRG	  

D2FA	  for	  RE	  set	  {ab,	  bc.*d}	  
DFA	  for	  RE	  set	  {ab,	  bc.*d}	  

	  	  	  	  521	  Transi4ons	  
2048	  Transi4ons	  

Jignesh Patel - Michigan State University 

DFA for RE Matching in DPI 

 

  

a 

from [0,3] 
fail 

a 

0 

b 

b 

1 

a 

3/1 

b 

a 

c 

b 

a 

a 

5 

d 

a 

b 

7/1 

a 

d 

2 

c 

4 

6/2 

d 

d 

from [4,7] 

fail 

DFA	  for	  RE	  set	  {ab,	  bc.*d}	  

Jignesh Patel - Michigan State University 

8 

 

  

Merging DFAs (1) 

DFA	  for	  RE	  

ab	  

from [0,2] 
fail 

a 

0 

a 

1 

from 0,1 

fail 

from [0,3] 
fail 

a 

b 

a 

b 

a 

b 

2/1 

2,0 

2,1 
3/1 

2,2 
7/1 

2,3 

0,0 
0 

b 

0,1 
2 

b 

from [4,7] 

c 

0 

b 

1 

c 

2 

d 

b 

fail 

d 

1,0 
1 

a 

b 
1,1 
c 

a 

1,2 
5 

a 

a 

a 

d 

a 

d 
1,3 

fail 

d 

0,2 
4 

d 

0,3 
6/2 

Jignesh Patel - Michigan State University 

3/2 

DFA	  for	  RE	  

bc.*d	  

Merged	  DFA	  for	  RE	  set	  

{ab,	  bc.*d}	  
9 

Merging DFAs (2) 

 

  

Jignesh Patel - Michigan State University 

10 

Merging D2FA 

  We extend the UCP construction for merging DFAs to 

merge D2FAs. 

  To generate D2FA, we need to set deferred state for 

each state. 

  Set the deferred state as soon as new state is 

created. 

  Since deferred state is set when a state is created, we 
only need to store the non-deferred transitions for the 
state. 

  The whole DFA is never built since we always store 

the D2FA. 

Jignesh Patel - Michigan State University 

11 

Setting Deferred State 

 

  

D1 
D3 
D2 

v 

u 

w 

v1 

v2 

…	  

w1 

w2 

…	  

…	  

vi 

wj 

Jignesh Patel - Michigan State University 

12 

Merging D2FA Example 

  For most states, one of the 

first pair is the best pair. 

  In our experiments, 
average number of 
comparisons needed < 1.5 

D1 

2 

D3 

3 

D2 

1 

2 
256 

0 

0 
255 

0 

D2FA	  for	  RE	  

ab	  

∑-a 

a 

0 

1 

b 

2/1 

∑-b 

∑-{a,b} 

a 

1,0 
1 

b 

0 

b 

1 

0,0 
0 

b 

0,1 
2 

2,1 
3/1 

c 

∑-d 

c 

∑-{a,d} 

a 

1,2 
5 

b 

2,2 
7/1 

2 

d 

3/2 

0,2 
4 

d 

0,3 
6/2 

D2FA	  for	  RE	  

bc.*d	  

Merged	  D2FA	  for	  RE	  set	  

{ab,	  bc.*d}	  

Jignesh Patel - Michigan State University 

13 

Experimental Results: Main 

  We used real world 8 RE sets that were used in prior 

work for our experiments. 

  We group the 8 RE sets into three groups according 

to type of REs in the sets: STRING, WILDCARD, 
SNORT 

  We compare D2FA Merge algorithm with the Original 

D2FA algorithm. 

RE set 
group 

All	  
STRING	  
WILDCARD	  
SNORT	  

# States / 
ASCII len. 
17.7	  
0.7	  
36	  
10.7	  

Trans 

increase 
20.10%	  
44.00%	  
3.00%	  
21.30%	  

Max. 

 Def. depth ratio  Space  
 Avg. 
7.3	  
1.8	  
12	  
6.3	  

ratio 
4.8	  
1390	  
1.6	   2672.8	  
8.2	  
42.7	  
3.6	   1882.1	  

Speedup 

factor 

301.6	  
99.5	  
338.2	  
399.7	  

Jignesh Patel - Michigan State University 

14 

Experimental Results: Scale 
  To test scalability we use a synthetic RE set with REs of the 

form /c1c2c3c4.*c5c6c7c8/ 

  We add one RE at a time until memory estimate goes over 1GB. 

  Original D2FA algorithm: 

–  # REs added: 12 
–  # states in final D2FA: 397,312 
–  Time to build D2FA: 71 hours 

  D2FA Merge algorithm: 

–  # REs added: 19 
–  # states in final D2FA: 80,216,064 
–  Time to build D2FA: 1.2 hours 

  For 12 REs, D2FA Merge only needs 10 seconds to build. 
  D2FA Merge results in same D2FA size as the original algorithm. 

Jignesh Patel - Michigan State University 

15 

Questions? 

  Thank you for listening! 

Jignesh Patel - Michigan State University 

16 

