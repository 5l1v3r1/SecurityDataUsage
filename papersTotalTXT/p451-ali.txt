Conﬁguration-based IDS for Advanced Metering

Infrastructure

Muhammad Qasim Ali and Ehab Al-Shaer
Department of Software and Information Systems

University of North Carolina Charlotte

mali12@uncc.edu, ealshaer@uncc.edu

ABSTRACT
Smart grid deployment initiatives have been witnessed in the
past recent years. Smart grids provide bi-directional com-
munication between meters and headend system through
Advanced Metering Infrastructure (AMI). Recent studies
highlight the threats targeting AMI. Despite the need of
tailored Intrusion Detection Systems (IDS) for the smart
grid [6], very limited progress has been made in this area.
Unlike traditional networks, smart grid has its own unique
challenges, such as limited computational power devices and
potentially high deployment cost, that restrict the deploy-
ment options of intrusion detectors. We show that smart
grid exhibits deterministic and predictable behavior that
can be accurately modeled to develop intrusion detection
system. In this paper, we show that AMI behavior can be
modeled using event logs collected at smart collectors, which
in turn can be veriﬁed using the speciﬁcations invariant gen-
erated from the conﬁgurations of the AMI devices. Event
logs are modeled using fourth order Markov Chain and spec-
iﬁcations are written in Linear Temporal Logic (LTL). The
approach provides robustness against evasion and mimicry
attacks, however, we discuss that it still can be evaded to
a certain extent. We validate our approach on a real-world
dataset of thousands of meters collected at the AMI of a
leading utility provider.

Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and Protection

Keywords
Intrusion Detection Systems; Advanced Metering Infrastruc-
ture; Smart Grid

1.

INTRODUCTION

The paradigm for energy infrastructures is being shifted
to a new era. Legacy infrastructures are being replaced with

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516745.

the state-of-the-art smart grids. In the last few years, lead-
ing utility providers have taken the initiative of shifting to
smart grid in order to eﬃciently manage the power while
providing useful features [21]. The basic premise of moving
to smart grid infrastructure is to manage it eﬃciently while
providing uninterrupted low cost energy. The new smart in-
frastructure supports numerous cyber and physical devices
that exhibit a high level dependency. Thus, smart grid is a
highly complex and critical cyber-physical system that re-
quires very rigid security considerations.

An important core network in a smart grid is Advanced
Metering Infrastructure (AMI). AMI provides bi-directional
communication for monitoring and demand-response func-
tions between end devices at customers’ premise like smart
meters and headend at utility provider’s oﬃce. Bi-directional
communication in an AMI makes it possible for an end user
to use the energy eﬃciently at low cost. Moreover, head-
end system can remotely conﬁgure, upgrade, and request
meter reading etc. using the AMI. This inherent criticality
and availability of the AMI makes it a high potential target
for the large-scale attacks that can potentially cause major
regional blackout.

Despite these facts, limited progress has been made so
far in order to detect malicious behavior. Recent studies
including those by the federal government have shown that
AMI is facing immense potential threats [6, 12, 17, 24, 25],
which could aﬀect the deployment and growth of smart grid.
These outline existing vulnerabilities and exploitations, even
though secure communication protocols were used. These
vulnerabilities were exploited to penetrate in the AMI to
gain control of a number of nodes for nefarious purposes.
To countermeasure, some eﬀorts have been made to prevent
these threats [4, 5, 8].

Figure 1 presents a typical example of the AMI. This ﬁg-
ure shows that the meters communicate with the smart col-
lectors using various mediums and smart collectors commu-
nicate with the headend system (and vice versa) using public
networks. Unlike traditional networks, AMI has its own re-
quirements which pose signiﬁcant challenges for monitoring
and intrusion detection since it may require capturing net-
work traﬃc. First, sensor deployment in the meters is prac-
tically infeasible due to the limited computational power and
space resources at the node [22]. Second, although some re-
searchers have suggested the meter-based sensors [4, 8, 27],
smart grid providers as well as vendors ﬁrmly avoid this op-
tion due to the prohibitive cost increase associated with the
large number of meter deployments. Therefore, most IDS
proposals for the AMI lack practical feasibility.

4512. RELATED WORK

Intrusion detection has gained tremendous attention and
many anomaly-based IDS techniques have been proposed for
the cyber systems [9, 10, 13]. For example, n-gram based in-
trusion detection and markov chain based approaches have
been proposed in the past [26]. n-gram can be seen as pre-
diction using n-1 markov model. However, a markov chain
moves from one state to the next using a weighted list of pos-
sible future states. n-gram can calculate the likelihood for
next state, however, it only gives the statistical distribution
and cannot maintain the temporal order. Since AMI sup-
ports limited protocols and conﬁgurations, temporal speci-
ﬁcations can be deﬁned for markov chain model to devise
speciﬁcation-based intrusion detector. Though n-gram can
be used to design anomaly detection system based on statis-
tical distribution, we believe speciﬁcation-based approach is
better suited for intrusion detection in AMI due to its na-
ture.

The novelty of our approach lies in characterizing AMI
conﬁguration as a baseline for developing a reliable IDS
(high detection and low false positive rate), while consid-
ering the practical computation and operational constrains
of AMI. To the best of our knowledge, no approach exists yet
which uses conﬁgurations for deriving the LTL properties for
markov model.

Recently proposed techniques have reduced the false pos-
itive rate for traditional networks [19]. However, we focus
our attention to the smart grid since these techniques require
learning and are computationally extensive. Therefore, they
do not ﬁt the application requirements of a smart grid.

In [23], an anomaly detection technique for smart grid
has been proposed.
It considers the temporal anomalies
and rank potential intrusion events based on the credibil-
ity impact on power system. It also considers the scenario
where simultaneous cyber intrusions are launched over mul-
tiple substations. The work focuses on the cyber security of
substations in a smart grid. A survey on supervisory control
and data acquisition system (SCADA) speciﬁc intrusion de-
tection and prevention is presented in [28]. However, these
techniques do not cater for the intrusions on an AMI.

In addition to intrusion detection, few studies have been
conducted to highlight the cyber security issues in an AMI
of a smart grid [3,6]. A distributed intrusion detection tech-
nique in a multi-layer architecture of smart grid is proposed
in [27]. It proposes a three layer architecture for home area
network, neighborhood area network and wide area network.
It uses trained support vector machines (SVM) for attack
classiﬁcation at each layer. In [5], the requirements and ar-
chitectural directions are discussed for intrusion detection
in an AMI. Based on the requirements and architectural
directions highlighted in [5], a speciﬁcation-based intrusion
detection technique has been proposed in [4]. This approach
deﬁnes a formal model for C12.22 standard protocol which
is used by diﬀerent meters in the AMI for communication
purposes.
It veriﬁes the speciﬁcation at the application
layer in order to identify anomalous behavior. The pro-
posed approach is protocol speciﬁc. However, not all the
deployed smart grids are using this protocol for communi-
cation. Therefore, it cannot be applied to those AMI infras-
tructures. Moreover, there is no standard implementation
of the protocol available and many vendors keep the imple-
mentation proprietary. An intrusion detection architecture
for the AMI has been proposed in [8]. It uses data mining

Figure 1: Basic AMI network

Deploying detection module at the smart collector pro-
vides the beneﬁt of monitoring both the meter-collector and
collector-headend communication. Moreover, AMI commu-
nication activity is by default logged at the smart collector
thus it does not pose any extra burden. Although device
conﬁguration and log’s integrity is protected using headend-
collector key-pairing, this AMI feature was never exploited
for monitoring and characterizing the AMI behavior. AMI is
a special purpose network and its traﬃc dynamics are often
very low since it supports a limited number of protocols and
it is conﬁguration-driven. Moreover, similar devices from
limited vendors are usually deployed. To exploit the lim-
ited behavior, simple speciﬁcation-based intrusion detection
techniques are proposed in the recent literature [4] instead
of traditional anomaly-based intrusion detectors.

In this paper, we present a novel device conﬁguration
based stochastic model checking intrusion detection tech-
nique. It is designed to ﬁt the requirements and log char-
acteristics of the AMI. We model the AMI infrastructure
behavior using the logs generated at the smart collector.
Stochastic model based on 4-th order markov chain is used,
since it exhibits a low conditional entropy, in order to repre-
sent the AMI probabilistic behavior. Probabilistic behavior
is observed as a result of its conﬁguration and nature of the
network. Speciﬁcations written in Linear Temporal Logic
(LTL) are automatically generated from the a-priori known
conﬁgurations of the AMI devices (smart meters and collec-
tors), which in turn are then probabilistically veriﬁed using
the stochastic model generated from the smart collector’s
logs. The proposed technique exhibits high accuracy and
it can be easily deployed in the existing AMI of a smart
grid. Moreover, the approach provides robustness against
evasion and mimicry attacks, however, we discuss that it
can be still evaded to a certain extent. For experimentation
and evaluation we use a real-world dataset of more than two
thousand meters obtained as a result of our collaboration
with a leading smart grid based utility provider. Our exper-
imental evaluation shows promising results for the proposed
model i.e., accuracy rate of more than 95% with negligible
false alarms of 0.2%.

The rest of the paper is organized as follows. Section 2 dis-
cusses the related work followed by the dataset described in
Section 3. Section 4 discusses the statistical analysis of the
logs collected at the smart collectors. Based on the analysis,
a stochastic model is proposed in Section 5. Properties are
speciﬁed using LTL language which is described in Section
6. Attack model and evaluation of the proposed approach is
shown in Section 7 along-with the discussion on robustness
against evasion, scalability and limitations. Section 8 con-
cludes the work followed by the background of AMI in the
Appendix.

452Table 1: Sample meter conﬁguration after anonymization

Meter

Vendor

meter1
meter2
meter3
meter4

vendor1
vendor1
vendor2
vendor3

Memory Usage Sample Schedule Reporting Time

(MB)
512MB
512MB
784MB
784MB

(secs)

(mins)

20
40
15
30

1
1
2
1

Table 2: Sample smart collector conﬁguration after anonymization
Reporting Time Buﬀer Size

Neighboring

Smart Collector

Vendor

Meters

Link Type

(Mins)

(GB)

SC1
SC2
SC3
SC4

vendor1 meter1, meter2
vendor1
vendor1 meter4, meter5
vendor2

meter3

meter6

based intrusion detection technique for the AMI. It requires
deployment at smart meter, smart collector and headend
system.

All of the proposed approaches for intrusion detection in
the AMI assume a computationally expensive intrusion de-
tection module deployment at the meter level. However,
this may not be practically feasible since meters do not have
enough computation power [22].
If the detection modules
are to be deployed as a stand alone unit next to the meter,
it requires signiﬁcantly higher cost. We argue that due to
this higher deployment cost, industrial deployments of the
intrusion detector for the AMI have not been witnessed yet.
In this work, we propose a solution which is cost eﬀective
and practical since it can be deployed either in the headend
system or in the AMI.

3. DATASET

In AMI, the real-world dataset is important since all of the
contemporary work uses simulation which may not necessar-
ily reﬂect the true behavior of the system under considera-
tion. Therefore, it is very important to analyze a real-world
dataset in order to reveal its true behavior. To this end, we
use real-world dataset collected at an AMI of a leading smart
grid based utility provider. A smart grid testbed is also es-
tablished by the utility provider at our institute in order to
conduct experiments locally in a controlled environment. It
includes a monitoring/management node which is capable
of monitoring and conﬁguring the nodes in an AMI, also re-
ferred as Network Management System (NMS). The testbed
also includes the multiple smart meters and smart collectors,
both of which are capable of bi-directional communication.
Since it is not practically feasible to capture network traf-
ﬁc, we work with the event logs generated at the smart col-
lector. Since event logging is an inherent capability of a
smart collector, it does not impose any extra burden on the
smart collector. These logs are saved at smart collector for
sometime and then deleted in a cyclic manner. We conduct
oﬄine analysis of the logs in order to avoid any service dis-
ruption. We collected logs of multiple smart collectors for a
total period of two weeks in two sessions of one week each
denoted by Log-1 and Log-2. Approximately more than two
thousand meters were communicating with the smart col-
lectors. The AMI infrastructure used devices from multiple
vendors. Sample and anonymized basic conﬁguration of the
meters is shown in Table 1.
In the AMI under consider-
ation, reporting mode for the meters was ‘push’ i.e., the
meter will send scheduled readings by itself at the interval
speciﬁed in the ‘Reporting Time’.
‘Usage Sampling’ tells

Link1
Link2
Link3
Link4

1
2
2
1

4
4
6
6

Table 3: Sample log observed at smart collector

Source Destination

Time

(Relative)
388.3709 meter1
602.6901
633.5265 meter2
388.3709

SC1

SC1

SC1

meter1

SC1

meter2

Size
(KB)

28
2
5
38

Type

(Communication)

0
0
3
2

the number of seconds after which a sample is taken. Simi-
larly, Table 2 shows the conﬁguration of the smart collectors.
It can be observed that the smart collector is aware of its
neighboring meters and the link through which they are con-
nected. In our case study, meters were communicating with
the smart collectors using both the power line and wireless
media. However, the analysis and technique discussed in this
work is generic and should hold across other communication
models as well.

Sample log entries of a smart collector are shown in Ta-
ble 3. These entries are simpliﬁed and anonymized to show
only the information required in this work. Each log en-
try has the event time stamp. Here we show the relative
time stamp with respect to the start of the logging event.
However, it is absolute in practice. Time stamp is followed
by the source and destination ID of the nodes involved in
the communication event. Size of the communication is also
logged in kilo bytes (KB). Lastly, the type of event is also
logged. For example, 0 represents that it was a meter read-
ing report. 1, 2 and 3 represents disconnect/reconnect, up-
grade and load management communication, respectively.
We show the statistical analysis of the logs collected in the
next section which forms the basis of our model.

4. STATISTICAL ANALYSIS

We analyzed a number of statistical properties of the log
entries. One relevant property that provided us with in-
teresting insights was the analysis of their temporal depen-
dence.
It can be intuitively argued that, as long as the
log entries are produced by benign events, the log entries
observed should exhibit a certain level of temporal depen-
dence. In case of malicious behavior, perturbations in this
dependence structure are ﬂagged as anomalous. Therefore,
the level of temporal dependence can serve as an important
metric for modeling the log entries.

Autocorrelation measures the on-average temporal depen-
dence between the random variables in a stochastic process
at diﬀerent points in time. For a given lag k, the autocor-
relation function of a stochastic process Xn (where n is the
time index) is deﬁned as:

453t

i

n
e
c
i
f
f

e
o
C
n
o

 

i
t

l

a
e
r
r
o
C
o

t

u
A

1.1

0.9

0.7

0.5

0.3

0.1

−0.1

−0.3

−0.5

2

4

Log−1
Log−2

8

10

Figure 2: Autocorrelation coeﬃcient trend

6
Lags

ρ[k] =

E{X0Xk} − E{X0}E{Xk}

σX0 σXk

,

(1)

where E{.} represents the expectation operation, σXk is the
standard deviation of the random variable at time lag k and
the stochastic process X realizes the log entries, thus Xn is
the log entry at index n. The value of the autocorrelation
function lies in the range [−1, 1], where ρ[k] = 1 means
perfect correlation at lag k (which is obviously true for k =
0) and ρ[k] = 0 means no correlation at lag k.

Figure 2 shows the autocorrelation function plotted against
the log entries represented by lags. For both the logs, a cer-
tain level of temporal dependence can be easily observed at
small lags. This correlation decays in time and eventually
drops down to a negligible value. Temporal dependence is
present for two reasons. First, meters respond to the smart
collector requests in a short period of time. Second, regular
requests and reports are seen thus justifying the homogene-
ity.

Since log entries are correlated at small lags, they can be
modeled using markov chains. Moreover, it is well-known
that a decaying temporal dependence structure can be ac-
curately modeled using markov chains [18]. Therefore, the
concern here is to identify the order of markov chain model
that should be used to accurately model the log entries. To
determine the markovian order, we conduct analysis on dif-
ferent markov chain orders. The order can be identiﬁed by
noting the probabilities at diﬀerent markov chain orders.
If the probability is low at a given order, the next log en-
try can be predicted with high accuracy. First, we investi-
gate the probability distribution of log entries at diﬀerent
markov chain orders and then use the conditional entropy
based measure proposed in [18].

Let the log entry tuple at discrete time instance n rep-
resents the realization of a random variable derived from a
stochastic process Xn. This process is a markov chain if it
satisﬁes the markov property, which is deﬁned as:

Pr {Xn = j |Xn−1 = i, Xn−2 = in−2, . . . , X0 = i0}
= Pr {Xn = j |Xn−1 = i } = pj|i.

(2)

In other words, the probability of choosing a next state is
only dependent on the current state of the markov chain.

In the present context, we can deﬁne a markov chain
model Xn for an entry by treating each unique log entry tu-
ple individually and assigning them to non-overlapping bins.
Here we assign each unique tuple to each bin. Therefore, the
number of bins will be dependent on the number of unique
log entry tuples. Each bin then represents a state of the
markov chain, while the set of all bin indices ψ is its state

space. Based on this state representation, we can deﬁne a
1-st order markov chain, X (1)
n , in which each bin represents
a state of the random process. Probability of each state i
can be calculated by counting the number of times state i
occurred and dividing it by the total occurrences of all the
states in the markov chain model Xn. Similarly, an l-th or-
der markov chain, X (l)
n , can be deﬁned in which each state
is an l-tuple hi0, i1, . . . , il−1i representing the values taken
by the random process in the last l time instances i.e., l log
entries in our case. In this case the occurrences of l-tuple
together will be counted. This will increase the size of state
space ψ since diﬀerent combinations of l-tuple are possible.
Figure 3 shows the state probabilities calculated for log
entries for diﬀerent markov chain orders. We calculated it
for up to 4-th order markov chain as shown in Figure 3. It
can be clearly observed that as the order of markov chain
increases, i.e., ﬁrst order to fourth order, total number of
states ψ increases, which is the x-axis in Figure 3(a) to (d).
However, it gives us an interesting insight that as the order
increases, very few states have higher probability of occur-
rence and rest of the states’ probabilities drop to a negli-
gible value. Therefore, using a higher order markov chain,
we can actually identify the most likely states which will
be observed in the logs. Thus it increases the predictability
and likeliness of those states. Here, selection of appropriate
markov chain order is important since a higher order yields
higher number of possible states and requires more mem-
ory. To explore it further, we use the conditional entropy
based measure [18] for the log entries for diﬀerent markov
chain orders. This measure will tell us that at what order
of markov chain we have most of the information about the
next time instance i.e., log entry.

Conditional entropy, H(B|A), of two discrete random vari-
ables A and B characterizes the information remaining in B
when A is already known. Phrased diﬀerently, conditional
entropy is ‘information about B not given by A’. If A and
B are highly correlated, most of the information about B
is communicated through A and H(B|A) is small. On the
other hand, if pA and pB (which respectively represent the
probability mass functions of A and B) are quite diﬀerent
then H(B|A) assumes a high value, which means that most
of the information about B is not given by A. In the limit-
ing cases, H(B|A) = 0 when A = B, while H(B|A) = H(B)
when A and B are independent.

The transition probability matrix of the 1-st order markov
chain P (1) can be computed by counting the number of times
the state i is followed by state j. The resulting |ψ(1)| his-
tograms can be normalized to obtain the state-wise transi-
tion probability mass functions as the rows of P (1).

We can ﬁnd the conditional probability of the 1-st order

markov chain as:

H (1) = − X

i∈ψ(1)

π(1)
i X

j∈ψ(1)

j|i log2 (cid:16)p(1)
p(1)

j|i(cid:17) ,

(3)

i

where π(1)
is the average probability of being in state i which
is computed by counting the total number of times each state
is visited and then normalizing the frequency histogram.

The measure H (1) deﬁnes how much average information
is remaining in log entry Xn when it is calculated using log
entry Xn−1. If the entry is not highly correlated with entries
before Xn−1, H (1) will be relatively large implying that in-
formation about Xn not provided by Xn−1 is high. In such a

454y
t
i
l
i

b
a
b
o
r
P

0.08

0.07

0.06

0.05

0.04

0.03

0.02

0.01

0

0

0.014

0.012

0.01

0.008

0.006

0.004

0.002

y
t
i
l

b
a
b
o
r
P

−3

x 10

5

4.5

4

3.5

3

2.5

2

1.5

1

0.5

y
t
i
l
i

b
a
b
o
r
P

−3

x 10

2

y
t
i
l
i

b
a
b
o
r
P

1.8

1.6

1.4

1.2

1

10

20

30

40

50

State

0

0

100

200
State

300

400

0

0

200

400
State

600

800

0.8

0

200

400

600
State

800

1000

(a) First Order

(b) Second Order

(c) Third Order

(d) Fourth Order

Figure 3: State Probabilities for Higher Order Markov Chain

y
p
o
r
t

n
E

 
l

a
n
o

i
t
i

d
n
o
C

1

0.8

0.6

0.4

0.2

0

Log−1
Log−2

2

4

6

8

10

Figure 4: Conditional Entropy trend over Markov
Chain orders

Markov Chain Order

case, we use higher l-th order markov chain, X (l)
n as deﬁned
previously, in which each state is an l-tuple hi0, i1, . . . , il−1i
representing the values taken by the random process in the
last l time instances. Aggregating multiple time instances in
a single state allows us to satisfy the markov property, and
hence a transition probability matrix P (l) can be computed
by counting the number of times hi0, i1, . . . , il−1i is followed
by state hi1, . . . , il−1, ili. The conditional entropy of X (l)
n de-
ﬁned on ψ(l) can then be computed using the same method
as (3). It is easy to observe that H (1) ≥ H (2) ≥ . . . ≥ H (l),
as each older entry can either be independent of, or provide
some information about the present entry. The number of
previous entries required to accurately predict the next en-
try can then be determined by plotting H (l) as the function
of the markov chain order, l = 1, 2, . . .. The order at which
the conditional entropy saturates deﬁnes the total number
of previous entries which have conveyed as much informa-
tion of the present entry as possible. It can be clearly seen in
Figure 4 that log entries exhibit a decaying trend over higher
order markov chain. It can be seen that it exhibits an expo-
nential decay trend until the 4-th order, which was expected
since very few states had higher probability in Figure 3(d)
at the same order. It is clear that most of the information
about the next instance is already given at the fourth or-
der since conditional entropy drops to a negligible value i.e.,
≤ 0.2. Therefore, we model using the fourth order since it
gives enough information and increases predictability. How-
ever, we also show the results for third order markov chain
which exhibits a little low accuracy but improves scalability
since it exhibits less number of states. In later section, we
show that higher order markov chain exhibits better accu-
racy but it increases the number of states as compared to
the lower order. Therefore, the choice of markov chain or-
der is a trade-oﬀ between scalability (number of states) and
accuracy. This is discussed in detail in the later sections,
however, we build a model using the fourth order markov
chain.

5. MODEL

Since our model is built on the logs of smart collectors, we
ﬁrst look at the format of a log entry. It can be represented
as:

t, sid, did, sz, ty

where t represents the time stamp at which the event was
observed for which the entry is logged. sid and did refers to
the source and destination, respectively, of the communica-
tion observed. It can either be the meter or smart collector.
Size of the communication is denoted by sz. The type of
communication is deﬁned by ty. Therefore, in this model
we use the above information. We can encode the state of
the network with the following characteristic function:

σ : sid ∧ did ∧ sz ∧ ty → {true, f alse}

(4)

The function σ encodes the state of the network by evalu-
ating to true whenever the parameters used as input to the
function correspond to the log entry in the smart collector.
If the AMI observes 5 diﬀerent log entries, then exactly 5
diﬀerent assignments to σ function will result to true. Since
each smart collector is independent, we learn the markov
model for each smart collector separately.

A Labeled Markov Chain (LMC) is a tuple

M = {Q, Σ, π, τ, L}, where Q is a ﬁnite set of states, π is an
initial probability distribution τ is the transition probabil-
ity function and L is a labeling function. Atomic proposi-
tions AP are assigned to states by a labeling function using
Σ = 2AP . Each state was assigned a unique label derived
from σ, which is used to deﬁne the state. A probability
distribution for sequence of states can then be deﬁned us-
ing markov chain. LMC M with alphabet Σ induces the
probability distribution P π
M over Σw through labeling of the
states.

Set of states Q is strongly connected if for each state pair
(qi, qj ) there exist a path q0, q1, . . . , qn such that qh ∈ Q for
0 ≤ h ≤ n, τ (qh, qh+1) > 0, q0 = qi, and qn = qh. Therefore,
if Q is strongly connected, then M is said to be strongly
connected. A distribution πs
M is a stationary distribution
for M if it satisﬁes

(q) = X
πs

´q∈Q

πs(´q)τ (´q, q)

Since we are interested in keeping the history of previously
visited states, we focus on the probability suﬃx automata
(PSA). A PSA is an extended LMC with a labeling function
H : Q → Σ≤N , which represents the history of previously
visited, at most N , states. However, if the history is ﬁxed to
N , i.e., Σ=N , the LMC will be called (N +1)th order markov
chain since it includes the current state too. Therefore, each
state qi will be associated with a string si such that si =
H(qi)L(qi).

455Algorithm 1: Learn Markov Model
Data: Sequence S
Result: Finite state machine based on 4-th order Markov

Model

Initialize empty Graph;
S = {σi|∀σi ∈ Σ} ;
∀σi Pr(σi) > 0 ;
while S 6= φ do

Slide window by one σ at instance i ;
Pick si ∈ S ;
if si ∈ Graph then

Make directed edge from si−1 to si ;

end

else

Create node si in Graph ;
Make directed edge from si−1 to si ;

end

end

Since the AMI system under consideration is a real-time
system and can not be restarted with diﬀerent initial states,
we argue that the model learning technique should be able to
start observing data from the system at any given time and
can work with a single long sequence of observations. Sup-
pose we have sequence S = σ1, σ2, . . . , σn, σi ∈ Q, where σ
represents a state as shown in Equation 4. Since our statis-
tical analysis showed that conditional entropy is negligible
at 4-th order, therefore, we use 4-th order markov chain. A
ﬁnite state machine having directed graph can be learned
from the given sequence S. Each state in the graph at time
i will be represented by a tuple of 4 i.e., hσi−3, σi−2, . . . , σii,
where σi is the L(qi) and the rest are H(qi). Therefore, it
can be realized as si in the ﬁnite state machine.

Algorithm 1 explains the learning of a markov model from
the given sequence of log entries.
It initializes an empty
graph and then starts observing the sequence S. It utilizes
a sliding window approach where window slides at instance i
by one entry i.e., σ. However, the size of window to observe
si ∈ S is kept to 4 which is the order of model. If si already
exists in graph then a directed edge from si−1 to si is cre-
ated, if the directed edge does not exist already. However,
if si does not exist in graph, then a node is also created for
si. This process keeps repeating until S is empty. Once the
state machine is created, it is easy to calculate the transi-
tion probability matrix for that. For each state si in graph,
P∀σi∈Σ τ (si, σi) = 1.
Since a log entry σ is a conjunction of diﬀerent variables,
total possible combinations can exceed and may require a
lot of processing power. However, it can be calculated for
each network under consideration. In our case study, 10 bits
were assigned to sid and did, 8 bits for sz and 3 bits for type
ty of communication. Therefore, the possible number of σ
are 210 × 210 × 28 × 23 which is a relatively large number.
Since the model treats each smart collector’s log separately,
either source or destination of each log entry will be ﬁxed
to the id of that particular smart collector. Moreover, a
smart collector can only be connected to its neighboring
nodes/meters.
In our case study, the smart collector was
connected to 8 other devices. Therefore, the number of σ
reduces to 1 × 8 × 28 × 23, which is relatively smaller. Since
4-th order markov model is being used, possible combina-
tions of four σ can yield to a lot of states. To this end, the
proposed algorithm only takes the combinations which are

observed in the sequence S and only keeps the edges which
are observed since all the combinations are not possible due
to conﬁguration, thus reducing the size of transition proba-
bility matrix.

6. PROPERTIES SPECIFICATION FOR

MODEL CHECKING

Since the proposed model is based on markov chain and
exhibits a temporal dependence, we deﬁne properties in Lin-
ear time Temporal Logic (LTL) [2]. Unlike traditional model
checking, stochastic model checking allows you to check that
with what probability the property is satisﬁed by the model.
These probabilities can be thresholded in order to accommo-
date the unseen behavior up to a certain extent. LTL over
the alphabets Σ is deﬁned by the syntax:

ϕ ::= true | σ | ϕ1 ∧ ϕ2 | ¬ϕ | (cid:13) ϕ | ϕ1 ∪ ϕ2

(σ ∈ Σ)

The derived additional operators ✷ (always) and ⋄ (eventu-
ally) are also used in the LTL.

Let ϕ be the LTL formula over Σ. An LTL formula can
be satisﬁed for a sequence of alphabets s which is a state
deﬁnition in our case having s = σ1, σ2, . . . , σn where σi ∈ Σ.
Therefore, the probabilistic LTL can be deﬁned as:

φ ::= P⊲⊳p(ϕ),

⊲⊳ ∈ {≥, >, ≤, <, =};
p ∈ [0, 1]; ϕ ∈ LTL

Since the system under consideration is an online system and
can not be restarted with a speciﬁc initial state, we use the
stationary distributions for satisﬁability. LTL properties can
be veriﬁed with the markov chain model built in the earlier
section. For example, if a conﬁguration parameter deﬁnes
the sampling rate and report size, a property can be written
that whenever a report request is received the reply should
have this particular size. Temporally it can be stated that
given the system is in ‘request’ state, the next expected state
is ‘reply with size h’. In the PRISM model checker tool [20],
the ‘next’ state operator is deﬁned using ‘X’. For the given
state, you can ‘ﬁlter’ the state space to ‘current’ state only.
We wrote a small parser which reads the conﬁguration and
generates the properties in LTL format for the tool.

The properties can be derived from the conﬁgurations
and the security control guidelines such as NISTIR 7628 by
NIST. Since the conﬁgurations shown are related to read-
ing report, below we show some examples of the properties
derived from the conﬁguration. Let γ be the number of me-
ters associated with a smart collector. One basic example is
that whenever a report reading request is generated, a meter
should respond with a report. It can be formulated as:

φ ::= P≥d1 (rrepi|rreqi), 1 ≤ i ≤ γ

(5)

where rreqi and rrepi represents the reading request and
reading report, respectively, for meter i. However, d1 is
used as a probability threshold that this property should
be satisﬁed with the probability greater than or equal to
d1. The property deﬁned here is in conditional probability
syntax, however, it can be represented in LTL as:

P≥d1 (✷(rreqi → (cid:13)rrepi))

(6)

This is a strict property since it says that the next state has
to be the rrepi. However, a relaxed property can be deﬁned
as:

P≥d1 (✷(rreqi → ⋄rrepi))

(7)

456which says that eventually rrepi will be seen once rreqi is
observed. However, we use the strict property (Equation 6)
in our experiments. Similarly, it can also be deﬁned that
the report generated should have a size with in the limits
deﬁned since sampling rate is ﬁxed. It can be formulated as:

φ ::= P≥d2 (rszi|rrepi), 1 ≤ i ≤ γ

(8)

where rszi denotes the report size for meter i. However,
rszi ∈ szi which is a valid report size set for meter i. More-
over, Equation 5 and 8 can be combined to show the tem-
poral behavior i.e., whenever a reading request is generated,
it is followed by the reading reply which has a valid size.

Moreover, a meter should not send the reading report
It can be

twice in the next T1 consecutive time periods.
formulated as:

φ ::= P≤d3 (rrepi|rrepi), 1 ≤ i ≤ γ

(9)

where d3 is thresholded with ≤ that the probability of see-
ing such a behavior should be less than d3. Suppose t1 is
a counter which observe values in the range {1, 2, . . . , T1}.
Equation 9 can be represented in LTL as:

P≤d3 (✷ rrepi → (¬rrepi ∪ t1 ≥ T1))

(10)

To avoid ﬂooding the smart collector with reports from
multiple meters at the same time, the associated meters
were conﬁgured to have diﬀerent reporting intervals. There-
fore, smart collector will not receive consecutive reports from
multiple meters in consecutive T2 time periods. It can be
formulated as:

φ ::= P≤d4 (rrepj|rrepi),

i 6= j, 1 ≤ (i, j) ≤ γ

(11)

this prevents the multiple meters from sending the reports
after each other for consecutive T2 time periods. It can be
represented in LTL as:

P≤d4 (✷ rrepi → ¬rrepj ∪ t2 ≥ T2), ∀γ

j=1

(12)

Moreover, the thresholds dx are learnt from the model built
using the benign logs collected under normal condition i.e.,
without any attack. However, they can also be manually
conﬁgured based on the requirements of the network un-
der consideration. We show the examples of reading re-
ports property speciﬁcation, however, other types of conﬁg-
urations are also speciﬁed the same way using LTL. These
properties are dependent on the conﬁguration of the network
under consideration.

7. EXPERIMENTATION & EVALUATION

Before discussing the experimentation and evaluation, we

ﬁrst discuss the attack model.

7.1 Attack Model

Since we work with the logs collected at a smart collector,
attacks which do not involve any communication with the
smart collector or do not create a log entry would not be de-
tected. This has been highlighted in the limitations of our
work. However, aﬀect of such attacks would be limited to a
particular area. In short, our focus is on the large scale at-
tacks which include compromising a large number of meters
to cause a major blackout in the area. These attacks are, but
not limited to, spooﬁng, denial of service, distributed denial
of service, scanning, penetration, evasion, mimicry etc. For
example, a denial of service attack on the smart collectors

or its associated meters will cause the service disruption in
the area. Similarly, distributed denial of service attack on
the large number of meters or smart collectors can cause a
major blackout in the wider area. Since the infrastructure
exhibits a deterministic behavior and is homogenous in na-
ture; spooﬁng, mimicry and evasion techniques can inject
similar traﬃc without being detected thus resulting in the
destabilization of the infrastructure. Mimicry attacks can
compromise a number of meters and operate as they are le-
gitimate thus bypassing detection. This work is not focused
on the energy theft by individual users.
Intrusion detec-
tors specially designed for detecting individual user’s energy
theft have been proposed recently [15, 16].

Traditional attacks like denial of service will be detected
by the property 10 since it will create multiple entries in a
time windows shorter than T 1. Similarly, distributed denial
of service will cause the property 12 to be invalid since it
will cause multiple sources to create log entries in a time
window shorter than T 2. If a penetration attack is launched
against the AMI, it will be detected depending on the at-
tack graph. If the penetration is supposed to go through the
smart collector or it tampers with the meter (by changing
the conﬁguration), it will be detected since the meter will
not behave according to the a-priori known conﬁgurations.
Similarly, malware which tampers with the meter conﬁgu-
ration will be detected as well.

Data injection attacks which only tamper with the usage
information will not be detected. Same holds true for the
mimicry attacks and evasion techniques. To countermeasure
this, we propose a simple randomization module which in-
troduces a notion of randomness in the meter behavior while
staying deterministic for the smart collector. It is discussed
in the subsequent section.

To evaluate the proposed scheme, we generate attacks in
a controlled environment in the smart grid testbed. We use
diﬀerent attack scenarios which include not only diﬀerent
attack types but also diﬀerent attack locations. Since the
home area network has access to the smart meter, we con-
sider two scenarios for this location i.e., 1) try to compromise
the meter and tamper with its conﬁguration, 2) using the
smart meter as entry point to an AMI, we launch scanning,
DoS, evasion, mimicry and data injection traﬃc. For scan-
ning and DoS, we generate low rate attacks i.e., 0.1pkts/sec
to 1pkts/sec. Both the above mentioned scenarios were
implemented for these attacks. For evasion, mimicry and
spooﬁng, we placed a switch in between the meters and col-
lector; and attached an attack machine to it. We wrote a
simple program which uses the same conﬁguration as that
of a meter and generate similar reading reports in the same
format. In order to be evasive, less than 5% of the total gen-
erated traﬃc by the machine was injected traﬃc and 95%
was the mimic traﬃc. For mimicry and spooﬁng attacks, all
the traﬃc was mimic traﬃc without any injected traﬃc. In-
jected traﬃc includes malicious commands like random ﬁle
uploads, requesting reports at irregular intervals (request-
ing report itself is not an attack), administrative commands
without proper authorization and failed authorization at-
tempts. These logs were collected from the smart collectors
and were labeled as malicious. Malicious logs were mixed
into the real-world logs collected at an AMI of the utility
provider for the purpose of the accuracy evaluation. It was
made sure that the volume of malicious logs do not exceed
10% in the mixed log (benign and malicious).

4577.2 Robustness against Evasion and Mimicry

Attacks

Since evasion and mimicry attacks leverage the known be-
havior of the network, they tend to stay below the radar to
go undetected. To this end, we propose a simple yet eﬀec-
tive module for the smart meters. Due to the homogenous
and deterministic nature of the network, it is not diﬃcult for
an attacker to learn the behavior. Therefore, we randomize
one of the conﬁguration parameter which makes it diﬃcult
for the attacker to guess. However, other parameters can be
randomized too using the same semantics. We randomize
the reporting interval parameter in the conﬁguration. Let
inti denote the set containing all the possible valid conﬁgu-
ration values for the report interval for meter i, where intt
i is
the randomly selected conﬁguration value at time t for the
meter i. To introduce a certain level of randomization, a me-
ter should have enough possible valid conﬁguration values to
pick from. It can be formulated as:

|inti| ≥ θ

(13)

The greater the θ, the higher the randomization. To select
a value randomly from the given set, we use a simple hash
function since it is eﬀective and computationally inexpensive
too.

int(t + 1) = H(ki, t, intt

i)mod l + 1

(14)

where ki denotes the pre-shared key between the meter i and
the smart collector, t represents the time and l is the size of
possible values that is used to keep the value in the given
range. The hash function takes the key and the previously
selected reporting interval to introduce unpredictability for
the attacker and predictability for the smart collector. Re-
porting interval will be chosen every time before sending the
report. Smart collector will do the same computation in or-
der to verify if the report was expected at the given time or
not. Calculated time interval will be used in property 10 to
identify any non-compliance behavior. In our experiment,
we implemented this simple module on the NMS machine
which was capable of remotely conﬁguring the meters. The
module was written in C language using the NMS API to
conﬁgure the time interval for each report. Similarly, for
model checking the module calculates the time interval and
provides it to the property for the respective log entry vali-
dation.

Robustness of the presented approach against evasion de-
pends on two factors: (1) the probability threshold used in
the veriﬁcation properties, and (2) the conﬁguration param-
eter randomization. Since the reporting interval is veriﬁed
by a property which is thresholded, in case of a low thresh-
old evasion is possible to a certain extent because signiﬁ-
cant deviation can be allowed. For example, if the property
threshold is 0.9, it means that 90% of the reports should
be in the correct time and 10% can be deviated to accom-
modate any unexpected network behavior as learnt from the
log training. Thus, attackers can leverage this 10% to launch
mimicry and evasion attacks. If we assume that the key is
not known to attackers, but other conﬁguration parameters
can be known, an attacker has to accurately guess the re-
porting time from a range of values such that success ratio
will be above the property threshold in order to evade detec-
tion. However, this accuracy (evasion) is highly dependent
on the parameter randomization range. For example, if the
range deﬁned as 10 minutes in discrete intervals of one sec-

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

y
t
i
l
i

b
a
b
o
r
P

 

meter1
meter2
meter3

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

y
t
i
l
i

b
a
b
o
r
P

 

meter−1

meter−2

meter−3

0
 
26

27

28

Size

29

30

0

 

40

50

60
States

70

80

(a) Response for Reading
Request

(b) Response
Management Request

for Load

Figure 5: Response Probabilities when a request was
generated for Reading and Load Management

ond each, then the probability that the attacker can guess
the correct time interval (attack probability) is as low as
0.0017. In order to evade the detection, the attack probabil-
ity must be greater than or equal to the property threshold.
However, this case is extremely unlikely unless randomiza-
tion range is poorly selected and/or the property threshold
has been immaturely determined based on improper training
data set (e.g., unclean or very few samples).

7.3 Accuracy Evaluation

The basic premise of our work is to develop a model us-
ing the logs of smart collector and verify the conﬁguration
properties written in LTL. If a property is veriﬁed against
the model with probability p > d, where d is set as a thresh-
old, we say that it is normal, otherwise, it is anomalous.
Threshold d was learnt separately for each property by not-
ing the property veriﬁcation probability using the benign
logs model (without attack).

Logs were collected from the smart collectors which were
connected to the multiple meters. Moreover, meters had dif-
ferent conﬁgurations which make the dataset diverse. There-
fore, the model is not limited to a speciﬁc type of conﬁgu-
ration and can actually model diﬀerent conﬁguration sets
due to its markovian nature. Before discussing the accuracy
evaluation, we ﬁrst show the basic behavior of the three
randomly selected meters. These three meters use diﬀer-
ent conﬁgurations for the report size. It gives us interesting
insight about the temporally deterministic behavior. Then
we analyze that how well the model represents the system
behavior. Please note that this temporal behavioral analy-
sis was done without the randomization module and attack
traﬃc. The model checking was conducted using a proba-
bilistic symbolic model checker tool PRISM [20].

7.3.1 Temporal Behavior of the Model

Since the model preserves the temporal behavior, the prop-
erties can be seen as the conditional probability i.e., P (A|B),
where state B has already been observed (given). Therefore,
it can be stated as ‘what is the probability of seeing state A
given state B?’. It can be easily written in the LTL using
the ‘next’ or ‘eventually’ operator for the state A by ﬁlter-
ing all the states except the current/given state i.e., B as
discussed in an earlier section.

Figure 5 shows the conditional probabilities given that the
request was made for a particular meter for the usage read-
ing and load management as shown in Figure 5(a) and 5(b),
respectively. We provide the results for three meters only.
However, similar results were observed for the other meters
as well. Figure 5(a) shows the probability of response size,
given that the system was currently in the reading request

45845

40

35

30

s
e

25

 

Actual
Model

t

t

a
S

20

15

10

5

0

 
0

50

100

Time

150

200

i

s
n
o
i
t
c
d
e
r
P
 
e
u
r
T

100

90

80

70

60

50

40

30

20

10

0

 
0

 

100

 

i

s
n
o
i
t
c
d
e
r
P
 
e
u
r
T

90

80

70

60

50

40

30

20

10

0

 
0

Order−4
Order−3
Order−2
Order−1

10

20

30

40

False Predictions

pmf = 1.0
pmf > 0.8
pmf > 0.5

5

10

15

20

False Predictions

(a) Model Prediction

(b) Diﬀerent Markov Chain order

(c) Varying pmf on fourth order
model

Figure 6: Prediction accuracy for diﬀerent markov chain order and pmf for fourth order model

state i.e., a usage/reading request was sent to a meter. It can
be seen that all the three meters generated response within
the range of 26 to 30KB with diﬀerent probabilities. Two
meters generated response of size 27KB with higher proba-
bility and the third meter generated response of size 28KB.
These responses belong to diﬀerent states in the model since
size was used as a variable in the tuple (σ) used for the state
deﬁnition. However, none of the meter generated a response
of size more than 30 or less than 26KB which was set as
a variance boundary. The reading response size depends on
the sampling rate of the meter. Since the response size of the
reading request was within the range, the property ‘when-
ever a reading request is generated, the next observed state
is reading response with the size modeled’ (combining equa-
tion 6 and 8) was veriﬁed with the probability 1. Here the
probability 1 can be realized as the sum of all the probabili-
ties of the states having size within the range of 26 to 30KB.
Please note that the system can be in one state at a given
time i.e., either request sent to meter 1 or meter 2. These
conditional probabilities were calculated separately for the
next state given that the system was in the request state.

Similarly, Figure 5(b) shows the next state transition prob-
abilities given that the system was in a load management
request state.
It can be seen that all the three meters
probabilistically responded to the request. Meter 2 (green
line with circular marker) showed the two transition prob-
abilities. Response of size 9KB with probability close to
0.65 and size 6KB with probability close to 0.35. Similarly,
meter-1 responded with 6 diﬀerent sizes. All of these sizes
were within the range of 5 to 10KB. Lastly, meter-3 re-
sponded with the three diﬀerent sizes where one size was
most likely and the other two were less likely. It can be ob-
served that whenever the system was in a load management
request state, the response state was observed next with
the probability of 1. However, response also had multiple
states depending on the size of the response which was used
as a variable in deﬁning the state s consisting of multiple
σ. Therefore, it can be concluded that the model exhibits
a temporally deterministic behavior for the system under
consideration. It is clear that the temporal probabilities for
the properties can be learnt from the model built using the
benign logs. Now we analyze whether the model truly rep-
resents the system or in other words how well the model
represents the logs.

7.3.2 Model Accuracy

In order to determine whether the model actually repre-
sents the logs or not, we conduct a model accuracy experi-

ment as shown in Figure 6. It does not include the attack
traﬃc or property veriﬁcation. We divide the benign logs
into two halves. The ﬁrst half was used to build a model
using Algorithm 1. Second half was used as the test dataset
and the model was applied on it for the prediction. For
each step, the current state was learned and based on the
current state, the next state was predicted using the model
i.e., states having higher probabilities in probability mass
function (pmf) were predicted. Figure 6(a) shows the pre-
diction using the fourth order model. The red cross marker
denotes the actual states observed in the test log. However,
blue dashed line represents the prediction of the model. It
can be observed that the model predicts the future states
with high accuracy though few false predictions (less than
2%) were encountered as well. These false predictions were
observed as a result of the unseen behavior since the benign
log was divided into two halves. As a result, few lower prob-
ability states were not observed after a certain state s (i.e.,
tuple history of order four) present in the ﬁrst half, thus
yielding to false prediction. To check the model conﬁdence,
we did the prediction using one hour learning to one week
learning. In all the cases, the false predictions observed were
below 2%.

We used diﬀerent criterion and show the results in Fig-
ure 6(b) and (c). We count the total number of predictions
and classify whether they were true or not. In Figure 6(b),
we used diﬀerent markov chain orders i.e., the current state
was deﬁned using one tuple or multiple tuple history. It can
be observed in Figure 6(b) that the fourth order markov
chain provides the best prediction accuracy as compared to
the lower order markov chains. In another experiment, we
change the pmf bound used for the prediction. For example,
pmf of 0.5 means minimum number of next transition states
having probabilities sum of 0.5. If there are three possible
next states based on the current state having probabilities
0.6, 0.2 and 0.2, only state having 0.6 probability will be
selected as the ‘predicted’ state since it has the probability
greater than or equal to 0.5. However, if none of the states
has probability higher than 0.5, minimum number of mul-
tiple states will be selected whose sum reaches 0.5. Figure
6(c) shows the prediction accuracy for the diﬀerent pmf. It
can be seen that pmf of 1 i.e., based on the current state all
the next possible states in the model are predicted, provides
the best accuracy with a very low false prediction rate. It
can be intuitively argued that this false prediction rate will
be the bound for the false positive for the attack detection
accuracy, since this shows how well the model represents the
data. Therefore, it can be concluded that the fourth order

459e

t

a
R
n
o

 

i
t
c
e

t

e
D

100

90

80

70

60

50

40

30

20

10

0

0

y
t
i
l
i

b
a
b
o
r
P
n
o

 

i
t

a
c
i
f
i
r
e
V

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

2

4

6

8

10

Attack Rate (pkts/sec)

0.1

0.2

0.3

0.4

0.5

False Positive

(a) Detection Accuracy

(b) Probability vs Attack
rate

Figure 7: Detection Accuracy and Veriﬁcation Prob-
ability vs Attack rate

markov chain can accurately model the underlying network
with minimal loss, hence we use the fourth order for the
model checking.

7.3.3 Detection Accuracy

Mixed data was used to calculate the detection accuracy
which had attack and benign logs both. Since the attack
logs were generated separately in a controlled environment,
the time stamps of the attack logs were adjusted by a ﬁxed
constant to have the same time window as of normal/benign
logs. Allowed communication type ty values were used for
the attack logs since other communication types do not exist
in the model and can be detected easily. For attack detec-
tion, model learning was done in a continuous online learn-
ing fashion using a sliding window approach. The size of the
sliding window was kept to one hour and the sliding window
interval was set to one minute. Model was learnt separately
for each smart collector in the dataset and detection results
were averaged. Figure 7(a) shows the detection accuracy
achieved by the presented model. It can be seen that high
detection rate of more than 95% was achieved with a neg-
ligible false alarm rate of approximately 0.2%. Logs were
collected from smart collectors for approximately 2000 me-
ters. Average false alarm rate varies from 0.75 to 1.008 false
alarms per meter per week, depending upon the threshold
used for detection rates > 70%. Please note that these rates
are on the entire dataset collected. The utility provider we
worked with has hundreds of thousand smart meters in a
state. This might increase to millions of meters in a state
for large-scale providers. These could be managed by one or
multiple headend systems. Receiver Operating Characteris-
tics (ROC) curve is generated by changing the veriﬁcation
probability (threshold) of conﬁguration-based LTL proper-
ties which were veriﬁed against the model built using the
mixed data logs. It is intuitive that the attack activity does
not follow the state transitions as allowed in the temporal
properties. Therefore, the higher volume of attack activity
as compared to the benign activity can be easily detected
even with the loose probability veriﬁcation threshold. On
the other hand, the lower volume of attack activity will be
detected by the strict probability veriﬁcation threshold. Fig-
ure 7(b) shows the eﬀect of veriﬁcation probability for multi-
ple degree of DoS attacks. It can be observed that the higher
attack rate is detectable with a loose veriﬁcation probability
threshold.

Complexity of the probabilistic model checker (PRISM)
for a markov chain model and LTL property veriﬁcation is
doubly exponential in the size of LTL formula and polyno-
mial in the size of state space [14]. Algorithm 1 was imple-
mented in Java on a dual core machine to learn the model
from the logs. The run-time complexity is in hundreds of

milliseconds (≈ 300ms) and the memory size of the model
for each collector was few kilobytes (≈ 20KB). The com-
plexity was measured using HPROF [11] tool. Model was
then veriﬁed against the LTL properties using PRISM. The
run-time complexity of the properties veriﬁcation is approx-
imately 1.5 secs.

The presented model can be used in two fashions: 1) use
a centralized approach and build a single giant model for
the entire AMI, deﬁning smart collector in either source or
destination, the model can reduce the state space to pos-
sible states only for that particular smart collector, in this
case oﬄine model checking can be done in the headend by
pulling the logs, 2) if the giant state machine exceeds the
scalability limit of the model checker, each smart collector
can be modeled separately. In case of modeling each smart
collector separately, the model checking can be done online
or oﬄine, depending on the computational power available.
Therefore, the proposed approach is ﬂexible.

7.4 Scalability

In this section we discuss the scalability of the approach.
PRISM is shown to be scalable up to 1010 states [20]. We
also investigate the maximum number of meters that can
be handled with various markov chain orders as shown in
Figure 8. We show this for multiple markov chain orders
i.e., 1 to 4 in Figure 8. For the ﬁrst order markov chain, it
can be observed from Figure 8(a) that the number of states
increase linearly with the number of meters. In this case, it
can accommodate up to 25000 meters per collector, although
we show it up to 1000 meters in the graph in order to show
the linear trend.

Similarly, the second order markov chain can handle up
to 5000 meters as shown in Figure 8(b). It can be observed
that the trend tends to be exponential. Scalability for third
and fourth order markov chain is shown in Figure 8(c) and
(d), respectively. It can be clearly observed that both the
markovian orders increase the state space exponentially with
the increase in number of meters. More speciﬁcally, the third
and fourth order markov chains can work up to 108 and 16
meters, respectively.

Since many vendors (including our smart grid provider
collaborator) use 8−16 smart meters per collector, we found
that using the fourth order markov chain is the optimal
choice to maximize accuracy. We also found that many ma-
jor vendors use similar limited number of meters per col-
lector due to limited bandwidth or coverage, in power line
communication and WiFi, respectively [1, 7]. However, ven-
dors might support diﬀerent models of the AMI technologies
that oﬀer diﬀerent capacity of handling meters. For exam-
ple, some smart grid providers/vendors plan to use other
technologies that can support hundreds of meters per col-
lector [7].

For this reason, we discuss two approaches that oﬀer much
more scalable solution but with reasonable accuracy sacri-
ﬁcing. First, third order markov chain can be used since
it also incurs a low conditional entropy as shown in Figure
2(b). Moreover, it shows acceptable prediction accuracy,
with slightly more false predictions as compared to fourth
order as shown in Figure 6(b). Second, we alternatively ex-
tend the fourth order markov chain approach to handle more
meters by state compression. Moreover, logs can also be di-
vided based on the group of meters (16 in each) to conduct
the analysis.

460i

t

t

 

s
e
a
S
n
a
h
C
 
v
o
k
r
a
M

4
x 10

2

1.8

1.6

1.4

1.2

1

0.8

0.6

0.4

0.2

0

0

200

400

600

800

1000

Meters

(a) First Order

i

t

t

 

s
e
a
S
n
a
h
C
 
v
o
k
r
a
M

9
x 10

10

9

8

7

6

5

4

3

2

1

0

0

1000

2000

3000

4000

5000

Meters

i

t

t

 

s
e
a
S
n
a
h
C
 
v
o
k
r
a
M

9
x 10

11

10

9

8

7

6

5

4

3

2

1

0

0

20

40

60
Meters

80

100

(b) Second Order

(c) Third Order
Figure 8: Meters vs Number of States

i

t

t

 

s
e
a
S
n
a
h
C
 
v
o
k
r
a
M

12

10

8

6

4

2

0

9
x 10

2

4

6

8

10

12

14

16

Meters

(d) Fourth Order

It can be seen from Figure 3(d) that very few (only tens of)
states are highly likely (high probability) out of 1000. Thus,
eventually less than 10% states are seen more frequently
than others. Therefore, once the graph is made using Al-
gorithm 1, we run a compression algorithm to remove the
nodes having lower probability. We run the detection ac-
curacy using the compressed model and note that it incurs
an increase in the false positive rate i.e., from 0.2% to 0.3%
while maintaining the same detection accuracy. However,
the compressed state model can easily scale to more than
1000 meters per collector. Choosing the appropriate alter-
native approach depends on the AMI network technology
under consideration.

7.5 Limitations

In this section we discuss the limitations of the proposed

approach

• The original fourth order markov chain based approach
only scales up to 16 meters per collector.
In actual,
a smart collector may have higher number of meters
associated with it. To combat this, we discussed an al-
ternative in the scalability section which supports up-
to 1000 meters per collector while incurring a slight
increase in false alarm rate. Moreover, the original
approach can also be used by dividing a smart collec-
tor’s log into multiple chunks based on the groups of
smart meters. Each chunk may have up to 16 meters
grouped into it. This can easily be done by ﬁltering
the log based on the meter id.

• Attacks which do not involve communication with a
smart collector will not be detected. However, we be-
lieve that the eﬀect of such attacks would be limited
to a particular area i.e., not large scale.

• Evasion robustness relies on the key used for interval
randomization. We assume that the key is secured
and attacker can not access it. However, if the key is
compromised, attacker can evade the detection algo-
rithm by generating traﬃc at the expected time inter-
vals (calculated by key) using the conﬁgurations known
to the attacker.

• Since AMI uses static conﬁgurations with limited pro-
tocols and applications, communication patterns do
not change. Therefore, re-training is not required.
However, if the re-training data, for any reason such as
concept-drifting, includes malicious activities, attack-
ers may evade the proposed technique. We see this is
unlikely to happen if the retraining is performed on
large number of smart collectors.

• The technique provides robustness against evasion, how-

ever, an attacker that has full access to and complete
knowledge of the AMI may still be able to evade it.

8. CONCLUSION

In this work, we present a fourth order markov chain based
model for intrusion detection since it incurs lower condi-
tional entropy and higher prediction accuracy. Moreover, it
ﬁts the state space requirement of the AMI network un-
der consideration. The novelty of the model lies in the
conﬁguration-based stochastic modeling of the AMI using
the logs collected at smart collector and device conﬁgura-
tion. Moreover, considering the challenges of AMI network,
the proposed approach is practical since it does not require
high computation power and memory in the ﬁeld. However,
it can also work oﬄine in the substation by pulling the smart
collector logs from the area. Therefore, it is ﬂexible and in-
curs low cost. However, if smart collectors provide enough
computation and memory, it can be deployed in parallel. It
also does not need to be trained, unlike traditional intrusion
detectors. The model provides acceptable detection accu-
racy of more than 95% with false alarm rate close to 0.2%.
The model can be easily extended and customized based on
the AMI network under consideration using other informa-
tion in the logs and conﬁgurations. Therefore, the scope is
not limited to what is presented here.

Acknowledgments
This work is a result of joint collaborative eﬀort with a lead-
ing smart grid based utility provider. The work was done as
part of the urban city project initiated by the utility provider
which monitors several buildings for data analysis. We ap-
preciate their expertise, eﬀort in creating an AMI testbed in
our university for testing, and sharing the data.

9. REFERENCES

[1] Ambient communication nodes.

http://www.ambientcorp.com/prod-nodes/.

[2] Baier, C., and Katoen, J. P. Principles of Model

Checking. The MIT Press, 2008.

[3] Baumeister, T. Literature review on smart grid

cyber security. Tech. rep., Department of Information
and Computer Sciences, University of Hawaii, 2010.

[4] Berthier, R., and Sanders, W. Speciﬁcation-based

intrusion detection for advanced metering
infrastructures. In IEEE 17th Paciﬁc Rim
International Symposium on Dependable Computing
(PRDC) (2011).

461[5] Berthier, R., Sanders, W., and Khurana, H.

Intrusion detection for advanced metering
infrastructures: Requirements and architectural
directions. In First IEEE International Conference on
Smart Grid Communications (SmartGridComm)
(2010).

[6] Cleveland, F. M. Cyber security issues for advanced

metering infrasttructure (AMI). In IEEE Power and
Energy Society General Meeting - Conversion and
Delivery of Electrical Energy in the 21st Century
(2008).

[7] Echelon data concentrator.

http://www.echelon.com/products/controllers/
meter-data-concentrator/default.htm.

[8] Faisal, M. A., Aung, Z., Williams, J., and

Sanchez, A. Securing advanced metering
infrastructure using intrusion detection system with
data stream mining. In Proceedings of Paciﬁc Asia
Workshop on Intelligence and Security Informatics
(PAISI) (2012).

[9] Garcia-Teodoro, P., D´ıaz-Verdejo, J. E.,

Maci´a-Fern´andez, G., and V´azquez, E.
Anomaly-based network intrusion detection:
Techniques, systems and challenges. Computers &
Security (2009).

[10] Gu, Y., McCullum, A., and Towsley, D.

Detecting anomalies in network traﬃc using maximum
entropy estimation. In Proceedings of the ACM
SIGCOMM Conference on Internet Measurement
(IMC) (2005).

[11] HPROF: A heap/CPU proﬁling tool.

http://docs.oracle.com/javase/7/docs/
technotes/samples/hprof.html.

[12] Idaho National Laboratory (INL). NSTB assessments

summary report: Common industrial control system
cyber security weaknesses, May 2010.

[13] Jung, J., Paxson, V., Berger, A. W., and

Balakrishnan, H. Fast portscan detection using
sequential hypothesis testing. In Proceedings of the
IEEE Symposium on Security and Privacy (2004).
[14] Kwiatkowska, M., and Parker, D. Advances in

probabilistic model checking. In Proceedings 2011
Marktoberdorf Summer School: Tools for Analysis and
Veriﬁcation of Software Safety and Security (2012).

[15] Mashima, D., and C´ardenas, A. A. Evaluating

electricity theft detectors in smart grid networks. In
Research in Attacks, Intrusions, and Defenses (2012).
[16] McLaughlin, S., Podkuiko, D., and McDaniel, P.
Energy theft in the advanced metering infrastructure.
Critical Information Infrastructures Security (2010).
[17] McLaughlin, S., Podkuiko, D., Miadzvezhanka,
S., Delozier, A., and McDaniel, P. Multi-vendor
penetration testing in the advanced metering
infrastructure. In Proceedings of the 26th Annual
Computer Security Applications Conference, (ACSAC)
(2010).

[18] Merhav, M., Gutman, M., and Ziv, J. On the

estimation of the order of a markov chain and
universal data compression. IEEE Transactions on
Information Theory (1989).

[19] Perdisci, R., Ariu, D., Fogla, P., Giacinto, G.,

and Lee, W. McPAD: A multiple classiﬁer system for

accurate payload-based anomaly detection. Computer
Networks (2009).

[20] Probabilistic symbolic model checker PRISM.

http://www.prismmodelchecker.org/.

[21] Smart grid news. http://www.smartgridnews.com.
[22] Smart meter - ARM. http:

//www.arm.com/markets/embedded/smart-meter.php.
[23] Ten, C., Hong, J., and Liu, C. Anomaly detection

for cybersecurity of the substations. IEEE
Transactions on Smart Grid (2011).

[24] The White House. Homeland Security Presidential

Directive 7: Critical infrastructure identiﬁcation,
prioritization and protection, December 2003.

[25] U.S. Government Accountability oﬃce (GAO).

information security: TVA needs to address
weaknesses in control systems and networks, 2008.

[26] Wang, K., and Stolfo, S. J. Anomalous

payload-based network intrusion detection. In Recent
Advances in Intrusion Detection (RAID) (2004).

[27] Zhang, Y., Wang, L., Sun, W., Green, R., and

Alam, M. Distributed intrusion detection system in a
multi-layer network architecture of smart grids. IEEE
Transactions on Smart Grid (2011).

[28] Zhu, B., and Sastry, S. SCADA-speciﬁc intrusion

detection/prevention systems: A survey and
taxonomy. In First Workshop on Secure Control
Systems (SCS) (2010).

APPENDIX

A. BACKGROUND

Smart grids have two major networks i.e., power distribu-
tion and communication network. Power distribution net-
work is intuitively the same as the legacy power network
which is responsible for power generation, transmission and
distribution to the consumers. However, communication
network is responsible for monitoring diﬀerent devices in
the smart grid, thus providing the ease of management and
eﬃcient energy consumption. AMI is a core component of a
smart grid responsible for the bi-directional communication
between the headend and the meter. Basic architecture of an
AMI is shown in Figure 1. AMI has three main components
i.e., Home Area Network (HAN), Neighborhood Area Net-
work (NAN), and Wide Area Network (WAN). HAN can be
realized as the customer home network which is connected
with the smart meter. Therefore, the smart meter acts as
an interface for a HAN as it connects AMI and HAN in
the bi-directional communication mode. NAN is responsi-
ble for the communication between the smart collectors and
the smart meters. NAN scales from hundreds to thousands
of nodes including the smart meters and the smart collec-
tors. Lastly, WAN is mainly responsible for the backhaul
connectivity of the NAN to the headend system.

Diﬀerent communication channels can be used by the AMI
for diﬀerent components. For example, NAN may use wire-
less or power line communication in order to interact among
nodes. Moreover, WAN uses the high range and bandwidth
technologies for the purpose of connecting NAN to the head-
end. It can use cellular technologies or other dedicated com-
munication medium. Usually utility providers utilize the
existing network from a third party in order to connect the
NAN to the headend.

462