New Attacks on Timing-based Network Flow Watermarks

Zi Lin

University of Minnesota

lin@cs.umn.edu

Nicholas Hopper

University of Minnesota

hopper@cs.umn.edu

Abstract

A network ﬂow watermarking scheme attempts to ma-
nipulate the statistical properties of a ﬂow of packets to
insert a “mark” making it easier to detect the ﬂow af-
ter passing through one or more relay hosts. Because an
attacker that is willing to tolerate delay can (nearly) al-
ways eliminate such marks, recent schemes have concen-
trated on making the marks “invisible” so that a passive
attacker cannot detect the presence of the mark. In this
work, we argue that from a system’s perspective, secu-
rity against passive detection is insufﬁcient for success-
ful trafﬁc analysis. We introduce a stronger, but feasi-
ble attack model (a known/chosen ﬂow attacker) and a
second security goal (security against copy attacks) and
argue that security against both of these attacks is re-
quired for successful trafﬁc analysis. We also demon-
strate successful attacks against two recent watermarking
schemes, RAINBOW and SWIRL, and show how con-
sidering these stronger attacks can aid in the design of
passive detection attacks against each as well.

1

Introduction

Active trafﬁc analysis, so called network ﬂow water-
marking, is the practice of manipulating the timing of
a network ﬂow so that the same ﬂow, relayed by one or
more intermediate hosts, can later be recognized. This
technique has been the subject of increased interest in
the past decade, because it requires low computational
and communication cost while providing high accuracy
in linking trafﬁc ﬂows. In these schemes, the packet tim-
ings of a network ﬂow are modiﬁed, usually by buffer-
ing and delaying, to contain a distinctive pattern. If the
pattern is later detected in another ﬂow, we can con-
clude the two ﬂows are the same with high probability.
Flow watermarking is one of the most effective methods
both for breaking anonymous communications systems
[14, 15, 18, 7] and detecting network intruders launching
a stepping stone attack [16, 12, 8, 7].

In contrast to the variety of schemes proposed, there
is a relative lack of systematic study on attacking water-
marking schemes. Since an active attacker can arbitrar-
ily delay packets, thus destroying any watermark, recent
schemes focus on how to evade passive detection and

thus become “invisible” [15, 18, 7, 8]. However, many
of these works consider a very limited attack model. At-
tackers are usually assumed to have access only to ﬂows
that comes from a black box in which a watermarker may
have inserted marks to some of the ﬂows. This assump-
tion however, is often unrealistic: for example, in both
cases mentioned above the adversary attacking the wa-
termark has access to additional information about the
marked ﬂow. Furthermore, some adversaries (such as
an anonymity network) may be better served by increas-
ing the number of “unmarked” ﬂows that appear to be
marked, rather than trying to detect or remove a mark
imperfectly.

Meanwhile, without a systematic view, it is often un-
fair to compare different detection attacks directly.
In
[11] Peng, Ning and Reeves studied how a stepping stone
attacker, as a chosen ﬂow attacker, could inject and an-
alyze ﬂows to detect the presence of a watermark and
even replicate the parameters used by the watermarking
system. Hereafter we refer to this attack as the PNR at-
tack. In [9], Kiyavash et al. propose the multi-ﬂow attack
(MFA), which exposes a watermark by aligning multi-
ple ﬂows carrying the same watermark. A MFA can be
launched by a single router in the network and is thus
widely applicable. Very recently, Luo et al. [10], describe
BACKLIT, a unique threat model in which the attacker
acts as a known/chosen ﬂow attacker and is thus able to
detect state-of-the-art watermarking schemes. It is worth
noting that the PNR attack model is stronger than BACK-
LIT, which is in turn stronger than the MFA model, so
it is not surprising that their performance strengths also
follow that order. On the other hand, MFA is more appli-
cable than BACKLIT, which in turn is more applicable
than PNR.

To address these concerns, we formalize two threat
models for network ﬂow watermarks. The ﬁrst model,
the chosen ﬂow attacker, captures the capacities of a net-
work intruder. This attacker may observe or even ma-
nipulate the input to the black box of a watermarker. In
this case, packet delays due to deliberate watermarking
and/or normal network processing become visible; and
separating marked ﬂows from unmarked ﬂows becomes
considerably easier. We apply this model to two recent
watermarking schemes, RAINBOW [8] and SWIRL [7].

1

Both schemes use delaying as the basic operation to in-
sert marks and are thus vulnerable to relatively straight-
forward chosen ﬂow detection attacks.

Evaluating under the chosen ﬂow attack may also help
to develop ideas for new passive detection algorithms in
the second threat model, the isolated attacker. For ex-
ample, our initial chosen ﬂow attacks on RAINBOW,
which are based on testing jitter irregularity using co-
sine distance and histograms, led us to design a new pas-
sive detection attack based on testing the irregularities
in the distribution of inter packet delays (IPDs). Simi-
larly, a simple multi-ﬂow chosen ﬂow attack on SWIRL
provides several important insights on a new multi-ﬂow
passive detection attack against SWIRL.

We implement and test our new attacks through ex-
periments with real-world network traces. We show that
chosen ﬂow attacks can perfectly detect the watermarks
with 100% recall and no false positives, outperforming
the BACKLIT attacks. Our local, passive attacks on
RAINBOW and SWIRL also achieve high ROC scores
of ≥ 0.92; in some cases, ROC scores of 1.0 can be
achieved.

Finally, we also introduce non-parametric copy at-
tacks, which transfer marks between ﬂows and eventu-
ally confuse trafﬁc analysis without the knowledge of
watermark secret keys and parameters. To our knowl-
edge, this type of attack has not been studied before;
yet every timing-based ﬂow watermark is vulnerable due
to the na¨ıve attack that buffers enough trafﬁc to mimic
the inter-packet delays of marked ﬂows. However, some
schemes are vulnerable to less heavy-handed copy at-
tacks. For example, the design of SWIRL allows us to
demonstrate a very cost effective copy attack against it.

1.1 Paper outline
We brieﬂy survey related work in section 2. In section
3, we establish the threat model for network ﬂow water-
marking schemes, identify new detection modes/attacks
and a novel implementation of active copy attack. We
describe our new detection attacks on RAINBOW and
SWIRL, followed by evaluation on real-world datasets
in section 4. We also present a detailed description of
copy attacks on the aforementioned schemes along with
experimental evaluations in section 5. Finally, we dis-
cuss possible defenses against these attacks and general
defense strategies under our threat models in section 6.

2 Related Work

ping stones”, making the trafﬁc origin hardly traceable.
Within large enterprise networks, stepping stones are
good candidates of compromised hosts. Network admin-
istrators therefore take stepping stone detection as part of
their security monitoring routines.

Detecting stepping stone is usually done by linking
outgoing ﬂows with incoming ones. Often the intruder
encrypted their tunnel (for instance by SSH). As a re-
sult, only packet counts, sizes and timings are available
for ﬂow characterization. By passive recording of these
ﬂow features, many schemes have studied the problem
of linking streams [19, 4, 17, 4, 2, 6]. Since ﬂow charac-
teristics could be affected by padding schemes, packet
retransmission and repacketization, and network jitter,
successful passive stepping stone detection needs large
number of observations, which in turn incur large over-
head in both storage and computation. To address these
efﬁciency issues, active approach is proposed as water-
marking [16]. We will next brieﬂy review the literature
of ﬂow watermarking schemes.

2.2 Network Flow Watermarking Schemes
There are two entities involved in ﬂow watermarking, the
encoder and the decoder. Both are typically boundary
routers and share some common states. The encoder em-
beds a timing watermark to each incoming ﬂow by intro-
ducing timing distortion (usually through delaying spe-
ciﬁc packets). At the other end, the decoder examines
each outgoing ﬂow to see whether it displays the unique
mark and thus identify a potential stepping stone.

Several packet delaying schemes [16, 14, 8] intend to
embed message bits by introducing distinctive network
jitter. Those bits can be easily picked up by the de-
coder but they look unintentional to other routers.
In
[16, 14], skewness in jitter distribution, caused by de-
laying selected individual packets, is directly manipu-
lated/measured. In RAINBOW[8], jitter distortion is ex-
pressed as an artiﬁcial jitter sequence (up to a few thou-
sands in length), which is orthogonal to natural observed
jitter in the linear space. This unique jitter, compounded
together with normal network noise, can still be recog-
nized by the decoder, using the inner product.

Interval-based watermarking schemes [12, 15, 18, 7]
divide a ﬂow into a series of time intervals and embed
bits by manipulating the packet timing characteristics
within each interval. Such approaches focus on intervals
rather than packets, and are thus generally more resilient
to packet insertion, losses and repacketization.

2.1 Stepping Stone Detection
Network intruders usually tunnel
their attack trafﬁc
through one or more intermediate relays as “step-

2.3 Attacks on Watermarking
In 2006 Peng et al. presented the PNR attack for step-
ping stone attackers [11]. The attack is designed to re-

2

cover the secret keys and system parameters of the par-
ticular scheme by Wang et al. [16]. By sending packets
with controlled timing, uncommon extra delays can be
detected by a variety of statistical and data mining tools.
They also designed a duplicate attack to confuse the de-
coder by raising the false positive rate. The duplicate
attack mentioned in [11] is simply repeat the watermark-
ing with the extracted watermark parameters and is es-
sentially different from the non-parametric copy attack
we discuss here.

The Multi-ﬂow attack (MFA), a passive detection at-
tack recently proposed by Kiyavash et al. [9], demon-
strates that an alignment of multiple marked ﬂows shows
an unusual synchronized pattern of busy and idle peri-
ods. This pattern is strong enough to conclude the pres-
ence of a watermark. MFAs show the potential of pas-
sive detection attacks and have helped motivate the de-
sign of newer watermarking schemes like RAINBOW
and SWIRL [8, 7], that claim to resist these attacks.

Most recently, Lou et al. [10] studied how to expose
watermarks in BACKLIT, an attack scenario in which
the watermark encoder manipulates return trafﬁc from a
server while the attacker acts as a trafﬁc relay between
the client and the server. The watermark attacker can
probe irregularities by comparing “clean” forward ﬂows
and “marked” backward ones. By doing so, BACK-
LIT gains extra knowledge similar to chosen ﬂow at-
tacker and is able to expose RAINBOW, SWIRL and
other timing-based watermarks. The success of BACK-
LIT, however, relies heavily on the speciﬁc threat model.

3 Threat Model of Network Flow Water-

marking

In this section we ﬁrst discuss the performance goals
of network ﬂow watermarking schemes.
Then we
brieﬂy describe two threat models for watermarking
schemes and deﬁne essential security properties that wa-
termarks should achieve against adversaries. We note
that anonymity systems and stepping stone intruders gen-
erally possess different capabilities and it is worthwhile
to model them as different adversaries.

3.1 Performance Requirements
Active trafﬁc analysis techniques, such as timing-based
watermarking, aim to link network ﬂows passing through
one or more relay hosts efﬁciently and with high preci-
sion and robustness. This requires watermark detection
to achieve both low false negative rates (FNR) and low
false positive rates (FPR), even in the presence of net-
work jitter and other distortion noise.

Low FNR requires the watermark not be easily erased
by natural timing distortion. Detecting watermarked

3

Figure 1:
Isolated adversary: Accessible to output
streams of the watermark encoder and input stream of
the decoder.

Figure 2: Chosen ﬂow adversary: Inputs of the encoder
are accessible too, in addition to outputs of the encoder
and inputs of the decoder.

ﬂows within a large network, although with keys, is
sometimes challenging. Timing distortion such as de-
lay by congestion, packet reordering, packet loss, and re-
packetizing are not uncommon. To achieve low FNR,
usually multiple copies of a watermark are inserted into
different ﬂow locations, so that timing distortion will not
affect the majority of the marks.

When facing a determined active adversary, FNR can
be arbitrarily high because any timing-based mark can
be erased through drastic measures.
In an attempt to
preemptively remove any timing-based watermark, ac-
tive attackers can drastically change the timing by adding
dummy packets, introducing large delays and/or send-
ing packets in batches. Although effective, these ac-
tive counter-measures against ﬂow watermarking induce
high costs that are typically unacceptable to the attacker,
especially for delay-intolerant applications like Tor and
SSH stepping-stones. Therefore, active attackers gener-
ally would prefer to appear passive and reactively launch
counter-watermark attacks.

The requirement of low FNR against adversaries trig-
gers the goal of passive invisibility: if watermarks ap-

Watermark EncoderWatermark DecoderAttacker Non­marked flow Marked flowWatermark EncoderWatermark DecoderAttacker Non­marked flow Marked flowpear invisible to passive attackers, active countermea-
sures may not be employed. Still, there exists a trade-off
between low FNR and invisibility. The more watermarks
that are embedded in the network ﬂow, the more signals
can be potentially picked up by the attacker.

On the other hand,

low FPR is required so that
non-watermarked ﬂows are not frequently mistaken for
marked ones; the advantage of watermarking over pas-
sive trafﬁc analysis diminishes quickly as FPR grows.

Low FPR against adversarial manipulation, however,
has not attracted much attention. Attackers that re-
covers speciﬁc watermark parameters can duplicate wa-
termarks on different ﬂows, ”confusing the detector”
[11, 9]. However, given the lack of knowledge of se-
cret keys and parameters, blindly manipulating a benign
ﬂow into a watermarked ﬂow is perceived to be hard for
adversaries. We introduce a novel implementation of ac-
tive duplication attack designed to increase FPR without
the knowledge of any watermark parameter, called the
best-effort copy attack. Busy Tor relays can use copy at-
tacks to replicate and spread watermarks on all outgoing
circuits and as a result, considerably increase FPR.

3.2 Types of Adversaries

The adversary against watermarking is assumed to con-
trol at least one host that relay the trafﬁc between the
encoder and decoder. Such assumption is realistic for
both stepping stone intruders and anonymity system re-
lays. The concrete threat model can be categorized into
two classes: Isolated adversary illustrated in Fig. 1 and
chosen ﬂow adversary in Fig. 2. Adversaries in both
threat models can be either pure observers (passive) or
trafﬁc manipulators (active).

Anonymity networks such as Tor are generally iso-
lated active adversaries. Although Tor relays can manip-
ulate packet timing, they seldom do so because their ulti-
mate goal is to forward trafﬁc as soon as possible. How-
ever that doesn’t mean Tor cannot do anything actively
about watermarking. As long as timing watermarks don’t
incur a high delay, a Tor relay could inject them and even
further exchange watermarks between different circuits
as we will show later.

The seemingly strong chosen ﬂow adversaries are not
uncommon. A stepping-stone intruder, for example, is
capable of sending trafﬁc at will. And it is usually
true that those attackers get root privilege on “stepping
stones” and are therefore able to observe and manipulate
the packet timing. A careful stepping-stone intruder can
set up trial connections to test the existence of a water-
marker before actually using these “owned” workstations
as stepping stones. The PNR attacker [11] is a good ex-
ample.

3.3

Invisibility

In a nutshell, invisibility is deﬁned as the ability to dis-
tinguish watermarked ﬂows from non-watermarked ones.
More formally, we deﬁne the Invisibility Game, played
by an adversary (shown in Figure 3): Consider two sets
of network ﬂows S0 and S1; both of them are gener-
ated from the same distribution on ﬂows. Flows in S1
are manipulated by the watermarker while ones in S0 are
not. Both S0 and S1 are affected by similar network jit-
ter. Now a random i ∈ {0,1} is generated by a fair coin
ﬂip, the adversary is given one or more ﬂows from Si
and she outputs i(cid:48), she wins the game if i = i(cid:48). A wa-
termark scheme is ’invisible’ if no adversary can win the
Invisibility Game with probability non-negligibly greater
than “1/2”. We further extend the deﬁnition of Invisibil-
ity Game to match up the ability of speciﬁc adversaries.

3.3.1

Invisibility with Isolated Adversaries

(Encoder) Output-only Detection To detect the pres-
ence of a watermark, there is little extra information
the isolated adversary can obtain other than ﬂow timing.
Generally, we call such detection Output-only detection
because the adversary only has access to (possible) out-
puts of the watermark encoder. Although such adver-
saries appear to be the weakest, their detection capabili-
ties are still poorly understood.

Isolated passive invisibility has been the main focus in
the literature to date. Various primitive analyses, such as
entropy tests and distribution tests are utilized to examine
the invisibility. These tests are usually carried out on
individual ﬂows. More powerful attacks come from the
novel idea of collectively examining ﬂows in S1 or S0.

Multi-ﬂow Attacks.

The Multi-Flow Attack
(MFA) was introduced by Kiyavash, Houmansadr and
Borisov [9] to show that previous interval-based wa-
termarking schemes [12, 15, 18] lack invisibility when
multiple network ﬂows carrying the same watermark are
carefully aligned. The aggregated histogram of packet
frequencies will show repeated cleared/crowded inter-
vals that can rarely happen without watermarking. The
MFA shows the potential power of a passive isolated at-
tacker.

We argue there is still room for many more intelligent
detection attacks.
In this work, we demonstrate some
effective output-only detection attacks against state-of-
the-art watermarking systems, RAINBOW and SWIRL,
which have taken MFA resistance into account.

3.3.2

Invisibility with Chosen Flow Adversaries

Known Flow Attack.
In this attack, chosen ﬂow ad-
versaries can choose to observe arbitrary ﬂows; ﬂows are

4

Figure 3: The Invisibility Game

Figure 4: The Copy Attack Game

examined by pure observers before and after they are wa-
termarked. We modify the invisibility game to reﬂect the
fact that now adversaries also have access to ﬂows be-
fore they pass through the watermarker. The adversary
has the ability to compute the actual jitter imposed by
the network and the watermarker. This brings opportu-
nities to detect jitter-based watermarking schemes.
In
particular, we will show how RAINBOW, a jitter-based
watermarking scheme, is vulnerable to such an adver-
sary in section 4. We note that Houmansadr et al. [8]
discuss global invisibility of RAINBOW in terms of the
Kolmogorov-Smirnov test on inter-packet delays and jit-
ter vectors. Unfortunately, K-S tests assume no a priori
knowledge of the data distribution and therefore under-
estimate the power of adversaries against RAINBOW,
limiting the usefulness of the result.
In particular, we
ﬁnd discriminators that work almost perfectly to detect
RAINBOW even when its parameters are carefully se-
lected to avoid detection.

Chosen Flow Attack. In this scenario, adversaries can
inject ﬂows with a speciﬁc timing pattern and observe the
distortion possibly added by the watermarker. The invis-
ibility game with such an adversary gives the adversary
the ability to intervene with ﬂow generation. An example
of a chosen ﬂow attack is studied in [11]: when sending
packets with known timing, extra delays caused by wa-
termarks are distinguishable from normal network jitter.
None of the known network ﬂow watermarking schemes
will resist this attack. For instance, we will show how
SWIRL is visible under chosen ﬂow attacks.

3.4 Active Copy Attack Resistance

As shown in Figure 4, the purpose of a copy attack is
to confuse the decoder between ﬂows from S0 and ones
from S1. To our knowledge, copy attacks without know-
ing speciﬁc watermark parameters have not been stud-
ied for network ﬂow watermark schemes. However, the
concept of copy attacks on watermarking schemes is not
new. Adelsbach et al. [1] introduced the notion of pro-

tocol attacks on multimedia watermarks where, for in-
stance, an attacker can copy a watermark from one copy
of a digital product to another, thus causing confusion
and difﬁculties in the authorship/ownership dispute pro-
cess. Peng et al. [11] designed a duplicate attack which
can be seen as a copy attack by chose ﬂow adversaries.
Unlike the previous work, we show that it is possible to
carry out copy attacks without knowing the secret key or
concrete system parameters. na¨ıvely, a straightforward
replay of packet timing works for all timing-based wa-
termarking schemes, including SWIRL and RAINBOW.
However, we design a copy attack on SWIRL that is
much simpler and extremely cost-effective. We show the
effectiveness of this attack in section 5. With an active
copy attack, two ﬂows can replicate their watermarks to
each other so the decoder is confused in ﬂow linking.

4 Detection Attacks Based On Flow Char-

actristics

In this section we present detection attacks from different
levels of adversaries. We demonstrate speciﬁc attacks on
two exemplar schemes: RAINBOW and SWIRL. Fol-
lowing a brief recap of each scheme, we present a de-
tection attack by a global adversary. We then show how
the attack can be extended to work with a isolated adver-
sary. All attacks are simulated and evaluated on CAIDA
datasets [13].

4.1 Attack Implementation
We implement both watermarking schemes and attack al-
gorithms in C++. To simulate the ﬂow generator and jit-
ter generator, we draw ﬂows and jitter vectors from real-
world network traces. Our simulation setup closely fol-
lows that of [7].

The network trace data are collected by the CAIDA
project from its equinix-chicago OC192 link in January
2009 [13]. The dataset contains network ﬂows that tra-
verse in both direction of the link during a 4-hour pe-

5

Marked?Watermarker        AttackerFlow GeneratorJitter GeneratorS0S1S1S0WatermarkerActive AttackerDecoderAll marked?Flow GeneratorJitter GeneratorS0S1S0S1riod. We selected SSH ﬂows (destination port 22) be-
cause stepping-stone attacks are usually conducted over
SSH, and got a total pool of 33 ﬂows and 2.78 million
packets. The packet rate ranges from 2 pps to 180 pps.

To simulate normal jitter caused by network delays,
we adopt the RTT (round-trip time) measured between
PlanetLab nodes [3] by Houmansadr and Borisov in their
SWIRL work.
In each simulation, a random trace of
round-trip delays is chosen and applied to the water-
marked ﬂow.

4.2 RAINBOW
In the RAINBOW watermarking scheme [8], the water-
mark encoder and decoder share a database (DB) which
records packet inter-arrival timing.
In addition, they
share a watermark key w = [w1,w2,··· ,wn]. The compo-
nents of w take binary values of +a and −a uniformly:

(cid:26) a

wi =

with prob. 1/2;
−a with prob. 1/2.

For each individual incoming network ﬂow, the en-
coder computes and stores the packet inter-arrival tim-
ing in DB, then inserts w as extra jitter. Considered the
packet arrives at time [t1,t2,··· ,tn+1], the inter-packet de-
lays (IPDs) are v = [t2−t1,t3−t2,··· ,tn+1−tn]. Now the
ﬂow is marked to carry the inter-arrival time as v + w,
i.e. each inter arrival time is lengthened or shortened by
a milliseconds. In case vi +wi < 0, wi is ignored to avoid
packet reordering, which would severely degrade the wa-
termark if it happened too often. The details are shown
in Algorithm 1.
On the other end, for each outgoing ﬂow with inter
arrival time vector v(cid:48), the decoder computes a jitter vector
d = v(cid:48) − v for each corresponding v recorded in the DB,
and computes the cosine similarity score between d and
w:

cos(d,w) =

(cid:104)d,w(cid:105)
(cid:107)d(cid:107)(cid:107)w(cid:107) .

The detection algorithm is shown in Algorithm 2.

If v(cid:48) is indeed the marked version of v, then we have
d = w + δ where δ is the natural jitter introduced by the
network delay.
It is a widely adopted assumption that
the distribution of jitter components can be modelled as
a Laplacian distribution Lap(0,β ) [20, 8]. Subsequently
we have

cos(d,w) ∼ Lap(

a2/(2β 2 + a2),

1√
2n

) .

(cid:113)

On the other hand, when the ﬂow is not marked or
an incorrect v is chosen, we have d = v(cid:48) − v + δ , and
cos(d,w) ≈ Lap(0, 1√
). The two distribution are nicely
separated when the proper a value is chosen. The de-
coder decides the ﬂow is marked if it scores higher than

2n

6

(cid:112)a2/(2β 2 + a2), and not marked oth-

a threshold ζ = 1
2
erwise.

4.2.1 Known Flow Attack

Under a known ﬂow attack, the inter-packet delays be-
fore and after passing through the encoder are given, al-
lowing the attacker to compute jitter. Therefore the task
of detecting a RAINBOW watermark breaks down to dis-
tinguishing between vectors of the form w + δ and δ ,
where δ is normal jitter following a Laplacian distribu-
tion. In this case, there are several algorithms that could
identify the watermark. We brieﬂy introduce a detection
algorithm that uses only one ﬂow. Another detection al-
gorithm that utilizes 2 or more ﬂows and achieves per-
fect discrimination for most parameters is described in
the appendix.
Single-ﬂow Detection. We show how to detect the wa-
termark with a single ﬂow. Speciﬁcally, a histogram of
jitter components within a time window serves as an ex-
cellent discriminator. In particular, we focus on the bin
that counts the number of jitter components in the range
[−β /4, β /4].

By deﬁnition of the Laplacian distribution,

Pr(−β /4 < δi < β /4) = 1− e−1/4 ≈ 0.221

so we expect over 1/5 components will fall in this bin.
When the watermark w is added, each jitter component is
translated to δi +a or δi−a. Then under this new model,
the probability that a watermarked jitter falls in the same
bin is Pr(−β /4 < x± a < β /4).

When we take a >= β /4, we have

Pr(−β /4 < x± a < β /4)

= Pr(a− β /4 < |x| < a + β /4)/2
= (e−a/β +1/4 − e−a/β−1/4)/2

For different a values, this probability can be directly
estimated; see Table 1. The larger a is, the fewer jitter
values will fall in the bin. Using observed jitter values,
the drop in frequency is even larger, since originally the
majority of the components fall in [−β /4, β /4].

The attack algorithm is very simple: Scan through
the packet arrival times with a moving time window
and compute the percentage of jitter components in the
range [−β /4,β /4] within the window.
If it is lower
that a threshold θ, tag the packets within the window as
“marked”.

a =
Frac.

0

0.221

β /4
0.197

β /2
0.153

β

0.093

2β
0.034

Table 1: Expected fraction of watermark jitter in [−β /4,
β /4].

Algorithm 1 RAINBOW-Embed a
Input: v, w, n

for j = 1 → n do

if v[ j] + w[ j] ≥ 0 then

v[ j] = v[ j] + w[ j]

end if
end for
return v

aIt is slightly different from the original algorithm described in [8].
However, this is the actual algorithm adapted in RAINBOW’s source
code and is in accordance with the experiment notes in [10] .

Attack Evaluation. We simulated network ﬂows by cut-
ting randomly a subsequence of n + 1 packets from a
randomly drawn ﬂow and we simulate the encoder with
n = 200 to 1000 and a = 2 to 20. For each set of pa-
rameters, we simulated 1000 marked ﬂows and 1000 un-
marked ones. Also we simulated natural network delay
on each ﬂow, with the RTT dataset by Houmansadr and
Borisov in their work of SWIRL [7]. The resulting ﬂow
is later ran against by the attack algorithm. The Lapla-
cian model of jitter, estimated from the RTT dataset, in-
dicates β = 10ms.

With a moving window that takes m = 200 consecutive
packets, the attacker obtains a histogram of jitter values
within the window and focuses on the number of small
values within ([−2.5ms,2.5ms]), with β = 10ms. As in-
dicated in Table 1, in the idealized situation we should
see the percentage of such small jitter values drop from
20% to 9.3% or lower when an added watermark ampli-
tude a > β is expected. We set the threshold θ to be
10%. To illustrate the detection performance, we evalu-
ate the single-ﬂow detection attack by three criteria: True
Positive Rate, False Positive Rate and Average Recall.

From Table 2, as expected the detection algorithm
successfully recovers almost the entire watermark when
a ≥ 10ms, regardless of the length of the watermark. And
it also does a very good job even when a = 5ms and the
watermark is sufﬁciently long and the performance drops
when a = 2ms. It is evident that the known ﬂow attack is
effective against RAINBOW, without any knowledge of
the watermark key.

4.2.2 Output-only Detection Attack

Now we consider an attacker who can only see the ﬂow
after it passes the encoder: with only access to the poten-
tially watermarked ﬂow, we can still probe irregularities
by sampling, with the assumption that the mark is not
constantly present in the ﬂow.
In other words, we as-
sume the ﬂow contains marked segments and unmarked
segments.

Algorithm 2 RAINBOW-Detect
Input: v,DB = {v1,v2,··· ,vm},w, ζ

isDetected = FALSE
for i = 1 → m do

di = vi − v
r = cos(di,w)
if r > ζ then

isDetected = T RUE

end if
end for
return isDetected

a (ms)

2

5

10

15

20

length
200
500
1000
200
500
1000
200
500
1000
200
500
1000
200
500
1000

TPR
0.004
0.011
0.024
0.996
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000

FPR Avg. Recall

0
0
0
0
0
0
0
0
0
0
0
0
0
0
0

0.001
0.011
0.001
0.692
0.846
0.921
0.984
0.994
0.997
1.000
1.000
1.000
1.000
1.000
1.000

Table 2: Detection performance of single-ﬂow chosen
ﬂow attack on RAINBOW

An important observation is made: The distribution
of IPDs, {vi}, is highly skewed. One example of the IPD
distribution before and after RAINBOW watermarking is
shown in Figure 5. In RAINBOW, a marked IPD vi will
be translated to vi + a or vi − a. The skewness of these
marked IPDs will be very different from the original.

Similar to the single ﬂow detection algorithm, we uti-
lize the change in histogram skewness as a predictor. Us-
ing a sliding window of w IPDs, histogram samples are
generated. Viewed as vectors, these samples is naturally
assumed to form a cluster in the linear space. Realizing
the IPD distribution varies over time, we limit the his-
togram sampling to a ﬂow segment of L packets. Since
there is no single standardized model of IPD histogram
we can refer to, we resort to using the centroid of the
histogram samples to describe the cluster. The centroid
is called the reference histogram, Hr. Further, each his-
togram sample is compared with the reference Hr.
In
case RAINBOW watermark is inserted, there exist sam-
ples that are much different from Hr. With a similar-

7

watermarked) distributions suggests that we should be
able to distinguish between the cases.
Evaluation of Output-only Detection Attack. We sim-
ulated 1000 ﬂows by selecting a random subsequence of
4000 packets from a randomly drawn ﬂow. We then sim-
ulate RAINBOW watermarks on the ﬂow sample, with
multiple parameter combinations. For each ﬂow, normal
network delay is simulated by imposing one sample jitter
sequence from the RTT dataset.

We experimented with τS values between 0 and 1, and
calculate ROC curves for each parameter combination.
We selected two sets of them to show in Figure 7. To see
how the outlier detection is affected by smaller segment,
we also repeated the evaluation with 2000-packet ﬂows
and found similar results. The area under curve (AUC)
values for various parameters for both experiments are
summarized in Table 3. The performance of the attack
agrees with the intuition: the chances of detecting water-
marks improves with increasing amplitude and length.
When a = 20ms, the AUC is generally close to or greater
than 0.90. When a ≤ 5ms, the performance of the attack
drops substantially because the histogram with 5ms bin
fails to reﬂect the relatively invisible distribution change.

Figure 5: The histogram of ﬁrst 2000 IPDs of one ﬂow
before and after watermarking (n=2000, a = 10ms). The
bin size is 5ms.

ity function Ψ(·,·) and a threshold τS, we judge a ﬂow
to be marked if there exists a histogram Hi such that
Ψ(Hi,Hr) ≤ τS.

The watermarking effect on histograms can be viewed
as a linear transformation on them. Suppose two his-
tograms H and H(cid:48) represent distributions of IPDs before
and after the watermarking, respectively. Then there ex-
ists a matrix M such that H(cid:48) = H · M, leading us to use
the cosine function as the similarity measure.

Figure 6: CDF with cosine similarity

Figure 7: ROC curves of outlier detection

A preliminary experiment conﬁrms the effectiveness
of cosine similarity on histograms. After selecting 100
random subsequences of L = 4000 packets from ran-
domly drawn ﬂows, we simulate RAINBOW watermarks
(with n = 1000 and various a values) on each sequence.
We take a sliding window of w = 200 IPDs. For the his-
togram sampling, we set the bin width to be 5ms, aim-
ing to capture the watermark amplitudes a > 5ms. We
also “clip” IPD histograms at vi ≤ 200ms as the major-
ity of IPDs are in that range. The cumulative distribution
functions of similarity scores over watermarked and non-
marked regions respectively, are shown in Fig 6. The dis-
tance between the solid (watermarked) and dashed (un-

4.3 SWIRL
The design of SWIRL [7] can be brieﬂy described as
follows. Time is divided into intervals of two basic
types: n “base intervals” in which seeds are gener-
ated, and n “mark intervals” in which packets are ac-
tually manipulated. Both being T seconds long, each
base interval corresponds to one mark interval. Each
mark interval is equally divided into r sub-intervals,
and each sub-interval is equally divided into m slots.
For each pair of base and mark intervals, r secret
permutations,π1,π2, . . . ,πr, are generated, such that each
πi is a permutation of numbers from 1 to m. Each base

8

020406080100IPD (ms)020040060080010001200Frequency HistogramAfter watermarkingBefore watermarking0.00.20.40.60.81.0Cosine Similarity0.00.20.40.60.81.0CDFNormalWatermarked a = 10Watermarked a = 15Watermarked a = 20Watermarked a = 50.00.20.40.60.81.0FPR0.00.20.40.60.81.0TPRn = 200 a=20n = 200 a=10n = 1000 a=20n = 1000 a=10ROC curvesa

5

10

15

20

length AUC (L = 2000) AUC (L = 4000)
200
500
1000
200
500
1000
200
500
1000
200
500
1000

0.417
0.492
0.732
0.641
0.711
0.728
0.894
0.924
0.927
0.875
0.913
0.920

0.432
0.455
0.489
0.858
0.878
0.895
0.889
0.917
0.905
0.889
0.917
0.910

Table 3: AUC scores of outlier detection

interval will be used to derive a seed s ∈ Zm and πi(s)
will determine a designated slot for the i−th sub-interval
of the corresponding mark interval. The encoder and
decoder have agreed on the choices of n, T , m, r, and
π1, . . . ,πr.

Within each mark interval, a watermark bit is inserted
by re-arranging the packets to the designated slots for
each sub-interval. More speciﬁcally, packets arriving be-
fore each designated slot are delayed into the subsequent
one. The choice of seed s, the “quantized centroids” of
base interval packets, is determined as follows: First, the
centroid of packets, C, is computed as the mean arrival
time of packets from the beginning of the interval. And
the quantized centroid is

s = (cid:98)qmC/T(cid:99)

(mod m) ,

where q is the quantization multiplier, introduced to in-
crease randomness. The procedure of delaying packets
into slots is illustrated in Figure 8.

For each outgoing ﬂow at the other end, the decoder
computes the centroids of every base interval and in-
spects the corresponding mark interval. A sub-interval
is considered marked if the designated slot has packets.
For each interval, a watermark bit is found if the number
of marked sub-intervals is more than a pre-determined
threshold τ. Finally, a watermark is detected if the num-
ber of watermark bits exceeds a preset threshold η.

4.3.1 Chosen Flow Attack

To make a SWIRL watermark stand out, the attacker can
establish connections to a compromised host with uni-
formly paced trafﬁc, sending K packets evenly per sec-
ond. The interval centroid within such ﬂows must lie
within [1/2,1/2 + 1/K], regardless of the initial offset.
As long as K is large, the quantized centroid will not

9

Figure 8: The marking procedure of SWIRL watermark-
ing scheme

change. So each marked ﬂow will have the same pat-
tern of cleared and occupied intervals. To see the pattern
across different ﬂows, we introduce the following attack
that works like MFA based on packets, rather than time
intervals, due to the fact that the pattern is introduced
with a random offset on each ﬂow.

1. One attacker injects multiple ﬂows toward the other;

the IPDs of all packets in all ﬂows are t ms.

2. The receiving attacker models the jitter as Laplacian

and estimates the variance β .

3. The receiver ﬂags packets that arrive too soon (≤ t−
δ ) or too late (≥ t +δ ms) from the previous packet,
with a threshold δ .

4. The receiver converts ﬂagged packets into bit 1 and
others into bit 0, transforming ﬂows into bit strings.
It examines the bit strings to see if there are com-
mon patterns of jitter.

Here is an example: We simulate an attacker that injects
multiple ﬂows with a rate of 20 packets per second (t =
50ms) to the SWIRL encoder and observes the outgo-
ing trafﬁc. We implement the SWIRL encoder with the
recommended parameters (n = 32, T = 2s, r = 20 and
m = 5). For each ﬂow, the encoder applies a unique key
(including new assignments of base/mark intervals) and
a unique random initial offset o ∈ [0,T ]. Network jitter
is simulated by the observed jitter dataset. The chosen
ﬂow attacker ﬁrst computes the jitter and estimate the jit-
ter model: Lap(0,10) and set δ = 20ms. Figure 9 shows
three marked ﬂows that are converted into bit sequences
and put side by side for comparison.

The a priori likelihood of producing highly synchro-
nized bit patterns by normal jitter is very small. The
event of seeing a bit-1 (i.e. a jitter component | j| > δ )
happens with probability p = e−δ /β by Laplacian distri-
bution. Therefore each bit is the outcome of a Bernoulli

π1(s) = 3π2(s) = 21234523345π1(s) = 3π2(s) = 2BeforeAfterDelaying packets in one Interval Mark1, m = 5, r = 21the Laplacian model usually over-estimates the tail dis-
tribution of natural jitter. That results in a much lower
probability of seeing an all-1 column in the non-marked
ﬂow alignment, eliminating false positives.

4.3.2 Output-only Detection Analysis

Two important observations are made from the chosen
ﬂow attack on SWIRL:

• Because of the interval choice algorithm, mark in-
tervals are likely allocated toward the end of the en-
tire watermark period. Intuitively, out of 64 inter-
vals, 1st interval must be base interval and the 64th
must be mark interval. Very often, the last several
intervals are all mark intervals.

• Initial offsets ∈ [0,T ] are not signiﬁcant enough to

break the synchronization of mark intervals.

Inspired by the observations, we examine the distribu-
tion of cleared and occupied sub-intervals and their rela-
tive positioning. With at least 75% probability, each des-
ignated slot is at least one half sub-interval length away
from the neighboring designated slot. Intuitively we call
this ‘isolation’, i.e. a packet in a marked region is either
close to some neighboring packets because they are co-
located in the same slot or far away from other packets.
We slice the packets into groups by time, such that time
gap between groups are at least T microseconds (T is
chosen as a threshold.) Because of ‘isolation’, packets in
marked intervals tend to form groups of short time-span.
To implement this heuristic, we use a naive cluster-
ing analysis algorithm that group packets by their arrival
times. Two packets are grouped to the same cluster if
their IPD in between is ≤ T . To capture the intuition
of ‘many short clusters’, we use the maximum time-span
among all clusters. If all clusters’ time-spans are short,
the maximum is guaranteed to be short. For one ﬂow, we
ﬁrst divide it into one-second ﬂow snapshots. Then we
apply the analysis to each snapshot and assign the max-
imum cluster time-span to the snapshot as its heuristic
feature. We denote this by Fi for the i-th snapshot. We
hypothesize that Fi has a lower expected value if the i-th
second is in a marked interval. To see this, we repeat the
same procedure on k ﬂows and compute ¯Fi as the average
Fi across multiple ﬂows. The procedure is illustrated in
Figure 10.

Here we give an example of such ¯Fi vectors derived
from 30 non-marked ﬂows and 30 marked ﬂows, as
shown in Figure 11.

The output-only attacker collects marked ﬂows pas-
sively and converts them to lists of heuristic values Fi
with clustering parameter t. She computes the mean Fi

Figure 9: For each ﬂow, an impulse is drawn when
a packets is ﬂagged.
The synchronization of ﬂags
clearly shows the presence of watermark. On the con-
trast, the non-marked region on the right shows non-
synchronization columns.

trial. With an alignment of k bit sequences, each column
shows an outcome of k independent Bernoulli trials. The
number of 1 bits in each column follows the binomial
distribution X ∼ B(k, p). Subsequently, the probability
of generating an all-1 column is Pr(X = k) = pk. With
observation of N columns, the expected total occurrence
of all-1 columns is N pk, with variance of N pk(1− pk).
Returning to the example, we have β = 10, δ = 20ms,
k = 3, so p = 0.135 and the probability of generating
one all-1 column is 0.00248. In Figure 9, the left 2500
columns of the alignment have 350 all-1 columns, much
higher than the expected value 6.25 with a Z score of
140. In contrast, the right half has only 8 all-1 columns.
Learning from the example, the attacker uses a moving
observation window and simply sets a Z score threshold.
She raises the alarm when she sees the number of all-1
columns surpassing the threshold.
Evaluation of Chosen Flow Attack. We simulate the
SWIRL watermarking on synthetic ﬂows with two sets
of SWIRL parameters: (n = 32, T = 2s, r = 10, m = 5)
and (n = 32, T = 2s, r = 20, m = 5). Each synthetic ﬂow
lasts for 300 seconds and contains trafﬁc with a uniform
rate of 20 PPS. The resulting ﬂow is further distorted by
a random jitter vector from jitter dataset.
In each ex-
periment, 3 marked ﬂows are converted to bit sequence
as described previously and aligned. The attacker runs
through the alignment with a moving window of size
1000. β is estimated as 10. We repeat the detection at-
tack for three times on each alignment with δ = 10ms ,
20ms, and 30ms respectively. The Z score threshold is set
to 10. 3 non-marked ﬂows with jitter are also fed to the
attacker as control. We repeat the experiment 100 times.
There is no surprise to see that the attacker correctly
identiﬁes all watermarked ﬂows and non-marked ones
without any error, no matter which δ value is chosen.
The accuracy of 100% is attributed partly to the fact that

10

 0 1000 2000 3000 4000 5000Packet3-flow alignment 0 1000 2000 3000 4000 5000Packet3-flow alignment 0 1000 2000 3000 4000 5000Packet3-flow alignmentAUC Score

t (ms)

k=10

k = 20

k = 30

k = 40

Sub-interval size = 100 ms (r=20)

50
100
150
200

0.552
0.598
0.455
0.615

0.806
0.765
0.484
0.668

0.920
0.882
0.498
0.706

0.971
0.934
0.548
0.727

Sub-interval size = 200 ms (r=10)

50
100
150
200

0.410
0.580
0.749
0.934

0.444
0.893
0.980
0.983

0.472
0.984
0.998
1.000

0.513
0.998
1.000
1.000

Figure 10: The procedure of computing ¯Fi

Table 4: AUC scores with combinations of t and k

the clustering threshold t is smaller than or equal to the
subinterval length SI. Obviously, when T is larger than
SI, the heuristic fails as the ‘isolation’ is bounded by SI
and is gone when we look for larger gaps. For the sec-
ond parameter set, the attack is able to score AUC greater
than 0.98 with t ≥ 100ms and k ≥ 30. It is worth men-
tioning that when T = 50ms, the attack cannot identify
watermarked ﬂows, due to the fact that the slot size is
40ms, very close to T . In that case, given the low trafﬁc
rate, Fi with T = 50ms in the marked regions looks es-
sentially the same as in non-marked regions, producing
random numbers between 0 and 50ms. Finally, we are
always able to ﬁnd a threshold that allows the attack to
separate marked ﬂows and non-marked ﬂows without er-
ror, when enough marked ﬂows are accumulated (k ≥ 30)
and T is between the slot size and the sub-interval size,
e.g. 100ms.

We further argue that blindly setting T = 100ms will
be suitable to detect most SWIRL watermarks. First
of all, heuristically we see the sub-interval should not
be smaller than 100ms. The reason is that a smaller
sub-interval is closely related to larger false negatives.
Smaller sub-intervals result in smaller slots, making the
scheme vulnerable to natural network jitter. Even worse,
many smaller sub-intervals will be unmarkable because
there is no packet falling into them, resulting in detec-
tion difﬁculties. On the other hand, we also reason the
slot size should not be much larger than 100ms, since
larger slots lead to much worse invisibility [7].

5 Active Copy and Ambiguity Attacks

Copy attacks are common in the area of media water-
marking. However, to our knowledge the copy attack
on network ﬂow watermarks has not been studied exten-
sively. In this section, we focus on copy attacks from a
isolated adversary’s perpective, resulting in stronger at-
tacks (based on weaker assumptions). For convenience

Figure 11: Two ﬁgures show { ¯Fi} values derived from
the same set of ﬂows with and without watermark manip-
ulation respectively. Marked ﬂows has lower Fi values at
marked intervals. (The thin dash line at y=0.0 level in the
left ﬁgure indicates mark intervals.)

values across multiple ﬂows. Marked regions are ex-
pected to score lower ¯Fi. Using a threshold τF, she deter-
mines that a ﬂow is marked if there exists some ¯Fi < τF.
Evaluation of Output-only Detection Attack. To test
the output-only attack, we ﬁrst generate ﬂows with
packet rate λ ≤ 10 packets per second, the target packet
rate for SWIRL. We then repeat for 100 times the simu-
lation of SWIRL watermarking on those ﬂows with the
same two set of system parameters in Chosen Flow At-
tack evaluation.

Assuming no knowledge of the system parameters, the
attacker launches the attack with various values of T .
Unfortunately we don’t have an analytical model for set-
ting τF so we use area under ROC curve (AUC) to eval-
uate the performance of the attack. The evaluation is
shown in Table 4. We have encouraging results when

11

f1...fk{f11,f12...}{F11,F12, ...}{Fk1,Fk2, ...}{fk1,fk2...}Divide into 1-second snapshots        Cluster Analysis         Fij = Max Cluster(fij).........Average ={F1, F2, ...}20020406080100120140Time (s)0.000.050.100.150.20Average max cluster20020406080100120140Time (s)0.000.050.100.150.20k = 30of discussion, we refer to the original watermarked ﬂow
as the Source Flow and refer to the to-be-copied-to ﬂow
as the Target Flow.
Generic Copy Attack The ﬁrst passive copy attack is the
replay attack, which simply replicates the IPD sequence
of the source ﬂow with the target ﬂow.
In the RAIN-
BOW scheme, the decoder automatically links incoming
and out-going ﬂows when a watermark is detected, since
the detection only succeeds when outgoing timing and
recorded incoming timing are matched correctly. In case
of the replay attack, the decoder will have to face two
identical watermarked ﬂows and will no longer be able
to do exact trafﬁc linking.

Moreover, the replay attack doesn’t need to be turned
on all the time due to the fact that the watermark decoder
will tolerate some errors. For example, suppose the en-
tire watermark is imposed on the ﬁrst 1000 packets of
both source and target ﬂows. When the attack changes
the ﬁrst 500 IPDs of the target ﬂow with the source ﬂow
as a template, it creates a “chimera” ﬂow that looks 50%
similar to the source and the target, making the decoder
more confused.
Copy Attacks against SWIRL. Unlike RAINBOW,
SWIRL is interval-based, searching for intervals manip-
ulated by the watermark encoding algorithm. SWIRL
also tolerates errors caused by natural delay and jitters.
Therefore it is possible to copy SWIRL watermarks im-
perfectly. Two key insights enable us to design a best-
effort keyless copy attack efﬁciently:

• The interval centroid will not change even when a

small fraction of packets are missing.

• The SWIRL decoder only watches for one packet to
appear in the right slot and not all designated slots
need to be ﬁlled.

In order to copy the mark, the attacker simply delays
packets with a timing template recorded moments ago.
The self-synchronization of the watermarking detection
algorithm will automatically shift the interval boundary
in place so we don’t need to worry about the actual posi-
tion of marks in the ﬂow. The speciﬁc copy attack works
as follows (also shown in Figure 12):

1. Between time u and u + ∆, the attacker sets up a
buffer that records the arrival times of a source ﬂow
as Q = {t1,t2, . . . ,tn} for packets coming within this
period.

2. Between time u + ∆ and u + 2∆, each packet of the
target ﬂow arriving at time vi will be examine to
see if it can be matched to t j ∈ Q so that vi can be
delayed to make t j − u = vi − u − ∆. Unmatched
packets will be handled normally without extra de-
lay. Meanwhile, we use another buffer Q(cid:48) to record
the timing of A in this period.

12

λ

3 < λ < 20
20 < λ < 80

80 < λ

Parameters

n = 32, T = 2s, r = 20, m = 5
n = 32, T = 2s, r = 40, m = 5
n = 32, T = 2s, r = 80, m = 5

Table 5: Adaptive setting of SWIRL system parameters

3. Replace Q with Q(cid:48), u with u + ∆, and repeat step2.

Figure 12: The best-effort copy attack on SWIRL
scheme

This algorithm can run in real time and only requires
two small buffers. ∆ can be tuned to a small value, such
as 500 milliseconds or 1 second. The “icing on the cake”
is that the attacker can also copy the other way around
simultaneously while copying from the source to the tar-
get.
Evaluation of Copy Attack on SWIRL. We implement
the SWIRL encoder and decoder with multiple sets of
parameters, adjusted to ﬂows with different packet rates,
shown in Table 5.

We simulated network ﬂows by randomly choosing
128-second long intervals from randomly drawn ﬂows.
In total we obtained 300 ﬂows for simulation and we sim-
ulated SWIRL watermarks on them, each with a unique
watermark key. Our implementation of the copy attack
chooses ∆ = 500ms. The attack is launched on every
pair of ﬂows 100 times. Eventually the average perfor-
mance is calculated. The average number of bits detected
on the target ﬂow with the source ﬂow’s key is shown in
Figure 13. Meanwhile, after the copy attack, the aver-
age bits detected by the target ﬂow’s key is also shown in
Figure 14, organized by both ﬂows’ packet rates. The di-
agonal blocks show that it is easy to achieve copy effect
between ﬂows with similar system parameters.
It also
shows a clear trend that high-packet-rate ﬂows (λ > 40)
can easily copy any marks from a ﬂow with a lower rate,
achieving 25.4 bits detected on average. Also because
of the high packet rate, they still remain watermarked by
their original keys, with 19.5 bits. It is evident that the
best-effort copy attack is agnostic to the actual settings

......TimeFlow Auu + ΔFlow Bu + Δu +2 ΔCopy6.2 Defenses against Isolated Passive At-

tacks

6.2.1 RAINBOW

There are two ways to mitigate our outlier detection at-
tack on RAINBOW: one is to use a smaller amplitude
value a, such as 5ms. The other is to only watermark a
subset of IPDs. For example, only one in every k IPDs
will be touched for watermarking. Either way we face a
trade-off between invisibility and robustness.

6.2.2 SWIRL

To defend against the passive attack we described, an
easy ﬁx for SWIRL is to use larger offsets and more ran-
dom interval assignments. Large offsets breaks the syn-
chronization of marked intervals so multi-ﬂow alignment
is less effective. A large offset might, however, present a
scalability issue for the self-synchronized watermark de-
coder because now trying all possible offset values will
be a time consuming task. Another defense is to employ
a more sophisticated mark interval selection algorithm.
For example, we could choose 32 out of 100 intervals to
be mark intervals, and have the choice of the 32 mark in-
tervals be determined by the base intervals of individual
ﬂows. Properly evaluating these defense strategies will
require further research.

6.3 Utilizing Copy Attack for Anonymity
Large autonomous systems (ASes) such as ISPs control
the network routing infrastructure in a distributed man-
ner. Studies have pointed out that AS-level adversaries
could reduce the link anonymity of Tor substantially by
passive trafﬁc analysis [5]. Equipped with high-capacity
routers, such adversaries can also employ watermark-
ing to improve the linking results. Blind watermarking
schemes such as SWIRL are more suitable than non-
blind schemes like RAINBOW because decoders in blind
schemes can act along with pre-conﬁgured parameters
and keys, saving a huge amount of resources.

To defend anonymity against AS-level adversaries that
use SWIRL, Tor relays can launch the copy attack against
SWIRL to mingle the timing information from multiple
concurrent ﬂows and confuse the decoders. The impact
of copy attacks against passive and active trafﬁc analysis
on low-delay anonymity networks like Tor is an interest-
ing open problem, appealing for future investigation.

7 Conclusion

We have proposed a security evaluation framework for
network ﬂow watermarking schemes, based on threat
modeling. We started from a strong adversary, who is

Figure 13: Bits detected after the target ﬂow (A) copies
watermarks from the source ﬂow (B), with source ﬂow’s
detection key.

Figure 14: Bits detected after the best-effort copy attack,
with the target ﬂow’s detection key.

of SWIRL such that two ﬂows carrying completely dif-
ferent SWIRL watermarks can still exchange their marks
without knowledge of SWIRL parameters.

6 Discussion

6.1 Defending Chosen Flow Attacks

Generally, defending against chosen ﬂow attackers is
hard given that timing manipulation is visible and mea-
surable for such attackers. For jitter-based schemes, cho-
sen ﬂow attacker can directly compare the jitter in ques-
tion with some theoretical model. One defense technique
to borrow from stegnography is that the imposed artiﬁ-
cial jitter should approximate the real jitter as much as
possible. As to interval-based schemes, Kiyavash et al.
in their work of MFA already suggested choosing dif-
ferent mark intervals for different ﬂows [9]. However,
both PNR attacks and our chosen ﬂow detection algo-
rithms indicate that using base/mark approach doesn’t re-
sist against chosen ﬂow adversary. How to choose mark
intervals randomly to get pass such adversary becomes
an interesting open question.

13

capable of chosen ﬂow attacks, and proved the effective-
ness of chosen ﬂow attacks against the recent state-of-
the-art watermarking schemes, RAINBOW and SWIRL.
Using insights from these attacks, we were able to devise
detection attacks from the perspective of weaker isolated
passive adversaries that still defeat the invisibility claims
of these schemes. Additionally, we point out the feasi-
bility of keyless copy attacks against ﬂow watermarking
and the importance of defending against such attacks in a
trafﬁc analysis scenario. In particular we develop an efﬁ-
cient and simple copy attack that works very well against
SWIRL. We were able to transfer watermarks from one
marked ﬂow to another non-marked ﬂow. Such copy at-
tacks are especially of interests to Tor relays, which have
concerns about link privacy with potential watermarking
from ASes or compromised relays. In our future work,
we would like to investigate the attack effectiveness in
the real world and evaluate the subsequent performance
impacts.

8 Acknowledgements

We thank Nikita Borisov and Amir Houmansadr for
kindly sharing the source code and datasets for RAIN-
BOW and SWIRL. We thank our shepherd Nikita
Borisov as well as several anonymous reviewers for their
constructive feedback. This work was supported by NSF
grant 0917154.

References

[1] A. Adelsbach, S. Katzenbeisser, and H. Veith. Wa-
termarking schemes provably secure against copy
and ambiguity attacks.
In Proceedings of the
3rd ACM workshop on Digital rights management,
DRM ’03, pages 111–119, New York, NY, USA,
2003. ACM.

[2] A. Blum, D. X. Song, and S. Venkataraman. De-
tection of interactive stepping stones: Algorithms
and conﬁdence bounds. In E. Jonsson, A. Valdes,
and M. Almgren, editors, International Symposium
on Recent Advances in Intrusion Detection, volume
3224 of Lecture Notes in Computer Science, pages
258–277. Springer, Sept. 2004.

[3] B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Pe-
terson, M. Wawrzoniak, and M. Bowman. Planet-
lab: an overlay testbed for broad-coverage services.
SIGCOMM Comput. Commun. Rev., 33:3–12, July
2003.

[4] D. L. Donoho, A. G. Flesia, U. Shankar, V. Pax-
son, J. Coit, and S. Staniford. Multiscale stepping-

stone detection: detecting pairs of jittered interac-
tive streams by exploiting maximum tolerable de-
lay.
In Proceedings of the 5th international con-
ference on Recent advances in intrusion detection,
RAID’02, pages 17–35, Berlin, Heidelberg, 2002.
Springer-Verlag.

[5] M. Edman and P. F. Syverson. AS-awareness in tor
path selection.
In E. Al-Shaer, S. Jha, and A. D.
Keromytis, editors, Proceedings of the 2009 ACM
Conference on Computer and Communications Se-
curity, CCS 2009, Chicago, Illinois, USA, Novem-
ber 9-13, 2009, pages 380–389. ACM, 2009.

[6] T. He and L. Tong. Detecting encrypted stepping-
stone connections. Trans. Sig. Proc., 55(5):1612–
1623, May 2007.

[7] A. Houmansadr and N. Borisov. SWIRL: A scal-
able watermark to detect correlated network ﬂows.
In Network and Distributed System Security Sym-
posium. Internet Society, Feb 2011.

[8] A. Houmansadr, N. Kiyavash, and N. Borisov.
RAINBOW: A robust and invisible non-blind wa-
termark for network ﬂows.
In Network and Dis-
tributed System Security Symposium. Internet Soci-
ety, Feb 2009.

[9] N. Kiyavash, A. Houmansadr, and N. Borisov.
Multi-ﬂow attacks against network ﬂow water-
marking schemes. In Proceedings of the 17th con-
ference on Security symposium, pages 307–320,
Berkeley, CA, USA, 2008. USENIX Association.

[10] X. Luo, P. Zhou, J. Zhang, R. Perdisci, W. Lee, and
R. K. C. Chang. Exposing invisible timing-based
trafﬁc watermarks with backlit. In Proceedings of
2011 Annual Computer Security Applications Con-
ference (ACSAC’11), Orlando, FL, USA, December
2011.

[11] P. Peng, P. Ning, and D. S. Reeves. On the se-
crecy of timing-based active watermarking trace-
back techniques. In Proceedings of the 2006 IEEE
Symposium on Security and Privacy, pages 334–
349, Washington, DC, USA, 2006. IEEE Computer
Society.

[12] Y. Pyun, Y. Park, X. Wang, D. S. Reeves, and
P. Ning. Tracing trafﬁc through intermediate hosts
that repacketize ﬂows. In G. Kesidis, E. Modiano,
and R. Srikant, editors, IEEE Conference on Com-
puter Communications (INFOCOM), pages 634–
642, May 2007.

14

[13] C. Walsworth, E. Aben, kc claffy, and D. Andersen.
The caida anonymized 2009 internet tracesjanuary.,
Mar. 2009.

[14] X. Wang, S. Chen, and S. Jajodia. Tracking anony-
mous peer-to-peer voip calls on the internet. In Pro-
ceedings of the 12th ACM conference on Computer
and communications security, CCS ’05, pages 81–
91, New York, NY, USA, 2005. ACM.

[15] X. Wang, S. Chen, and S. Jajodia. Network ﬂow
watermarking attack on low-latency anonymous
communication systems.
In Proceedings of the
2007 IEEE Symposium on Security and Privacy, SP
’07, pages 116–130, Washington, DC, USA, 2007.
IEEE Computer Society.

[16] X. Wang and D. S. Reeves. Robust correlation of
encrypted attack trafﬁc through stepping stones by
manipulation of interpacket delays. In Proceedings
of the 10th ACM conference on Computer and com-
munications security, CCS ’03, pages 20–29, New
York, NY, USA, 2003. ACM.

[17] X. Wang, D. S. Reeves, and S. F. Wu. Inter-packet
delay based correlation for tracing encrypted con-
nections through stepping stones.
In Proceedings
of the 7th European Symposium on Research in
Computer Security, ESORICS ’02, pages 244–263,
London, UK, UK, 2002. Springer-Verlag.

[18] W. Yu, X. Fu, S. Graham, D. Xuan, and W. Zhao.
Dsss-based ﬂow marking technique for invisible
traceback. In Proceedings of the 2007 IEEE Sym-
posium on Security and Privacy, SP ’07, pages 18–
32, Washington, DC, USA, 2007. IEEE Computer
Society.

[19] Y. Zhang and V. Paxson. Detecting stepping stones.
In Proceedings of the 9th conference on USENIX
Security Symposium - Volume 9, SSYM’00, pages
13–13, Berkeley, CA, USA, 2000. USENIX Asso-
ciation.

[20] L. Zheng, L. Zhang, and D. Xu. Characteristics
of network delay and delay jitter and its effect on
voice over ip (voip).
In Communications, 2001.
ICC 2001. IEEE International Conference on, vol-
ume 1, pages 122 –126 vol.1, jun 2001.

A Appendix

Multi-ﬂow Detection of RAINBOW. First, we consider
an attacker that initiates two ﬂows through the water-
marker and receives them at the compromised host. Now
he needs to determine if both ﬂows carry the watermark

by looking at jitter vectors d0 and d1. Similar to detec-
tion, we again use cosine similarity between d0 and d1 to
test it. Therefore, we need to distinguish two hypotheses:

• H0: d0 and d1 are unwatermarked ﬂows.
• H1: d0 and d1 are both watermarked ﬂows carrying

mark w.

Figure 15: Cosine similarity between two jitter vectors

Deﬁne D = cos(d0,d1), Under H0, di = δ i where δ i
are two independent jitter vectors. Under H1, di = w+δ i.
The decision rule is to use a threshold τD, such that if
D ≥ τD, we reject H0 and the watermark is present, and
otherwise absent. To see this working we have the fol-
lowing lemmas (the proofs are shown in the appendix):
Lemma 1. Suppose X1,X2, . . .Xn are i.i.d random vari-
ables with Laplacian distribution Lap(0,β ).
Then
E(∑n
Proof.

j ) = n· (2β 2)

j=1 X 2

E(

n∑

j=1

X 2

j ) =

E(X 2
j )

n∑

j=1

= n· (σ 2(Xj) + E(Xj)2)
= n· (2β 2)

(1)

(cid:112)n· (2β 2)

Corollary 1. For δ = [X1,X2, . . . ,Xn], E((cid:107)δ(cid:107)) =

Lemma 2. Suppose X1,X2, . . .Xn,Y1,Y2, . . . ,Yn are i.i.d
random variables with Laplacian distribution Lap(0,β ).
For Z = ∑n
Proof. Due to i.i.d random variables Xi,Yi:

√
n· (2β 2)

i=1 XiYi, σ (Z) =

σ 2(Z) = nσ 2(X0Y0)

= n(2β 2)2

(2)

15

012345γ0.20.00.20.40.60.81.0Dn = 1000Hypothesis 1Hypothesis 0Under H1, we have the following:

E(D) =

≈

E((cid:104)w + δ 0,w + δ 1(cid:105))
(cid:107)w + δ 0(cid:107)2 ·(cid:107)w + δ 1(cid:107)2

(cid:112)((cid:107)w(cid:107)2 +(cid:107)δ 0(cid:107)2)((cid:107)w(cid:107)2 +(cid:107)δ 1(cid:107)2)

na2 + E((cid:104)δ 0,δ 1(cid:105))

= na2/(na2 + n2β 2)
= γ2/(2 + γ2)

(5)

where γ is the ratio of watermark amplitude to the Lapla-
cian parameter β of jitter.

Figure 16: Statistics of RAINBOW multi-ﬂow detection
test

σ (D) ≈

=

=

(cid:112)2σ 2((cid:104)w,δ(cid:105)) + σ 2((cid:104)δ 0,δ 1(cid:105))
(cid:112)4a2β 2 + 4β 4
2(cid:112)γ2 + 1

√
n(a2 + 2β 2)

(na2 + n2β 2)

√
n(γ2 + 2)

(6)

(7)

Figure 15 shows how the two hypotheses lead to dif-
ferent D distributions under varying values of γ with
n = 1000. Evidently H1 is signiﬁcantly different from
H0 when n and γ are sufﬁciently large. In that case, de-
tection attack can be accomplished by a simple statistic
test that reject H0 with good conﬁdence.

We set a threshold τD for dectection test. If two jit-
ter vectors score higher than τD, the attacker rejects H0
and deems them as “watermarked”. Otherwise it accepts
H0. By Chebyshev’s inequality, we expect FPR ≤ 1
√
2k2
with τD = k/
n. Note now we can choose the thresh-
old value independent of actual a and β values used by
RAINBOW.
Attack Evaluation. We simulated network ﬂows by cut-
ting randomly a subsequence of n +1 packets from a ran-
domly drawn ﬂow. For each set of n and a values, We
simulated 1000 marked ﬂows and 1000 unmarked ones,
and ran the attack algorithm against them.

We ﬁrst compute cosine similarity D between marked
jitter vectors and between normal jitter vectors. Fig-
ure 16 shows that the actual detection performance ﬁt
√
nicely with the model. Therefore, we further set τD =
1000 ≈ 0.158, such that the false positive rate is
5/
≤ 2% when n ≥ 1000. We then launch the detection at-
tack with τD. The result, plotted in Figure 17, is satisfac-
tory: Watermarks with a ≥ 10ms will be detected for sure
while the false positive rate is nearly 0 when n ≥ 500.

Figure 17: Performance of multi-ﬂow detection attack

Lemma 3. The inner product of jitter δ and watermark
√
w, has distribution (cid:104)δ ,w(cid:105) ∼ Lap(0,
naβ ). The proof is
referred to [8].

Under H0, the distribution of D satisﬁes the following

characteristics:

E(D) =

j=1 δ 0

E(∑n
j δ 1
j )
E((cid:107)δ 0(cid:107))E((cid:107)δ 1(cid:107))
n∑
= 0

j )E(δ 1

E(δ 0

j=1

=

j )/E((cid:107)δ 0(cid:107))2

σ (D) ≈ σ (

δ 0
j δ 1

n∑

j=1

(cid:113)

j )/E((cid:107)δ 0(cid:107))2
(cid:113)

n· (2β 2))2

=

n(2β 2)2/(
√
= 1/
n

(3)

(4)

16

05101520watermark amplitude0.00.10.20.30.40.50.60.7Dn=1000H1 ExpectedH1 ActualH0 Actual0500100015002000watermark length (n)0.00.20.40.60.81.0Detection RateτD =0.158FPRTPR, a = 5TPR, a = 7TPR, a = 10TPR, a = 15