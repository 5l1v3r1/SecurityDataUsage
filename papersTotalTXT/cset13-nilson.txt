BugBox : A Vulnerability Corpus for PHP Web Applications

Gary Nilson

Computer Science Department

University of Maryland

Kent Wills

Computer Science Department

University of Maryland

Jeffrey Stuckman

Computer Science Department

University of Maryland

James Purtilo

Computer Science Department

University of Maryland

Abstract
Web applications are a rich source of vulnerabilities due
to their high exposure, diversity, and popularity. Accord-
ingly, web application vulnerabilities are useful subjects
for empirical security research. Although some infor-
mation on vulnerabilities is publicly available, there are
no publicly available datasets that couple vulnerabilities
with their source code, metadata, and exploits through
an executable test environment. We describe BugBox, a
corpus and exploit simulation environment for PHP web
application vulnerabilities. BugBox provides a test en-
vironment and a packaging mechanism that allows for
the distribution and sharing of vulnerability data. The
goal is to facilitate empirical vulnerability studies, secu-
rity tool evaluation, and security metrics research. In ad-
dition, the framework promotes developer education by
demonstrating exploits and providing a sandbox where
they can be run safely. BugBox and its modules are open-
source and available online, and new modules may be
contributed by community members.

1

Introduction

PHP web applications are subject to a wide variety of ex-
ploit types, such as cross-site scripting (XSS), cross-site
request forgery (CSRF), buffer overﬂow, and SQL injec-
tion. A recent study by White Hat Security [20] analyzed
seven web application platforms: ASP, ASPX, ColdFu-
sion, Struts, JSP, PHP, and Perl, concluding that, on aver-
age, PHP applications had one of the highest numbers of
serious vulnerabilities relative to the application’s attack
surface.

A variety of approaches can be taken to mitigate vul-
nerabilities. Simple developer education can address
many issues before they occur. Also, various software
tools and approaches exist like vulnerability scanners,
specially hardened platforms or libraries, and software
metrics for risk estimation. All of these approaches can

be enhanced with data gleaned from past vulnerabilities,
bringing a greater empirical assurance that the technique
works as intended. For example, developers can gain
insights on security by experimenting on vulnerabilities
that occurred in the past, while tool developers use histor-
ical defect data to evaluate their tools and motivate future
improvements [21]. In our own research in security met-
ric evaluation [18], we observed that existing sources of
vulnerability data did not supply the necessary structure
or metadata to evaluate them completely. This motivated
us to build a corpus of executable vulnerabilities that is
linked to an automated exploit and test mechanism, al-
lowing for exploits to be observed and instrumented at
any point during the data collection and experimentation
process.

BugBox is a framework that streamlines the collection
and sharing of vulnerability data, facilitates cyber secu-
rity experiments, and furthers education on security vul-
nerabilities. It allows users to identify a vulnerability in
a web application, quickly develop an exploit script, and
collect execution traces of vulnerability data. The results
are packaged into a structured format that facilitates shar-
ing and collaboration. Exploits can also be demonstrated
by displaying a live web browser visualization that shows
the exploit being performed from the attacker’s perspec-
tive.

Security researchers and tool developers can use Bug-
Box to evaluate vulnerability mitigation techniques and
perform large-scale experiments in an environment that
can easily be guarded from contamination. The frame-
work also facilitates the generation of vulnerability run-
time data and measurements tailored to speciﬁc uses,
supporting efforts to characterize malicious trafﬁc and
validate security metrics. Developers and system admin-
istrators could also use BugBox to learn about vulnera-
bilities or aid in evaluation of intrusion detection or pre-
vention techniques. Finally, the BugBox framework and
its vulnerability modules are freely available, facilitating
future, collaborative development of additional modules

or the framework itself.

2 Related work

The vulnerability modules for BugBox leverage existing
databases of exploits and vulnerabilities, such as the Na-
tional Vulnerability Database [10], the Open Source Vul-
nerability Database [12], and the Exploit Database [11].
While these databases are easy to access and contain sig-
niﬁcant details of the vulnerability, they do not provide
a structured collection of vulnerable code that can sup-
port statistical analysis and hypothesis testing. By sup-
plying this corpus and an associated test environment,
BugBox compliments these databases by aggregating ex-
ploit procedures and data on a subset of the vulnerabil-
ities they contain. Another complimentary project, the
SAMATE reference dataset [9], provides vulnerability
data for the evaluation of vulnerability discovery meth-
ods. BugBox covers a smaller number of vulnerabilities
than SAMATE in greater detail, coupling each vulnera-
bility to an automated exploit environment and guaran-
teeing that the full source code for each application is
present.

Other efforts such as SecuriBench [8] and WebGoat
[13] collect vulnerable software for research or educa-
tional purposes, although the vulnerabilities are not in
the form of a structured corpus. Metasploit [14], a frame-
work for building and packaging exploits, is used inter-
nally by some BugBox modules to exploit their associ-
ated vulnerability, although Metasploit modules them-
selves do not contain vulnerable applications or other
vulnerability metadata. Various other non-security bug
prediction research efforts [4, 22] also aggregate various
metadata or source code from past defects.

A corpus of vulnerabilities coupled to a test mecha-
nism, such as BugBox, could beneﬁt various kinds of
security research. Static and dynamic analysis tools for
discovering vulnerabilities [2, 1] can be evaluated against
previously discovered vulnerabilities [7], which BugBox
provides for web applications. Attack prevention tech-
niques relying on runtime detection of exploits, such as
[19] and our own ongoing research in dynamic decen-
tralized intrusion detection, would be especially suitable
for evaluation with BugBox, as the test mechanism and
automated exploit scripts are leveraged in these cases.

Finally, the corpus of vulnerabilities provided by Bug-
Box can facilitate observational studies of vulnerabilities
[6] and empirical evaluations of metrics for vulnerability
prediction [15, 18]. The process of computing metrics
against a corpus was explored in more detail in our previ-
ous wiki corpus research [16]. In these cases, having the
entire source code of vulnerable applications is essential,
as the application’s vulnerable code must be compared
with the application’s entire code base.

3 An overview of BugBox

At the core of BugBox is a packaging system that wraps
vulnerabilities, vulnerable applications, and their ex-
ploits into redistributable modules. These modules are
automatically installed in an isolated chroot environ-
ment, that allows for the user to execute the exploit with-
out manually installing the application or risking con-
taminating a live system. Because only one application
is deployed in the target environment at any given time,
BugBox remains scalable as new modules are developed
and installed.

Modules also contain metadata that encodes properties
of the vulnerability, including an identiﬁer associating
each exploit with its entry in one of the public vulner-
ability databases. The included exploits are in the form
of scripts that automatically execute the exploit against
the application installed in the local target environment.
Because vulnerability installation and exploitation is au-
tomated through Python modules, large-scale automated
security experiments can be run by calling the relevant
functions in the provided API. The collection of exploit
execution traces is also automated, easing the process of
localizing vulnerabilities and exploits to particular sec-
tions of source code.

The exploit modules can also display the web browser
during exploitation, depicting the actions taken by the
Selenium driver through Firefox. This feature has been
useful for debugging exploits, and has led to quicker
turn-around in exploit development. This also allows for
demonstrations that teach others the principles behind
web vulnerabilities. Such a setup could entail showing
a live feed of tcpdump and Apache logs on one screen,
while one Firefox window shows the actions taken by
an attacker posting a malicious script on a forum, and
another Firefox window shows how an unsuspecting ad-
ministrator can activate a CSRF exploit and execute the
script.

3.1 Application packaging and the chroot

environment

A key function of BugBox is to manage packaged vul-
nerable applications in an automated way. BugBox pro-
vides an environment for the applications by creating
an operating system, a web server, and other dependen-
cies. Preconﬁgured applications can then be automati-
cally copied in this environment, so their prerequisites
are guaranteed to be present and they are in a state that is
exploitable. These environments are constructed by set-
ting up chroot jails on a Debian Linux host machine,
providing a virtual environment with less overhead than
a full VM (virtual machine).

A chroot jail supplies an isolated operating system

2

installation (sharing the kernel of the host), allowing
for applications, libraries, and conﬁgurations to be cus-
tomized and discarded as needed. These characteristics
are important for BugBox, as some applications have
conﬂicting dependencies, and exploits could corrupt the
host environment. We create a chroot environment by
running the debbootstrap utility supplied by Debian
which generates a fresh installation from the ofﬁcial dis-
tribution repositories. Because this environment can be
based on any Debian release, different versions of the
application dependencies can coexist on a single host
machine. These dependencies include software such as
Apache, PHP, and MYSQL, and their dependant system
libraries from a variety of vintages, as some older ver-
sions of applications depend on older releases of this de-
pendant software.

The chroot jail meets BugBox’s needs for isolation
and state management in a more lightweight manner than
creating a full VM. The operating system virtualization
features provided by VMs are not needed, as PHP web
applications (and most of their vulnerabilities) are typ-
ically platform independent. While VMs have superior
capabilities for creating system snapshots and perform-
ing state recovery, they consume considerable RAM re-
sources, and starting, stopping, and managing them is
more cumbersome. Backing up and periodically clean-
ing up the environment with rsync was found to be ad-
equate for restoring the system to its unadulterated state,
eliminating the need for VM snapshots.

Debootstrap and related tools allow the BugBox en-
vironments to be distributed as a set of scripts, allowing
users to build the whole environment from a single set
of scripts. The scripts automatically install the necessary
Debian packages from an ofﬁcial mirror, and they per-
form the necessary conﬁguration so the environment is
ready to run the web applications. Each environment is a
single folder which contains a complete Debian installa-
tion. The environment can be maintained by using basic
ﬁle IO operations, allowing scripts to install and remove
vulnerabilities by copying and deleting ﬁles and avoid-
ing the delays that would be associated with rebooting
and rolling back a VM. Although multiple vulnerabili-
ties cannot be concurrently installed in a single BugBox
environment, removing one application and installing an-
other can be accomplished quickly and automatically.

Because BugBox hosts applications containing known
vulnerabilities, it is recommended for it to be deployed
in an environment isolated from the internet. This en-
sures the security of the system and that any measure-
ments taken are free from the inﬂuence of external traf-
ﬁc. If such an environment is not readily available, Bug-
Box can be installed on a single VM, which can have its
internet-facing network interfaces removed after installa-
tion. As several BugBox chroot jails can coexist on one

VM, an existing VM can be used for this purpose if one
is available.

3.2 Exploit and vulnerability packaging
Applications that are installed in the BugBox environ-
ment are packaged in Python modules called target mod-
ules. Target modules include the vulnerable application’s
PHP ﬁles, the application’s database, and metadata on
the target’s dependencies. The BugBox framework loads
the target module into a chroot environment by iden-
tifying a Debian version that satisﬁes the module’s de-
pendencies, mounting the module into the environment’s
ﬁlesystem, and running the database scripts against the
local MySQL installation. Modules are removed by re-
moving the module’s ﬁles from the environment. Be-
cause we load a clean application into the chroot jail
every time a new test is run, there is no corruption of the
original web application, providing reproducible results
when testing.

A second kind of BugBox module, the exploit module,
contains information on a vulnerability and a scripted ex-
ploit. Developing BugBox-speciﬁc exploit scripts is con-
siderably simpler than writing general-purpose exploits,
because applications in BugBox are installed in a pre-
dictable environment which is repeatedly reset to its orig-
inal state. The format of a BugBox exploit module re-
sembles an exploit in the Metasploit framework, includ-
ing the CVE number, the vulnerability type, a link to the
page on BugBox’s wiki where the module is maintained,
and other metadata. Below is an example of this meta-
data:

Name
Description

CVE 2012 2403
Creates a post containing a
XSS payload.
CVE 2012-2403, OSVDB 81463
Wordpress 3.3.1
XSS
WIKIHOST/CVE-2012-2403

References
Target
Type
VulWikiPage
These attributes serve to document the module’s ex-
ploit and associated vulnerability. They are also used
by the BugBox framework to perform batch processes
across all available exploits, such as displaying informa-
tion about exploits meeting certain criteria. These pro-
cesses can be extended by scripts calling the BugBox
API, grabbing collections of exploit instances based on
regular expressions matching the attributes.

Scripted exploits are implemented as methods in ex-
ploit modules. These scripts leverage Selenium, a script-
able application that drives and automates web browsers
such as Firefox. Selenium integrates with the frame-
work through stable and well-documented Python bind-
ings, providing demonstration/visualization capabilities,
JavaScript support, and easy interaction with HTML ob-
jects. The exploit code interacts with Selenium to per-

3

form pre-exploitation checks of the target and executes
the exploit by automating a browser.

3.3 Collection of traces and vulnerability

localization

An important activity associated with empirical vulner-
ability research is representing which functionality, or
section of code, accounts for the vulnerable aspect of the
program. We refer to this task as vulnerability localiza-
tion, and BugBox is designed to collect structured trace
data that assists in the localization process. The BugBox
environment includes an execution trace collector sup-
ported by XDebug, which automatically traces the PHP
application’s execution while the exploit takes place.

We categorize the vulnerability representations previ-
ously used in research as being line-based, run-based, or
trace-based. A line-based approach for vulnerability rep-
resentation associates particular lines of a program with a
vulnerability. This data can easily be collected by mining
vulnerability data from program patches [5]; however,
there can be multiple ways to ﬁx a vulnerability, and a
patch represents only one of those ways and may con-
tain irrelevant changes. Run-based representations and
signatures [3] characterize vulnerabilities by describing
the inputs that may exploit them, rather than the lines of
code that were faulty.

We are developing a third, trace-based approach for
localizing vulnerabilities. Execution traces of individ-
ual requests are classiﬁed by a regular language as po-
tentially exploitative or non-exploitative. This approach
allows for representations to be crafted that include the
source code artifacts that were invoked during exploita-
tive runs, capturing each opportunity where sanitiza-
tion or other defensive programming could have pre-
vented the attack. By collecting execution traces of ex-
ploits, BugBox facilitates the construction of run-based
or trace-based representations.

4 Adding vulnerabilities to BugBox

To add a new vulnerability to the corpus, several artifacts
must be compiled. A new exploit script and metadata are
always required. If a module does not yet exist for the
target application, a new target module must also be de-
veloped. Although the BugBox corpus compiles vulner-
abilities from open-source applications, it is sometimes
hard to obtain the vulnerable versions of an application.
Therefore, creating the target module may involve hunt-
ing down application versions from third-party website
or searching through the branches of a source repository.
Once the application has been obtained, a manual execu-
tion of the exploit is performed to verify the vulnerability
report’s claims and that the exploit mechanism is fully

understood. Subsequently, the exploit script is written so
that the entire process can be recorded in an entry in the
corpus. As a ﬁnal step, the exploit is run against the tar-
get while the debugger collects the execution trace of the
program, which is then added the corpus.

Some vulnerable applications require old versions of
dependencies (such as PHP or Apache) not present in the
target environment, necessitating a new operating system
instance. Because, as we have veriﬁed, some older Linux
distributions can run under a newer kernel, this can be
accomplished by simply creating a new chroot environ-
ment. Because most PHP web applications do not have a
wide range of system dependencies, the application tar-
gets will only require a handful of different OS environ-
ments.

5 An Example Execution of BugBox

The following Python scripts illustrate two use cases for
the BugBox framework. Both of these examples show
ways to make use of vulnerability metadata to perform
different tasks.
In the ﬁrst example, all XSS vulnera-
bilities in the the corpus are sequentially exploited, and
execution traces are collected for analysis:
1
2
3
4
5
6
7
8
9
10
11

engine = Engine ( Exploit () , config )
engine . startup ()
engine . x d e b u g _ a u t o t r a c e _ o n ()
engine . exploit ()
engine . x d e b u g _ a u t o t r a c e _ o f f ()
engine . s h u t d o w n ()

for Exploit in Query (). g e t _ b y _ t y p e (...
‘ XSS ’ ):

import config
from f r a m e w o r k import Query , Engine

import config
from f r a m e w o r k import Query , Engine

Here, instead of collecting traces for all vulnerabilities
of the same type, we are interested in running all exploits
across all versions of a given application (for example, to
test an intrusion detection system which was installed in
the test environment before running this process):
1
2
3
4
5
6
7
8
9
10
11
12

engine = Engine ( Exploit () , config )
engine . startup ()
engine . x d e b u g _ a u t o t r a c e _ o n ()
engine . exploit ()
engine . x d e b u g _ a u t o t r a c e _ o n ()
engine . s h u t d o w n ()

‘ Target ’ , ‘ W o r d p r e s s .* ’ ):

for Exploit

in Query (). g e t _ b y _ r e (...

For simple tasks where the focus of study is a single
vulnerability or vulnerable application, the application
can be managed from the command line. Some basic
commands are provided in the bbmanage.py utility with
the following options:

4

teardown work. The Engine will prepare a chroot en-
vironment by mounting target operating system and web
application folders under the environment, load a stored
MySQL database, install the appropriate XDebug PHP
debugger conﬁguration ﬁle, start the web server, and
eventually perform cleanup operations associated with
these steps.

To illustrate the role of the engine, the following lines

in the ﬁrst use case are relevant:
Line 5 engine = Engine(Exploit(), config)

A new engine instance is constructed with an ex-
ploit instance and system conﬁguration as argu-
ments.

Line 6 engine.startup()

The engine creates a chroot environment on the
host system to which the target application is
copied. The choice of application is determined by
the ’Target’ attribute in the exploit instance.

Lines 7 & 9 engine.xdebug autotrace on()

engine.xdebug autotrace on()
The engine can modify the state of the trace collec-
tion in X Debug to ensure that only the trace perti-
nent to the exploitation is collected.

Line 10 engine.shutdown()

This cleanup code unmounts the chroot environ-
ment and returns the corpus environment back to an
un-altered state.

6.2 Target module
The Target module contains logic relevant to deploying
the application target that the exploit may be applied to.
More speciﬁcally, an application target is a speciﬁc ver-
sion of a PHP web application such as WordPress. A
copy of the target application with a typical conﬁgura-
tion is always loaded before any exploit script is run. For
each application, an initialization script is written to pro-
vide the Engine with the proper details for the installa-
tion; for example:
1
2
3
4
5
6
7
8

d a t a b a s e _ n a m e = " w o r d p r e s s _ 3 _ 3 _ 1 _ A "
c h r o o t _ e n v i r o n m e n t = " Debian7 "

name = " W o r d p r e s s 3.3.1 "
a p p l i c a t i o n _ d i r _ m a p p i n g = ...

[ g e t _ p a t h ( " a p p l i c a t i o n " ) , ...

" / var / www " ]

d a t a b a s e _ f i l e n a m e = ...

g e t _ p a t h ( " d a t a b a s e . sql " )

Some large web applications, such as WordPress,
have many plugins that have vulnerabilities themselves.
Therefore, Target modules also allow for the inclusion
of plugins in the exploit framework. Both targets and
target plugins are resolved against the exploit attributes
by the Engine during the setup process.

5

Figure 1: System Diagram

Usage: ./bbmanage.py [command] <options>

Commands:
list

Options:
<exploits | targets |

info
start
exploit
stop
trace_on
trace_off
autorun

types

| running>

<exploit_name>
<exploit_name>
<exploit_name <display>>
<exploit_name>
<exploit_name>
<exploit_name>
<exploit_name>

6 Framework

Figure 6 illustrates the structure of the BugBox system,
with arrows representing lines of control or communi-
cation. The framework contains ﬁve components: Host
Environment (the physical or virtual machine running
BugBox), Engine, Target Environment (the chroot
environment), Target Module, and Exploit Module.
The corpus is composed of exploits, chroot jails, target
applications, and associated plugins for target applica-
tions. Exploits and chroot jails are under control of the
engine, and the exploits interact directly with the target
application (during exploitation) through the Selenium
Server or libraries such as urllib. All databases associ-
ated with the target applications are hosted directly on the
host environment, and the database server is under con-
trol of the engine. Except for the host environment, each
of the ﬁve major components are represented directly in
BugBox as either a Python module or a package.

6.1 Engine
It is the job of the Engine to match exploits with target
modules and actually perform setup, conﬁguration, and

56.3 Exploit class
The Exploit class is the superclass for each exploit in
the corpus, deﬁning interfaces and attributes that the en-
gine uses to manage the environment and exploitation.
The Exploit class is structured such that exploits can be
written with concise code functions. Each exploit is sim-
ply a subclass of Exploit residing in its own Python ﬁle.
This class ensures that the Selenium driver is properly
initialized and bound to each exploit, and that each ex-
ploit script can deﬁne actions to take upon installation.

The separation between targets and exploits allows for
those unfamiliar with the framework to develop exploits
without being concerned with the application or envi-
ronment setup process, allowing BugBox to be extended
without having to learn the intricacies of the entire frame-
work.

Metadata for the exploit module is provided by its at-
tribute dictionary. In it, we declare the name, descrip-
tion, references, target, type, and wiki page for the ex-
ploit. The name is the identiﬁer speciﬁed in one of the
online databases of vulnerabilities mentioned earlier in
this paper. The description is a brief statement of what
the exploit is supposed to do, because the name is typi-
cally does not describe what type of exploit is being ap-
plied. The Target is the web application module which is
being used for the exploit. The type is the type of exploit
being conducted (such as XSS). The wiki page directs a
user to a page where auxiliary information about the ex-
ploit or script is recorded. The Query module, also part
of BugBox, allows for this metadata queried across all
exploits (as described in the use cases).

Here is an example body of an exploit procedure used
for a simple XSS attack. Scripting the exploit only re-
quires instantiating the Selenium driver and submitting a
request on the WordPress site with the payload:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22

payload = " <a href =\"#\" title =\" XSS

http : " // example . com /
o n m o u s e o v e r = eval ( "
" u n e s c a p e (/%61%6 c %65% "
" 7 2 % 7 4 % 2 8 % 3 1 % 2 9 % 3 b %61 "
" %6 c % 6 5 % 7 2 % 7 4 % 2 8 % 3 2 "
" %29%3 b %61%6 c %65%72 "
" % 7 4 % 2 8 % 3 3 % 2 9 % 3 b /. "
" source ))//\ " > XSS </ a > "

\
\
\
\
\
\
\
\

driver = self . c r e a t e _ s e l e n i u m _ d r i v e r ()

driver . get (...

" http :// l o c a l h o s t / w o r d p r e s s /? p =1 " )

get = driver . f i n d _ e l e m e n t _ b y _ i d
get ( " author " ). s e n d _ k e y s (...

" s e l e n i u m script " )

get ( " email " ). s e n d _ k e y s (...
" s e l e n i u m @ p y t h o n . org " )

get ( " url " ). s e n d _ k e y s ( " www . python . org " )
get ( " comment " ). s e n d _ k e y s ( payload )
get ( " submit " ). click ()

6.4 Cleanup and maintenance
Functionality that performs cleanup and maintenance are
included in BugBox to ensure that results based on the
framework are reproducible. There are many changes
that occur in the system over the course of the ex-
ploit cycle that will potentially need to be eliminated.
Even changes that would normally seem innocuous, like
recording events to a log ﬁle, have the potential to at
some point change program behaviour.

Since the chroot environments on the host machine
are represented as directories in the host ﬁlesystem,
simple scripts are used to maintain them. Scripts us-
ing rsync are employed to periodically overwrite the
chroot jails with fresh copies to maintain the integrity
of their operating systems. Exploit scripts are also re-
sponsible for removing their own side-effects from the
target application. For instance, many exploits upload
an arbitrary ﬁle to be executed by the webserver. The
exploit classes can implement a cleanup method which
has direct access to the target ﬁlesystem, allowing for the
environment to be restored to its pre-exploitation state.

7 Lessons learned

In developing BugBox, we learned four key lessons, in-
volving: the need for multiple versions of environments,
the utility of visual aids to speed up exploit script devel-
opment, the importance of representative sampling, and
the beneﬁts of building a modular system.

Being able to install web applications onto multiple
operating system environments is a critical factor in cor-
pus development. When creating a corpus, a wide va-
riety of examples is required, including web application
versions that are outdated. Some of these outdated ap-
plications have dependencies on older software versions,
which are only included with obsolete Linux distribu-
tions. For this reason, we ensured that BugBox sup-
ported the use of multiple environments with different
Linux distributions.

Exploit script development is a repetitive and neces-
sary process. We found that the instant feedback pro-
vided by the Selenium visual framework allowed us to
more rapidly create exploit scripts. Being able to visu-
ally monitor the execution of the scripts allows develop-
ers to efﬁciently pinpoint errors, streamlining script gen-
eration.

Originally, when collecting samples for our corpus,
we failed to focus on collecting a representative sample
across independent variables such as vulnerability type
and age. Having a proper sample is important when
evaluating exploit prevention techniques [17] or analyz-
ing source code metrics, to ensure that the result is fair
and representative. We will remediate this by collect-

6

ing new vulnerabilities and stratifying the sample across
these variables, and we recommend that future teams col-
lecting vulnerability data apply proper sampling proce-
dures as early in the process as possible.

In our original implementation of this framework,
each vulnerability was permanently installed on a sep-
arate virtual machine image. We found that introduc-
ing new processes which affected the entire corpus (such
as beginning to collect execution traces) required large
amounts of labor, repeating the process for each VM.
The BugBox framework automatically installs vulnera-
ble applications onto a test environment which can be
customized at any time, speeding up these tasks. Repet-
itive research tasks are further facilitated by the use of
Python as a layer of abstraction above the target environ-
ment, target application, and exploits.

7.1 Ethical Considerations
BugBox is a powerful tool for researchers which could
potentially provide a foundation for a fully automated at-
tack platform for malicious attackers. With this in mind,
we implemented measures to decrease the potential for
malicious use of our system through two rules:

First, no zero-day exploits will be added or accepted
to the main distribution of BugBox. Because BugBox is
used for research and education, it is sufﬁcient to limit
the scope of BugBox to historical vulnerabilities which
are already cataloged in any well-known vulnerability or
exploit database. Next, all new exploits created or ac-
cepted for the framework will only include functionality
necessary to test the vulnerability in the BugBox envi-
ronment and will not contain code that is tailored toward
a general-purpose attack. This provides more overhead
for an attacker considering using this tool maliciously.
Signiﬁcant modiﬁcation would be required for an exploit
script to carry an actual malicious payload or target vul-
nerable applications in an unpredictable, real-life envi-
ronment. Although it is not practical to prevent any user
from maliciously using an exploit repository, including
our own, by implementing these measures, we seek to
limit the audience of malicious users.

8 Future work

We plan to implement additional features for controlling
trace collection through cookie manipulation via XDe-
bug. This will reduce the collection of insigniﬁcant inter-
actions (such as pre-exploit setup requests) and provide a
more reﬁned break-down of the exploitation process, as
traces would be grouped by HTTP request.

The exploits in the corpus have no standard method
for selecting the payload which will used in the attack.

Since studies on intrusion detection or prevention sys-
tems may be sensitive to the payload type and encod-
ing, researchers may desire ﬁner-grained control over
this property. The Metasploit Framework has a robust
system for managing exploits along with their payloads
and encodings, serving as a model for implementing this
if needed.

More information on obtaining BugBox for research
use is available from our website: http://seam.cs.
umd.edu/Projects/BugBox/. BugBox is designed to
work on the Debian GNU/Linux and compatible distri-
butions. The framework can be obtained in the form of
a package which can be installed on an existing system.
The system must have sufﬁcient storage (roughly 4 GB
per OS environment, and up to 2 GB for the applica-
tion, engine, and exploit sources) with access rights to
use run Linux chroot jails. Dependencies for the Bug-
Box host system include MySQL, Selenium Server, and
debootstrap. Community contributions will be key to
building a corpus of sufﬁcient size, therefore, commu-
nity members may contribute BugBox exploit and target
modules as described on the website. The framework is
distributed under an open-source license. Because the
corpus is composed entirely of open-source applications,
target modules will be distributed under the application’s
respective license.

Acknowledgments

The authors thank the United States Ofﬁce of Naval Re-
search for its support for this research under contract
N000141210147.

References

[1] ANTUNES, N., AND VIEIRA, M. Comparing the effectiveness
of penetration testing and static code analysis on the detection of
sql injection vulnerabilities in web services. In Proceedings of
PRDC’09: 15th IEEE Paciﬁc Rim International Symposium on
Dependable Computing. (2009), IEEE, pp. 301–306.

[2] AUSTIN, A., AND WILLIAMS, L. One technique is not enough:
In Pro-
A comparison of vulnerability discovery techniques.
ceedings of Empirical Software Engineering and Measurement
(ESEM), International Symposium on (Sept 2011), pp. 97 –106.

[3] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND
JHA, S. Theory and techniques for automatic generation of
vulnerability-based signatures. Dependable and Secure Comput-
ing, IEEE Transactions on 5, 4 (Oct-Dec 2008), 224 –241.

[4] D’AMBROS, M., LANZA, M., AND ROBBES, R. An extensive
comparison of bug prediction approaches. In Proceedings of Min-
ing Software Repositories (MSR), 7th IEEE Working Conference
on (2010), IEEE, pp. 31–41.

[5] FONSECA, J., AND VIEIRA, M. Mapping software faults
with web security vulnerabilities. In Proceedings of IEEE DSN
’08 Conference on Dependable Systems and Networks (2008),
pp. 257 –266.

7

[6] HUYNH, T., AND MILLER, J. An empirical investigation into
open source web applications implementation vulnerabilities.
Empirical Software Engineering 15, 5 (2010), 556–576.

[7] KU, K., HART, T. E., CHECHIK, M., AND LIE, D. A buffer
overﬂow benchmark for software model checkers. In Proceedings
of the twenty-second IEEE/ACM international conference on Au-
tomated software engineering (New York, NY, USA, 2007), ASE
’07, ACM, pp. 389–392.

[8] LIVSHITS, B. Deﬁning a set of common benchmarks for web
application security. In Workshop on Deﬁning the State of the Art
in Software Security Tools (Baltimore, August 2005), Citeseer.

[9] NIST. Samate reference dataset. http://samate.nist.gov/

SRD/.

[10] NIST. National vulnerability database. http://nvd.nist.

gov/, 2013.

[11] OFFENSIVE SECURITY.

exploit-db.com/.

Exploit db.

http://www.

[12] OFFENSIVE SECURITY. Osvdb: The open source vulnerability

database. http://www.osvdb.org/, 2013.

[13] OWASP.

Webgoat.

webgoat/, 2013.

https://code.google.com/p/

[14] RAPID7. Metasploit framework. http://www.metasploit.

com/, 2013.

[15] SHIN, Y., MENEELY, A., WILLIAMS, L., AND OSBORNE, J. A.
Evaluating complexity, code churn, and developer activity met-
rics as indicators of software vulnerabilities. Software Engineer-
ing, IEEE Transactions on 37, 6 (2011), 772–787.

[16] STUCKMAN, J., AND PURTILO, J. Analyzing the wikisphere:
Methodology and data to support quantitative wiki research.
Journal of the American Society for Information Science and
Technology 62, 8 (2011), 1564–1576.

[17] STUCKMAN, J., AND PURTILO, J. A testbed for the evaluation
of web intrusion prevention systems. In Proceedings of MetriSec:
International Workshop on Security Measurements and Metrics
(Sept 2011), IEEE, pp. 66 –75.

[18] STUCKMAN, J., AND PURTILO, J. Comparing and applying at-
tack surface metrics. In Proceedings of MetriSec: International
Workshop on Security Measurements and Metrics (2012).

[19] SU, Z., AND WASSERMANN, G. The essence of command injec-
tion attacks in web applications. In Conference record of POPL
’06: The 33rd ACM SIGPLAN-SIGACT symposium on Principles
of programming languages (New York, NY, USA, 2006), ACM,
pp. 372–382.
[20] WHITEHAT.

Website security statistic report 9th edi-
https://www.whitehatsec.com/assets/WPstats_

tion.
spring10_9th.pdf, 2010.

[21] WILLIAMS, C., AND HOLLINGSWORTH, J. Automatic mining
of source code repositories to improve bug ﬁnding techniques.
Software Engineering, IEEE Transactions on 31, 6 (June 2005),
466 – 480.

[22] ZIMMERMANN, T., PREMRAJ, R., AND ZELLER, A. Predicting
defects for eclipse. In Proceedings of PROMISE’07: ICSE Work-
shop on Predictor Models in Software Engineering (may 2007),
p. 9.

8

