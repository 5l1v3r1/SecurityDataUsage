Vanity, Cracks and Malware

Insights into the Anti-Copy Protection Ecosystem

Markus Kammerstetter, Christian Platzer and Gilbert Wondracek

Vienna University of Technology

Vienna, Austria

{mk,cplatzer,gilbert}@iseclab.org

ABSTRACT
Today, a large amount of software products include mecha-
nisms to counter software piracy. However, most protection
mechanisms can be easily circumvented by applying soft-
ware patches (cracks) or license key generators (keygens)
with seemingly no (cid:12)nancial incentives. Our research shows
that the distribution of cracks and keygens not only al-
lows miscreants to generate revenue (e.g.
through adver-
tising or malware infections), but it also leads to high risks
for the end-users of pirated software. We collected more
than 43; 900 download links and analyzed more than 23; 100
(3; 551 unique) real-world cracks, showing that these tools
are heavily used by criminals to spread malware. Our re-
sults indicate that even state of the art virus scanners can
not fully protect users from these threats. Moreover, we
conducted a manual analysis, showing how many cracks and
keygens actually work and how much e(cid:11)ort is necessary to
acquire them. In addition, we made our data-set publicly
available to the research community.

Categories and Subject Descriptors
K.6.5 [Management of computing and information
systems]: Security and Protection|Invasive software; C.2.0
[Computer-Communication Networks]: GeneralSecu-
rity and Protection; D4.6 [Operating Systems]: Security
and Protection; Invasive software

General Terms
Economics, Measurement, Security

Keywords
Piracy, Malware, Internet measurements, Underground econ-
omy

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.

1.

INTRODUCTION

Software copyright infringement or software piracy is a
serious threat to commercial software developers worldwide.
While deriving exact numbers is hard, it is commonly as-
sumed that the accumulated economic damage from soft-
ware copyright infringement ranges in the order of several
tens of billions of dollars [15, 22].

As a consequence, software manufacturers regularly inte-
grate technical protection mechanisms in their products that
aim at preventing unauthorized copying and redistribution.
Examples of such protection mechanisms include serial num-
ber or license key checks that are performed when installing
the protected software products. Some manufacturers even
go as far as requiring special hardware called \dongles" to be
present in the user’s system to successfully run the software.
While these and similar countermeasures have been estab-
lished in the industry since more than three decades [28], a
recent study covering 116 countries [15] claims that about
42% of the globally installed software products are \pirated".
Even considered conservatively, this indicates the rela-
tive ine(cid:11)ectiveness of these measures and concurrently sup-
ports the claim that software piracy is a very common phe-
nomenon. On a technical level, hackers and criminals typ-
ically try to circumvent anti-piracy measures by creating
and distributing speci(cid:12)c software patches or even custom
reverse-engineered serial number generators for commercial
products, called cracks and keygens in the scene jargon.

Users who look for \cracked" software products can typi-
cally access either the unmodi(cid:12)ed original software through
established (cid:12)lesharing systems like Bittorrent, One-Click-
Hosters (OCH), or via Usenet downloads, or download bun-
dles of the original software and cracks or keygens. Addi-
tionally, some types of cracks target legitimate evaluation
copies of software products that are published by the actual
manufacturer to attract potential customers. In these cases,
the attacker’s aim is to emulate or unlock restricted features,
thus upgrading the evaluation version to the full-priced soft-
ware product.

Interestingly, relatively little academic research has been
published in recent years on this topic. In particular, anec-
dotal evidence strongly hints at criminals using cracks and
keygens as an attack vector to distribute malicious software
such as trojans or viruses.

In this work, we (cid:12)rst elaborate on how we collect a large
test-set of real-world cracks and keygens, and then perform
a number of experiments to evaluate the maliciousness of
this software. We demonstrate that, in addition to the di-
rect economic damage caused by software copyright infringe-

809ment, there are signi(cid:12)cant risks for many end-users who use
pirated software. Finally, we conclude that there is a re-
warding opportunity for malware researchers and anti-virus
companies to collect novel malware samples from sources
related to software piracy. Furthermore, we show that the
circumvention of copy protections is embedded in an active
ecosystem, describing its actors and interdependencies. In
particular, the main contributions of this work are:

(cid:15) We collected more than 43; 900 download links and
performed automated and manual analysis on more
than 23; 100 (3; 551 unique) resulting real-world crack
downloads, providing deep insights into how cracks
and keygens are used to spread malware.

(cid:15) To gain a systematical understanding of the ecosys-
tem surrounding cracks and keygens, we describe the
motivations and possible sources of revenue of its par-
ticipants.

(cid:15) We performed a dynamic behavior analysis of infected
binary samples to determine how malicious these sam-
ples really are and present results.

(cid:15) We made our data-set publicly available to the research
community for download to drive future research in
that direction.
1.1 Motivation

Recent publications [24, 27, 26, 25] have shown that web-
sites and binaries related to software piracy are more likely
to be infected with malware. This is supported by (cid:12)nd-
ings on the thriving underground economy and its links to
software piracy, which has grown into a pro(cid:12)table, global
business [17, 18, 19]. Gullible users who download anti copy-
protection tools such as cracks and key generators are among
the typical targets of shady business practices and cyber-
crime. Criminals covertly infect their systems with malware
and transform them into malicious bots that are controlled
by criminals to commit or support attacks or sending spam.
Given the large scale of software piracy, we decided to fur-
ther investigate on the risks that users are facing through
the use of these tools, the possible monetary gains for the
criminals, and the supporting roles and actors in the piracy
ecosystem.

2. RELATED WORK

In 2008, Iklinci, Holz and Freiling introduced the honey-
client system Monkey-Spider [24] to detect malicious web-
sites. Their results show that web content speci(cid:12)c to piracy
or games is more likely to be malicious than benign content
and domains related to anti-copy protection tools are among
the most malicious domains. However, they do not specif-
ically target anti-copy protection tools such as cracks and
key generators.

Moshchuk, Bragin et al. did a Crawler-based Study of
Spyware on the Web [27]. Similar to our approach, they
employ a virtual machine-based analysis platform to scru-
tinize collected executables. Their study proves that there
is a strong correlation between software piracy and Spyware
infections, but unlike our work, does not focus on cracks and
keygens.

In a sociological study [26], Limayem et al.

show that
there are many factors motivating software piracy and that

the usual software pirate is in fact no computer expert.
Their work indicates that software piracy is not only a very
common problem, but also suggests that due to the lim-
ited amount of computer literacy, systems of software pi-
rates might not be protected well enough to combat malware
found in cracks and keygens.

In [25], Gantz et al. investigate the security risks involved
with using cracks and key generators, showing that the vast
amount of these tools is infected with malware. Although
they use an approach similar to our manual analysis ap-
proach, their analysis concentrates on a relatively small set
of samples. In contrast, our work covers the underground
economy aspects and employs both manual and automated
collection and analysis approaches on a large set of samples.

3. THE SOFTWARE PIRACY ECOSYSTEM
While cracks and key generators are speci(cid:12)c tools to cir-
cumvent copy protections, they only represent a small frac-
tion of the software piracy ecosystem. In the following, we
give an overview of the involved actors and groups as well
as their incentives and interdependencies.
3.1 Warez Groups

Underground Warez groups focus on the distribution of
protected or copyrighted media, such as movies, music, or
software (\warez") in the scene.

Usually, individual members of these groups are also the
authors of cracks and keygens [23]. Unlike typical cybercrim-
inals, for example, botnet operators, the primary motivation
of these groups is not monetary gain. Rather, it seems to be
some type of \vanity contest", based on competition among
di(cid:11)erent warez groups, with the aim of being the (cid:12)rst - and
thus, most respected - group to release a crack or keygen for
a speci(cid:12)c software product [23, 21, 29].

To be able to actually write cracks and keygens, access
to the original software products is necessary. To this end,
warez groups share original media that they acquired among
each other, usually via private sites and servers. This is sig-
ni(cid:12)cantly di(cid:11)erent to public end-users, who have to resort to
public (cid:12)le-sharing networks like One Click Hosters (OCHs),
peer-to-peer networks or binary Usenet groups [23, 20]. As
we will see later, the intermediate distribution steps between
warez groups and the end-users of pirated media allow other
miscreants to spread malware and gain monetary pro(cid:12)ts.
3.2 Hosting Providers

To distribute cracks and keygens to end-users, third-party
hosting providers are used by warez groups. There are sev-
eral types of such hosting providers, typically they all allow
revenue to be made through the subsequent downloads of
cracks and keygens. Pay-Per-Download (PPD) hosters such
as Sharecash [12] or Honeycontent [7] allow publishers to
earn money by sharing (cid:12)les or links to content.
If users
want to access the content on a PPD hoster, they usually
need to complete manual tasks, like (cid:12)lling out surveys, to un-
lock the download. The advertisement fees for these surveys
are then distributed among the PPD hoster and the con-
tent publisher. One-Click Hosters (OCHs) follow a similar
scheme: Content publishers can upload (cid:12)les, but download-
ing users either have to pay for premium accounts or they are
punished with slow download speeds, long waiting times or
other limitations supported by advertising. Dedicated Crack
Hosters like Crackstorage.net are websites that specialize in

810hosting cracks and keygens. Typically, they do not allow vis-
itors to search for the stored (cid:12)les, which can be considered
a counter-measure against crawling or enumeration of their
content. Instead, downloads are available via direct, deep
links, for example obtained through a third party search en-
gine like Astalavista.box.sk [2] or forums. Through advertis-
ing and by partnering with indexing sites, they can generate
revenue from crack and keygen downloads. Malware hosters
typically set up sites for hosting malware, often disguised as
cracks or keygens. Unsuspecting users then download and
execute the malware and thus generate revenue for the mal-
ware hoster. Other hosting types like Usenet newsgroups or
P2P networking do not directly generate revenue through
cracks and keygens. However, through combinations with
other hosting types like PPD hosting, the uploader can still
make money. Recent studies show that contributions to P2P
networks can be pro(cid:12)t-driven as well, for instance by seeding
content that includes advertisements for web sites or private
BitTorrent portals [18].
3.3 Malware Distributors

The distribution of malware has grown into a booming
underground economy. A recent study [17] states that due
to market forces in the underground economy, a signi(cid:12)cant
amount of malware no longer incorporates spreading mech-
anisms on its own.
Instead, a whole service culture has
evolved, leading to providers that o(cid:11)er a wide range of spe-
cialized services ranging from malware or packaging toolk-
its for Anti-Virus evasion to infection services (Pay-Per-
Install ). In fact, out of the world’s top 20 most prevalent
families of malware, 12 employ PPI services to buy infec-
tions [17]. In general, a PPI provider receives malware ex-
ecutables from clients and charges money for a requested
number of malware installs. The actual installs are mostly
done through (cid:12)nancially compensated a(cid:14)liates that focus
on di(cid:11)erent infection vectors. Our results indicate that up-
loading infected cracks and keygens is at least one of them.
Since the malware comes from clients, it can be virtually
anything, ranging from botnet bots to ad- and spyware dis-
tribution or click fraud. However, in general the income
generated through the malware will outweigh the costs for
the PPI service.

4. ANALYSIS

Here we describe how we retrieved and analyzed pirated
programs and key generators. To provide a realistic set
of samples, we utilized several di(cid:11)erent facilities to gather
them. At the same time we aimed to follow roughly the
same procedures a real user would perform to download the
desired crack.
4.1 Manual Data Acquisition

We followed two approaches to acquire software cracks and
key generators. First, we placed ourselves in the role of a
user manually searching for a speci(cid:12)c crack and key genera-
tor. This allowed us to conduct experiments that are related
to the user experience (e.g. how much e(cid:11)ort is necessary to
successfully circumvent a copy protection mechanism) and
the risks involved with the execution of anti-copy protection
tools.

As there are thousands of di(cid:11)erent software products and
anti-protection tools available, we restricted our search to
the most prominent products in the categories games and

Application
Game
Adobe Photoshop CS5.1 Brink
Ahead Nero 10
Microsoft O(cid:14)ce 2010
Norton 360
WinRAR 3.93

Crysis 2
Fable III
Portal 2
The Sims 3

Table 1: Top 5 Applications and Games

applications. To this end, we combined commercial rank-
ings (i.e. Amazon.com [1] and Download.cnet.com [6]) with
download numbers from Thepiratebay.org [3], one of the top
providers for pirated software. A listing of the top (cid:12)ve ap-
plications and games can be found in Table. 1.

Just as any user would, we (cid:12)rst utilized the Google search
engine to issue a query. We also used Astalavista.box.sk [2],
a well known search engine for anti-copy protection tools.
From the search results, we followed links that were most
likely to directly lead to a crack or key generator for a speci(cid:12)c
product. We assumed that this was especially the case, when
the links included the precise version information for the
product we were looking for (e.g. \Adobe CS5.1 All products
Crack By tEAM RED HOT"). Accompanying our manual
analysis (see Section 4.3.1), we manually collected 363 direct
download links over a period of 3 months.
In total, this
led to 242 executable cracks or key generators, from which
141 were unique and 101 were duplicates. We considered
an executable a duplicate, if there was another executable
with the same MD5 sum within our downloads. The overall
download results are visible in Table 8 in the Appendix.

Our approach led to a wide range of di(cid:11)erent sites with
downloads from regular web hosters, dedicated crack hosters
like Crackstorage.net, One Click Hosters (OCHs) and the
BitTorrent P2P Network. At this point, we observed how
many links we had to follow (i.e. the link depth) from the
search engine result to the actual download. The result is
visible in Figure 1. Our observations indicate, that in order
to reach 80% of the downloads, a user needs to follow at
least 4 links from the actual search result. If up to 3 links are
followed, only about 43% of the downloads can be reached.

Figure 1:
Crack/Keygen Download (CDF)

Average Link Depth to reach a

12345678LinkDepth020406080100Percentage811Throughout our observations, we had to follow up to 8
links to (cid:12)nally reach the real download site. The web sites
between the search result and the actual download site are
frequently either advertising or link collection sites, allowing
the site operators to generate additional revenue, presum-
ably with the generated tra(cid:14)c. In general, search engine-
powered downloading of cracks and keygens is a cumbersome
task.
4.2 Automated Data Acquisition

Following up to the manual approach, we automatically
retrieved a high number of cracks and key generators for a
wide range of di(cid:11)erent products. The goal was to gain in-
sight into a wider area of the anti copy protection landscape
by analyzing how many of our downloads contained mali-
cious code and whether there is a di(cid:11)erence in the infection
ratio between games and applications based on their initial
source.

To this end, we constructed an automated acquisition
system that is shown in Figure 2. The system uses three
data sources: The Usenet, One Click Hosters (OCHs) and
the BitTorrent network. We chose these data sources due
to the potentially high amount of cracks and key gener-
ators available on these networks, the accessibility of in-
dexing services, the possibility to automate the collection
process and their general pervasiveness. For each of these
data sources, we wrote custom crawlers that leverage exist-
ing indexing services. Speci(cid:12)cally, we wrote crawlers for the
Usenet indexing service Nzbindex.nl [11], the OCH search
engine Filestube.com [5] and the BitTorrent search engine
Isohunt.com [8].

4.2.1 Applications vs. Games
To distinguish between anti-copy protection tools for games
and for software applications, we again created a list with
the most popular products. Since an automated approach
is not subject to the same restrictions as a manual one, we
compiled a new list of ranked products which is similar to
Table 1 but more comprehensive. The (cid:12)nal list comprises a
total of 292 non-free software products (151 computer games
and 141 applications).

For every product, our crawlers collected download links
for the search terms \[PRODUCT] crack" and \[PRODUCT]
keygen", where [PRODUCT] refers to the name of the cur-
rent software product from our list. Since cracks and key
generators are small programs, we limited our search to
downloads with 10MB or less. In addition, due to the dis-
tributed nature of P2P networks, we only collected BitTor-
rent download links that had at least 5 seeders. Table 2
shows the crawl results with and without the manually col-
lected download links. In total we collected 43,972 download
links (43,609 crawled links and 363 manually collected links).
In comparison to the Usenet and OCH download links, the
number of crawled BitTorrent links was lower, because many
downloads had no seeders and thus were not collected by our
crawler in the (cid:12)rst place.

For each network, we forwarded the collected download

links to a corresponding download client.

4.2.2 Usenet Downloads
For Usenet downloads, we chose to use the NZBGet [10]
client.
In addition to its easy integrability into our sys-
tem architecture, it automatically processes the downloads

Crawler:
Manual:
Total:

0
185
185

# Web # OCH # BT # Usenet # Total
43,609
363
43,972

20,233
85
20,318

21,574
0
21,574

1,802
93
1,895

Table 2: Overall Collected Download Links

OCH
Megashares.com
Letitbit.net
Media(cid:12)re.com
Rapidshare.com
4last(cid:12)le.com
Uploading.com
Others
Total

# Links Link % # DL DL %
21.32
36.66
13.50
19.70
1.46
2.53
4.83
100.00

14,345
2,041
1,087
957
401
171
1,318
20,320

70.60
10.04
5.35
4.72
1.97
0.84
6.48
100.00

1,121
1,928
710
1,036
77
133
254
5,259

Table 3: Distribution of Crack and Keygen Crawl
Links and Successful Downloads on OCHs

once it is (cid:12)nished. Since Usenet downloads are usually com-
pressed (mostly RAR or ZIP archives), post-processing was
required for downloads that included archives. For each de-
compressed download, we located all potential cracks and
keygens (i.e. executable (cid:12)les) and added them to our repos-
itory. We discarded any downloads that included no exe-
cutable (cid:12)les or downloads we could not decompress (i.e. due
to corrupted archives or password protection). From 21,574
collected download links, we extracted a total of 17,434 ex-
ecutables, meaning that 80:81% of our download links re-
sulted in an executable (cid:12)le.
4.2.3 One Click Hosting Downloads
For OCH downloads, we used the JDownloader [9] down-
load management tool. This Java-based framework supports
over 100 di(cid:11)erent One Click Hosters and comes with an
integrated proxy-functionality to facilitate rotating IP ad-
dresses. Furthermore, it features an automatic CAPTCHA
solver and a built-in decompression tool for the most com-
mon archive types, including basic password-guessing for
protected archives. While these features were su(cid:14)cient for
most Hosters, we discovered that a signi(cid:12)cant amount of
our downloads were hosted on Letitbit.net [4] (see Table 3).
To overcome unacceptably long wait times for this Hoster,
we decided to acquire a premium account for Letitbit.net.
In contrast to our expectations, with the premium account,
we still experienced download speed limitations and waiting
times, but in general, the downloads worked as intended.
Table 3 shows the distribution of crawl links and successful
downloads for One Click Hosters. Out of 20,320 downloads
links, 5,259 downloads (25.88%) were successfully retrieved
and unpacked. The rest of the downloads was not available
for various reasons (i.e. removed downloads, server errors,
password protected downloads, etc.).

Interestingly, more than 70% (14,345) of our crawled links
were for Megashares.com, but due to the high number of re-
moved downloads, we could only retrieve 7:8% (1,121) of
them. We discovered, that the majority of our success-
ful crack and keygen downloads (36:66%) came from Letit-
bit.net.

812Figure 2: Automated Acquisition and Analysis Architecture

4.2.4 BitTorrent Downloads
For BitTorrent downloads, we used the Transmission Bit-
Torrent Client [13] as it includes a remote control interface
that allowed integration into our automated acquisition sys-
tem (Fig. 2). Our Isohunt.com crawler collected and re-
trieved torrent (cid:12)les for downloads with a size of at most
10MB and with at least 5 seeders. Our crawler scripts imme-
diately added the collected torrent (cid:12)les to the Transmission
Client to minimize the time between searching and down-
loading.
In addition, our scripts constantly removed (cid:12)n-
ished downloads from the Transmission Client. Similar to
our approach for Usenet and OCH downloads, we used cus-
tom post processing scripts to decompress downloads and
to add potential crack and keygen executables to our repos-
itory. We ran our BitTorrent client for a period of 1 month
to ensure that downloads with very few sources could still
succeed eventually. However, it turned out, that the num-
ber of the seeders returned by Isohunt.com was not up to
date and, as a result, many of our downloads had no seeders
at all within the given time frame. In total, out of the col-
lected 1,900 torrent (cid:12)les, only 356 (18.74%) downloads suc-
ceeded. To avoid distributing copyright-protected or illegal
software, we suppressed uploads from our clients altogether.
The negative impact on overall download speed was severe
but acceptable.

In total, we collected 43,979 download links and obtained

23,131 potential crack and keygen executables.
However, in conjunction with the executable downloads from
all other data sources (Web, OCH and BitTorrent), only
3,561 (15:39%) of the overall executables were unique. We
used these executables as basis for our further analyses. It
is also important to note here, that manually and automat-
ically downloaded samples overlap. To be speci(cid:12)c, 43% of
the manually downloaded cracks can also be found in the au-
tomatically acquired ones. This number suggests that (cid:12)les
distributed over various sources are largely the same. Fur-
thermore, the detailed analysis performed on the manually
downloaded samples are representative for the larger, auto-
mated sample base.
4.3 Analysis Setup

To gain more insight into anti-copy protection software
tools, we decided to follow both manual and automatic anal-
ysis approaches. While automatic analysis can cover a large

# DL Links
# EXE
# Unique

Web
185
82
67

OCH
20,320
5,259
1,379

BT Usenet
21,574
17,434
2,054

1,900
356
230

Total
43,979
23,131
3,561

Table 4: Overall Download Results

amount of samples easily, it also has a number of limitations.
For instance, vital information such as whether a speci(cid:12)c
crack or keygen can actually unlock a software product or
whether the software product still runs stable after apply-
ing a patch, can not be gained through automatic analysis.
The reasons for this are manifold. Most cracks and keygens
need to be applied in speci(cid:12)c ways and the accompanying
instructions need to be closely followed by the user. Some
of the tools might not even run out of the box, for example
due to missing dependencies. In general, the necessary user
interactions closely depend on the anti-copy protection tool
and the software application. Similarly, testing whether a
tool managed to successfully break the copy-protections and
whether the unlocked software product is still in a usable and
stable condition afterwards, closely depends on the software
product itself. As a result, we decided to combine auto-
matic analysis with manual analysis results. However, the
manual approach has limitations on its own. Most notably,
due to the extensive amount of manual work involved, only
a fraction of all available samples can be analyzed in detail.
4.3.1 Manual Analysis
We focused our manual analysis approach on the software
products that we covered in the manual acquisition phase
(see Table 8). Our manual analysis setup is shown in Fig. 3.

Figure 3: Manual Analysis Setup

UsenetOCHBitTorrentNzbindex.nlFilestube.comIsohunt.comDownloadLinksJDownloaderTransmissionTorrent ClientNZBGetCrack/KeygenDownloadsAnubisAutomated AnalysisEnvironmentDynamic Analysis ReportsStatic Analysis ReportsCrawlersDownloadersGame VMsApplication VMsCracksKeygensPacketCaptureInstallationResultsAntiVirusResults813For each of the software products, we set up a separate
virtual machine, where the product and all its software de-
pendencies (e.g.
.NET, DirectX, etc.) were installed. Due
to the less stringent security features in comparison to Win-
dows 7, we chose to use Windows XP SP2 32-bit as the op-
erating system for the virtual machines. However, especially
for some games, it was required to install Windows 7 instead.
Besides, we installed a state of the art virus scanner (AVG
free [30]) with up to date virus de(cid:12)nitions and real-time (i.e.
Resident Shield) protection. We set up each of the software
products to the point where either license information had
to be entered or the software refused to work due to expired
evaluation licenses. After that, we performed a whole sys-
tem virus scan within all virtual machines to ensure that
the system was free from malware infections. In this state,
we created a snapshot (which we denote base snapshot) for
each virtual machine, forming the basis for any subsequent
experiments.

We manually tested all of the 141 unique cracks and key-
gens within our analysis setup. For each anti-copy protection
tool, we reverted the according machine to the base snap-
shot. We started our packet capture tool (Wireshark) on the
host machine and then copied the anti-copy protection tool
to the virtual machine. Before executing the crack or key-
gen, we scanned the (cid:12)les with the AV software. If infections
could be detected, we noted them and temporarily disabled
the AV software. After that, we executed the crack or key-
gen and precisely followed the accompanying instructions.
In some cases, for the anti-copy protection tool to run, it
was necessary to resolve software dependencies, make reg-
istry modi(cid:12)cations or perform multiple steps both in the
software product and the crack/keygen. After installation,
we checked if the tool actually unlocked the software product
and whether the software product was still in a usable and
stable running state. This was followed by a full system AV
scan, so that we could identify possible malware infections.
We distinguished between (cid:12)le- and system infections: If the
AV software discovered infections in the anti-copy protec-
tion tool, but running the tool did not infect any other (cid:12)les
on the system, we denote this a (cid:12)le infection. If other (cid:12)les
on the system were infected, we denote this a system infec-
tion. In order to capture slow network tra(cid:14)c as well, we let
each machine run for at least 10 minutes. After that, we
shut down the virtual machine, stopped the packet capture
tool and analyzed the captured network tra(cid:14)c if applica-
ble. This allowed us to manually collect AV scan results,
installation results (i.e. whether the tool could unlock the
software product) and packet captures for each crack and
keygen. Overall, the manual analysis took between 15 and
20 minutes per single crack or keygen executable. To the
best of our knowledge, we are the (cid:12)rst who conducted a
manual analysis of cracks and keygens to that extent.

4.3.2 Automated Analysis
We analyzed all available unique samples (including the
manually acquired ones) in our automated analysis environ-
ment (Fig. 2). In order to conduct both static and dynamic
analysis, we utilized the Virustotal [14] service and the Anu-
bis [16] environment.

Virustotal [14] is a publicly available service that allows
concurrent scanning of submitted (cid:12)les with a large number
of AntiVirus scanners. At the time of writing, the service
accepted (cid:12)les up to 32MB in size and conducted scans with

43 di(cid:11)erent AntiVirus scanners. Each AntiVirus scanner re-
ports that either no infection or an infection with a given
malware could be identi(cid:12)ed in the submitted (cid:12)le. We wrote
a set of scripts that retrieved existing scan reports for (cid:12)les
based on their MD5 sum. This way, we could retrieve exist-
ing reports and determine the number of cracks or keygens
that were already known to Virustotal. In the next step, we
submitted all (cid:12)les to Virustotal and rescanned them in case
there were existing analysis reports. The di(cid:11)erence between
older existing reports and fresh reports is that for fresh re-
ports, the latest virus de(cid:12)nitions information is used. Thus
it is possible, that old reports did not indicate malware in-
fections since there were no AV signatures for the speci(cid:12)c
malware at that time, whereas, due to the more recent AV
signatures, the fresh scan report would be able to identify
these infections. In order to determine whether a (cid:12)le was
infected, we calculated the overall percentage of the virus
scanners that indicated malware infections. This allowed us
to limit the e(cid:11)ect of false positives for individual AV scan-
ners. Out of the 3,561 unique crack and keygen executables,
we were able to retrieve 2,281 (64:06%) existing reports and
3,471 (97:47%) fresh scan reports. For 90 (cid:12)les (2:53%) we
did not receive a report from Virustotal, either because the
submitted (cid:12)le was too large (31 (cid:12)les, 0:87%) or due to in-
ternal Virustotal issues (59 (cid:12)les, 1:66%).

Anubis is a dynamic analysis environment, originally based
on TTAnalyze [16], that performs virtual machine introspec-
tion (VMI). It allows to upload executables with up to 8MB
in size and considers a wide range of possible threats, includ-
ing malicious registry and (cid:12)le modi(cid:12)cation, process creation,
or network activities. Based on this information, Anubis cre-
ates a detailed analysis report including a severity score in
the range f0; : : : ; 10g. Similar to the Virustotal results, the
severity score corresponds to the maliciousness of the exe-
cuted sample, whereas a value of 0 indicates no malicious
behavior at all and a value of 10 suggests, that the sample
is malware. For our experiments, we submitted all cracks
and keygen samples with a size of up to 8MB to Anubis.
Due to this limitation, we could not analyze 340 (9:55%)
out of the 3,561 unique crack and keygen executables. The
remaining 3,221 samples resulted in 3,145 (97:64%) valid
Anubis reports. Anubis identi(cid:12)ed 45 samples (1:40%) as no
valid Windows PE executables and hence did not generate
a report. For 31 samples (0:96%), we received incomplete
Anubis reports without severity score.

5. RESULTS AND DISCUSSION

The following Sections show the results we obtained through

manual and automated approaches.
5.1 Manually Collected Samples

By following the methodology described in Section 4.1, we
were able to download 141 unique cracks and keygens. How-
ever, since some of the (cid:12)les appeared for multiple products,
it was necessary to test these duplicates for each product in
its speci(cid:12)c virtual environment. Although the overall num-
ber of unique manual downloads is 141, we had to test 157
cracks and keygens.

Table 5 shows the overall results of our manual analysis
based on the dataset from Table 9 (see Appendix). For each
product, the table summarizes the results for the unique
cracks and keygens, whereas the (cid:12)rst 5 products are ap-
plications and the latter ones are games. Our downloads

814Product
Photoshop
Nero 10
O(cid:14)ce 2010
Norton 360
Winrar
Brink
Crysis 2
Fable 3
Portal 2
The Sims 3
Total App.
Total Game
Total

real C/K wrong C/K (cid:12)le inf.
66.67
68.42
42.86
31.25
22.73
7.69
23.53
55.56
21.43
44.44
45.35
29.58
38.22

66.67
78.95
64.29
43.75
68.18
69.23
88.24
66.67
42.86
88.89
65.12
73.24
68.79

60.00
15.79
42.86
25.00
18.18
30.77
35.29
0.00
0.00
27.78
30.23
21.13
26.11

13.33
52.63
35.71
12.50
4.55
7.69
11.76
66.67
35.71
11.11
23.26
22.54
22.93

sys. inf. VT avg. Anubis avg. NW traf.
20.00
42.11
35.71
50.00
18.18
7.69
5.88
55.56
28.57
11.11
32.56
18.31
26.11

62.06
56.41
47.32
39.67
32.87
6.64
29.43
50.03
13.20
36.91
47.66
27.24
37.45

11.43
32.78
43.33
31.33
17.27
15.71
1.25
33.33
10.00
10.00
27.23
14.06
20.65

bare MW. work. work. clean
0.00
15.79
14.29
0.00
31.82
30.77
29.41
0.00
28.57
27.78
13.95
25.35
19.11

33.33
15.79
35.71
43.75
13.64
0.00
11.76
22.22
21.43
5.56
26.74
11.27
19.75

13.33
63.16
21.43
12.50
50.00
38.46
29.41
11.11
42.86
38.89
34.88
33.80
34.39

Table 5: Manual Analysis Results in Percent of Samples

indicate that even though they were all labeled as crack or
keygen for a speci(cid:12)c product, the binaries included did not
necessarily have this functionality. Other binaries were in
fact cracks or keygens, but for di(cid:11)erent versions or even dif-
ferent products. Some of the binaries even consisted of the
bare malware itself. Table 5 re(cid:13)ects these (cid:12)ndings in the real
C/K, wrong C/K and bare MW. columns. We divided our
extensive AV scanning results into two categories: (cid:12)le in-
fections and system infections. A (cid:12)le infections means that
the AV engine reported, that a (cid:12)le is infected with malware.
However, this does not necessarily imply that executing a
purportedly infected (cid:12)le leads to malicious activities. On
the other hand, a system infection means that during exe-
cution of the program, malicious activity could be observed
and at least one other (cid:12)le on the system was infected with
malware. In our test environment, successful malware infec-
tion was usually accompanied with infection of existing or
creation of new (cid:12)les and adding custom startup entries in
the Windows registry. These infections and modi(cid:12)cations
could then be found through the full system scan that we
performed at the end of each test run (see Section 4.3.1 for
details). Moreover, we analyzed all manual samples with the
Virustotal and Anubis environments as well. The columns
VT avg. and Anubis avg. show the average results based
on VT and Anubis scores. The setup is described in more
detail in Section 5.1.1. The column NW traf. re(cid:13)ects all
samples causing network tra(cid:14)c. The number of working
cracks and keygens is visible in column work., whereas sam-
ples with clean AV results and no malicious activity are rep-
resented by work. clean. To exemplary clarify the columns
of Table 5, we consider the Photoshop application. From all
unique binaries that we downloaded, 66:67% were indeed a
real crack or keygen (real C/K ), but out of these, 60:00%
were either not for Photoshop or for a di(cid:11)erent Photoshop
version (wrong C/K ). Scanning the binaries inside the vir-
tual environment with AVG free [30] showed that 66:67%
are infected with malware ((cid:12)le inf.), but only 13:33% man-
aged to actually infect the system (sys. inf.). The column
bare MW. shows that out of all Photoshop samples, 33:33%
were no crack or keygen at all and just consisted of the bare
malware itself. Note that the percentages of real C/K and
bare MW. do not necessarily need to add up. For instance,
if an alleged crack turns out to be a harmless malware free
decompression tool, it does not show up in the real C/K
or wrong C/K columns as it is no crack or keygen and it
also doesn’t show up in the bare MW. column. Scanning the
samples with VirusTotal showed that 62:06% of the virus

scanners reported an infection (VT avg.), while the aver-
age Anubis score (i.e. the maliciousness of the binaries) was
11:43% (Anubis avg.). From all Photoshop cracks and key-
gens, 20:00% established one or more network connections to
the Internet (NW traf.). The column work. indicates that
13:33% of the cracking tools successfully unlocked Photo-
shop, but 0:0% of the tools worked and were also free from
malware (work. clean).

Our results indicate that cracks and keygens are an ef-
fective distribution channel for malware and, as a result, a
valuable source of revenue for underground entrepreneurs
like Pay Per Install (PPI) providers or other actors in the
software piracy ecosystem like PPD or One-Click hosters,
dedicated crack hosters, specialized crack search engines and
similar (see Section 3). Both, for applications and games,
the chance of manually (cid:12)nding a working crack or keygen
is roughly one third (33%). However, for all applications
we tested, only 13:95% worked and were free from malware.
Similarly, for all games, only 25:35% worked and were free
from malware. Even though not each purportedly infected
(cid:12)le leads to malicious activities, we could observe that more
than 22% of our samples managed to successfully infect the
whole system.
5.1.1 Control Analysis
We submitted all 141 manually collected unique samples
to the Virustotal and Anubis analysis environments to get
both static and dynamic analysis results. For 91:49% of our
samples, there were existing Virustotal reports indicating
that these cracks and keygens had been scanned by other
users before. Virustotal uses a set of AV scanners (Sec-
tion 4.3.2) and outputs their individual results. The more
AV scanners report infections, the higher is the probability
that a sample is indeed infected with malware. In Virustotal
reports, this ratio is commonly known as detection ratio. In
contrast, Anubis calculates a severity score (Section 4.3.2)
that re(cid:13)ects how malicious a sample behaved inside the anal-
ysis environment. Table 5 shows the average results from
these analysis environments on a per product basis. A high
average percentage indicates that a high number of samples
is very likely to be infected with malware (VT avg.) or be-
haves maliciously (Anubis avg.). For instance, the cracks
and keygens for Photoshop were more likely to contain mal-
ware than for O(cid:14)ce 2010, but the O(cid:14)ce 2010 cracks and
keygens behaved much more maliciously on average.

8155.1.2 Sample Age
Recent results of Caballero et al. [17] show that malware
is frequently repacked to avoid detection by static analysis
environments. Consequently, if cracks and keygens are used
to spread malware, a malicious uploader would frequently
upload existing tools bundled with freshly repacked mal-
ware. To determine the approximate age of our samples,
we analyzed all existing Virustotal reports for the manually
collected cracks and keygens. We distinguished between all
samples and infected samples, whereas a sample is consid-
ered to be infected if at least 30% of the Virustotal AV
scanners reported malware infections, an admittedly con-
servative threshold. The result is depicted in the Cumula-
tive Distribution Function (CDF) in Figure 4. We manually
collected cracks an keygens from May to September 2011
which can be seen from the graph as well. The graph in-
dicates that a signi(cid:12)cant amount of our samples was new,
suggesting that the samples were either freshly repacked or
even 0-day malware.

5.1.4 Malware Distribution on Download Sources
For each download source (Web, OCH and BitTorrent),
we compared the overall number of unique downloads with
the number of infected ones (i.e. samples with a Virustotal
detection percentage > 30%). Based on these percentages,
we calculated the distribution of infected samples on down-
load sources. The result is visible in Figure 5. It can be seen
that for our manually collected unique cracks and keygens,
we had slightly more infected downloads from web sources
than from BitTorrent sources or One Click Hosters (OCHs).
Since the goal of malware distributors is to spread the mal-
ware as widely as they can, we believe that they focus more
on download sources that have many users and are easy
to use with minimal e(cid:11)ort. Both is more the case for web
downloads than for OCH or BitTorrent downloads.

Figure 5: Malware Distribution for Manual Down-
loads

5.2 Automatically Collected Samples

In addition to the analysis of manually collected cracks
and keygens with small sample size, we acquired a high
number of samples through custom crawlers (Section 4.2)
and analyzed them with automated analysis environments
(Section 4.3.2). Our analysis of automatically collected sam-
ples is based on a collection of more than 43; 600 download
links for Usenet, BitTorrent and OCH downloads leading to
3; 491 unique cracks and keygen executables.

5.2.1 Results
Similar to the analysis of manually collected downloads,
we submitted our samples to the Virustotal and Anubis anal-
ysis environments to obtain both static and dynamic analy-
sis results. Surprisingly, more than 36:32% (1; 268 samples)
of our cracks and keygens were previously unknown to Virus-
total and had no existing report. Due to the large number
of games and applications, we represent the results of Virus-
total and Anubis scans as Cumulative Distribution Function
(CDF). Although we could observe that cracks and keygens
for games are slightly less likely to be infected with mal-
ware, we decided to combine the results in Figure 6 due to
the high similarity of the resulting graphs. The graph shows
both the Virustotal existing and fresh scan results for all
collected samples. For Virustotal results, the X axis repre-
sents the average Percentage of AV scanners that reported
infections with malware (i.e. the Virustotal detection per-
centage). Hence, if we consider existing reports and a sample
to be malicious if at least 30% of the employed AV scanners
reported that the sample is malware, then about 50% of
all cracks and keygens we collected would be infected with
malware. In contrast, fresh reports are based on more recent
AV signatures and, as a result, also include more malware
infections. Thus, considering fresh reports with the same

Figure 4: VirusTotal First Seen Dates for All and
Infected Manual Downloads (CDF)

5.1.3 Malware Packing
Moreover, we analyzed whether the use of packers could
be detected within our samples and which packers were the
most frequent. The results are visible in Table 6. The table
shows the packers we could identify for infected samples.
We consider a sample to be infected if at least 30% of the
VirusTotal scanners reported infections.

Packer
PECompact 2.xx
UPX 2.90 [LZMA]
Armadillo v1.71
FSG v2.0
UPX 2.93 [LZMA]
ASPack v2.12
BobSoft Mini Delphi
kkrunchy
PECompact v1.4x
Others

# Freq. % Freq.
37.04
14.81
11.11
7.41
7.41
3.70
3.70
3.70
3.70
7.41

10
4
3
2
2
1
1
1
1
2

Table 6: Most Frequent Packers in Infected Manual
Downloads

200720082009201020112012Date020406080100PercentageofSamplesAllSamplesInfectedSamples020406080100PercentageOCHBitTorrentWeb31.6232.7535.64MalwareDistribution,Min.InfectionPercentage=30816Virustotal detection percentage, about 55% of our samples
would include malware.

Moreover, the graph includes the Anubis severity percent-
age (i.e.
the percentage for Anubis severity levels in the
range f0; ::; 10g). It provides a good overview of how mali-
cious the samples behaved inside the analysis environment,
but also allows to classify the samples. As for classi(cid:12)cation,
if we consider all samples with an Anubis severity percentage
of at least 30% (i.e. an Anubis severity score of 3) to be mali-
cious, then roughly 35% of the cracks and keygens would be
malicious. The comparison between Virustotal and Anubis
results can also be seen as sanity check. If the percentage of
infected samples rises, it also means that the overall Anubis
severity increases due to the more malicious behavior of the
samples in comparison to benign ones.
5.2.2 Malware Families
Based on fresh Virustotal reports, we analyzed the most
frequent malware families for cracks and keygens. While the
most frequent malware HEUR:Trojan.Win32.Generic is not
a malware itself, but rather a heuristic covering unknown
Trojans, our results show that the majority of malware fam-
ilies are indeed Trojans. A closer look at these malware
samples reveals that they frequently connect to the Internet,
suggesting that they might act as valuable tool for Pay Per
Install (PPI) providers. That is, the samples might down-
load additional malware from remote locations or function
as remote controlled bots by connecting to command and
control (C&C) servers (i.e. Backdoor.Win32.IRCBot.tyy).
As a result, the most frequent malware families we found can
act as valuable source of revenue for underground economy.
More information regarding the most frequent malware fam-
ilies we could identify in cracks and keygens can be found in
Tables 10 and 11 in the Appendix section.
5.2.3 Sample Age
Based on existing and fresh Virustotal reports, we ana-
lyzed the First Seen Dates to get an overview of the age
of our all samples. The results can be seen in Figure 7,
whereat we consider a sample to be infected if the Virusto-
tal detection percentage is 30% or more. We automatically
collected cracks and keygens between February and March
2012. The graph reveals a similar picture as for the sample
age for manually collected samples. Especially the infected
samples are very new, suggesting that the samples might be
freshly repacked. It also closely re(cid:13)ects the fact, that more
than 36:32% of our samples were new to Virustotal.
5.2.4 Malware Packing
We analyzed Virustotal reports for detected packers that
are frequently used in malware. Table 7 gives an overview of
the most frequent packers used for infected samples, whereas
we consider a sample to be infected if the Virustotal detec-
tion percentage is 30% or more. Due to the close similarity,
the table re(cid:13)ects the combined results for cracks and key-
gens for applications and for games. Our results show that
UPX is the most frequent packer that is used in infected
cracks and keygens. However, we also need to note that
out of 2; 285 possibly infected samples, only 243 (10:63%)
used a packer that was detected by Virustotal. We suspect
that the number of malicious samples that employs packing
mechanisms that are not detected is signi(cid:12)cantly higher.

Packer
UPX 2.90 [LZMA]
FSG v2.0
PECompact 2.xx
Armadillo v1.71
BobSoft Mini Delphi
UPX 2.93 [LZMA]
ASPack v2.12
FSG v1.33 (Eng)
tElock 0.99 - 1.0 private
MEW 11 SE v1.2
ASProtect v1.23 RC1
themida 1.0.0.5
PECompact v1.56
UPX 0.72
Others

# Freq. % Freq.
37.04
13.17
12.76
10.70
7.82
6.17
3.29
1.23
0.82
0.82
0.82
0.41
0.41
0.41
4.13

90
32
31
26
19
15
8
3
2
2
2
1
1
1
10

Table 7: Most Frequent Packers in Infected Auto-
mated Downloads

5.2.5 Malware Distribution on Download Sources
Our automated crack and keygen acquisition system down-
loads from three downloads sources: The Usenet, BitTorrent
and One-Click Hosting (OCH). Similar to the analysis for
manual downloads, we compared the number of all down-
loads per download source with the number of corresponding
infected downloads.

A sample is considered to be infected, if the Virustotal
detection percentage was at least 30%. Utilizing this data,
we calculated the overall malware distribution on download
sources. The result is visible in Figure 8.

Surprisingly, the percentage of infected downloads was sig-
ni(cid:12)cantly higher for Usenet downloads than for Bittorrent
or OCH downloads. We believe that this is due to the way
the Usenet works. If a sample is uploaded to the Usenet,
it can be downloaded as long as the upload is not older
than the retention time of the Usenet provider. Hence, if
a crack or keygen with freshly packed malware is uploaded,
it will be available even years later (considering that most
binary Usenet providers have retention times of 1,000 days
and more). In contrast, the lifetime of BitTorrent and OCH
downloads is more limited. BitTorrent downloads no longer
work if there are not enough seeders whereas OCH down-
loads are frequently removed in case of complaints.

Figure 8: Malware Distribution for Automated
Downloads

6. DISCUSSION

The key message from our evaluation and the numeric re-
sults is quite simple. Downloading cracks and keygens from
any source on the Internet is very dangerous. Even with
our conservative form of measurement, which considers only
samples where 30% or more of all scanners raised an alert,

020406080100PercentageOCHBitTorrentUsenet21.9722.7555.28MalwareDistribution,Min.InfectionPercentage=30817Figure 6: Virustotal and Anubis Scan Results for
Automated Downloads (CDF)

Figure 7: VirusTotal First Seen Dates for Auto-
mated Downloads (CDF)

this claim holds true. With more than every second (cid:12)le being
infected, the level of malware exposure for users download-
ing cracks is yet unmatched. Simultaneously, the numbers
suggest, that this form of malware distribution is popular
with various miscreants like PPI providers or underground
entrepreneurs. The reasons for the attractiveness of keygens
and cracks are manifold. One one hand, the technical bar-
riers for a miscreant are minimal. The target programs are
typically small which saves bandwidth, popular titles can be
easily deduced by commercial rankings and the victims al-
ready operate on the brink of legality and are therefore more
willing to execute shady downloads. On the other hand, the
users are no experts and rely on their Anti-Virus software
to protect their system. A precaution that often turns out
to be futile. Furthermore, most of the investigated samples
turned out to be younger than expected.

Every third scrutinized (cid:12)le was not known before, sug-

gesting two important conclusions:

1. Malware samples are constantly repacked or even newly
created to fool the victim’s AV scanners. Signature-
based detection can only protect a system to a certain
extend. Detection heuristics, on the other hand, are
of limited e(cid:11)ectiveness against packers. For this e(cid:11)ort
to pay o(cid:11), the infection rate must be correspondingly
high.

2. By closely monitoring the crack and keygen distribu-
tion channels covered in this paper, Anti Virus Com-
panies could access a rich pool of 0-day malware or
repacked viruses. Since our results show that roughly
one third of malware is not detected at all, we believe
that there is room for improvement for AV companies.

Interestingly, the intentions of the individuals initially pro-
ducing the crack/keygen are not malicious. Their main mo-
tivation is not the money but group reputation and other
sociological aspects. As soon as the cracked software is
made public though, it is loaded with malware through var-
ious procedures. For malware distributors or PPI providers,

these cracks are a simple asset that wait to be exploited. An
undertaking that has been perfected to an almost exorbitant
degree.

7. CONCLUSION

In this paper, we collected more than 43; 900 download
links and analyzed more than 23; 100 (3; 551 unique) result-
ing real-world cracks and serial number generators to get an
idea how dangerous it is for an individual to circumvent a
program’s copy protection. Our results indicate that a ma-
jority of these programs aim to infect the target machine
with one or more types of malware. Furthermore, a good
percentage of the scrutinized samples have never been seen
before, suggesting that the scene is heavily used for malware
distribution and maintained accordingly. For the end-user
it means that the chance to be exposed to malicious code
when dealing with cracked applications or games is more
than 50 percent. A risk that can only mildly be mitigated
by an up-to-date Anti-Virus scanner.

8. DATA-SET

We created a website to make the full data-set available
to the research community. The website can be reached at
http://amnesiac.seclab.tuwien.ac.at.

9. ACKNOWLEDGEMENTS

We would like to thank the JDownloader developers for
providing valuable support regarding our specialized down-
load automation requirements. We would also like to thank
the anonymous reviewers for their helpful feedback and im-
provement suggestions. The research leading to these re-
sults has received funding from the European Union Seventh
Framework Programme under grant agreement n. 257007
(SysSec) and the Austrian Research Promotion Agency (FFG)
under grant 820854 (TRUDIE).

020406080100VirustotalDetectionPercentage/AnubisSeverityPercentage020406080100PercentageofSamplesFreshReportsExistingReportsAnubisSeverity200720082009201020112012Date020406080100PercentageofSamplesAllSamplesInfectedSamples818[20] Engimax. Top pirate reveals warez scene secrets,

attracts mpaa lawyer’s attention.
http://torrentfreak.com/top-pirate-reveals-warez-scene-
secrets-071119 (retrieved
2011-09-12).

[21] E. Goldman. Warez trading and criminal copyright

infringement. Journal of the Copyright Society of the
U.S.A., 51, 2004.

[22] R. D. Gopal and G. L. Sanders. International software

piracy: Analysis of key issues and impacts. Info. Sys.
Research, 9(4):380{397, Apr. 1998.

[23] R. Honick. Software Piracy Exposed. Syngress

Publishing, 2005.

[24] A. Ikinci, T. Holz, and F. Freiling. Monkey-spider:
Detecting malicious websites with low-interaction
honeyclients. In In Proceedings of Sicherheit, Schutz
und Zuverlaessigkeit, 2008.

[25] A. G. John F. Gantz, Christian A. Christiansen. The

risks of obtaining and using pirated software. 2006.

[26] M. Limayem, M. Khalifa, and W. Chin. Factors
motivating software piracy: a longitudinal study.
Engineering Management, IEEE Transactions on,
51(4):414 { 425, nov. 2004.

[27] E. Moshchuk, T. Bragin, S. D. Gribble, and H. M.

Levy. A crawler-based study of spyware on the web.
2006.

[28] P. C. V. Oorschot. P.c.: Revisiting software protection.

In ISC 2003. LNCS, pages 1{13. Springer, 2003.
[29] A. Rehn. The politics of contraband: The honor

economies of the warez scene. The Journal of
Socio-Economics, 33(3):359{374, 2004.

[30] A. Technologies. Avg free. http://free.avg.com.

10. REFERENCES
[1] Amazon.com: Top 100 software products.

http://www.amazon.com/best-sellers-
software/zgbs/software.

[2] Astalavista.box.sk. http://astalavista.box.sk.
[3] Download music, movies, games, software! the pirate

bay - the galaxy’s most resilient bittorrent size.
http://thepiratebay.org.

[4] File hosting letitbit.net. http://letitbit.net.
[5] (cid:12)lestube - search & download (cid:12)les.

http://www.(cid:12)lestube.com.

[6] Freee software downloads and software reviews - cnet

download.com. http://download.cnet.com.

[7] honeyconcent - we are here - honey content sharing for

peace & love. http://honeycontent.com.

[8] isohunt > the bittorrent & p2p search engine.

http://isohunt.com.

[9] Jdownloader.org. http://jdownloader.org/.

[10] Nzbget. http://nzbget.sourceforge.net.
[11] Nzbindex - we index, you search. http://nzbindex.nl.
[12] Sharecash.org - make money uploading (cid:12)les!

http://www.sharecash.org.

[13] transmission - a fast, easy and free bittorren client.

http://www.transmissionbt.com.

[14] Virustotal - free onlince virus, malware and url

scanner. http://www.virustotal.com.

[15] B. S. Alliance. 2010 piracy study. 2010.
[16] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A

Tool for Analyzing Malware.

[17] J. Caballero, C. Grier, C. Kreibich, and V. Paxson.
Measuring Pay-per-Install: The Commoditization of
Malware Distribution. In Proceedings of the 20th
USENIX Security Symposium, Aug. 2011.

[18] R. Cuevas, M. Kryczka, A. Cuevas, S. Kaune,

C. Guerrero, and R. Rejaie. Is content publishing in
bittorrent altruistic or pro(cid:12)t-driven? In Proceedings of
the 6th International COnference, Co-NEXT ’10,
pages 11:1{11:12, New York, NY, USA, 2010. ACM.
[19] N. Doshi, A. Athalye, and E. Chien. Pay-per-install:
The new malware distribution network. April 2010.

819APPENDIX

Category

Product
Adobe Photoshop CS5.1 Application
Application
Ahead Nero 10
Application
Microsoft O(cid:14)ce 2010
Application
Norton 360
Application
WinRAR 3.93
Brink
Game
Game
Crysis 2
Game
Fable III
Game
Portal 2
Game
The Sims 3
Total:

15
2
12
12
20
1
6
0
3
11
82

# Web DL # OCH DL # BT DL # Total DL
19
24
19
19
30
14
25
19
46
29
244

0
6
4
6
4
5
4
8
28
15
80

4
16
3
1
6
8
15
11
15
3
82

Table 8: Manual Crack and Key Generator Downloads

Product Category # Web # OCH # BitTorrent # Total

Photoshop
Nero 10
O(cid:14)ce 2010
Norton 360
Winrar
Brink
Crysis 2
Fable 3
Portal 2
The Sims 3

App.
App.
App.
App.
App.
Game
Game
Game
Game
Game
Total:

13
2
8
10
17
1
6
0
3
7
67

0
5
3
5
3
4
3
2
7
8
40

2
12
3
1
2
8
8
7
4
3
50

15
19
14
16
22
13
17
9
14
18
157

Table 9: Manual Distinct Downloads per Product

Malware Family
HEUR:Trojan.Win32.Generic
Worm.Win32.VBNA.b
UDS:DangerousObject.Multi.Generic
Trojan.Win32.Jorik.Skor.pi
Backdoor.Win32.IRCBot.tyy
Trojan.Win32.Swisyn.bfdh
Trojan.Win32.Llac.ajkz
Trojan-PSW.Win32.Dybalom.dhc
Trojan-Dropper.MSIL.Agent.vfw
Backdoor.MSIL.Ubot.b
others

#
76
6
6
4
4
3
3
3
3
3
47

%
48.10%
3.80%
3.80%
2.53%
2.53%
1.90%
1.90%
1.90%
1.90%
1.90%
29.75%

Table 10: 10 most frequent Malware Families found in Cracks and Keygens for Applications

Malware Family
Trojan.Win32.VBKrypt.iwbp
HEUR:Trojan.Win32.Generic
Trojan.Win32.Inject.cnht
Trojan.Win32.Llac.zjo
not-a-virus:PSWTool.Win32.NetPass.df
not-a-virus:Downloader.Win32.SwiftCleaner.ay
Trojan.Win32.Agent.aggx
Trojan.MSIL.Agent.dnh
Worm.MSIL.Arcdoor.ae
Trojan.Win32.Buzus.aick
others

#
70
59
34
23
19
18
16
13
10
9
47

%
22.01%
18.55%
10.69%
7.23%
5.97%
5.66%
5.03%
4.09%
3.14%
2.83%
14.78%

Table 11: 10 most frequent Malware Families found in Cracks and Keygens for Games

820