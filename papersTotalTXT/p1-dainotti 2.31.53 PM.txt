Analysis of a “/0” Stealth Scan from a Botnet

Alberto Dainotti, Alistair King, kc Claffy

CAIDA, University of California, San Diego

La Jolla, CA, USA

{alberto,alistair,kc}@caida.org

Ferdinando Papale, Antonio Pescapé

University of Napoli Federico II

Naples, Italy

ferdinando.papale@gmail.com

pescape@unina.it

ABSTRACT
Botnets are the most common vehicle of cyber-criminal activity.
They are used for spamming, phishing, denial of service attacks,
brute-force cracking, stealing private information, and cyber war-
fare. Botnets carry out network scans for several reasons, includ-
ing searching for vulnerable machines to infect and recruit into
the botnet, probing networks for enumeration or penetration, etc.
We present the measurement and analysis of a horizontal scan of
the entire IPv4 address space conducted by the Sality botnet in
February of last year. This 12-day scan originated from approxi-
mately 3 million distinct IP addresses, and used a heavily coordi-
nated and unusually covert scanning strategy to try to discover and
compromise VoIP-related (SIP server) infrastructure. We observed
this event through the UCSD Network Telescope, a /8 darknet con-
tinuously receiving large amounts of unsolicited trafﬁc, and we cor-
relate this trafﬁc data with other public sources of data to validate
our inferences. Sality is one of the largest botnets ever identiﬁed by
researchers, its behavior represents ominous advances in the evo-
lution of modern malware: the use of more sophisticated stealth
scanning strategies by millions of coordinated bots, targeting crit-
ical voice communications infrastructure. This work offers a de-
tailed dissection of the botnet’s scanning behavior, including gen-
eral methods to correlate, visualize, and extrapolate botnet behavior
across the global Internet.

Categories and Subject Descriptors
C.2.3 [Network Operations]: Network Monitoring;
C.2.5 [Local and Wide-Area Networks]: Internet;

General Terms
Measurement, Security

Keywords
Darknet, Network Telescope, Internet Background Radiation, Bot-
net, SIP, Scan, Probing, Stealth, Covert, Coordination, Sality, Bot,
VoIP

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.

1.

INTRODUCTION

Botnets are collections of Internet hosts (“bots”) that through
malware infection have fallen under the control of a single entity
(“botmaster”). Botnets of up to few million hosts have been ob-
served [4, 23, 54]. Innocent users carry on with their legitimate
activities, unaware that their infected PCs are executing various
types of malicious activity in the background, including spamming,
phishing, denial-of-service (DOS) attacks, brute-force password
cracking, stealing of credentials, espionage and cyber warfare. The
news media and scientiﬁc literature have documented many crimi-
nal activities carried out by botnets over the last few years [15, 20,
35, 59], including on mobile phones [42].

Botnets perform network scanning for different reasons: propa-
gation, enumeration, penetration. One common type of scanning,
called “horizontal scanning”, systematically probes the same pro-
tocol port across a given range of IP addresses, sometimes select-
ing random IP addresses as targets. To infect new hosts in order
to recruit them as bots, some botnets, e.g., Conﬁcker [27, 46], per-
form a horizontal scan continuously using self-propagating worm
code that exploits a known system vulnerability. In this work we
focus on a different type of botnet scan – one performed under the
explicit command and control of the botmaster, occurring over a
well-delimited interval.

Several botnets have been analyzed in the literature, including
characterizing botnet scanning techniques either based on packet
captures from darknets and honeynets [38, 39], or by examining
botnet source code [11]. Documented scans by botnets have been
of relatively small size (e.g. around 3000 bots) [39] and lightly
coordinated, e.g., many bots randomly (typically uniformly ran-
domly [39]) probing the same target address range.

In February 2011, the UCSD /8 Network Telescope instrumenta-
tion [7] captured trafﬁc reﬂecting a previously undocumented large-
scale stealth scanning behavior (across the entire IPv4 space, we
believe) from a botnet using about 3 million unique source IP ad-
dresses. We identiﬁed the malware responsible for this massive and
sophisticated scanning activity as a binary module of the Sality
botnet [23] known to target SIP (Session Initiation Protocol [49])
servers [22]. We hence refer to this interesting scanning event as
“sipscan” throughout the rest of this paper.

Our contributions in this study include techniques to character-
ize a large-scale intentionally surreptitious scan of the entire IPv4
space (that is, a “/0” scan), including use of additional data to con-
ﬁrm that the scan was not using spoofed source IP addresses, but
rather was being sourced by a large botnet. We correlated darknet
trafﬁc over this period with two other publicly available sources
of Internet trafﬁc data that strongly suggest the scan was not just
of this /8 but over the entire IPv4 Internet address space. Finally,
we created animations and visualization to help us understand the

1strictly ordered progression of the entire /0 scan, and correlate its
address space and geographic coverage with its trafﬁc volume. These
tools also enabled us to delineate different phases of its scanning
activity and its adaptation to changing network conditions. These
methods and tools have already yielded substantial insight into the
ﬁrst observed /0 scan by a botnet, but we anticipate a wide range
of applicability to other analyses of unidirectional or even bidirec-
tional trafﬁc.

Section 2 summarizes related work. Sections 3 describes the anat-
omy of the scan, including high-level characteristics and validation
that it was indeed carried out by a botnet targeting the entire IPv4
space. Section 4 analyzes more detailed properties of the scan, in-
cluding the impressively covert scanning strategy, bot turnover rate,
coverage and overlap in target addresses, and highly orchestrated
adaptivity and coordination of the bots. Section 6 summarizes our
ﬁndings and contributions.

2. BACKGROUND AND RELATED WORK
Botnets have been an active area of research for almost a decade,
starting with early generation botnets that used IRC channels to
implement centralized Command & Control (C&C) infrastructures
[9, 17]. In 2007 the Storm botnet signaled a new generation of
botnet capabilities, including the use of peer-to-peer protocols to
support distributed C&C channels [33, 51, 58]. These botnets are
harder to detect and dismantle because there is no single point of
failure, and they often use sophisticated techniques such as en-
crypted communication [58] and Fast ﬂux DNS resolution [14].
Researchers have also studied methods for automated discovery
of botnets [31, 40, 56], formal models of botnet communication
[16, 18], and their use for orchestrated spam campaigns [36, 45].

Botnets commonly scan large segments of Internet address space,
either seeking hosts to infect or compromise, or for the purpose
of network mapping and service discovery. Analyzing and detect-
ing these events can improve our understanding of evolving botnet
characteristics and spreading techniques, our ability to distinguish
them from benign trafﬁc sources, and our ability to mitigate attacks.
But analysis of network probing activities of botnets has received
little attention in the literature.

In 2005, Yegneswaran, Barford, and Paxson analyzed six months
of network trafﬁc captured by honeynets [62]. Based on statisti-
cal properties of trafﬁc, they characterized and classiﬁed 22 large-
scale events into three categories: worm outbreaks, misconﬁgura-
tions, and botnet probings. These ﬁrst-generation botnets were less
evolved in several ways than those we see today: in size (a maxi-
mum of 26,000 bots), scope (largest target scope was a /8 network),
and communication capabilities (centralized IRC-based command
and control). Li, Goyal, and Chen [38] analyzed trafﬁc data they
collected from 10 contiguous /24 networks operating as honeynets
throughout 2006. Through analysis of the probing trafﬁc they were
able to infer properties of the botnet, e.g., geographical location of,
and operating system running on infected machines. We use a sim-
ilar approach to infer characteristics of the botnet scan we study in
this paper. These three authors collaborated with Paxson on a more
comprehensive analysis of data from both 2006 and 2007, which
was corroborated both by data from the DShield project [34] and
by the inspection of botnet source code [39]. Analyzing the traf-
ﬁc from 10 contiguous /24 darknets/honeynets they identiﬁed 203
botnet scans with different characteristics, all scanning at most a /8
network, and all with inferred bot populations signiﬁcantly smaller
(200-3700) than the February 2011 scan captured at our darknet (3
million IP addresses), They found that these ﬁrst-generation bot-
nets employed simple scanning strategies, either sequential or uni-
form random scanning, and elementary orchestration capabilities:

many bots scanning the same address range independently, with
high redundancy and large overlap in target addresses. Other stud-
ies have found similar results via examination of botnet source code
to understand the scanning strategies [10, 11]. Barford and Yeg-
neswaran [11] inspected four widely-used IRC botnet code bases,
ﬁnding only primitive scanning capabilities with “no means for ef-
ﬁcient distribution of a target address space among a collection of
bots”. However these studies did not analyze any new-generation
botnets.

The scan that we observe and analyze in this study differs from
previous work in several ways: (i) it is recent (2011) and related
to a new-generation, widely-deployed, peer-to-peer botnet (Sality
[23]); (ii) it is observed from a larger darknet (a /8 network); (iii)
the population of bots participating in the scan is several orders of
magnitude larger; (iv) the target scope is the entire IPv4 address
space; (v) it adopts a well-orchestrated stealth scan strategy with
little redundancy and overlap.

This last point is the most surprising ﬁnding in terms of novelty
and impact. The remarkably stealth scanning employed by new-
generation botnets gives us reason to suspect that many large-scale
scans may have occurred in recent years but gone unnoticed by
any modern instrumentation for studying it. Despite the lack of any
literature documenting the observation of highly coordinated large-
scale network scans from botnets, the concept has been discussed,
both in a worst-case theoretical analysis of attack potential [57],
and for the more benign application of Internet-wide service dis-
covery [37]. For service discovery, these authors considered a scan
strategy based on reverse-byte sequential increments of target IP
addresses, which they named “Reverse IP Sequential (RIS)”. Al-
though they dismissed this option for being difﬁcult to extrapolate
metrics from partial scans, we discovered that this was exactly the
technique used by the Internet-wide scan (“sipscan”) we study in
this paper (Section 4.1). Heidemann’s et al. reachability census was
Internet-wide but ran independently from two hosts, not coordi-
nated in the way botnets are [32].

Another relatively novel aspect of the scan we analyze is that it
targets SIP infrastructure, which is not typically in published lists of
services probed by botnets [39]. Only in the past 2 years have SIP
servers been reported as the object of large-scale attacks [47,52,64].
As more of the world’s voice communications move to an IP sub-
strate, fraudulent activity targeting SIP-based VoIP services offers
an attractive source of revenue to cybercrime [24]. In April 2010,
Sheldon reported a series of brute-force password-guessing attacks
on SIP servers worldwide, sourced from the Amazon EC2 cloud
[52, 64]. Later in 2010, several sources reported on a new malware
named “sundayaddr”, which behaved like a few-hundred node bot-
net comprised of unix-like machines (e.g., Linux, FreeBSD) trying
to brute-force accounts on SIP servers [30, 47]. The layout of the
SIP headers in the attacking packets was almost identical to that
of SIPVicious, a tool suite written in Python designed to perform
security auditing of SIP services [26]. It seems therefore likely that
the attack code was a slightly modiﬁed version of SIPVicious [47].
In November 2010, the author of SIPVicious reported another
large-scale attack against several SIP servers worldwide, using a
more signiﬁcantly different SIP header than used by SIPVicious
[25, 53]. Both of these events were reported by several parties and
were largely discussed on public SIP operational mailing lists [6,8].
In contrast, to the best of our knowledge the scan that we docu-
ment in this study was not publicly reported with respect to either
observed network trafﬁc or server activity (e.g. logs). Symantec
identiﬁed and analyzed the binary responsible for what we call the
“sipscan”, which they discovered while monitoring Sality, a large
peer-to-peer based botnet [22, 23]. A host infected by Sality down-

2loads the scanning binary via a component of the main bot exe-
cutable, which is responsible for downloading and executing ad-
ditional malware whose URLs are communicated by other botnet
peers [23]. During our analysis we had access to the same binary
code and veriﬁed that it matches the SIP headers we observed in
the sipscan. Symantec did not publish any information about the
stealth scanning strategy or in particular on the reverse byte or-
der adopted by the sipscan (Section 4.1). Our study, based instead
on network trafﬁc measurement and analysis, is complementary to
what has been found by reverse-engineering the code running on
the bots, showing novel insights into the botnet population and the
orchestration and coordination of the scan. Since Sality is one of
the largest known botnets but relatively undocumented in research
literature, another contribution of our study is to shed light on the
scanning behavior of this new-generation botnet.

3. ANALYSIS PART I: ANATOMY OF THE

SIPSCAN
3.1 Overview

The sipscan probes each target IP address with two packets: (i) a
UDP packet to port 5060 carrying a SIP header and (ii) a TCP SYN
packet attempting to open a connection on port 80. We observe the
sipscan at a darknet – i.e., there are no devices on it responding to
incoming trafﬁc – so we do not observe any further packets for the
same ﬂows except for TCP SYN retransmits.

Figure 1 depicts the SIP header of the packets sent by the sip-
scan. This SIP header is a request to register a random user account
on a SIP server, but random account registrations are usually not
accepted by SIP servers. Thus, if the targeted host is a SIP server,
the registration will likely fail but will result in a “404 Not Found”
response code, which is enough to reveal to the bot that the target
is indeed a SIP server. We presume that the goal is to identify SIP
servers for later use, e.g., to perform brute-force attempts to register
user accounts.

The sipscan SIP header is similar to the header built by the SIPVi-
cious security auditing tool suite to generate probe packets [26]. In
November 2010, the author of this tool reported a large distributed
attack against SIP servers with headers similar to those his tool
used; this attack was observed by several parties and was likely
carried out by a botnet [25, 53]. In the case of both the Novem-
ber 2010 scan and the February 2011 scan we observed, the botnet
developers probably used the Python code of SIPVicious as a ref-
erence to write their attack code. The most notable difference be-
tween such attacks and SIPVicious headers is in the “User-Agent”
header, where the attack code replaced the string “friendly-scanner”
with the less suspicious “Asterisk PBX”1.

The observed sipscan header has two distinctive characteristics
compared to the attack of November 2010 (and in general com-
pared to the miscellaneous SIP malware packets observed at the
UCSD telescope): the user name, which is always composed of ten
digits, and the “To:”/“From:” ﬁelds, which contains a SIP URI in-
stead of simply the number [49]. Based on the properties of its SIP
header, we deﬁned a payload signature to identify all the sipscan
packets seen by the UCSD Network Telescope. Each source host
sends the TCP packet together with the UDP packets, allowing us
to easily infer which TCP SYN packets on port 80, among all those
received by the telescope, were associated with the sipscan).

Figure 2 shows the packet rate of the sipscan UDP packets (left
axis) and the number of unique IPs per hour (right axis) sending
1Asterisk is a widely deployed open-source PBX software support-
ing both PSTN and VoIP.

Figure 2: Overview of the scan. The continuous line shows the packets per
second, in 5 minute bins, of UDP probing packets from the sipscan ob-
served by the UCSD Network Telescope. The dashed line represents the
corresponding number of distinct source IP addresses per bin.

such packets to addresses in the UCSD Network Telescope. The
scan goes through different phases over approximately 12 days:
it starts with a packet received on Monday 31 January 2011 at
21:07 UTC, and ends with a sharp drop of packets on Saturday 12
February around 15:00 UTC. Approximately 100 residual packets
were observed in the following two days. During the scan, peaks
of 21,000 hosts with distinct IPs probed the telescope’s /8 address
space in a single 5-minute interval.

# of probes (1 probe = 1 UDP + multiple TCP pkts)
#of source IP addresses
# of destination IP addresses
% of telescope IP space covered
# of unique couples (source IP - destination IP)
max probes per second
max # of distinct source IPs in 1 hour
max # of distinct source IPs in 5 minutes
average # of probes received by a /24
max # of probes received by a /24
average # of sources targeting a destination
max # of sources targeting a destination
average # of destinations a source targets
max # of destination a source targets

20,255,721
2,954,108
14,534,793
86,6%
20,241,109
78.3
160,264
21,829
309
442
1.39
14
6.85
17613

Table 1: Summary of the scanning event characteristics. The scan origi-
nated from almost 3 million distinct IP addresses and hit about 14.5 million
addresses of the address space observed by the UCSD Network Telescope.

Table 1 lists the main characteristics of the scan. The portion
of the scan observed by the UCSD Network Telescope involved
around 3 million distinct source addresses, generating 20 million
probes – we deﬁne a probe as a UDP scanning packet with the pay-
load signature from Figure 1, plus TCP SYN packets to the same
destination. These probes covered more than 14.5 million target IP
addresses, that is, 86.6% of the darknet address space.
3.2 Veriﬁcation of unspoofed source addresses
Because darknet addresses do not respond to received packets,
we cannot generally assume that packets are not using spoofed
(fake) source IP addresses. Effective scanning requires the use of
real source addresses to receive responses, so there is reason to as-
sume that these IP addresses are not spoofed. Conversely, evidence
that the addresses are not spoofed would increase our conﬁdence
in the hypothesis that this behavior is in fact a large-scale scan. We
found the following evidence that the observed packets were not
actually spoofed.

 0 10 20 30 40 50 60 70 8001/3102/0202/0402/0602/0802/1002/1202/1402/16 0 5000 10000 15000 20000 25000Packets Per SecondUnique Source IPs (5 min bins)Date (UTC)Sipscan Probing RateSipscan Source IPs31 2011−02−02 1 2 : 1 5 : 1 8 . 9 1 3 1 8 4 IP ( t o s 0x0 ,

t t l 36 ,

412) XX. 1 0 . 1 0 0 . 9 0 . 1 8 7 8 > XX. 1 6 4 . 3 0 . 5 6 . 5 0 6 0 :

i d 20335 , o f f s e t 0 ,
[ udp sum ok ] SIP ,

f l a g s
l e n g t h : 384

[ none ] , p r o t o UDP ( 1 7 ) ,

l e n g t h

2
3
4
5
6
7
8
9
10
11
12

REGISTER s i p :3982516068@XX. 1 6 4 . 3 0 . 5 6 SIP / 2 . 0
Via : SIP / 2 . 0 / UDP XX. 1 6 4 . 3 0 . 5 6 : 5 0 6 0 ; b r a n c h =1F8b5C6T44G2CJt ; r p o r t
Content−Length : 0
From : < s i p :3982516068@XX. 1 6 4 . 3 0 . 5 6 > ;
Accept :
a p p l i c a t i o n / sdp
User−Agent : A s t e r i s k PBX
To : < s i p :3982516068@XX. 1 6 4 . 3 0 . 5 6 >
C o n t a c t :
CSeq : 1 REGISTER
C a l l−ID : 4731021211
Max−Forwards : 70

s i p :3982516068@XX. 1 6 4 . 3 0 . 5 6

t a g =1471813818402863423218342668

Figure 1: Example of the payload of a UDP packet generated by the sipscan (line 1 is tcpdump output [5] with timestamp and information from IP and UDP
headers). The payload contains a SIP request to register a user on the contacted host. A variant of the signature (which we also matched) has the string ":5060"
appended to the "Contact: " header ﬁeld (line 9). In the ﬁgure we replaced the value of the most signiﬁcant byte of the destination address with "XX".

• In [19] we studied the country-wide outage that occurred in
Egypt between the 27th of January and the 2nd of February
2011. During the last two days of the outage - which overlap
with the period of activity of the sipscan - most of the coun-
try was completely isolated from the rest of the Internet. We
veriﬁed that no sipscan packets with source IP addresses that
geolocated to Egypt were observed by the telescope during
the outage. Figure 3 shows the re-announcement of all the
BGP preﬁxes geolocated to Egypt that were withdrawn dur-
ing the outage (continuous line, left y axis), and the packet
rate of UDP packets from the sipscan geolocated to the same
country (dashed line, second y axis). The graph shows Egyp-
tian hosts contributing to the scanning activity only after the
country is reconnected to the Internet. We used the same
methodology described in [19] to analyze BGP data from the
RIPE RIS [3] and Routeviews [60] repositories, and geolo-
cation data from MaxMind [41] and Afrinic [1].

• Random IP spooﬁng would use also source IPs from our /8
darknet set of addresses, which we never see in this set of
packets. We also mapped the source addresses of the scan to
originating ASes (autonomous systems, or independent net-
works in the global routing system) using BGP data, and ver-
iﬁed that they matched only assigned ranges of IP addresses.
• In Section 3.4 we analyze source port numbers in transport-
layer headers from selected scanning bots. The consistency
of these parameters over time suggests that the source ad-
dresses are not spoofed: IP spooﬁng requires the use of raw
sockets and usually involves random selection of spoofed ad-
dresses, whereas the progression of source ports followed by
these bots is typical of packets sent through standard sockets
that use ephemeral ports assigned by the operating system
based on a single, global counter.

3.3 Botnet activity

This convincing evidence that the source IP addresses are au-
thentic supports our hypothesis that a botnet is generating the pack-
ets, rather than one or a few hosts, or a worm spreading. Over
the course of twelve days, we observed about 3 million source ad-
dresses, which mapped to countries and networks all over the world
(Section 4.4). Figure 2 displays a clearly delimited beginning and
end of the behavior, with strong diurnal periodicity and variations
of intensity. Spreading worms tend to exhibit closer to exponential
growth in IP addresses infected and trying to spread further [65].

Figure 3: The case of the Internet black-out in Egypt helps to verify that
source addresses from the sipscan are not spoofed. The continuous line
shows the reannouncement of routes to Egyptian IPv4 preﬁxes when the
country reappears on the Internet on 2 February 2011. The sipscan starts
approximately on the 1 February, but we start seeing probes from source
IPs geolocated to Egypt only when the Egyptian networks get reannounced
through BGP updates.

We discovered an even more compelling piece of evidence that
this trafﬁc was generated by a botnet when we examined trafﬁc
data during last year’s nation-wide censorship episode in Egypt. In
[19] we showed that, during the Egyptian outage, some Conﬁcker-
infected hosts were still able to randomly send infecting packets
to the Internet, even if they were in networks not visible via BGP.
Outbound connectivity (from Egyptian hosts “upstream” to the rest
of the Internet) was still possible from some networks in Egypt
through the use of default routes. But while we saw Conﬁcker traf-
ﬁc originating from IPs geolocated in Egypt, we saw no sipscan
trafﬁc from Egypt, consistent with the sipscan hosts not acting in-
dependently, but rather receiving instructions from a command &
control ‘botmaster’ host (i.e., requiring bidirectional connectivity)
outside of Egypt.

To simultaneously represent both the temporal and spatial dy-
namics of the event, we created a “World Map” animation avail-
able at [13]. Figure 4 is a single frame of the animation (capturing a
window of 5 minutes and 20 seconds of data) from Wed 2 Feburary
09:34:00 2011. The circles are centered at the geographical coordi-
nates of source IP addresses. For each time bin, the size of the circle
is proportional to the number of hosts geolocated to those coordi-

 0 500 1000 1500 2000 2500 300002/02 08:0002/02 09:0002/02 10:0002/02 11:0002/02 12:0002/02 13:00 0 100 200 300 400 500 600Re-announced Egyptian IPv4 PrefixesSipscan Probing Rate from Egyptian BotsDate (UTC)IPv4 BGP PrefixesSipscan Probing Rate4Figure 4: Snapshot of our “World Map” animation of the sipscan available
at [13] (Wed Feb 2 09:34:00 2011). The animation shows, in 5:20-minutes
of data represented per frame, circles at the geographical coordinates of
source hosts (bots) with size proportional to the number of hosts geolocated
to those coordinates, and color to the number of packets sent. The animation
depicts the spatial and temporal dynamics of the scan.

nates, whereas the color reﬂects the number of packets sent (these
two values are not proportional because, as we show in Section 4,
there are both hosts sending a single probe and hosts sending mul-
tiple probes at different rates). The animation illustrates the trafﬁc
volume and geographic scope of the scan over time. Geolocation
of IP addresses was done using the MaxMind GeoLite database re-
leased on March 1st, 2011, temporally proximate to the event [41].
The software used to create the animation is an improved version
of the code originally developed at CAIDA by Huffaker et al. and
available at [2]. The animation visually represents, for the ﬁrst time,
an Internet-wide scan conducted by a large botnet.
3.4 A “/0” scan

Observation from the UCSD Network Telescope is limited to
packets destined to the corresponding /8 network. However, we also
discovered evidence that the scan targeted the entire IPv4 address
space (a /0 scan): similar trafﬁc patterns observable on other net-
work segments, and a continuity in source port usage in the packets
we observed.
3.4.1 Targeting the UCSD Network Telescope
Even if approximately 15% of addresses of our darknet were not
hit by the scan, the sipscan uniformly targeted the entire address
range of the /8 network. In Section 4.3 we show that the missing
(15%) targets may be due to a speciﬁc conﬁguration parameter that
would trade completeness of IPv4 address space coverage for re-
dundancy in the utilization of the bots.
3.4.2 DShield repository
We have found circumstantial evidence of sipscan trafﬁc in the
DShield repository [34]. DShield is a constantly updated reposi-
tory of scanning and attack reports. In particular it reports aggre-
gated data of trafﬁc observed on several “sensors” (i.e., small hon-
eynets and darknets) operated by different participating organiza-
tions. Figure 5 shows the number of distinct source IP addresses
per day observed by the DShield sensors on port 5060 from the 1
January to 28 February 2011. The large spikes in the trafﬁc proﬁle
of the source IP addresses match the sipscan proﬁle shown in Fig-
ure 2, indicating that the same phenomenon was probably targeting
other networks besides the /8 monitored by the UCSD Network
Telescope.
3.4.3 MAWI WIDE Samplepoint-F
We also examined trafﬁc traces from a 150Mbps link on a trans-

Figure 5: Daily count of unique source IP addresses in packets to port 5060
extracted from DShield sensor data [34]. The unique source IP count, for
the months of January and February 2011, shows an increase of almost
one order of magnitude between the 1st and the 12th of February. Its pro-
ﬁle matches the sipscan shown in Figure 2, suggesting that sensors (dark-
nets and honeynets) in other /8 networks received the same kind of trafﬁc.
The start and end times of the sipscan are denoted in this graph by the two
dashed vertical lines.

Figure 6: Sipscan UDP packets observed by (i) the UCSD Network Tele-
scope (y axis, packets per second) and (ii) MAWI WIDE Samplepoint-F
(y2 axis, packets per daily sample of xx minutes). The samples found on
the small link monitored by the MAWI working group perfectly follow the
proﬁle of the sipscan observed by the UCSD Network Telescope, strongly
suggesting that the sipscan targeted also other /8 networks.

Paciﬁc line that are made available by the MAWI WIDE project
[29] (link “samplepoint-F”). The trace set is made of daily traces
in pcap format, of 15 minutes each, where the IP addresses are
anonymized and the transport-layer payload is removed [28]. This
anonymization scheme prevented us for searching the trace specif-
ically for the sipscan packets, since we can see neither the UDP
payload signature nor the source IP addresses of the packets. In-
stead, from the analysis of the sipscan SIP headers (Figure 1), we
built a ﬂow-level signature with the following conditions for each
UDP ﬂow: (i) destination port 5060; (ii) made of a single packet;
(iii) ﬂow-size (in this case matching the packet size) between 382
and 451 bytes. We obtained the packet size range by examining all
SIP header ﬁelds that were not ﬁxed size, and how they varied (e.g.
IP addresses in ascii format take between 7 and 15 bytes). We fur-
ther sanitized the remaining ﬂows considering some isolated cases
of spikes in the MAWI traces which were using source ports outside
of the most common ranges observed on the telescope (see Figure
7). The ﬁnal result, depicted in Figure 6, is that there are almost no
packets matching the ﬂow-level signature in the days outside of the
sipscan, whereas their proﬁle during that period roughly follows the
proﬁle of the sipscan (The lack of tight precision between the two
data sets in Figure 6 is due to the MAWI samples being coarser-

 0 500 1000 1500 2000 2500 300001/0101/0801/1501/2201/2902/0502/1202/1902/26DShield Observed Sources to UDP Port 5060Date (UTC) 0 10 20 30 40 50 60 70 8001/3102/0202/0402/0602/0802/1002/1202/1402/16 0 100 200 300 400 500 600Packets Per Second (UCSD)Packets Per Daily Sample (MAWI)Date (UTC)UCSD Network Telescope Packet RateMAWI Sample-Point F Daily Packet Count5Figure 7: Distribution of the source port numbers (bin size = 100) The most
common range is 1025-5000, used by several versions of OSs from the Mi-
crosoft Windows family.

grained, 15 minutes each once per day, and from a relatively small
link).

This ﬁnding is important because the anonymization technique
used for MAWI traces preserves matching preﬁxes and IP classes
between IP addresses [28]. The analysis of this data therefore re-
vealed that, on average, 8 different /8 classes were targeted every
day by the packets traveling on this link.
3.4.4 Exploiting source-port continuity
The positive correlations of our data source with the DShield
and MAWI data sources convinced us that the sipscan hit other /8
networks as well as our own. We also found the following evidence
that the sipscan most likely targeted all the /8 networks in the IPv4
address space.

We identiﬁed a few bots scanning at a roughly constant pace
over several days. Analyzing the sequence of source ports in their
scanning packets revealed that some of these bots used incremental
source ports within a speciﬁc range assigned by the operating sys-
tem. For example, Windows XP and other Microsoft operating sys-
tems assign a new ephemeral source port in the range 1025-5000
by incrementing a global counter for each opened TCP or UDP
socket [44]. We inferred how many other connections/sessions a
bot opened between each probe sent to the darknet by following
the sequence of source ports the bot used and “unwrapping” them,
taking into account their range. In [39], Li et al. used the same
methodology to estimate the global scope of botnet scans. We could
only apply this technique to the few persistent bots (see Section 4.2)
running on an operating system conﬁgured to assign source ports
in this manner.

Figure 8 depicts the behavior of three of these bots (the bot num-
ber indicates its rank based on the number of probes they sent).
The continuous lines represent the count of probes (a UDP packet
plus at least one TCP SYN packet) observed by the UCSD Net-
work Telescope (y axis), whereas the dashed lines represent the
number of connections/sessions opened by each bot as inferred by
unwrapping its source port numbers (second y axis). For each bot
the two curves follow approximately the same trend, suggesting
that the view from the telescope is representative of the global be-
havior of the bot. The UCSD Network Telescope covers 1/256th of
the entire IPv4 address space, so a uniformly random scanning bot
will probe this /8 darknet approximately every 256 probes, or ev-
ery 512 new connections opened (every probe includes a UDP and
TCP connection attempt). We ﬁnd these subclass of bots actually
hitting our darknet every 570 packets (on average), which would
be consistent with their hosting computer opening other connec-
tions/sessions unrelated to the scan, such as legitimate user activity
or communication with the botmaster. In the next section we will
show how the bots select their target IP addresses by ﬁrst incre-
menting the most signiﬁcant byte. Therefore we can assume that

Figure 8: Estimating the global scan scope by exploiting source port con-
tinuity in scanning bots: continuous lines represent the count of probes (a
UDP packet plus at a least one TCP SYN packet) observed by the UCSD
Network Telescope (y axis), whereas the dashed lines represent the number
of connections/sessions opened by each bot as inferred by unwrapping its
source port numbers (second y axis). Each bot probes the darknet on av-
erage (approximately) every 285 global probes, suggesting that during its
absence reaches the remaining 255 /8 networks in the IPv4 address space.

the external 255 probes from the bot reach all the other /8 networks
in the IPv4 address space. In Section 4 we will also explore another
feature of the data in Figure 8: the bots proceed at different rates
and are active over different time intervals. We will refer to this
ﬁnding later in the paper.

4. ANALYSIS PART II: PROPERTIES OF THE

SIPSCAN AND OF THE BOTNET

4.1 Reverse IP Sequential order

A ﬁrst manual observation of the sipscan destination addresses
revealed that the bots were coordinated, presumably by a botmas-
ter, to choose targets in a pre-deﬁned sequence while scanning the
entire IPv4 address space. Such coordination has not yet been doc-
umented in botnet-related research literature (see Section 2). Even
more interesting, the target IP addresses incremented in reverse-
byte order – likely to make the scan covert. Reverse-byte order
scanning was considered in the context of supporting network-
friendly Internet-wide service discovery [37], but was discarded for
being difﬁcult to extrapolate metrics from partial scans. A pseudo-
random approach in selecting target addresses was also used as a
technique for non-aggressive Internet-wide measurement surveys
[32]. But to the best of our knowledge, this reverse-byte order scan-
ning has been neither empirically observed in malicious scans nor
discovered in botnet source code.

Manual examination of a sequence of 20 million addresses is
practically infeasible; even its visual representation is a challenge.
We used a visual map based on the space-ﬁlling Hilbert Curve
[43,50] to verify that the target IP addresses incremented in reverse-
byte order for the three bytes that we could observe (the most sig-
niﬁcant byte is ﬁxed in our data to the /8 of the darknet observation
point).

The Hilbert curve is a continuous fractal curve that can be used
to map one-dimensional data into two dimensions ﬁlling a square,
such as shown in Figure 9. Other researchers have effectively used
the Hilbert space layout to visualize results of Internet-wide scan-
ning or other Internet-wide data [21, 32]. The original order of
the data is preserved along the Hilbert curve in two dimensions,

 0 50000 100000 150000 200000 250000 300000 350000 0 10000 20000 30000 40000 50000 60000 70000FrequencySource Port 0 1000 2000 3000 4000 5000 6000 7000 800002/0102/0202/0302/0402/0502/0602/0702/08 0 500000 1e+06 1.5e+06 2e+06 2.5e+06 3e+06 3.5e+06 4e+06 4.5e+06# UDP Packets seen by the UCSD Network Telescope’Unrolled’ Source Port NumberDate (UTC)Bot 3 - # PacketsBot 3 - Unrolled Source PortBot 7 - # PacketsBot 7 - Unrolled Source PortBot 14 - # PacketsBot 14 - Unrolled Source Port6the entire address space. Figure 10 shows the frame for 5 Febru-
ary 2011 11:47 GMT from the full reverse-byte order animation
available at [13]. This animation proves the strong coordination of
bot activity: the progression is strictly observed by all the bots for
the entire execution of the scan, independent of (i) variations in
global scanning speed, (ii) the rates at which different bots pro-
ceed (see Section 3.4), (iii) the large number of hosts involved at
the same time and thus the possible distributed architecture of the
botnet (e.g., multiple C&C channels).

We also created a composite animation which combines both the
natural and reverse byte order heatmaps with the world map ani-
mation into a single synchronized view of both the sources and the
targets of the sipscan. This composite animation is available at [13].
The reverse IP sequential order used in this scan has signiﬁ-
cant implications. Observing this scan from a generic /24 network,
would result in a very low number of packets per day: the aver-
age speed, during the largest phase of the scan – from the 2nd to
the 6th of February – increments the least signiﬁcant byte 34 times
per day, unlikely to be detected by automated systems. This stealth
technique is even more effective when combined with the constant
turnover of bots that we illustrate in the next section.
4.2 Bot Turnover

The scanning statistics in Table 1, in particular the number of
unique source IPs (about 3 million), total number of probes (about
20 million), and the average number of destinations a source tar-
gets (6.85), suggest that there is a large turnover in the use of the
bots. Figure 11 shows the constant use of new bots throughout the
entire scan, except for the interval from approximately 7 Febru-
ary 00:00 GMT to 11 February 12:00 GMT, which exhibits sig-
niﬁcantly reduced botnet activity. The continuous line with square

Figure 9: Examples of Hilbert’s space-ﬁlling curves: orders 1, 2 and 3.

and conveniently displays data that is structured in powers of two.
Hilbert curves of order 4, 8, and 12 have 28, 216, 224 points, re-
spectively, which in turn correspond to the masks for Class C (/24),
Class B (/16), and Class A (/8) address blocks in the IPv4 number-
ing space. When mapping IP addresses to these two-dimensional
Hilbert curves, adjacent address blocks appear as adjacent squares,
even CIDR blocks (in between Class A, B, and C block sizes) are
always represented as squares or rectangles.

We visualized the progression of the IP addresses targeted by
the sipscan through an animation. Each frame represents the IPv4
address space of our darknet using a Hilbert curve of order 12, in
which each cell corresponds to one IP address of the darknet, thus
varying the 3 least signiﬁcant bytes through all the possible combi-
nations. The curve is displayed as a bitmap of size 4096x4096, with
each pixel being assigned an IP address. For each frame, the pixels
corresponding to the IP addresses that have been probed prior to
that point in time are highlighted. We also added a brightness de-
cay effect to better highlight the addresses probed in the last few
frames while displaying the animation.

Figure 10: Snapshot of our animation representing the progression over time
of the IP addresses targeted by the sipscan [13]. The darknet address space
is represented as a Hilbert curve of order 12 in which the order of the three
least signiﬁcant bytes of each address is reversed before mapping it into
the curve. Highlighted pixels correspond to IP addresses that have been
probed up to that time (5 Feb 2011 11:47 GMT, in this frame). The anima-
tion proves the reverse-byte order progression is rigorously followed by the
bots during the entire 12 days, independent of the varying rate of the sip-
scan. [The above snapshot is a modiﬁed version of the original frame from
the reverse byte order animation at [13]; we over-emphasized the fading ef-
fect to better illustrate, in a single picture, the path the scan took through
the address space.]

Drawing the Hilbert curve using IP addresses sequenced in their
natural byte order does not reveal a particular pattern in the tar-
get progression, showing the square uniformly ﬁlling across the 12
days of the scan. This animation of target progression is available
at [13]. In contrast, reversing the order of the three varying (i.e.,
least signiﬁcant) bytes yields a representation that clearly illustrates
the reverse sequential IP order rigorously followed by the sipscan:
throughout the 12 days all the bots “march” together toward ﬁlling

Figure 11: Arrival of new bots. The continuous line with squares shows the
cumulative percentage of bots that probed our darknet throughout the 12-
day scan. The continuous line with circles is the cumulative percentage of
source /24 networks. The slope of these curves indicates a constant arrival
(during the botnet’s active periods) of new bots participating in the scan.
The dashed line represents the number of unique source IPs scanning per
5-minute interval, representing the evolution of the scan over time.

symbols shows the cumulative percentage of bots that probed our
darknet over the 12-day scan. Its linear slope indicates a constant
arrival of new bots participating in the scan. To partially take into
account the effect of dynamic IP address assignment, we also plot
the cumulative sum of unique /24 networks containing the source
IP addresses (continuous line with circles). The slope of this curve
proves that new bots take part in the scan for its entire duration.

Figure 12 shows the distribution of the number of packets sent by
each bot. The diagram on the left uses a log-log scale to show all the
data, whereas the diagram on the right uses a linear scale to zoom
in to the left side of the distribution up to 10 packets. More than
1 million bots (more than 1/3 of the total) sent a single probe and

64636162605958575655545352515049484746454443424140393837363534333231302928272625242322212019181716151413121110987654321 0 10 20 30 40 50 60 70 80 90 10001/3102/0202/0402/0602/0802/1002/12 0 5000 10000 15000 20000 25000Cumulative Sources (%)Unique Source IPs (5 min bins)Date (UTC)Cum. Source IPsCum. Source /24sSource IP Rate7never participated further in the scan. The number of bots that sent
more than 100 packets during the scan is two orders of magnitude
smaller. This difference suggests rapid turnover of bots during the
scan. We hypothesize that this behavior is related to how the C&C
channels managed and assigned tasks to bots. For example, a C&C
channel may assign a list of target IP ranges to a queue of bots, in
which case it is unlikely that a single bot could reach the head of
the queue twice. In such a situation, bots that reappear in the scan
would have likely been assigned to a C&C channel with a smaller
pool of bots.

(a) Coverage

(b) Overlap

Figure 12: (left) Full histogram of packets sent per bot (log-log scale);
(right) zoomed histogram of packets sent per bot for bots that sent up to
10 packets (linear axis) Most bots sent few packets, e.g., over a third of the
bots sent a single packet during the entire scan.

In combination with the reverse-byte order property of the scan,
the high bot turnover rate makes the scan impressively covert. Not
only would an automated intrusion detection system on a /24 net-
work see only 34 packets to the same port, but they would most
likely arrive from 34 distinct IP addresses, making detection highly
unlikely.
4.3 Coordination and Adaptation
4.3.1 Coverage and Overlap
The scan fails to cover the entire darknet’s /8 address space,
probing only 86.6% of it (Table 1). On the other hand, there is
a non-negligible overlap in terms of bots hitting the same target:
about 5.7 million IP addresses were probed by more than one bot,
and on average a targeted IP is probed by 1.39 distinct bots. Whether
probed zero, one, or multiple times, the probed IP addresses are
scattered all over the address space without clusters or holes, in
both the standard and reverse representation of the address bytes.
These properties – coverage and overlap of target addresses – are
independent of the number of bots active at any given time, the
overall rate of the scan, or speciﬁc subnets being scanned. But we
did discover a correlation between coverage and overlap in targets,
which we believe is likely a function of a parameter of the scan
conﬁgured by the botmaster to support trading off completeness
and redundancy of scanning.

The representation with the Hilbert curve of the probed IP ad-
dresses in reverse byte order reveals three regions with different
densities. These regions are labeled A, B, C, in a detail of the
Hilbert-curve map in Figure 13(a) and correspond to three differ-
ent phases of the scan as indicated in Figure 13(c). Brighter areas
indicate a greater coverage of the corresponding address space: the
scan starts with a very high percentage of targets probed (“A”), af-
ter few hours a parameter is changed and the coverage signiﬁcantly
drops (“B”), ﬁnally the parameter is adjusted again and an inter-
mediate level of target coverage remains for the rest of the scan

(c) Phases over time

Figure 13: Different phases (A, B, C) of the scan characterized by differ-
ent but correlated rates of coverage and overlap of the target IP space, (a)
Slice of the Hilbert-curve map (with reversed-byte order IP addresses) high-
lighting areas of different density indicating different coverage of the target
space. (b) shows the same phenomenon in terms of overlap: the lit pixels
in the map represent target addresses probed by more than one bot. The
three regions perfectly match between the two maps. (c) Scanning source
IPs throughout scan, showing the transitions from Phase A to B and from
Phase B to C.

Start time
# of probes
% of IP space covered
Average bots per target

Jan 31 21:00
179,143
93.81%
1.66

Feb 1 00:45
486,394
76.27%
1.01

Feb 1 11:20
19,590,184
86.98%
1.40

Table 2: Characteristics of the three phases of the scan, with different cov-
erage and overlap of the target address space, show a trade-off between the
two properties.

(“C”). The same regions are visible in Figure 13(b), where we use
the Hilbert-curve map to highlight the overlap in targets: IP ad-
dresses (in reverse-byte order) that were probed more than once are
depicted in white.

Table 2 shows statistics calculated separately for the three phases
of the scan. The correlation between coverage and overlap of the
scan is evident, and is consistent with a probabilistic mechanism in
the choice of the targets that can be conﬁgured by the botmaster
to trade off completeness and redundancy of scanning. The ﬁnd-
ing illustrated in Figure 14 further substantiates the hypothesis that
the three phases correspond to different conﬁgurations of the scan.
The ﬁgure shows, for each phase, the distribution of the number of
packets sent in each “reverse /16 subnet” (we deﬁne a reverse /16
subnet as the set of all possible IP addresses obtainable when the
least two signiﬁcant bytes are ﬁxed). The three curves refer to pop-
ulations of different size, which explains the different smoothness
of their shapes (e.g., phase C is considerably longer thus covering
a larger number of reverse /16 subnets). However, all of them are
highly centered around a different value (average values are 395.6

100101102103104105# of Packets100101102103104105106107# of Source IPs12345678910# of Packets020000040000060000080000010000001200000# of Source IPs 0 5000 10000 15000 20000 2500001/3102/0202/0402/0602/0802/1002/12Unique Source IPs (5 min bins)Date (UTC)ABCSipscan Source IPs8(A), 196.3 (B), 312.6 (C)) and mostly non-overlapping, reﬂecting a
consistent and distinctive behavior in each phase.

Figure 14: Consistent and distinctive behavior of the different phases of the
scan. The curves represent, for each phase A, B, C, the distributions of pack-
ets observed at the UCSD Network Telescope in each “reverse /16 subnet”.
The distributions are all centered around different values and mostly non
overlapping.

Finally, in both Figures 13(a) and 13(b), we also observe bet-
ter coverage and larger overlap in the transition from one region
to the other, suggesting that the botmaster re-issued a command to
scan those IP ranges to the bots after changing the conﬁguration
parameter (possibly because the scan was stopped without collect-
ing the results of the previous command). The higher coverage in
these transition areas provides further evidence of a probabilistic
approach in the choice of the target IPs (probably happening at the
level of the single bots): re-issuing the commands for that range of
target IPs results in a partially different set of probed targets.

Even given non-negligible redundancy, an average of 1.39 bots
hitting the same target is small compared to the large number of
bots involved. Such low redundancy is novel, or at least undocu-
mented in the literature, which has mostly reported on bots that
independently scan the same address range in a random uniform
fashion [12,39]. The small overlap and thus high efﬁciency in terms
of completeness vs. redundancy achieved by this botnet is an im-
pressive consequence of strongly orchestrated behavior.

4.3.2 Adaptivity
The strong coordination of bot activity is also visible in terms
of adaptation capabilities. Starting around 7 February 00:00 GMT
through around 11 February 12:00 GMT, the scan proceeds very
slowly, with only a few active bots (Figure 2). A possible hypoth-
esis is that most of the C&C channels are down during this pe-
riod. However, we observe that the target IP ranges that would have
normally been assigned to these C&C channels were automatically
redirected to those channels that were still up.

Figure 15 illustrates this behavior. Dashed lines in the graph rep-
resent the probing rate per hour of the three bots discussed in Sec-
tion 3.4. During this period the bots do not change their speed, sug-
gesting that the C&C channel they refer to has not changed its char-
acteristics in terms of numbers of bots managed, etc. (i.e., the num-
ber of bots competing for a certain C&C channel does not change,
therefore the rate at which each bot gets assigned a new “reverse”
/24 stays the same). However, over this same time interval we ob-
serve a signiﬁcant change in the sequences of IP ranges assigned
to these bots. The continuous lines in Figure 15 show, for each of
the three bots, the distance between subsequent target IPs, calcu-
lated by subtracting the target IPs after reversing their byte order
and converting them into 32-bit numbers. The graph shows a drop
of about one order of magnitude in the distance, meaning that the

Figure 15: Adaptive assignment of target IP ranges to different C&C chan-
nels. Dashed lines represent probes per hour (PPH) carried out by 3 different
bots. Their speed did not change signiﬁcantly on 7 February but the global
speed of the scan decreased considerably, probably because some C&C
channels went off-line. However, the target IP ranges assigned to these bots
became denser during this period, to compensate for the absence of other
C&C channels: continuous lines represent the distance between subsequent
target IPs of each respective bot, showing an order of magnitude decrease
in that time interval.

corresponding C&C channel(s) receive a “denser” list of targets to
compensate for the disappearance of the other C&C channels.
4.4 Botnet characteristics

Observing a horizontal scan of this magnitude from such a large
darknet allows unique insight into the characteristics of the botnet
that performed it. The size of the darknet, combined with the re-
verse IP sequential ordering of the targets, allowed the telescope
to capture probes across the entire life of the scan, providing an
unprecedented view of the population of the Sality botnet.

A white paper from Symantec [23] estimated the size of the Sal-
ity botnet at approximately a million bots, by measuring the num-
ber of hosts that a ‘rogue’ server under their control communicated
with. We identiﬁed a total of 2,954,108 unique source IPs for bots
that participated in the sipscan. As the authors of [59] demonstrate,
it is difﬁcult to accurately determine the size of the botnet popula-
tion when using source IP addresses collected from trafﬁc sent by
infected hosts. This difﬁculty arises due to the effects of dynamic
IP address assignment (DHCP), which can result in several IP ad-
dresses being used by a single bot (especially over a 12-day inter-
val), and NAT, which can cause multiple bots to appear as a single
IP. However, Figure 11 shows continuous growth in the number of
unique /24 networks hosting bots over the entire duration of the
scan. This diversity of /24 networks can be used as an approxima-
tion for the number of new bots that arrive over the course of the
scan.

We leverage the large population of source addresses observed
to further understand how hosts compromised by botnets are dis-
tributed globally. To this end, we determine the Autonomous Sys-
tem Number (ASN) for each bot using a Routeviews BGP routing
snapshot [60] taken on Monday 14 February 2011 at 12:00 UTC,
proximate to the scanning episode. Using this table, we perform
longest-preﬁx matching to resolve each source IP to its origin AS.
The ASes enumerated in Table 3 are the 10 most common across
the bots used by the sipscan botmaster. We also list the AS name
and home country extracted from whois data. Similar to the Con-
ﬁcker [55] and Mega-D [4] botnets, we see a dominant AS at the
top of the list (TTNet), which alone accounts for over 10% all par-
ticipating bots, followed by a long tail of small ASes. However,

 1 10 100 1000 10000 100 150 200 250 300 350 400 450 500 550 600 650# of Reverse /16 Subnets# of PacketsABCPhase APhase BPhase C 10 100 1000 1000002/0502/0502/0502/0502/0602/0602/0602/0602/0702/0702/0702/0702/08 10 100 1000 10000Observed UDP Packet Rate per hourInter-destination IP Address GapDate (UTC)Bot 3 Inter-IP GapBot 7 Inter-IP GapBot 14 Inter-IP GapBot 3 PPHBot 7 PPHBot 14 PPH9Rank

1
2
3
4
5
6
7
8
9
10

AS Name
TTNet
TE
BSNL-NIB
TELKOMNET

% ASN
9121
8452
9829
17974
45899 VNPT
7738
8708
24560 AIRTELBROADBAND India
9050
9737

Country
Turkey
Egypt
India
Indonesia
Vietnam
Brazil
Romania

TELEMAR
RDSNET

RTD
TOTNET

Romania
Thailand

10.81
4.57
4.40
4.22
4.20
3.01
2.65
2.51
2.07
1.94

Table 3: Top 10 origin ASes of bots used in the sipscan. As noted in other
work [55], we see a dominant AS at the top of the list (Turkey, with 10%
of the overall bot population), followed by a long tail. The country and AS
name data have been extracted from whois data for each AS.

Conﬁcker [55]
Country
China
China
Brazil
Taiwan

ASN
Rank ASN
3352
4134
3269
4837
6739
7738
3462
9121
45899 Vietnam 6147
27699
9829
8167
3269
9121

Mega-D [55]
Country
Spain
Italy
Spain
Turkey
Peru
19262 USA
China
4134
Brazil
7738
7418
Chile
22927 Argentina

Brazil
India
Brazil
Italy
Turkey

1
2
3
4
5
6
7
8
9
10

Sipscan

Country
ASN
Turkey
9121
Egypt
8452
India
9829
17974
Indonesia
45899 Vietnam
7738
8708
24560
9050
9737

Brazil
Romania
India
Romania
Thailand

Table 4: Comparison of the top 10 ASes observed in three different botnets:
the Conﬁcker botnet as surveyed by [55], the Mega-D botnet as reported
by [4, 55], and the Sality (sipscan) botnet. We observe a trend toward East-
ern European countries which have not featured as prominently in previous
botnets.

although the scale of the leading ASes may resemble other botnets,
the networks featured in the top 10 are quite different (Table 4).
Only four of the ASes in the top 10 of the sipscan appear in the
top 10 of either Conﬁcker [55] or Mega-D [55]. Notably, TTNet in
Turkey, which [55] lists in 10th place, represents the largest AS by
more than a factor of two in the sipscan botnet.

Both the Conﬁcker and Mega-D AS distributions indicate a move
toward larger representation of bots in Asian and South Ameri-
can countries, corroborating the results of [55]. However, we see
a considerable rise in bots in Eastern European countries, which
becomes even more apparent on a per-country level (Table 5).

Simply aggregating bots by their ASN can be misleading be-

Mega-D [4]

% Country

Russian Federation
Turkey
Poland
Thailand
Brazil

14.82 USA
11.74
6.33
6.32
5.32
4.11
3.89 Germany
3.23 United Kingdom
2.53
2.25

India
Spain

Sipscan
% Country
Turkey
India
Brazil
Egypt
Indonesia
Romania
Russian Federation

12.55
12.54
8.64
7.23
5.77
5.59
5.58
5.36 Vietnam
5.10
Thailand
3.01 Ukraine

Rank

1
2
3
4
5
6
7
8
9
10

Table 5: Top 10 Countries of bots used in the sipscan compared to the Mega-
D botnet. Geolocation data for sipscan sources was obtained using the Max-
Mind GeoLite database [41]. Aggregating bots by country rather than AS
helps identify regions that are heavily compromised by bots but have many
small ASes, such as the Russian Federation, which is not in the list of top
10 ASes.

cause many large organizations/providers have multiple ASNs. To
complement our AS ﬁndings, we geolocate the bot’s IP address us-
ing a MaxMind GeoLite database [41] snapshot from March 1 2011
(again, proximate to the scan episode). Table 5 presents the top 10
countries for bots in both the sipscan and the Mega-D botnets [4].
Once we aggregate bots to a country granularity, the distribution of
locations changes appreciably, with the Russian Federation making
an appearance in the top 10 lists of both Mega-D and sipscan2.

Contrary to similarly large botnets [4,48,55,61], the sipscan bots
do not have a dominant presence in China. China has been recorded
in the top ten lists of these other botnets, but in the sipscan, China is
in 27th place (0.57%) - close to U.S.’s 29th place position (0.44%).
Heatmaps of overall Sality bot locations [23] also indicate a cor-
responding lack of Sality bot presence in China. We believe this
under-representation of China, when compared to previous botnets,
may be considered a limitation of the Sality botnet rather than a spe-
ciﬁc design choice by the botmaster. Although the data presented
in [23] is largely in aggregated graphical form, it does appear to
corroborate our ﬁndings in terms of geographical distribution. As
noted earlier however, we are able to identify a much larger bot
population.

In addition to analyzing the networks that host the bots, we also
investigated the bots themselves. Output of the p0f passive OS ﬁn-
gerprinting tool [63] reported that more than 97% of bots were run-
ning operating systems of the Microsoft Windows family. The dis-
tribution of UDP source port values shown in Figure 7 also shows
that the majority of packets fall into the 1025-5000 range of ports,
which was used by Microsoft Windows until Vista and Server 2003.
There are, however, a non-negligible number of bots that p0f iden-
tiﬁed as running the Linux operating system. We believe these ma-
chines are likely not bots but rather NAT gateways proxying pack-
ets from infected hosts.

5. BINARY ANALYSIS

We had the opportunity to analyze the binary code responsible
for this scanning. The binary is a separate executable that Sality-
infected computers download via a URL as directed by the peer-to-
peer botnet infrastructure [22, 23]. Although our work focuses on
the Internet measurement aspect of the event, we partially reverse
engineered this code to validate some of our inferences. This sec-
tion summarizes the most relevant ﬁndings.

We found that each bot contacts a hard-coded IP address (the
C&C channel) in order to receive a probing command from the
botmaster. The command followed by the bots we observed is one
of three different command types that the binary supports. Through
this command, the botmaster sends the target IP to the bot in the
form of an ASCII string (dotted quad decimal format). By ana-
lyzing the code, we veriﬁed that this address is the actual address
probed by the bot. In particular, the bot properly manages the endi-
anness of the target IP addresses, e.g., when converting the ASCII
string into binary and then when contacting the target.

Each bot reports through the C&C channel the results of both the
TCP and UDP probes immediately after receiving a response from
the victim. It then selects and probes a new target by incrementing
the most signiﬁcant byte of the target address received by the bot-
master. This increment is repeated 15 times, for a total of 16 targets
probed, each one from a different /8 network. The bot then sleeps
for a ﬁxed amount of time before contacting the botmaster again to
receive a new target IP.

These ﬁndings, along with the progression of the target IP ad-
dresses observed through the UCSD Network Telescope, indicate

2 [55] only provides Conﬁcker results at an AS level.

10that both the botmaster and each bot incremented the target IPs
in reverse-byte order, and that the sequence followed by the scan
reﬂected the original orders of the botmaster (who was sending
addresses as quad decimal dot-separated ASCII strings). In other
words, the reverse byte order probing was most likely not due to a
bug or error in managing the endianness of the target IP addresses.
Inspecting the binary also revealed that several interesting prop-
erties of the scan would have not been visible by relying solely on
the reverse-engineering the bot binary. For example, the code run-
ning on a single bot shows only the selection of 16 target addresses
(whose increments to the most signiﬁcant byte could have been at-
tributed to a coding mistake, without the knowledge of the overall
pattern). But analysis of trafﬁc from the UCSD Network Telescope
revealed a heavily coordinated behavior of many bots around the
world, allowing inference of the mechanisms adopted by the bot-
master in orchestrating the scan.

6. DISCUSSION

Botnets commonly scan large segments of the Internet’s address
space for various purposes, such as infecting or compromising hosts,
recruiting hosts into a botnet, or collating a list of future targets.
Awareness of evolving botnet characteristics and spreading tech-
niques can improve our ability to navigate and mitigate their im-
pacts. As mentioned in Section 2, although many aspects of botnet
behavior have been documented, we are not aware of any published
investigation of a million node botnet covertly scanning the entire
IPv4 space. Most of the available literature are studies of older
generation (pre-2007) botnets, which are substantially smaller in
size, scope, and capability from newer-generation botnets. Stud-
ies of newer generation bots have focused on aspects other than
the scanning behavior, such as the command and control, peer-to-
peer infrastructure, or the domain of abuse, e.g., spam campaigns
inﬂicted by the botnet. We present a new angle on the study of
new-generation botnets: their scanning activity as observable in
large darknets, most aspects of which cannot be inferred by reverse-
engineering the bot malware.

This work offers contributions in two areas: documenting and
visualizing behavioral aspects of a current generation botnet, and
thoroughly analyzing the multiple synergistic characteristics of its
extraordinarily well-coordinated scanning.

The scan that we analyzed in this study was new, or at least not
previously documented, in four ways. It was sourced by a current-
generation (2011), widely-deployed, peer-to-peer botnet (Sality [23]).
Although earlier-generation version of Sality were ﬁrst reported in
June 2003, it was not until February 2011 that Sality operators
deployed a new module designed to locate and compromise SIP
servers in a distributed, heavily coordinated manner. The popula-
tion of bots participating in the scan is several orders of magni-
tude larger than any previously documented botmaster-orchestrated
scanning. Previous Internet-wide scanning behavior perpetrated by
botnets was due to worm-spreading modules inside the bot, e.g,
in Conﬁcker, rather than botmaster-coordinated scanning. Not only
was this sipscan coordinated, but it was impressively well-engineered
to maximize coverage, minimize redundancy and overlap among
target IP addresses by scanning bots, and evade detection by even
state-of-the-art intrusion detection capabilities.

We used the detailed packet traces captured by the darknet to
richly analyze many properties of the botnet, including several in-
teracting properties of the botnet’s heavily coordinated scanning.
The size of the botnet, the fact that it was a /0 scan, i.e., of the
entire IPv4 address space, and the reverse-byte ordering sequence
of IP addresses targets were unprecedented and impressive enough
characteristics, the last of which we only discovered using animated

visualization techniques. This animation also revealed that the scan
operated in distinct phases, with observable phase transitions. We
presume the botmaster triggered these phase changes using con-
ﬁguration parameters in the malware, in order to trade off address
coverage vs. redundancy in scanning. Time-series analysis of the
active IP addresses operating as bots revealed an unusually rapid
turnover rate and associated low re-use rate of the bot population,
all heavily coordinated by the botmaster to scan in a extremely reg-
ular, stealth pattern.

We did have the opportunity to dissect the binary, which we used
to validate our inferences. But most of these aspects of the scan-
ning behavior would not be revealed by reverse-engineering of the
bot binary; they require inference by measurement and analysis of
actual bot-generated trafﬁc (e.g, the mechanism that selects the IP
addresses to be scanned is not entirely encoded in the bot binary,
rather the intelligence lies in the botmaster and C&C).

We also developed several animation and visualization techniques
to facilitate our own exploration of the phenomena. For example,
using the Hilbert-curve map clearly revealed the strictly ordered
reverse-byte incrementing behavior of the progression of the en-
tire scan; without this visualization technique it is not clear that
we would have veriﬁed this sequence (for all the three observable
changing bytes) at all. Animations of the scan over time [13] also
exposed the three different phases of the scanning, and juxtapos-
ing the Hilbert maps with a geographic map of bot activity as well
as a trafﬁc time-series allowed us to visualize multiple dimensions
of the scanning simultaneously. We anticipate this technique will
be useful by us and others for analysis of other large-scale Internet
probing behavior.

As the world’s voice communications completes its transition to
an all-IP network, the vulnerability of VoIP infrastructure, and the
emerging capabilities of botnets to illegitimately commandeer its
resources, present a daunting challenge for Internet architects, en-
gineers, and policymakers. Analysis of this scan provides an illus-
trative if ominous indicator of the more sophisticated capabilities
to surreptitiously survey and exploit critical infrastructure vulnera-
bilities on a planetary scale. Our darknet packet capture allowed a
detailed analysis of a botnet’s comprehensive and covert scanning
behavior, and in the process we developed generalizable methods
to correlate, visualize, and extrapolate botnet behavior across the
global Internet.

A dataset with detailed information (e.g., timestamp and source
IP geolocation) for each sipscan UDP probing packet we captured
is available at [13].

Acknowledgements
We would like to thank: Joe Stewart of SecureWorks for helping
us to identify the sipscan binary; Ken Chiang at Sandia National
Labs for helping reverse engineering the binary; Saverio Niccolini
at NEC for brainstorming on the SIP header of the sipscan; and
Marco Stendardo for helping with the scripts used in the analysis.
We are also grateful to all the CAIDA folks for their support, and
in particular to Dan Andersen for enabling the storage, transport,
and processing of massive data volumes on systems available 24/7.
Antonio Pescapé has been partially supported by the PLATINO
project ﬁnanced by the MIUR and by the LINCE project of the
FARO programme, jointly ﬁnanced by Compagnia di San Paolo
and Polo delle Scienze e delle Tecnologie of University of Napoli
Federico II. Support for CAIDA’s effort on this project, as well as
support for the UCSD network telescope operations and data col-
lection, curation, analysis, and sharing is provided by DHS S&T
NBCHC070133 and NSF CNS-1059439.

11[3] RIPE NCC: Routing Information Service (RIS).

http://www.ripe.net/data-
tools/stats/ris/routing-information-service.

[4] Secureworks. ozdok/mega-d trojan analysis. http:

//www.secureworks.com/research/threats/ozdok/.

[5] tcpdump. http://www.tcpdump.org.
[6] The asterisk-users mailing-list archives.

7. REFERENCES
[1] AfriNIC: The Registry of Internet Number Resources for

Africa. http://www.afrinic.net.

[2] Cuttleﬁsh. http://www.caida.org/tools/

visualization/cuttlefish/.

http://lists.digium.com/pipermail/asterisk-
users/2010-November/thread.html, November 2010.

[7] UCSD Network Telescope, 2010. http://www.caida.

org/data/passive/network_telescope.xml.

[8] The voipsec mailing-list archives.

http://voipsa.org/pipermail/voipsec_voipsa.
org/2010-November/thread.html, November 2010.
[9] M. Abu Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A

multifaceted approach to understanding the botnet
phenomenon. In Proceedings of the 6th ACM SIGCOMM
conference on Internet measurement, IMC ’06, pages 41–52,
New York, NY, USA, 2006. ACM.

[10] P. Bacher, T. Holz, M. Kotter, and G. Wicherski. Know your

enemy: Tracking botnets.
http://www.honeynet.org/papers/bots, 2008.

[11] P. Barford and V. Yegneswaran. An Inside Look at Botnets.

In M. Christodorescu, S. Jha, D. Maughan, D. Song, and
C. Wang, editors, Malware Detection, volume 27 of
Advanced in Information Security. Springer, 2006.

[12] P. Barford and V. Yegneswaran. An Inside Look at Botnets.
Advances in Information Security, Malware Detection, vol.
27, 2007, Springer.

[13] CAIDA. Supplemental data: Analysis of a "/0" Stealth Scan
from a Botnet. http://www.caida.org/publications/
papers/2012/analysis_slash_zero/supplemental/,
2012.

[14] C. Castelluccia, M. A. Kaafar, P. Manils, and D. Perito.

Geolocalization of proxied services and its application to
fast-ﬂux hidden servers. In Proceedings of the 9th ACM
SIGCOMM conference on Internet measurement conference,
IMC ’09, pages 184–189, New York, NY, USA, 2009. ACM.

[15] J. Cheng. Symantec: Flashback botnet could generate up to

$10k per day in ad clicks.
http://arstechnica.com/apple/2012/05/symantec-
flashback-botnet-could-generate-up-to-10k-
per-day-in-ad-clicks/, May 1 2012.

[16] C. Y. Cho, D. Babi ´c, E. C. R. Shin, and D. Song. Inference

and analysis of formal models of botnet command and
control protocols. In Proceedings of the 17th ACM
conference on Computer and communications security, CCS
’10, pages 426–439, New York, NY, USA, 2010. ACM.
[17] E. Cooke, F. Jahanian, and D. McPherson. The zombie

roundup: understanding, detecting, and disrupting botnets. In
Proceedings of the Steps to Reducing Unwanted Trafﬁc on
the Internet, SRUTI’05, pages 6–6, Berkeley, CA, USA,
2005. USENIX Association.

[18] D. Dagon, G. Gu, C. Lee, and W. Lee. A taxonomy of botnet

structures. In Computer Security Applications Conference,
2007. ACSAC 2007. Twenty-Third Annual, pages 325 –339,
dec. 2007.

[19] A. Dainotti, C. Squarcella, E. Aben, K. C. Claffy, M. Chiesa,

M. Russo, and A. Pescapé. Analysis of country-wide internet
outages caused by censorship. In Proceedings of the 2011
ACM SIGCOMM conference on Internet measurement
conference, IMC ’11, pages 1–18, New York, NY, USA,
2011. ACM.

[20] J. Davis. Hackers take down the most wired country in

europe. http://www.wired.com/politics/security/
magazine/15-09/ff_estonia, July 1 2011.

[21] Duane Wessels. Mapping the IPv4 address space, 2009.

http://maps.measurement-factory.com/.

[22] N. Falliere. A distributed cracker for voip.

http://www.symantec.com/connect/blogs/
distributed-cracker-voip, February 15 2011.

[23] N. Falliere. Sality: Story of a peer-to-peer viral network.

http:
//www.symantec.com/content/en/us/enterprise/
media/security_response/whitepapers/sality_
peer_to_peer_viral_network.pdf, July 2011.

[24] S. Gauci. 11 million Euro loss in VoIP fraud.. and my VoIP

logs, December 2010.
http://blog.sipvicious.org/2010/12/11-million-
euro-loss-in-voip-fraud-and.html.

[25] S. Gauci. Distributed sip scanning during halloween

weekend. http://blog.sipvicious.org/2010/11/
distributed-sip-scanning-during.html, Nov 4 2010.

[26] S. Gauci. Sipvicious. tools for auditing sip based voip

systems. http://code.google.com/p/sipvicious/,
Apr 2012.

[27] C. W. Group. Conﬁcker working group lessons learned.
http://www.confickerworkinggroup.org/wiki/
uploads/Conficker_Working_Group_Lessons_
Learned_17_June_2010_final.pdf, June 2010.

[28] M. W. group. Guidelines for protecting user privacy in wide

trafﬁc traces.
http://mawi.wide.ad.jp/mawi/guideline.txt, Oct
1999.

[29] M. W. group. Mawi working group trafﬁc archive.

http://mawi.wide.ad.jp, Apr 2012.

[30] M. Gruber, F. Fankhauser, S. Taber, C. Schanes, and

T. Grechenig. Security status of voip based on the
observation of real-world attacks on a honeynet. In Privacy,
security, risk and trust (passat), IEEE third international
conference on social computing (socialcom), pages 1041
–1047, oct. 2011.

[31] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet

command and control channels in network trafﬁc. In
Proceedings of the 15th Annual Network and Distributed
System Security Symposium (NDSS’08), February 2008.

[32] J. Heidemann, Y. Pradkin, R. Govindan, C. Papadopoulos,

G. Bartlett, and J. Bannister. Census and survey of the visible
internet. In Proceedings of the 8th ACM SIGCOMM
conference on Internet measurement, IMC ’08, pages
169–182, New York, NY, USA, 2008. ACM.

[33] T. Holz, M. Steiner, F. Dahl, E. Biersack, and F. Freiling.

Measurements and mitigation of peer-to-peer-based botnets:
a case study on storm worm. In Proceedings of the 1st
Usenix Workshop on Large-Scale Exploits and Emergent
Threats, LEET’08, pages 9:1–9:9, Berkeley, CA, USA, 2008.

[34] S. Institute. Dshield.org: Distributed intrusion detection

system. http://www.dshield.org, Apr 2012.
[35] C. Kanich, N. Weavery, D. McCoy, T. Halvorson,

C. Kreibichy, K. Levchenko, V. Paxson, G. M. Voelker, and
S. Savage. Show me the money: characterizing

12spam-advertised revenue. In Proceedings of the 20th
USENIX conference on Security, SEC’11, pages 15–15,
Berkeley, CA, USA, 2011. USENIX Association.

[36] C. Kreibich, C. Kanich, K. Levchenko, B. Enright, G. M.

Voelker, V. Paxson, and S. Savage. Spamcraft: an inside look
at spam campaign orchestration. In Proceedings of the 2nd
USENIX conference on Large-scale exploits and emergent
threats: botnets, spyware, worms, and more, LEET’09, pages
4–4, Berkeley, CA, USA, 2009. USENIX Association.

[37] D. Leonard and D. Loguinov. Demystifying service

discovery: implementing an internet-wide scanner. In
Proceedings of the 10th annual conference on Internet
measurement, IMC ’10, pages 109–122, New York, NY,
USA, 2010. ACM.

[38] Z. Li, A. Goyal, and Y. Chen. Honeynet-based botnet scan
trafﬁc analysis. In W. Lee, C. Wang, and D. Dagon, editors,
Botnet Detection, volume 36 of Advances in Information
Security, pages 25–44. Springer, 2008.

[39] Z. Li, A. Goyal, Y. Chen, and V. Paxson. Towards situational
awareness of large-scale botnet probing events. Information
Forensics and Security, IEEE Transactions on, 6(1):175
–188, march 2011.

[40] W. Lu, M. Tavallaee, and A. A. Ghorbani. Automatic

discovery of botnet communities on large-scale
communication networks. ASIACCS ’09, pages 1–10, New
York, NY, USA, 2009. ACM.

[41] MaxMind. MaxMind GeoLite Country: Open Source IP

Address to Country Database.
http://www.maxmind.com/app/geolitecountry.
[42] C. Mullaney. Android.bmaster: A million-dollar mobile

botnet. http://www.symantec.com/connect/blogs/
androidbmaster-million-dollar-mobile-botnet,
February 9 2012.

[43] R. Munroe. xkcd: Map of the Internet.

http://xkcd.com/195/, 2006.

[44] M. D. Network. bind function.

http://msdn.microsoft.com/en-
us/library/ms737550%28VS.85%29.aspx, 2012.

[45] A. Pathak, F. Qian, Y. C. Hu, Z. M. Mao, and S. Ranjan.

Botnet spam campaigns can be long lasting: evidence,
implications, and analysis. SIGMETRICS ’09, pages 13–24,
New York, NY, USA, 2009. ACM.

[46] P. Porras, H. Saidi, and V. Yegneswaran. Conﬁcker.

Technical report, SRI International, Mar 2009.

[51] S. Sarat and A. Terzis. Measuring the storm worm network,

October 2007.

[52] S. Sheldon. Sip brute force attack originating from amazon

ec2 hosts.
http://www.stuartsheldon.org/blog/2010/04/sip-
brute-force-attack-originating-from-amazon-
ec2-hosts/, April 11 2010.

[53] S. Sheldon. Sip brute force attacks escalate over halloween

weekend.
http://www.stuartsheldon.org/blog/2010/11/sip-
brute-force-attacks-escalate-over-halloween-
weekend/, Nov 1 2010.

[54] S. Shin and G. Gu. Conﬁcker and beyond: a large-scale

empirical study. In Proceedings of the 26th Annual Computer
Security Applications Conference, ACSAC ’10, pages
151–160, New York, NY, USA, 2010. ACM.

[55] S. Shin, G. Gu, N. Reddy, and C. Lee. A large-scale

empirical study of conﬁcker. Information Forensics and
Security, IEEE Transactions on, 7(2):676 –690, april 2012.
[56] S. Shin, Z. Xu, and G. Gu. EFFORT: Efﬁcient and Effective
Bot Malware Detection. In Proceedings of the 31th Annual
IEEE Conference on Computer Communications
(INFOCOM’12) Mini-Conference, March 2012.

[57] S. Staniford, V. Paxson, and N. Weaver. How to own the

internet in your spare time. In Proceedings of the 11th
USENIX Security Symposium, pages 149–167, Berkeley, CA,
USA, 2002. USENIX Association.

[58] J. Stewart. Protocols and encryption of the storm botnet.

http://www.blackhat.com/presentations/bh-usa-
08/Stewart/BH_US_08_Stewart_Protocols_of_the_
Storm.pdf., 2008.

[59] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert,

M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna.
Your botnet is my botnet: analysis of a botnet takeover. In
Proceedings of the 16th ACM conference on Computer and
communications security, CCS ’09, pages 635–647, New
York, NY, USA, 2009. ACM.

[60] University of Oregon. University of Oregon Route Views

project. http://www.routeviews.org.

[61] Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, and

I. Osipkov. Spamming botnets: signatures and
characteristics. In Proceedings of the ACM SIGCOMM 2008
conference on Data communication, SIGCOMM ’08, pages
171–182, New York, NY, USA, 2008. ACM.

for internet situational awareness. In Fourth Workshop on
Hot Topics in Networks (HotNets IV), 2005.

[63] M. Zalewski. p0f v3.

http://lcamtuf.coredump.cx/p0f3/, 2012.

[64] L. Zeltser. Targeting VoIP: Increase in SIP Connections on

UDP port 5060.
http://isc.sans.edu/diary.html?storyid=9193,
July 2010.

[65] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and
early warning for internet worms. In Proceedings of the 10th
ACM conference on Computer and communications security,
CCS ’03, pages 190–199, New York, NY, USA, 2003. ACM.

[47] A. H. Project. Sip brute force attack originating from amazon

[62] V. Yegneswaran, P. Barford, and V. Paxson. Using honeynets

ec2 hosts.
http://honeynet.org.au/?q=sunday_scanner,
October 25 2010.

[48] A. Ramachandran and N. Feamster. Understanding the

network-level behavior of spammers. SIGCOMM ’06, pages
291–302, New York, NY, USA, 2006. ACM.

[49] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston,
J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP:
Session Initiation Protocol. RFC 3261 (Proposed Standard),
June 2002.

[50] H. Sagan. Space-ﬁlling curves. Universitext. New York:

Springer-Verlag. xv, 193 p. DM 54.00; öS 421.20; sFr. 54.00
, 1994.

13