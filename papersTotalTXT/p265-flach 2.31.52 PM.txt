Quantifying Violations of Destination-based Forwarding

on the Internet

Tobias Flach

University of Southern

California

Los Angeles, CA 90089, USA

ﬂach@usc.edu

Ethan Katz-Bassett
University of Southern

California

Ramesh Govindan
University of Southern

California

Los Angeles, CA 90089, USA

ethan.kb@usc.edu

Los Angeles, CA 90089, USA

ramesh@usc.edu

ABSTRACT
Initially, packet forwarding in the Internet was destination-based –
that is, a router would forward all packets with the same destination
address to the same next hop. In this paper, we use active probing
methods to quantify and characterize deviations from destination-
based forwarding in today’s Internet. From over a quarter million
probes, we analyze the forwarding behavior of almost 40,000 in-
termediate routers. We ﬁnd that, for 29% of the targeted routers,
the router forwards trafﬁc going to a single destination via different
next hops, and 1.3% of the routers even select next hops in differ-
ent ASes. Load balancers are unlikely to explain these AS-level
variations, and in fact we uncover causes including routers inside
MPLS tunnels that otherwise employ default routes. We also ﬁnd
that these violations can signiﬁcantly affect the results of measure-
ment tools that rely on destination-based forwarding, and we dis-
cuss some ideas for making these tools more robust against these
violations.

Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network management; C.2.6 [Computer-Communication
Networks]: Internetworking—Routers

Keywords
Routing, Measurements, Forwarding, Ping, Traceroute

1.

INTRODUCTION

Historically, most IP routers determined the next hop of a packet
based solely on the destination of that packet [8]. As the routing
fabric has evolved, networks have deployed several mechanisms
that violate destination-based forwarding. Many Internet routers
employ load balancing, with the majority of load balancers split-
ting trafﬁc based on the ﬂow identiﬁer [3]. Tunneling using en-
capsulation (e.g., MPLS label switching or IP-in-IP encapsulation)
can produce different routes than destination-based forwarding, as
routers in the tunnel forward packets based on a label or the IP
address of the tunnel endpoint. Finally, policy-based forwarding

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.

mechanisms may determine next hops using policies speciﬁed on
arbitrary header ﬁelds to realize, for example, differentiated ser-
vice.

Despite the existence of such mechanisms, a number of measure-
ment systems still assume destination-based forwarding [6,10, 15].
These systems are agnostic to whether routers forward based on
destination or based on, say, labels. However, their correctness de-
pends on the resulting routes being observably destination-based,
in that all packets from a router to a destination follow the same
path.

For example, reverse traceroute assumes forwarding is destination-

based in order to stitch together a path out of segments of multiple
paths to a common destination [10]. This stitching could yield false
paths if routers forward based on factors other than just the desti-
nation address.

As another example, Doubletree attempts to minimize the num-
ber of probes required for topology discovery [6]. It uses hop-by-
hop probing, like traceroute, to ﬁnd (partial) paths between source-
destination pairs, but stops probing for a pair if it observes an in-
terface which was encountered earlier while probing on a different
path to the same destination. In that case, Doubletree assumes that
the remainder of the path is the same for both pairs. This may not
hold if forwarding is not strictly destination-based.

Figure 1 illustrates how violations of destination-based forward-
ing can signiﬁcantly distort path measurements. This ﬁgure shows
the result of two probes sent to a PlanetLab node at the University
of Auckland, New Zealand. We sent the ﬁrst probe from a Planet-
Lab host at the University of Texas in Arlington, and we injected
the second probe at one of the intermediate nodes observed on the
ﬁrst probe’s path. The two probes take completely different AS-
level paths because we injected the second probe at a router inside
an MPLS tunnel. Because the injected packet lacked an MPLS la-
bel, the router forwarded it via a default route [14].

In this paper, we make two contributions. First, we devise a
general methodology to detect destination-based forwarding vio-
lations; prior work (e.g., [4]) has described methodologies tailored
towards speciﬁc kinds of violations like load balancing. Combining
and adapting two existing probing techniques [7,10], our technique
uses source-spoofed IP record-route pings to quantify violations of
destination-based forwarding. By injecting packets in routers in the
middle of a source-destination path, we are able to detect violations
caused by MPLS tunnels. In addition, these injected packets have
different contents, so they can exercise load balancers or certain
violations due to policy-based forwarding.

Our second contribution is an analysis of three research ques-
tions: How often is destination-based forwarding violated (Sec-
tion 3)? What are the causes of these violations (Section 3 &
4)? What effect do these violations have on the accuracy of mea-

265Figure 1: Observed partial paths for two probes to the same
New Zealand destination. The ﬁrst probe (thin/blue arrows)
traverses the LEARN network via an MPLS tunnel. We inject
the second probe (thick/red arrows) at the colored router inside
the tunnel. The router forwards it based on the IP table entry
for the destination. Each node is labeled with its AS. Dashed
arrows indicate elided paths.

surement systems that assume the prevalence of destination-based
forwarding (Section 5)? To answer these questions, we employ
our probing methods on PlanetLab and conduct large-scale experi-
ments, measuring paths between PlanetLab hosts and from Planet-
Lab to the broader Internet. We measure over 250,000 paths span-
ning over 3,700 ASes and ﬁnd that a non-negligible fraction (4.4%)
of probed ASes exhibit violations that cause AS-level differences in
paths. Moreover, we ﬁnd that violations of destination-based for-
warding can signiﬁcantly skew the results obtained by tools like
reverse traceroute and Doubletree. We also ﬁnd that a tool like re-
verse traceroute can easily be made more robust to such violations,
but it is less obvious how to make Doubletree more robust.

2. MEASUREMENT METHODOLOGY

In this paper, we use active probing to ﬁnd routes that observ-
ably violate destination-based forwarding. We ﬁrst measure a path
h1, h2, . . . hn from a PlanetLab source to a destination D. Then,
for each router hi on that path, we want hi to send a packet to D, to
test whether it forwards to the same next hop hi+1 observed in our
original path. By forcing hi to send the packet – that is, by chang-
ing the point where the packet is injected into the network1 – we
guarantee that it does not route based on encapsulation originated
by another router, thus giving us visibility inside tunnels. Since we
do not have direct access to hi, we have to induce it into sending a
packet to D, which we can do by sending it an ICMP Echo Request
and measuring the path that hi’s response uses.

While traceroute cannot measure this path, an IP Record Route
ping (henceforth RR ping) can [10]. An RR ping is an ICMP Echo
Request with the Record Route (RR) IP option enabled. The IP
standard requires that, if a packet has the RR option set, routers
record the IP address of one of their interfaces into the packet
header. However, the RR ﬁeld only has space for nine entries, and
some routers do not honor the standard. Thus, only the ﬁrst nine
routers that implement the RR option will record one of their in-
terfaces, and later routers will not overwrite these entries. A router
that receives an RR ping will copy the RR ﬁeld into the ICMP Echo
Response, and hops on the reverse path will ﬁll the remaining slots.
Many routers support the RR option [17], and the global distribu-
tion of PlanetLab allows probes to reach many IP addresses within
the nine-hop limit [9]. Nevertheless we acknowledge that the limi-
tations of RR might introduce some bias to our data.

Baseline Experiments: Our experiments use PlanetLab nodes

1In this study, we only modiﬁed the point of injection (and there-
fore the source address of the packet), to keep the methodology
concise. Thus, we do not detect violations caused by differing port
numbers, protocol types, etc.

Figure 2: Example for two comparable paths to the same des-
tination P2. The thin/blue path (top) is traversed by an RR
ping request sent directly to P2. The thick/red path (bottom) is
traversed by a spoofed RR ping request sent to h1 and the re-
sponse forwarded to P2. Note that only the ﬁrst nine hops can
be recorded in either case, thus the remainder of the path to the
destination is unknown.

to send RR pings and receive the responses. To describe our method-
ology, we discuss our baseline experiments conducted between source-
destination pairs (cid:104)P1, P2(cid:105) both on PlanetLab, resulting in a data set
we label Set PL/PL (PlanetLab-to-PlanetLab). Later, we discuss
extensions to this methodology.

For each such pair, P1 ﬁrst sends an RR ping request to another
PlanetLab host P2. Depending on the hop distance between the
pair, the RR ﬁeld in the response that P1 receives will include all
or part of the forward path to P2 and may include all or part of the
reverse path back to P1. The hops on the forward path of this probe
constitute what we call a control hop-sequence.

To detect violations to destination-based forwarding, we com-
pare this hop sequence with sequences generated by sending test
probes as follows (Figure 2). P1 sends an RR ping to each for-
ward path hop hi, but spoofs the source address as P2. Spooﬁng
ensures that the response traverses the path between hi and P2.
The response records hops in this path, when header space permits,
and we use these hops to form what we call a test hop-sequence.
This technique is strongly inﬂuenced by the methodology of re-
verse traceroute [10] and a prior technique used to estimate ICMP
generation delays [7].

Thus, while the control probe is routed through the forward hops,
we inject the i-th test probe at hi.
If forwarding were strictly
destination-based, the control probe and the response to the test
probe would follow the same path from hi to P2 because they are
both destined to P2, even though they have different source ad-
dresses (the response has hi as the source address). On the other
hand, if the next hop h(cid:48)
i+1 in the test hop-sequence is different
from the next hop in the control hop-sequence, the hop hi vio-
lates destination-based forwarding. In this case, we say that a path
fork occurred at router hi and that hi satisﬁes the fork condition.
However, the converse is not true: hi may violate destination-based
forwarding, but this violation may not always be visible in the way
packets are forwarded at hi.

Since a fork condition may be caused by a routing change be-
tween the control and the test probes, we repeat the pair of probes
to ensure that the fork condition is reproducible. If a hop hi reliably
satisﬁes the fork condition, it is said to be a violator. Note that a
violator need not violate destination-based forwarding for all traf-
ﬁc through it; our deﬁnition classiﬁes the router as a violator if it
exhibits the fork condition for at least one source-destination pair.
Extended Experiment Sets: As seen in the Set PL/PL part of
Figure 3, only the ﬁrst eight routers on a path between two Plan-
etLab nodes can be classiﬁed, and the source node must support
spooﬁng. To target routers that are not observed on paths between

266additional load balancing. Many routers act as packet-based load
balancers for packets with IP options, including RR pings [17]. We
can pinpoint these nodes by recording the control hop-sequence for
a source-destination pair multiple times; we do this by issuing RR
pings repeatedly. To ﬁnd all possible paths with high probability
we send 100 probes for each pair, and then compute the conﬁdence
interval for observing all next hops [4]. To avoid misclassiﬁca-
tions in our analysis, we only used measurements with at least 99%
conﬁdence. Our results indicate that the 100 probes we sent per
pair were sufﬁcient to reach this conﬁdence threshold in almost all
cases. We mark a node as a load balancer if we observed at least
two different next hops after that node on measurements to a single
destination.

If a router inside an MPLS tunnel forwards the control probe
based on a tunnel label, rather than based on the destination, it may
choose a different route when it generates and sends the test probe
towards the destination. To detect violations correlated with MPLS
tunneling, that is cases where the violating node is observed in an
MPLS tunnel, we use two detection mechanisms.

First, we rely on traceroute measurements which exhibit MPLS
labels for nodes in explicit MPLS tunnels [5]. However, up to 50%
of the tunnels have conﬁgurations which prevent this means of de-
tection. That is, either the nodes do not appear in traceroute mea-
surements at all (opaque or invisible tunnels) or their MPLS labels
are obfuscated (implicit tunnels) [5, 18]. As such violations caused
by them remain unclassiﬁed.

Second, we enhance our measurements to ﬁnd possible instances
of default routing regardless of tunnel visibility. Some routers in
the middle of tunnels do not carry full routing tables and rely on
tunnels to forward packets routed through them [14]. A router con-
ﬁgured in this manner will use a default route to forward any packet
it sources, and so all packets sent from the router will have the same
next hop, regardless of the destination. To detect evidence suggest-
ing such behavior, we sent a number of RR pings to a router, each
using a different PlanetLab node as the spoofed source, thus caus-
ing the router to send responses to each of those PlanetLab desti-
nations. If all these responses have the same ﬁrst hop, regardless
of the destination, and this hop differs from the next hop we ob-
serve on a route through the router, we assume the route through
the router was traversing a tunnel.

Violation causes such as policy-based forwarding are harder to

establish, and we have left these to future work.

3. RESULTS

Analysis methodology: We recorded all experimental datasets
between December 16, 2011 and March 12, 2012. Before we con-
ducted each experiment, we compiled a list of suitable PlanetLab
nodes by selecting at most one active node per AS. For sets PL/PL
and R/PL+S we also removed nodes from the sender set which em-
ploy spooﬁng ﬁlters since these experiments use spoofed source
addresses in some probes. Since set PL/PL only investigates di-
rect routes between PlanetLab nodes, we encountered fewer than
2,000 unique IPs on the paths between these nodes; sets R/PL and
R/PL+S encountered about 25,000 IPs each when targeting arbi-
trary destinations within seven hops distance. Overall, we recorded
more than 260,000 traces using 179 PlanetLab sites, 65 of which
do not ﬁlter source-spoofed packets.

After we recorded the measurements, we compared each test
hop-sequence with its corresponding control hop-sequence. We
analyzed the data at two levels of granularity: IP addresses and
AS numbers. To map an IP address stored in the RR ﬁeld to its cor-

Figure 3: Overview of the coverage of nodes by each of the
experiment sets and the ping packets associated with it. Vio-
lations can only be detected in ﬁlled nodes due to the RR hop
limit.

PlanetLab nodes, we designed two additional sets of experiments.
In Set R/PL (Router-to-PlanetLab) we send an RR ping from a Plan-
etLab node P1 to a node R and use the hops visited by the response
along the reverse path back to P1 as the control hop-sequence.
Then, P1 sends an RR ping to each such hop as the test probe, again
selecting the hops visited by the response as the test hop-sequence.
Since we designed this approach to analyze paths back to the source
of the ping, it has the advantage of not requiring spooﬁng. How-
ever, it has the drawback that R can be at most seven hops away
from the source to leave space for at least two reverse hops in the
RR ﬁeld. We inject the test probe at the ﬁrst reverse hop and use
the second reverse hop to test the fork condition. The Set R/PL part
of Figure 3 illustrates which hops this methodology can test. To
determine which nodes are suitable choices for R for each Plan-
etLab node, we had the node send an RR ping to the .1 address in
each routable /24 preﬁx and retained those that were responsive and
within range.

Our third set, Set R/PL+S (Router-to-PlanetLab with spooﬁng),
uses source spooﬁng to expand the coverage of the second set, as
seen in Figure 3. Each PlanetLab node P1 probes each nearby
router R that it probed in R/PL, but P1 sends multiple RR pings
to R, spooﬁng as each of the other PlanetLab nodes in turn. This
technique measures the (partial) path from R to a PlanetLab node
P2 even if P2 is not near R. We use the hops h1, ..., hm tra-
versed by the response from R to P2 as the control hop-sequence.
We produce the test hop-sequences by sending probes from P1 to
h1, ..., hm directly and extracting the hops visited by the response.
Establishing Fork Causality: In addition to determining viola-
tors, we also want to establish causality for forks. We explore two
causes, load balancing and MPLS tunnels. Attributing violations to
other causes is left for future work.

To characterize a violation as induced by load balancing, we
employ two techniques. First, we measure the paths between our
source-destination pairs with Paris traceroute, a traceroute variant
that measures all load balancing paths to the destination [4]. Since
traceroute and RR may record different IP addresses for a given
router [17], we align the Paris traceroutes with our RR pings us-
ing IP alias data [12].
If a violating node is an alias for a load
balancer seen by Paris traceroute on the same route, we classify
the violation as being caused by load balancing. Since the alias
data is likely incomplete, we use a second technique to attribute

P1P2RP1RP1P2SetPL/PLSetR/PLSetR/PL+SRequestP1 → P2RequestP1 → RResponseR → P1RequestP1 → RResponseR → P2267Traces recorded
Involved PlanetLab nodes
IP addresses targeted
IP addresses violating (IP forks)
IP addresses violating (AS forks)
ASes targeted
ASes w/ viol. IP addr. (IP forks)
ASes w/ viol. IP addr. (AS forks)

262,034
179
39,699
11,487 (28.9%)
505 (1.3%)
3,777
669 (17.7%)
165 (4.4%)

Table 1: Overview of combined results from all experiment sets
(PL/PL, R/PL, R/PL+S)

Type
Without violation
Load balancing
Explicit MPLS tunnel
Default routing
Unclassiﬁed

Freq. (IP)

Freq. (AS)

72.6%
22.3%
0.2%
0.2%
11.8%

89.9%
0.0%
0.0%
0.2%
10.0%

Table 3: Percentages of paths between source-destination pairs
where a violation of particular type (or no violation at all) was
observed in the PL/PL set (only considering ﬁrst nine hops)

Type
Non-violating
Load balancing
Explicit MPLS tunnel
Default routing
Unclassiﬁed
Invalid

Freq. (IP)

Freq. (AS)

74.8%
16.1%
0.4%
0.3%
6.9%
1.5%

97.8%
0.0%
0.0%
0.3%
1.7%
0.0%

Table 2: Node type frequencies in Set PL/PL for IP and AS
forks

responding AS number, we used preﬁx-to-AS mappings provided
by an iPlane dataset [15].

On the IP level, we classiﬁed a targeted node as a violating router
if, for at least one pair of paths to a common destination, the next
hop differed. In this case we observed an IP fork. If the next AS,
different from the AS of the targeted node, differed between the
control and test hop-sequences, we labeled it an AS fork.

Frequency of violations: Table 1 summarizes the experimental
results. Out of nearly 40,000 targeted IP addresses, 28.9% caused
IP forks and 1.3% of the nodes caused an AS fork. The existence of
a non-trivial fraction of AS forks is interesting, and to our knowl-
edge, has not been documented elsewhere. Our results also indicate
that most of these forks occur at edge routers. It is not surprising
that the fraction of nodes causing AS forks is signiﬁcantly smaller
than the number of nodes responsible for IP forks for the follow-
ing reason. We expect the majority of IP forks to be the result of
load balancing, and prior studies have shown that most load bal-
ancers only distribute trafﬁc across multiple paths inside their own
AS boundaries [3]. Thus, forks caused by load balancing usually
converge before leaving the current AS and rarely translate to AS
forks.

Causes of Violations: As discussed earlier, violations can have
different causes, e.g., load balancing, MPLS tunneling, or other
routing policies. In this section we classify forks by cause.

Table 2 provides a classiﬁcation of the targeted nodes in set PL/PL
(classifying violations in sets R/PL and R/PL+S is difﬁcult since
this requires traceroutes from the R router, which we could not
obtain for these sets). The middle column shows statistics for all
forks, whereas the right column only considers forks which also
result in differing AS traversals. Table 3 shows statistics for the vi-
olation types observed on paths between source-destination pairs.
We determined load balancing, Explicit MPLS tunnel2, and de-
fault routing violations as described in Section 2. We classiﬁed a
node as invalid if we suspected routing instabilities or if the conﬁ-
dence of having observed all interfaces was below 99%. Any vio-

2Our traceroute data as well as results from an earlier study [18]
indicate that about 25% of the paths contain an MPLS tunnel, but
in our experiments most of them do not trigger a violation.

Figure 4: Fraction of violating IP addresses in an AS, that are
violators for the most frequently targeted ASes (all experimen-
tal sets)

lation that did not ﬁt in any of these categories is labeled as unclas-
siﬁed.

The distribution suggests that we can attribute the majority of IP
forks to load balancing. However, for more than 6% of the cases
we were unable to determine a violation cause. For many of these
cases, we did not observe the violator on any recorded traceroute,
e.g., due to ICMP error message ﬁltering by some routers or miss-
ing IP address alias mappings. Thus, a fraction of these violations
could still be the result of load balancing. However, we did not ob-
serve any load balancers causing AS-level divergences. All cases
of default routing caused AS forks, as did a signiﬁcant portion of
the unclassiﬁed violations. Additional causes such as routing poli-
cies incorporating source addresses may be responsible for some
path forks. In Section 4 we discuss some speciﬁc instances of the
unclassiﬁed violations in more detail.

These frequencies may be a lower bound on the likelihood of ob-
serving violations on paths, because RR’s nine hop limit restricts
the coverage of our methodology. For example, as we discuss be-
low, traceroutes from PlanetLab nodes to randomly selected des-
tinations revealed that over 70% of the paths include at least one
load-balancing node. However, many of these load balancers were
in core networks that were located more than nine hops from our
sources.

AS Characteristics: Next, we analyzed which ASes exhibited
violations and with what frequency. Table 1 shows that we ob-
served IP-level forks in 17.7% of the visited ASes and AS forks
in 4.4% of the ASes assessed. However, the distribution of violat-
ing IP addresses across ASes is not uniform, with the number of
IP addresses in an AS observed to cause a fork varying from 1%
to over 70%. In Figure 4, we show the violation frequencies for
the ASes in which we probed the most targets. While 55% of the
targeted COGENT nodes are violating routers, less than 5% of the
targeted TWTC addresses are responsible for a path fork. A likely
explanation for these differences across ASes is the variability in
AS engineering practices. For example, Sommers et al. found that
COGENT is one of the top-10 ASes in terms of total MPLS tunnels

268Type
AS Name
COGENT
Large ISP
AR-TAST-LACNIC Large ISP
Large ISP
SWISSCOM
Stub
GNAXNET-AS
GBLX
Tier-1

obs. IPs

viol. IPs

3303
62
600
35
1119

86
18
13
12
12

Table 4: Statistics for ASes with the largest number of violating
IP addresses (viol. IPs) causing AS forks (all experimental sets;
obs. IPs describes the number of observed IPs in that AS in our
measurements)

Diamond type

Single AS

Multiple ASes

µ
2.5
4.9

σ Median
2.0
2.5

2
5

Table 5: Diamond length statistics from traces with violations
from Set PL/PL

per AS, which likely contributes to the high number of violations
in that AS [18].

We obtained similar results when considering only nodes respon-
sible for AS forks. Table 4 shows the statistics for the ASes with the
largest number of violating IP addresses and gives the UCLA In-
ternet Topology Project’s AS-type classiﬁcation for the ASes [19].
As the table shows, AS forks can be found even in large ISPs and
a Tier-1 provider, possibly due to the usage of MPLS and policy-
based routing for trafﬁc engineering.

Diamond lengths:

In this section we analyze how much two
paths deviate from each other once they traverse a violating router,
before reconverging on their path to the common destination. The
deviating path portion is termed a diamond [4]. To do so, we count
the number of hops between the violating router and the ﬁrst inter-
face common to the two paths after the violating router. We refer
to the common interface as the merging router, and we refer to
the number of hops between the violating router and the merging
router as the diamond length.3 Note that due to the nine hop limit
of the RR ﬁeld, we may not observe the merging router. In obtain-
ing these results, we omitted R/PL and R/PL+S datasets since we
typically only observe a small number of hops past R, making it
rarer to observe complete diamonds. In PL/PL cases when we do
not observe the merge, we assume that the next (unrecorded) hop
would be the merging router. While this likely results in an under-
estimation of the diamond lengths, the small number of such cases
has a negligible effect on the overall outcome.

As shown in Table 5, diamonds where the forking and merging
routers belong to the same AS have an average length of 2.5 nodes.
This result roughly coincides with the average diamond length of
load-balanced paths studied by Augustin et al. [3]. In contrast, di-
amonds induced by AS forks are roughly twice as long on average.
When a path diverges at the AS level, it will usually traverse mul-
tiple nodes inside this AS before exiting to another AS where it
could reconverge with the path traversed by the control probe.

4. CASE STUDIES

In Section 1 we brieﬂy discussed a routing violation we found
with our measurements (see Figure 1).
In the example, the tar-
geted IP is not globally routable. Normally, it only carries MPLS-
encapsulated packets and local network management trafﬁc. Be-
cause it normally only forwards trafﬁc based on MPLS labels, it

3If the two forks have different lengths we use the smaller value.

does not carry a full IP routing table. Instead, it has a default route
pointing to the University of Texas System (THENet) that sufﬁces
to carry management trafﬁc back to the network operators. In our
case, a record route probe from a PlanetLab node at the University
of Texas, Arlington (UTA), uncovered the router. Even though the
IP was not globally routable, routes to it exist from the University
of Texas system, and so our test probe from UTA reached the IP.
However, the UTA node spoofed the test probe to claim it came
from a different PlanetLab site. The target, lacking a non-default
route to this other site, responded to the test probe via its default
route. Despite the fact that the control and test probes visit com-
pletely different ASes, they do travel via similar locations. More
concretely, in this example all probes follow routes via Arlington,
Dallas, Houston and Los Angeles before leaving the RR scope.

There are other cases in our dataset showing similar behavior and

we omit presenting them separately here.

However, many violations are hard to classify if no load balanc-
ing or MPLS labels are observed. This is especially true in cases
where we have no corresponding traceroute data available for the
measured path, i.e. when we analyze reverse paths. For example,
below we describe a violation observed in the R/PL set. The control
probes always observed the following hops:

1 dinet-gw.spb.citytelecom.ru
2 te4-1-20-adelaida.spb.cloud-ix.net
3 runnet-gw.msk.citytelecom.ru
4 msk-1-gw.runnet.ru
5 CORE-VL42.radio-msu.net

In contrast, the test probe response traversed a different path:

1 dinet-gw.spb.citytelecom.ru
2 * (vsevnet.ru)
3 border.vsevnet.ru
4 CORE-VL42.radio-msu.net

The paths fork in an AS in St. Petersburg, Russia and merge in a
different AS in Moscow, but observe different intermediate ASes.
Based on the measurements, we can only rule out load balancing as
a possible cause for the violation. However, we cannot determine
whether the point of injection or the different source address of the
test probe traversing the reverse path is causing the forking router
to forward the probes to different next hops.

5.

IMPACT OF VIOLATIONS

In this section we discuss the possible impact of routing viola-
tions on two existing systems: Doubletree and reverse traceroute.
Impact on Doubletree: Doubletree reduces probing overhead
in large-scale distributed traceroute measurements by stopping prob-
ing a path once it reaches a hop already observed on the path from
another monitor to the destination [6]. Consequently, forking paths
are not explored and remain invisible to the system (Figure 5).

To quantify the impact, we issued Paris traceroutes from over
170 PlanetLab nodes to 200 randomly chosen destinations.4 In to-
tal, we acquired 30,911 traceroutes.

We found that 22,582 of these (73.1%) include at least one load
balancing node. This differs from results by Augustin et al. who
found that only 39% of their recorded traces contain a load bal-
ancer [3]. Since their study was published in 2007, we suspect that,
4We executed multiple trials with different destination sets to en-
sure that the results are not biased by the number of destinations se-
lected. We synchronized the probing mechanism, such that tracer-
outes for the same destination were issued within a time frame of
ﬁve minutes on all PlanetLab nodes, thus minimizing the probabil-
ity of route changes.

269Figure 5: Scenario where Doubletree output deviates from the
ground truth. Both paths from S1 (blue edges) and S2 (red
edges) visit the common hop A. If Doubletree already observed
the path A → B → D it would not ﬁnd the edge from A to C
since the probing algorithm stops at the common node.

as part of the evolution of the Internet, more ASes have started to
incorporate load balancing mechanisms into their topologies. This
number is also larger than the results shown in Table 3. This dis-
crepancy likely stems from the fact that traceroute provides data
about all hops on a path, whereas RR has a 9 hop limit (see discus-
sion of Table 3 in Section 3).

Of our recorded traces, 2997 (9.7%) visit a node with a vio-
lation unexplained by load balancing. Furthermore, 1260 traces
(4.1%) encounter a node where traces towards the same destination
forked into different ASes. These numbers are qualitatively con-
sistent with Table 3. In that table, a little over 11% of the traces
contained violations not explained by load balancing, with default
routing and unknown causes usually resulting in AS forks.

We then determined the number of links that Doubletree would
miss. Out of 49,272 observed links in the data, Doubletree would
miss 11,222 links (22.8%) as a result of load balancers splitting
trafﬁc across multiple next hops. Furthermore, 601 links (1.2%)
would remain unobserved due to other violations, with 150 unob-
served links (0.3%) related to AS forks. Doubletree was shown to
be unable to observe about 18% of links in an experiments [6]; our
results are consistent with that number, but give some insight into
the causes of unobserved links.

Impact on reverse traceroute: Reverse traceroute assumes
forwarding is destination-based in order to incrementally piece to-
gether a path [10]. All the violations quantiﬁed in Section 3 would
impact the accuracy of that technique; in particular, the statistics
on diamond lengths give us a feel for the degree to which reverse
traceroute can be affected.

Possible solutions: Both systems could employ Paris traceroute-
like techniques to identify and incorporate load-balanced paths.
However, Doubletree aims to reduce the number of probes required
to establish a topology. Since Paris traceroute probes a node many
times to ensure that all load balancing paths are explored, incorpo-
rating this technique to Doubletree would result in a signiﬁcantly
larger number of probes required to ﬁnd the currently missing links.
Thus, it is less clear how Doubletree should balance the tension be-
tween completeness and overhead reduction.

Additionally, systems could use the techniques in this paper to
generate blacklists of violation candidates along a path, at the ex-
pense of additional probing overhead. Upon encountering these
hops, systems could issue additional measurements to improve con-
ﬁdence in a result or ﬂag it as suspect. For example, reverse tracer-
oute could send additional spoofed RR pings, as described above,
to ﬁnd hops employing default routing that would otherwise dis-
tort results. Upon encountering these hops, reverse traceroute can
easily adapt its IP timestamp-based technique to verify that hops
discovered by its RR probes actually appear along the end-to-end
path and not just on a default route. Similarly, in cases where an RR
ping yields multiple reverse hops, reverse traceroute can then target
each of those hops to check for consistent routes, as we did in this

paper. Using a week of data from a reverse traceroute deployment
monitoring routing failures [11], we analyzed probes sent for over
33,000 router-destination pairs. We found that 75% of them in-
cluded multiple reverse hops, thus enabling the consistency check
described above.

6. RELATED WORK

Systems such as reverse traceroute [10], Doubletree [6], and
iPlane [15] assume destination-based forwarding. Other studies
also make this assumption [2, 13, 16], but we omitted a detailed
discussion of these due to space considerations.

Prior studies analyzed the prevalence of load balancing and MPLS
deployments in the Internet. Augustin et al. describe measurements
from ﬁfteen RON nodes to over 68,000 destinations using Paris
traceroute [3]. Their 2007 study found that about 39% of the paths
between source-destination pairs contain at least one ﬂow-based
load balancer. In contrast, we have designed a generic mechanism
to detect violations to destination based forwarding and demon-
strate the existence of a non-trivial proportion of AS forks.

Using data from the CAIDA Archipelago project [1], Sommers
et al. were able to detect MPLS tunnels based on traceroute data [18].
Besides extracting MPLS stacks from traceroute data, they inferred
probable tunnels by comparing latency differences between con-
secutive hops. Their results indicate that about 25% of all paths
in 2011 contained at least one tunnel. While their MPLS detec-
tion techniques are more advanced than ours, we did not incorpo-
rate their methodology due to the high number of false positives.
Furthermore, our focus was on detecting violations to destination-
based forwarding, and we use a different probing methodology be-
cause, as we have discussed above, not all MPLS tunnels trigger
these violations.

Recently Donnet et al. demonstrated additional mechanisms to
detect MPLS tunnels [5].
In their study they propose inference
techniques for non-explicit tunnels based on using TTL signatures
from traceroute and ping measurements. Incorporating their meth-
ods into our analysis would likely help to attribute some of the un-
classiﬁed violations to non-explicit MPLS tunnels, and we leave
this to future work.

7. CONCLUSION

We designed a probing methodology to uncover violations of
destination-based forwarding. Our measurements reveal that an
unexpectedly signiﬁcant fraction of these violations cause forked
paths to traverse different ASes as compared to the original path:
4.4% of targeted ASes and about 10.2% of paths exhibit such be-
havior. In general, these violations impact the accuracy of systems
like Doubletree and reverse traceroute; the former can miss 22%
of the links as a result of these violations. Finally, while it is con-
ceptually easy to mitigate the impact of these violations in reverse
traceroute by incorporating some of our mechanisms, it is less clear
how to do so in Doubletree in a manner that also achieves one of
that system’s objectives, reducing probing overhead.

Acknowledgments
We would like to thank our shepherd, Peter Steenkiste, and the
anonymous referees for their helpful comments on earlier versions
of the paper. In addition we thank Byron Hicks from the Lones-
tar Education and Research Network (LEARN) for his insight on
the causes of violations observed in his network. This work was
funded in part by Google, Cisco, and the NSF (CNS-0121778 and
CNS-0905568).

2708. REFERENCES
[1] Archipelago IPv4 Routed /24 AS Links Dataset.

http://www.caida.org/data/active/ipv4_
routed_topology_aslinks_dataset.xml.

[2] B. Armbruster, J. C. Smith, and K. Park. A Packet Filter
Placement Problem with Application to Defense Against
Spoofed Denial of Service Attacks. European Journal of
Operational Research, 176(2):1283–1292, 2007.

[3] B. Augustin, T. Friedman, and R. Teixeira. Measuring

Load-balanced Paths in the Internet. In IMC, 2007.

[4] B. Augustin, T. Friedman, and R. Teixeira. Multipath tracing

with Paris traceroute. In E2EMON, 2007.

[5] B. Donnet, M. Luckie, P. Mérindol, and J.-J. Pansiot.

Revealing MPLS tunnels obscured from traceroute.
SIGCOMM Computer Communication Review, 42(2):87–93,
2012.

[6] B. Donnet, P. Raoult, T. Friedman, and M. Crovella.

Deployment of an Algorithm for Large-Scale Topology
Discovery. IEEE Journal on Selected Areas in
Communications, 24(12):2210–2220, 2006.

[7] R. Govindan and V. Paxson. Estimating router ICMP

generation delays. In PAM, 2002.

[8] Internet Engineering Task Force. RFC 1812: Requirements

for IP Version 4 Routers, June 1995.

[9] E. Katz-Bassett. Systems for Improving Internet Availability

and Performance. PhD thesis, University of Washington,
2012.

[10] E. Katz-Bassett, H. V. Madhyastha, V. K. Adhikari, C. Scott,

J. Sherry, P. van Wesep, T. E. Anderson, and
A. Krishnamurthy. Reverse Traceroute. In NSDI, 2010.

[11] E. Katz-Bassett, C. Scott, D. R. Choffnes, I. Cunha,
V. Valancius, N. Feamster, H. V. Madhyastha, T. E.
Anderson, and A. Krishnamurthy. LIFEGUARD: Practical
repair of persistent route failures. In SIGCOMM, 2012.

[12] K. Keys, Y. Hyun, M. Luckie, and K. Claffy. Internet-Scale
IPv4 Alias Resolution with MIDAR: System Architecture -
Technical Report. Technical report, Cooperative Association
for Internet Data Analysis (CAIDA), May 2011.

[13] A. Kvalbein, A. F. Hansen, T. ˇCiˇcic, S. Gjessing, and

O. Lysne. Multiple routing conﬁgurations for fast IP network
recovery. IEEE/ACM Transactions on Networking,
17(2):473–486, April 2009.

[14] Lonestar Education and Research Network (Austin, Texas):

Private communication.

[15] H. V. Madhyastha, T. Isdal, M. Piatek, C. Dixon, T. E.

Anderson, A. Krishnamurthy, and A. Venkataramani. iPlane:
An Information Plane for Distributed Services. In OSDI,
2006.

[16] A. Riedl and D. A. Schupke. Routing Optimization in IP
networks Utilizing Additive and Concave Link Metrics.
IEEE/ACM Transactions on Networking, 15(5):1136–1148,
October 2007.

[17] R. Sherwood, A. Bender, and N. Spring. Discarte: A

Disjunctive Internet Cartographer. In SIGCOMM, 2008.

[18] J. Sommers, P. Barford, and B. Eriksson. On the Prevalence

and Characteristics of MPLS Deployments in the Open
Internet. In IMC, 2011.

[19] UCLA Internet Topology Collection.

http://irl.cs.ucla.edu/topology/.

271