2012 IEEE Symposium on Security and Privacy

The science of guessing: analyzing an anonymized corpus of 70 million passwords

Computer Laboratory

University of Cambridge

Joseph Bonneau

jcb82@cl.cam.ac.uk

Abstract—We report on the largest corpus of user-chosen
passwords ever studied, consisting of anonymized password
histograms representing almost 70 million Yahoo! users, mit-
igating privacy concerns while enabling analysis of dozens of
subpopulations based on demographic factors and site usage
characteristics. This large data set motivates a thorough sta-
tistical treatment of estimating guessing difﬁculty by sampling
from a secret distribution. In place of previously used metrics
such as Shannon entropy and guessing entropy, which cannot
be estimated with any realistically sized sample, we develop
partial guessing metrics including a new variant of guesswork
parameterized by an attacker’s desired success rate. Our new
metric is comparatively easy to approximate and directly
relevant for security engineering. By comparing password
distributions with a uniform distribution which would provide
equivalent security against different forms of guessing attack,
we estimate that passwords provide fewer than 10 bits of
security against an online, trawling attack, and only about 20
bits of security against an optimal ofﬂine dictionary attack.
We ﬁnd surprisingly little variation in guessing difﬁculty;
every identiﬁable group of users generated a comparably
weak password distribution. Security motivations such as the
registration of a payment card have no greater impact than
demographic factors such as age and nationality. Even pro-
active efforts to nudge users towards better password choices
with graphical feedback make little difference. More surpris-
ingly, even seemingly distant language communities choose the
same weak passwords and an attacker never gains more than
a factor of 2 efﬁciency gain by switching from the globally
optimal dictionary to a population-speciﬁc lists.

Keywords-computer security; authentication; statistics; infor-

mation theory; data mining;

I. INTRODUCTION

Text passwords have dominated human-computer authen-
tication since the 1960s [1] and been derided by security
researchers ever since, with Multics evaluators singling pass-
words out as a weak point in the 1970s [2]. Though many
password cracking studies have supported this claim [3]–
[7], there is still no consensus on the actual level of security
provided by passwords or even on the appropriate metric
for measuring security. The security literature lacks sound
methodology to answer elementary questions such as “do
older users or younger users choose better passwords?” Of
more concern for security engineers, it remains an open
question the extent to which passwords are weak due to
a lack of motivation or inherent user limitations.

The mass deployment of passwords on the Internet may

© 2012, Joseph Bonneau. Under license to IEEE.
DOI 10.1109/SP.2012.49

538

provide sufﬁcient data to address these questions. So far,
large-scale password data has arisen only from security
breaches such as the leak of 32 M passwords from the
gaming website RockYou in 2009 [7], [8]. Password corpora
have typically been analyzed by simulating adversarial pass-
word cracking, leading to sophisticated cracking libraries but
limited understanding of the underlying distribution of pass-
words (see Section II). Our goal is to bring the evaluation
of large password data sets onto sound scientiﬁc footing
by collecting a massive password data set legitimately and
analyzing it in a mathematically rigorous manner.

This requires retiring traditional,

inappropriate metrics
such as Shannon entropy and guessing entropy which don’t
model realistic attackers and aren’t approximable using sam-
pled data. Our ﬁrst contribution (Section III) is to formalize
improved metrics for evaluating the guessing difﬁculty of a
skewed distribution of secrets, such as passwords, introduc-
ing α-guesswork as a tunable metric which can effectively
model different types of practical attack.

Our second contribution is a novel privacy-preserving
approach to collecting a password distribution for statistical
analysis (Section IV). By hashing each password at the time
of collection with a secret key that is destroyed prior to our
analysis, we preserve the password histogram exactly with
no risk to user privacy.

Even with millions of passwords, sample size has sur-
prisingly large effects on our calculations due to the large
number of very infrequent passwords. Our third contribution
(Section V) is to adapt
techniques from computational
linguistics to approximate guessing metrics using a random
sample. Fortunately, the most important metrics are also
the best-approximated by sampled data. We parametrically
extend our approximation range by ﬁtting a generalized
inverse Gaussian-Poisson (Sichel) distribution to our data.
Our ﬁnal contribution is to apply our research to a massive
corpus representing nearly 70 M users,
the largest ever
collected, with the cooperation of Yahoo! (Section VI).
We analyze the effects of many demographic factors, but
the password distribution is remarkably stable and security
estimates in the 10–20 bit range emerge across every sub-
population we considered. We conclude from our research
(Section VII) that we are yet to see compelling evidence that
motivated users can choose passwords which resist guessing
by a capable attacker.

(a) Historical cracking efﬁciency, raw dictionary size

(b) Historical cracking efﬁciency, equivalent dictionary size

Figure 1. The size of cracking dictionaries is plotted logarithmically against the success rate achieved in Figure 1a. In Figure 1b, the dictionary sizes are
adjusted to incorporate the inherent need for more guesses to crack more passwords. Circles and solid lines represent operating system user passwords,
squares and dashed lines represent web passwords.

II. HISTORICAL EVALUATIONS OF PASSWORD SECURITY
It has long been of interest to analyze how secure pass-
words are against guessing attacks, dating at least to Mor-
ris and Thompson’s seminal 1979 analysis of 3,000 pass-
words [3]. They performed a rudimentary dictionary attack
using the system dictionary and all 6-character strings and
recovered 84% of available passwords. They also reported
some basic statistics such as password lengths (71% were
6 characters or fewer) and frequency of non-alphanumeric
characters (14% of passwords). These two approaches, pass-
word cracking and semantic evaluation, have been the basis
for dozens of studies in the thirty years since.

A. Cracking evaluation

The famous 1988 Morris worm propagated in part by
guessing passwords using a 350-word password dictionary
and several rules to modify passwords [9]. The publicity
surrounding the worm motivated independent studies by
Klein and Spafford which re-visited password guessing [4],
[5]. Both studies broke 22–24% of passwords using more so-
phisticated dictionaries such as lists of names, sports teams,
movies and so forth. Password cracking evolved rapidly in
the years after these studies, with dedicated software tools
like John the Ripper emerging in the 1990s which utilize
mangling rules to turn a single password like “john” into
variants like “John”, “J0HN”, and “nhoj.” [10]. Research on
mangling rules has continued to evolve; the current state of
the art by Weir et al. [11] automatically generates mangling
rules from a large training set of known passwords.

Later studies have often utilized these tools to perform
dictionary attacks as a secondary goal, such as Wu’s study
of password cracking against Kerberos tickets in 1999 [12]
and Kuo et al.’s study of mnemonic passwords in 2006 [13],
which recovered 8% and 11% of passwords, respectively.

Recently, large-scale password leaks from compromised
websites have provided a new source of data for cracking
evaluations. For example, Schneier analyzed about 50,000
passwords obtained via phishing from MySpace in 2006 [6].
A more in-depth study was conducted by Dell’Amico et
al., who studied the MySpace passwords as well as those
of two other websites using a large variety of different
dictionaries [7]. A very large data set of 32M passwords
leaked from RockYou in 2009, which Weir et al. studied
to examine the effects of password-composition rules on
cracking efﬁciency [8].

Reported numbers on password cracking efﬁciency vary
substantially between different studies, as shown in Fig-
ure 1. Most studies have broken 20–50% of accounts with
dictionary sizes in the range of 220–230. All studies see
diminishing returns for larger dictionaries. This is clear in
Figure 1b, which adjusts dictionary sizes based on the per-
centage of passwords cracked so that the degree of upward
slope reﬂects only decreasing efﬁciency. This concept will
motivate our statistical guessing metrics in Section III-E.

There is little data on the efﬁciency of small dictionaries
as most studies employ the largest dictionary they can
process. Klein’s study, which attempted to identify highly
efﬁcient sub-dictionaries, is a notable exception [4]. There
is also little data on the size of dictionary required to break
a large majority of passwords—only Morris and Thompson
broke more than 50% of available passwords1 and their
results may be too dated to apply to modern passwords.

B. Semantic evaluations

In addition to cracking research, there have been many
studies on the semantics of passwords with psychologists

1A 2007 study by Cazier and Medlin claimed to break 99% of passwords
at an e-commerce website, but details of the dictionary weren’t given [14].

539

0.00.10.20.30.40.50.60.70.80.9α=proportionofpasswordsguessed05101520253035µ=lg(dictionarysize)MorrisandThompson[1979]Klein[1990]Spaﬀord[1992]Wu[1999]Kuo[2006]Schneier[2006]Dell’Amico(it)[2010]Dell’Amico(ﬁ)[2010]Dell’Amico(en)[2010]0.00.10.20.30.40.50.60.70.80.9α=proportionofpasswordsguessed05101520253035µ=lg(dictionarysize/α)MorrisandThompson[1979]Klein[1990]Spaﬀord[1992]Wu[1999]Kuo[2006]Schneier[2006]Dell’Amico(it)[2010]Dell’Amico(ﬁ)[2010]Dell’Amico(en)[2010]study

Riddle et al. [15]
Spafford [5]

year
1989
1992
1999 Wu [12]
1999
2006
2009

Zviran and Haga [18]
Cazier and Medlin [14]
RockYou leak [19]

length % digits % special

—
14.8
4.1
0.7
1.3
3.7

4.4
6.8
7.5
5.7
7.4
7.9

3.5
31.7
25.7
19.2
35.0
54.0

COMMONLY ESTIMATED ATTRIBUTES OF PASSWORDS

Table I

and linguists being interested as well as computer security
researchers. This approach can be difﬁcult as it either re-
quires user surveys, which may produce unrealistic password
choices, or direct access to unhashed passwords, which
carries privacy concerns. Riddle et al. performed linguistic
analysis of 6,226 passwords in 1989, classifying them into
categories such as names, dictionary words, or seemingly
random strings [15]. Cazier et al. repeated this process in
2006 and found that hard-to-classify passwords were also
the hardest to crack [14].

Password structure was formally modeled by Weir et
al. [11] using a context-free grammar to model the prob-
ability of different constructions being chosen. Password
creation has also been modeled as a character-by-character
Markov process, ﬁrst by Narayanan and Shmatikov [16] for
password cracking and later by Castelluccia et al. [17] to
train a pro-active password checker.

Thus methodology for analyzing password structure has
varied greatly, but a few basic data points like average
length and types of characters used are typically reported, as
summarized in Table I. The estimates vary so widely that it
is difﬁcult to infer much which is useful in systems design.
The main trends are a tendency towards 6-8 characters of
length and a strong dislike of non-alphanumeric characters in
passwords.2 Many studies have also attempted to determine
the number of users which appear to be choosing random
passwords, or at least passwords without any obvious mean-
ing to a human examiner. Methodologies for estimating this
vary as well, but most studies put it in the 10–40% range.
Elements of password structure, such length or the pres-
ence of digits, upper-case, or non-alphanumeric characters
can be used to estimate the “strength” of a password,
often measured in bits and often referred to imprecisely
as “entropy”.3 This usage was cemented by the 2006 FIPS
Electronic Authentication Guideline [20], which provided a
“rough rule of thumb” for estimating entropy from password

2It is often suggested that users avoid characters which require multiple

keys to type, but this doesn’t seem to have been formally established.

3This terminology is mathematically incorrect because entropy (see
Sections III-A and III-B) measures a complete probability distribution,
not a single event (password). The correct metric for a single event is
self-information (or surprisal). This is perhaps disfavored because it is
counter-intuitive: passwords should avoid including information like names
or addresses, so high-information passwords sound weak.

characteristics such as length and type of characters used.
This standard has been used in several password studies
with too few samples to compute statistics on the entire
distribution [21]–[23]. More systematic formulas have been
proposed, such as one by Shay et al. [22] which adds entropy
from different elements of a password’s structure.

C. Problems with previous approaches

Three decades of work on password guessing has pro-
duced sophisticated cracking tools and many disparate data
points, but a number of methodological problems continue
to limit scientiﬁc understanding of password security:

1) Comparability: Authors rarely report cracking results
in a format which is straightforward to compare with pre-
vious benchmarks. To our knowledge, Figure 1 is the ﬁrst
comparison of different data points of dictionary size and
success rate,
though direct comparison is difﬁcult since
authors all report efﬁciency rates for different dictionary
sizes. Password cracking tools only loosely attempt to guess
passwords in decreasing order of likeliness, introducing im-
precision into reported dictionary sizes. Worse, some studies
report
the running time of cracking software instead of
dictionary size [14], [24], [25], making comparison difﬁcult.
2) Repeatability: Precisely reproducing password crack-
ing results is difﬁcult. John the Ripper [10], used in most
publications of the past decade, has been released in 21 dif-
ferent versions since 2001 and makes available 20 separate
word lists for use (along with many proprietary ones), in
addition to many conﬁguration options. Other studies have
used proprietary password-cracking software which isn’t
available to the research community [6], [14]. Thus nearly
all studies use dictionaries varying in content and ordering,
making it difﬁcult to exactly re-create a published attack to
compare its effectiveness against a new data set.

3) Evaluator dependency: Password-cracking results are
inherently dependent on the appropriateness of the dictionary
and mangling rules to the data set under study. Dell’Amico
et al. [7] demonstrated this problem by applying language-
speciﬁc dictionaries to data sets of passwords in different
languages and seeing efﬁciency vary by 2–3 orders of
magnitude. They also evaluated the same data set as Schneier
three years earlier [6] and achieved two orders of magnitude
better efﬁciency simply by choosing a better word list. Thus
it is difﬁcult to separate the effects of more-carefully chosen
passwords from the use of a less appropriate dictionary. This
is particularly challenging in data-slicing experiments [8],
[23] which require simulating an equally good dictionary
attack against each subpopulation.

4) Unsoundness: Estimating the entropy of a password
distribution from structural characteristics is mathematically
dubious, as we will demonstrate in Section III-D, and in-
herently requires making many assumptions about password
selection. In practice, entropy estimates have performed
poorly as predictors of empirical cracking difﬁculty [8], [23].

540

III. MATHEMATICAL METRICS OF GUESSING DIFFICULTY
Due to the problems inherent to password cracking simu-
lations or semantic evaluation, we advocate security metrics
that rely only on the statistical distribution of passwords.
While this approach requires large data sets, it eliminates
bias from password-cracking software by always modeling
a best-case attacker, allowing us to assess and compare the
inherent security of a given distribution.

probability 0 < px ≤ 1, such that(cid:80) px = 1. We use N to

Mathematical notation: We denote a probability distribu-
tion with a calligraphic letter, such as X . We use lower-case
x to refer to a speciﬁc event in the distribution (an individual
password). The probability of x is denoted px. Formally, a
distribution is a set of events x ∈ X , each with an associated
denote the total number of possible events in X .
We often refer to events by their index i, that is, their
rank by probability in the distribution with the most probable
having index 1 and the least probable having index N. We
refer to the ith most common event as xi and call its prob-
ability pi. Thus, the probabilities of the events in X form a
monotonically decreasing sequence p1 ≥ p2 ≥ . . . ≥ pN .
← X
if it is drawn at random from X .
Guessing model: We model password selection as a ran-
dom draw X
← X from an underlying password distribution
X . Though X will vary depending on the population of
users, we assume that X is completely known to the attacker.
Given a (possibly singleton) set of unknown passwords
{X1, X2, . . . Xk}, we wish to evaluate the efﬁciency of an
attacker trying to identify the unknown passwords Xi given
access to an oracle for queries of the form “is Xi = x?”
A. Shannon entropy

We denote an unknown variable as X, denoting X

R

R

Intuitively, we may ﬁrst think of the Shannon entropy:

N(cid:88)

i=1

H1(X ) =

−pi lg pi

(1)

as a measure of the “uncertainty” of X to an attacker.
Introduced by Shannon in 1948 [26], entropy appears to
have been ported from cryptographic literature into studies
of passwords before being used in FIPS guidelines [20].

It has been demonstrated that H1 is mathematically inap-
propriate as a measure guessing difﬁculty [27]–[30]. It in fact
quantiﬁes the average number of subset membership queries
of the form “Is X ∈ S?” for arbitrary subsets S ⊆ X needed
to identify X.4 For an attacker who must guess individual
passwords, Shannon entropy has no direct correlation to
guessing difﬁculty.5

4The proof of this is a straightforward consequence of Shannon’s source
← X can be encoded using a Huffman
coding theorem [26]. Symbols X
code with average bit length ≤ H1(X ) + 1, of which the adversary can
learn one bit at a time with subset membership queries.
5H1 has further been claimed to correlate poorly with password cracking
difﬁculty [8], [23], though the estimates of H1 used cannot be relied upon.

R

541

(cid:33)

(cid:32) N(cid:88)

i=1

B. R´enyi entropy and its variants

R´enyi entropy Hn is a generalization of Shannon en-
tropy [31] parametrized by a real number n ≥ 0:6

Hn(X ) =

1

1 − n

lg

pn
i

(2)

In the limit as n → 1, R´enyi entropy converges to Shannon
entropy, which explains why Shannon entropy is denoted
H1. Note that Hn is a monotonically decreasing function of
n. We are most interested in two special cases:

1) Hartley entropy H0: For n = 0, R´enyi entropy is:

H0 = lg N

(3)

Introduced prior to Shannon entropy [32], H0 measures
only the size of a distribution and ignores the probabilities.

2) Min-entropy H∞: As n → ∞, R´enyi entropy is:

H∞ = − lg p1

(4)

This metric is only inﬂuenced by the probability of the
most likely symbol in the distribution, hence the name.
This is a useful worst-case security metric for human-chosen
distributions, demonstrating security against an attacker who
only guesses the most likely password before giving up. H∞
is a lower bound for all other R´enyi entropies and indeed
all of the metrics we will deﬁne.

C. Guesswork

A more applicable metric is the expected number of
guesses required to ﬁnd X if the attacker proceeds in optimal
order, known as guesswork or guessing entropy [27], [30]:

(cid:104)

(cid:105)

N(cid:88)

i=1

G(X ) = E

#guesses(X

R

← X )

=

pi · i

(5)

Because G includes all probabilities in X , it models an
attacker who will exhaustively guess even exceedingly un-
likely events which can produce absurd results. For example,
in the RockYou data set over twenty users (more than 1
in 221) appear to use 128-bit pseudorandom hexadecimal
strings as passwords. These passwords alone ensure that
G(RockYou) ≥ 2106. Thus G provides little insight into
practical attacks and furthermore is difﬁcult to estimate from
sampled data (see Section V).

D. Partial guessing metrics

Guesswork and entropy metrics fail to model the tendency
of real-world attackers to cease guessing against the most
difﬁcult accounts. As discussed in Section II, cracking
evaluations typically report the fraction of accounts broken
by a given attack and explicitly look for weak subspaces of
passwords to attack. Having many accounts to attack is an

6R´enyi entropy is traditionally denoted Hα; we use Hn to avoid

confusion with our primary use of α as a desired success rate.

important resource for a real attacker, as it enables a partial
guessing attack which trades a lower proportion of accounts
broken for increased guessing efﬁciency.

Formally, if Eve must sequentially guess each of k pass-
words drawn from X , she will need ∼ k · G(X ) guesses on
average. However, a second guesser Mallory willing to break
only (cid:96) < k of the passwords can do much better with the
optimal strategy of ﬁrst guessing the most likely password
for all k accounts, then the second-most likely value and
so on. As (cid:96) decreases, Mallory’s efﬁciency increases further
as the attack can omit progressively more low-probability
passwords. For large values of k and (cid:96), Mallory will only
need to guess the most popular β passwords such that
k . There are several possible

(cid:80)β
i=1 pi ≥ α, where α = (cid:96)
1) β-success-rate: A very simple metric, ﬁrst formally
deﬁned by Boztas¸ [29], measures the expected success for
an attacker limited to β guesses per account:

metrics for measuring guessing in this model:

λβ(X ) =

pi

(6)

2) α-work-factor: A related metric, ﬁrst formalized by
Pliam [28], evaluates the ﬁxed number of guesses per
account needed to break a desired proportion α of accounts.

(cid:41)

µα(X ) = min

j

pi ≥ α

(7)

If µα(X ) = n, this tells us that an attacker must use an
optimal dictionary of n entries to have a probability α of
breaking an individual account, or equivalently to break an
expected fraction α of many accounts.

3) α-guesswork: While λβ and µα are closer to mea-
suring real guessing attacks, both ignore the fact that a
real attacker can stop early after successful guesses. While
making up to µα guesses per account will enable breaking
a fraction α of accounts, some will require fewer than µα
guesses. We introduce a new metric to reﬂect the expected
number of guesses per account to achieve a success rate α:

β(cid:88)

i=1

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) j(cid:88)

i=1

(cid:40)

µα(cid:88)

i=1

Gα(X ) = (1 − λµα ) · µα +

pi · i

(8)

We use λµα in place of α to round up to the proportion
of passwords actually covered by µα guesses. Note that the
traditional guesswork metric G is a special case G1 of this
metric with α = 1. We could equivalently deﬁne Gβ for an
attacker limited to β guesses, but this is less useful as for
small β the effect of stopping early is negligible.
E. Effective key-length metrics

While λβ, µα and Gα are not measures of entropy, it is
convenient to convert them into units of bits. This enables
direct comparison of all metrics as a logarithmically scaled
attacker workload which is intuitive to programmers and

542

cryptographers. This can be thought of as an “effective
key-length” as it represents the size of a randomly chosen
cryptographic key which would give equivalent security.7

We convert each metric by calculating the logarithmic size
N for all
of a discrete uniform distribution UN with pi = 1
1 ≤ i ≤ N which has the same value of the guessing metric.
For β-success-rate, since we have λβ (UN ) = β
N we say
that another distribution X is equivalent with respect to λβ
to a uniform distribution of size N = β
λβ (X ). We take the
logarithm of this size to produce our effective key-length
metric ˜λβ, using a tilde to denote the conversion to bits:

(cid:19)
(cid:19)

(cid:18) β
(cid:18) µα(X )

λβ(X )

λµα

˜λβ(X ) = lg

˜µα(X ) = lg

(9)

(10)

The conversion formula for α-work-factor is related:

(11)

Again, we use λµα in place of α in the denominator
because µα increases as a step function as α increases.
Without this correction, ˜µα would decrease over each range
of α where µα is constant, giving a misleading over-estimate
of security. Using λµα effectively rounds up to the next
value of α which would require additional guesses to cover,
ensuring that ˜µα is monotonically increasing.

To convert Gα, we consider that an attacker desiring to
break a proportion α of accounts will average Gα guesses
per account, or one successful guess per Gα
α guesses. Against
the uniform distribution UN , an attacker will break an
account every N +1

2

guesses, giving us the formula:
2 · Gα(X )

1

− 1] + lg

λµα

2 − λµα

˜Gα(X ) = lg[

using the same correction for α as we did for ˜µα to achieve
to make
monotonicity, and the correction factor lg
the metric constant for a uniform distribution.

2−λµα

1

F. Relationship between metrics

We enumerate a few useful relationships between differ-
ent metrics in Table II. Note that for a discrete uniform
distribution UN , all of the metrics Hn, ˜Gα, ˜λβ and ˜µα are
equivalent. This validates the deﬁnitions and demonstrates
why more complicated guessing metrics have rarely come
up in cryptographic literature, as they provide no additional
information for uniform distributions.

Massey proved that ˜G1 ≥ H1−1 [30], which is sometimes
used to justify H1 as a guessing metric. However, several
negative results show that neither H1 nor ˜G1 can provide
any lower bound on partial guessing. Theorems proved by
Pliam [28], Boztas¸ [29], and Bonneau [34] demonstrate an
unbounded gap: for any desired success rate α < 1, it is
possible to construct a distribution X such that ˜µα(X ) +
7Boztas¸ introduced the term effective key-length speciﬁcally to refer to

˜µ0.5 [29]. We extend the notion here to all of our metrics.

(a) µα, Gα (number of guesses)

(b) µα, Gα (effective key-length)

Figure 2. Two ways of comparing the guessing difﬁculty of user-chosen 4-digit PINs [33] against uniform distributions of size 10,000 and 1,000 (U104
and U103 , respectively). Fig. 2a plots the dictionary size µα needed to have a chance of success α as well as the expected number of guesses per account
Gα. Fig. 2b converts both metrics into an effective key-length, enabling visual comparison across the entire range of α. Traditional single-point metrics
H0, H1, H2, H∞ and ˜G are also marked for comparison. Note that ˜µα and ˜Gα are horizontal lines for uniform distributions; an attacker gains no
efﬁciency advantage from lowering his desired success rate α.

m ≤ H1(X ) and ˜µα(X ) + m ≤ ˜G1(X ) for any separation
parameter m. Furthermore, for any α1 < α2 a distribution
X can be found with ˜µα1 (X ) + m ≤ ˜µα2(X ) for any m.
These results easily extend to ˜Gα using the bounds listed in
Table II and related results can be proved for ˜λβ(X ).

equivalences

∀n Hn(UN ) = lg N
˜λβ (UN ) = lg N
∀β
∀α ˜µα(UN ) = lg N
˜Gα(UN ) = lg N
∀α
H0 = ˜µ1 = ˜λN = lg N

H∞ = ˜µα≤p1 = ˜λ1 = − lg p1

bounds

all metrics equal for U
all metrics equal for U
all metrics equal for U
all metrics equal for U
metrics depending only on N
metrics depending only on p1

˜Gα ≤ ˜µα

H∞ ≤ ˜Gα, ˜µα, ˜λβ
˜Gα, ˜µα, ˜λβ ≤ H0
˜Gα − ˜µα ≤ lg(1 − α)
H∞ ≤ . . . ≤ H1 ≤ H0

˜λβ ≤ ˜λβ+
˜µα ≤ ˜µα+
˜Gα ≤ ˜Gα+

monotonicity

H∞ is abs. lower bound
H0 is abs. upper bound
straightforward proof
straightforward proof

Hn decreasing with n
˜λβ increasing with β
˜µα increasing with α
˜Gα increasing with α

RELATIONS BETWEEN GUESSING METRICS

Table II

G. Application in practical security evaluation

For an online attacker we can use ˜λβ with β equal to the
guessing limits imposed by the system. There is no standard
for β, with 10 guesses recommended by usability stud-
ies [35], 3 by FIPS guidelines [20], and a variety of values
(often ∞) seen in practice [36]. Sophisticated rate-limiting
schemes may allow a probabilistic number of guesses [37].

543

We consider ˜λ10 a reasonable benchmark for resistance to
online guessing, though ˜λ1 = H∞ is a conservative choice
as a lower bound for all metrics proposed.

The separation results of Section III-F mean that for brute-
force attacks we can’t rely on any single value of α; each
value provides information about a fundamentally different
attack scenario. For a complete picture, we can consider ˜µα
or ˜Gα across all values of α. We can plot this as the guessing
curve for a distribution, as seen in Figure 2.

For ofﬂine attacks, where an adversary is limited only by
time and computing power, we might consider ˜µα or ˜Gα for
a standard value such as 0.5 as a benchmark (˜µ0.5 was orig-
inally suggested by [29]). While ˜Gα more directly measures
the efﬁciency of a guessing attack, ˜µα can be advantageous
in practice because it is simpler to compute. In particular, it
can be computed using previously published cracking results
reported as “a dictionary of size µ compromised a fraction α
of available accounts,” as plotted in Figure 1b. Furthermore,
the difference between the metrics is only signiﬁcant for
higher values of α; for α ≤ 0.5 the two will never differ by
more than 1 bit (from the bound in Table II).

IV. PRIVACY-PRESERVING EXPERIMENTAL SETUP

By using statistical guessing metrics to evaluate pass-
words, we are freed from the need to access passwords
in their original form. Users may be willing to provide
passwords to researchers with ethics oversight [4], [23]
but this approach does not scale and the validity of the
collected passwords is questionable. In contrast, leaked data
sets provide unquestionably valid data but there are ethical
questions with using stolen password data and its availability
shouldn’t be relied on [38]. There is also no control over

0.00.20.40.60.81.0successrateα0200040006000800010000numberofguessesµα(U104)/Gα(U104)µα(U103)/Gα(U103)µα(PIN)Gα(PIN)0.00.20.40.60.81.0successrateα02468101214bits-H∞˜G&H0&H1→H2→˜µα(U104)/˜Gα(U104)˜µα(U103)/˜Gα(U103)˜µα(PIN)˜Gα(PIN)0.00.51.01.52.02.53.03.54.0ditsthe size or composition of leaked data sets. Thus far, for
example, no leaked sources have included demographic data.
We addressed both problems with a novel experimental
setup and explicit cooperation from Yahoo!, which maintains
a single password system to authenticate users for its diverse
suite of online services. Our experimental data collection
was performed by a proxy server situated in front of live
login servers. This is required as long-term password storage
should include account-speciﬁc salting and iterated hashing
which prevent constructing a histogram of common choices,
just as they mitigate pre-computed dictionary attacks [39].
Our proxy server sees a stream of pairs (u, passwordu)
for each user u logging in to any Yahoo! service. Our
goal is to approximate distinct password distributions Xfi
for a series of demographic predicates fi. Each predicate,
such as “does this user have a webmail account?”, will
typically require a database query based on u. A simplistic
solution would be for the proxy to emit a stream of tuples
(H(passwordu), f1(u), f2(u), . . . ), removing user identiﬁers
u to prevent trivial access to real accounts and using a cryp-
tographic hash function H to mask the values of individual
passwords.8 There are two major problems to address:
A. Preventing password cracking

If a user u can be re-identiﬁed by the uniqueness of
then the value
his or her demographic predicates [40],
H(passwordu) could be used as an oracle to perform an
ofﬂine dictionary attack. Such a re-identiﬁcation attack was
demonstrated on a data set of movie reviews superﬁcially
anonymized for research purposes [41] and would almost
certainly be possible for most users given the number and
detail of predicates we would like to study.

This risk can be effectively mitigated by prepending the
same cryptographically random nonce r to each password
prior to hashing. The proxy server must generate r at the
beginning of the study and destroy it prior to making data
available to researchers. By choosing r sufﬁciently long
to prevent brute-force (128 bits is a conservative choice)
and ensuring it is destroyed, H(r||passwordu) is useless
for an attacker attempting to recover passwordu but the
distribution of hash values will remain exactly isomorphic
to the underlying distribution of passwords seen.

B. Preventing cross-account compromise

While including a nonce prevents ofﬂine search, an at-
tacker performing large-scale re-identiﬁcation can still iden-
tify sets of users which have a password in common. This
decreases security for all users in a group which share a
password, as an attacker may then gain access to all accounts
in the group by recovering just one user’s password by
auxiliary means such as phishing, malware, or compromise
of an external website for which the password was re-used.

8Note that H cannot incorporate any user-speciﬁc salt—doing so would

occlude the frequency of repeated passwords.

544

Figure 3. Changing estimates of guessing metrics with increasing sample
size M. Estimates for H∞ and ˜λ10 converge very quickly; estimates for
˜µ0.25 converge around M = 222 (marked ×) as predicted in Section V-A.
Estimates for H0, H1, and ˜G are not close to converging.

Solving this problem requires preventing re-identiﬁcation by
not emitting vectors of predicates for each user.

Instead,

the proxy server maintains a histogram Hi
of observed hash values
for each predicate fi. For
each pair (u, passwordu) observed, the proxy server adds
H(r||passwordu) to each histogram Hi for which fi(u) is
true. An additional list is stored of all previously seen hashed
usernames H(r||u) to prevent double-counting users.
C. Deployment details

The collection code, consisting of a few dozens lines of
Perl, was audited and r generated using a seed provided
by a Yahoo! manager and machine-generated entropy. The
experiment was approved by Yahoo!’s legal team as well
as the responsible ethics committee at the University of
Cambridge. We deployed our experiment on a random subset
of Yahoo! servers for a 48 hour period from May 23–25,
2011, observing 69,301,337 unique users and constructing
separate histograms for 328 different predicate functions. Of
these, many did not achieve a sufﬁcient sample size to be
useful and were discarded.

V. EFFECTS OF SAMPLE SIZE

In our mathematical treatment of guessing difﬁculty, we
assumed complete information is available about the under-
lying probability distribution of passwords X . In practice, we
will need to approximate X with empirical data.9 We assume
that we have M independent samples X1, . . . , XM
← X
and we wish to calculate properties of X .
The simplest approach is to compute metrics using the
distribution of samples directly, which we denote ˆX .10 As
9It possible that an attacker knows the precise distribution of passwords
in a given database, but typically in this case she or he would also know
per-user passwords and would not be guessing statistically.

R

10We use the hat symbolˆfor any metric estimated from sampled data.

101214161820222426lgM510152025metricvalue(bits)ˆH0ˆ˜GˆH1ˆ˜µ0.25ˆ˜λ10ˆH∞shown in Figure 3, this approach produces substantial and
systematic under-estimates of most metrics, most promi-
nently ˆH0 = lg ˆN which increases nearly continuously with
increasing sample size M indicating that new passwords
are still being seen often even at our massive sample size.
The maximum-likelihood estimation of the growth rate d ˆN
dM
has been shown to be exactly V (1,M )
M , the proportion of
passwords in the sample observed only once [42].11 This
can be seen because in in exactly V (1,M )
of all possible
orderings that the sample may have been collected will
the last observation have been a new item. For our full
sample, V (1,M )
= 42.5%, indicating that a larger sample
would continue to ﬁnd many new passwords and hence
larger estimates for H0, H1, G1 etc. Similarly, for a random
subsample of our data, many passwords will be missed and
estimates of these metrics will decrease.

M

M

Interpreting hapax legomena is a fundamental problem in
statistics and there are there are no known non-parametric
techniques for estimating the true distribution size N [42].
This is a not merely a theoretical restriction; in the case of
passwords determining that apparently pseudorandom pass-
words really are 128-bit random strings would require an ut-
terly intractable sample size many times greater 2128. Good-
Turing techniques [43] aren’t helpful for the distribution-
wide statistics we are interested in; they can only estimate
the cumulative probability of all unobserved events (the
“missing mass”) and provide damped maximum-likelihood
estimates of the probability of individual events.

Fortunately, in practice we can usefully approximate our
guessing metrics from reasonably-sized samples;
though
these estimations implicitly rely on assumptions about the
underlying nature of the password distribution. As seen in
Figure 3, partial guessing metrics which rely only on the
more-frequent items in the distribution are the easiest to
approximate, while those which rely on a summation over
the entire distribution such as H0, H1 and ˜µα, ˜Gα for large
values of α will be the most difﬁcult.

A. The region of stability

We can reliably estimate pi for events with observed
frequency fi (cid:29) 1 due to the law of large numbers.
Estimating H∞ requires estimating only p1, the probability
of the most common password, which was 1.08% in our data
set. Gaussian statistics can be used to estimate the standard
error of the maximum-likelihood estimate ˆpi:

(cid:114)

(cid:114)

error(ˆpi) =

pi(1 − pi)

M

1
pi ≈

·

fi
M 2 ·

M
fi

=

1
√fi

For our data set, this gives a standard error of under 0.1 bit
in ˆH∞ for M ≥ 214. This argument extends to ˆ˜λβ for small

Figure 4.
Estimated guessing curves with reduced sample size M.
Subsamples were computed randomly without replacement, to simulate
having stopped the collection experiment earlier. After the maximum
conﬁdence point α6; there are two (almost indistinguishable) dashed plots
representing the 1st and 99th percentiles from 1,000 random samples.

values of β and in practice we can measure resistance to
online guessing with relatively modest sample size.

Reasoning about the error in ˆ˜µα and ˆ˜Gα for values of α
which represent realistic brute-force attacks is more difﬁcult.
Fortunately, we observe that for our password data set the
number of events V (f, M ) which occur f times in a sample
of size M is very consistent for small f and provides a
reasonable estimate of the number of events with probability
f−0.5
M ≤ p ≤ f +0.5
This enables a useful heuristic that ˜µα and ˜Gα will be
well approximated when α is small enough to only rely
on events occurring greater than some small frequency f.
Calling αf the cumulative estimated probability of all events
occurring at least f times, we took 1,000 random samples
of our corpus with M = 219 and observed the following
values in the 1st and 99th percentiles:

M in our full data set.12

f
αf

˜µαf − ˆ˜µαf
˜Gαf − ˆ˜Gαf

6

7

8

0.162–0.163
0.157–0.180
0.155–0.176

0.153–0.154
0.125–0.148
0.123–0.146

0.145–0.146
0.103–0.127
0.101–0.126

We observed very similar values for larger values of M.
Thus, we will use ˆ˜µα, ˆ˜Gα directly for α ≤ α6 for random
subsamples of our data. The utility of this heuristic is seen
in Figure 3, where it accurately predicts the point at which
˜µ0.25 stabilizes, and in Figure 4, where it marks the point
below which ˜µα is inaccurate for varying M.

11Events observed only once in a sample are called hapax legomena in

linguistics, Greek for “said only once.”

12V (f, M ) will almost always overestimate this value because more low-

probability events will be randomly over-represented than the converse.

545

0.00.20.40.60.81.0successrateα0510152025α-work-factor˜µα(bits)M=69,301,337(full)M=10,000,000(sampled)M=1,000,000(sampled)M=500,000(sampled)B. Parametric extension of our approximations

Estimating ˜µα and ˜Gα for higher α requires directly
assuming a model for the underlying password distribution.
Passwords have been conjectured to follow a power-law
distribution13 where:

Pr [p(x) > y] ∝ y1−a

(12)

Unfortunately, using a power-law distribution is problematic
for two reasons. First, estimates for the scale parameter a
are known to decrease signiﬁcantly with sample size [42].
Using maximum-likelihood ﬁtting techniques [44] for our
observed count data we get the following estimates:

M 69M 10M 1M 100k
4.21
ˆa

3.23

2.99

3.70

A second problem is this model ﬁts our observed, integer
counts. To correctly estimate ˜µα from samples, we need to
model the presence of passwords for which pi · M < 1.
Power law distributions require assuming a non-zero mini-
mum password probability a-priori [44], which we have no
meaningful way of doing.

Instead we need a model ψ(p) for the distribution of
password probabilities, an approach taken by linguists for
modeling word frequencies [45]. We model the probability
of observing a password k times using a mixture-model:
ﬁrst we draw a password probability p randomly according
to the probability density function ψ(p), then we draw from
a Poisson distribution with expectation p · M to model the
number of times we observe this password:

(cid:82) 1

0

(p·M )k·e−p·M

(cid:82) 1
ψ(p)dp
0 e−p·M ψ(p)dp

k!

1 −

Pr[k obs.] =

The numerator integrates the possibility of seeing a pass-
word with probability p exactly k times, weighted by the
probability ψ(p) of a password having probability p. The
denominator corrects for the probability of not observing a
password at all. This formulation allows us to take a set of
counts from a sample {f1, f2, . . .} and ﬁnd the parameters
for ψ(p) which maximize the likelihood of our observations:

Likelihood =

Pr [fi obs.]

(14)

This model has been effectively applied to word frequen-
cies using the generalized inverse-Gaussian distribution:14

i=1

ψ(p|b, c, g) =

p

c − b2c
2g−1pg−1e
(bc)g · Kg(b)

4p

(15)

where Kg is the modiﬁed Bessel function of the second kind.

13Power-law distributions are also called Pareto or Zipﬁan distributions,

which can all be shown to be equivalent formulations [42].

14The combined generalized inverse-Gaussian-Poisson model which we
adopt is also called the Sichel distribution after its initial use by Sichel in
1975 to model word frequencies [46].

ˆN(cid:89)

Figure 5.
Extrapolated estimates for ˜µα using the generalized inverse
Gaussian-Poisson distribution. Compared to naive estimates (Figure 4) the
effect of sample size are mitigated. Each plot shows the 99% conﬁdence
interval from 1,000 random subsamples. Error from lack of ﬁt of the model
dwarfs error due to the randomness of each sample.

blends both power-law (cid:0)pg−1(cid:1) and exponential

The generalized inverse-Gaussian is useful because it

c − b2c

e

4p

p

behavior and produces a well-formed probability distribu-
tion. By plugging Equation 15 into Equation 13 for ψ and
solving the integral, we obtain:

(cid:17)

(cid:16)

Pr[k|b, c, g] =

(13)

bcn√

r!(cid:0)(1 + cn)

( 1
2 ·

2 Kg(b) − Kg(b√1 + cn)(cid:1)
1+cn )r · Kr+g(b√1 + cn)

g

(16)
Though unwieldy, we can compute Equation 14 using
Equation 15 for different parameters of b, c, g. Fortunately,
for b > 0, c > 0, g < 0 there is only one maximum
of this function [45], which enables approximation of the
maximum-likelihood ﬁt efﬁciently by gradient descent.

We can use this model to produce an extrapolated distribu-
tion, removing all observed passwords with fi < 6 to leave
the well-approximated region of the distribution unchanged
and adding synthetic passwords according to our estimated

model ψ(p). This is achieved by dividing the region(cid:0)0, 6

(cid:1)

into discrete bins, with increasingly small bins near the
value p+ which maximizes ψ(p+). Into each bin (pj, pj+1)
we insert ˆN ·
ψ(p)dp events of observed frequency
2·M . We then normalize the probability of all synthetic
events by multiplying the correction factor
ψ(p)dp
to leave the head of the distribution intact.

(cid:82) 1

αf≥6 ·

pj +pj+1

(cid:82) pj+1

6
M

pj

M

1

Figure 5 plots the 1st and 99th percentile of ˜µα for
extrapolations of random subsamples of our data. We use
˜µα because it is strictly less-well approximated than ˜Gα,
which is weighted slightly more towards well-approximated
events in the distribution. Some key values are:

546

0.00.20.40.60.81.0successrateα05101520253035α-work-factor˜µα(bits)M=69,301,337(full)M=10,000,000(sampled)M=1,000,000(sampled)M=500,000(sampled)69M
17.74
22.01
27.07

10M

1M

500k

17.67–17.67
22.09–22.11
26.98-27.01

17.24–17.25
22.06–22.11
27.25–27.35

17.07–17.17
ˆ˜µ0.25
22.28–22.48
ˆ˜µ0.5
27.02–27.89
ˆ˜µ0.75
Our estimates are biased towards under-correction for
lower values of α and over-biased for higher values. Still,
even with a 500k sample the estimates for ˜µα agree to within
1 bit for all values of α.
C. Limitations and estimating conﬁdence

We can not conclude that

the underlying probability
distribution of passwords is completely modeled. Indeed,
using a Kolmogorov-Smirnov test we can reject with very
high conﬁdence (p > 0.99) the hypothesis that our sample
was drawn from the modeled distribution.

Our goal is to accurately compare statistics for differently-
sized subsamples of our data. Doing so using our empirical
precision estimates directly is accurate only under the as-
sumption that two different subpopulations have each chosen
a distribution of passwords which our model ﬁts equally
well.15 If some deﬁnable population of user-generated pass-
words form a very different underlying distribution (for
example, uniform or exponential), then our model might
produce much more variable estimates. When analyzing
our data in Section VI we thus make a weaker claim
only that different demographic subsamples of users are
signiﬁcantly different from the global population of users if
our extrapolation produces estimates which are outside the
1st or 99th percentile of estimates observed for similarly-
sized random samples as listed in this section.
VI. ANALYSIS OF YAHOO! DATA

A. External comparison

We ﬁrst compare our collected data to several known
data sets. To the author’s knowledge, there have been two
large-scale leaks of password data suitable for statistical
analysis:16 the 2009 RockYou leak and a 2011 leak of
roughly 500k passwords from the gaming website Battleﬁeld
Heroes.17 Guessing metrics for these distributions and our
collected data are listed in Table III. All three distributions,
despite being taken from substantially different populations,
agree to within 1 bit for estimates of online attacks (H∞
and ˜λ10), and within 2 bits for ofﬂine attacks ( ˜G0.25 and
˜G0.5).

We plot

the guessing curve for our collected data in
Figure 6 along with that of the RockYou distribution. We

15Supporting this assumption, we ﬁnd that our model produces similarly
accurate estimates for subsamples of the RockYou distribution, the only
other large password data set to which we have access.

16A prominent 2010 leak revealed nearly 1M passwords from the blog-
ging site Gawker, but these were salted via the Unix crypt() function,
preventing full analysis of the distribution.

17The Battleﬁeld Heroes passwords were hashed with MD5, but without

any salt, making analysis of the distribution possible.

547

Yahoo! (2011)
RockYou (2009)
Battleﬁeld Heroes (2011)

COMPARISON OF YAHOO! DATA WITH LEAKED DATA SETS

ˆH∞ ˆ˜λ10
9.1
6.5
8.9
6.8
7.7
9.8

ˆ˜G0.25
17.6
15.9
16.5

ˆ˜G0.5
21.6
19.8
20.0

M

69301337
32603388
548774
Table III

also include guessing curves for two distributions from
non-password-based authentication schemes: a distribution
of four-digit unlock codes used for an iPhone application
leaked in 2011 [33] and the distribution of surnames (the
most common category of answer to personal knowledge
questions) from a large-scale crawl of Facebook [34]. Within
our plot we add estimated data points from cracking experi-
ments. We include both the password-cracking experiments
discussed in Section II-A and cracking attempts on two
graphical schemes: a 2004 study of user choice in a face-
based graphical PIN scheme [47] and a 2005 study of user-
selected image points in the PassPoints scheme [48]. Note
that due to our use of published cracking results, we are
restricted to using ˜µα instead of ˜Gα.

The guessing curve shows how close the distribution of
passwords at both Yahoo! and RockYou are compared to
other authentication schemes. Both password distributions
have a much sharper increase for very low success-rate
attackers than the surname or PIN distributions do, meaning
passwords are particularly vulnerable to a trawling attacker
who only makes a few attempts at a large number of
accounts. However, passwords have comparatively high α-
work-factor against brute-force attackers. The 1990 cracking
study by Klein provided estimates very close to the optimal
attack for our observed data, suggesting that passwords have
changed only marginally since then.

B. Comparing subpopulations

Of the 328 subpopulations for which we compiled sepa-
rate distributions, we summarize the most interesting which
gathered a sufﬁcient number of samples in Table IV. All of
our sub-distributions had similar guessing metrics: the range
of H∞ was 5.0–9.1 bits and for ˜λ10 from 7.5–10.9 bits, just
over one decimal order of magnitude in variation. Variation
in ˜G0.5 was substantially larger, with the weakest population
having an estimated 17.0 bits and the strongest 26.6 (nearly
three decimal orders of magnitude).

Thus, while there is no “good” population of users which
isn’t generally vulnerable to guessing attacks, there is still
variation which is strongly detectable within the limits of our
sampling conﬁdence: our estimates of H∞ and ˜λ10 are all
accurate to within at least 0.1 bit based on our calculations
in Section V-A, while our extrapolation of ˜Gα allows us to
identify many groups which are statistically different from
the overall population as discussed in Section V-C.

Demographically, users’ reported gender had a small but

Figure 6. Guessing curve for Yahoo! passwords compared with previously published data sets and cracking evaluations.

split effect, with male-chosen passwords being slightly more
vulnerable to online attack and slightly stronger against of-
ﬂine attack. There is a general trend towards better password
selection with users’ age, particularly against online attacks,
where password strength increases smoothly across different
age groups by about a bit between the youngest users and
the oldest users. Far more substantial were the effects of
language: passwords chosen by Indonesian-speaking users
were amongst the weakest subpopulations identiﬁed with
H∞ = 5.5. In contrast, German and Korean-speaking users
provided relatively strong passwords.

Users’ account history also illustrates several interesting
trends. There is a clear trend towards stronger passwords
amongst users who actively change their password, with
users who have changed passwords 5 or more times being
one of the strongest groups.18 There is a weaker trend
towards stronger passwords amongst users who have com-
pleted an email-based password recovery. However, users
who have had their password reset manually after reporting
their account compromised do not choose better passwords

18As these password changes were voluntary, this trend doesn’t relate
mandatory password change policies, particularly as many users choose
predictably related passwords when forced [49].

than average users.19 Users who log in infrequently, judging
by the time of previous login before observation in our ex-
periment, choose slightly better passwords. A much stronger
trend is that users who have recently logged in from multiple
locations choose relatively strong passwords.20

There is a weak trend towards improvement over time,
with more recent accounts having slightly stronger pass-
words. Of particular interest to the security usability research
community, however, a change in the default login form
at Yahoo! appears to have had little effect. While Yahoo!
has employed many slightly different login forms across its
different services, we can compare users who initially en-
rolled using each of two standard forms: one of which has no
minimum length requirement and no guidance on password
selection, and the other with a 6 character minimum and a
graphical indicator of password strength. This change made
almost no difference in security against online guessing, and
increased the ofﬂine metrics by only 1 bit.

Finally, we can observe variation between users who have

19A tempting interpretation is that user choice in passwords does not
play a signiﬁcant role in the risk of account compromise, though this is not
clearly supported since we can only observe the post-compromise strength.
20Yahoo! maintains a list of recent login locations for each user for abuse

detection purposes.

548

0.00.10.20.30.40.5successrateα051015202530α-work-factor˜µα(bits)WebCo[09]RockYou[09]Surnames[10]PINs[11]Morrisetal.[79]Klein[90]Spaﬀord[92]Wu[99]Kuo[04]Schneier[06]Dell’Amico(en)[10]Dell’Amico(ﬁ)[10]Dell’Amico(it)[10]PassPoints[05]Faces[04]ˆH∞ ˆ˜λ10
9.1
6.5

ˆ˜G0.25
17.6

ˆ˜G0.5
21.6

all passwords

female
male

13–24
25–34
35–44
45–54
≥ 55
Chinese
German
English
French
Indonesian
Italian
Korean
Portuguese
Spanish

M

69301337
gender (self-reported)
30545765
38624554

6.9
6.3

age (self-reported)

6.3
6.2
6.8
7.3
7.5

18199547
22380694
12983954
8075887
7110689
language preference
1564364
1127474
55805764
2084219
1061540
811133
530759
2060256
3065901

6.5
7.4
6.5
6.9
5.5
6.8
7.5
6.5
6.6

tenure of account

≤ 1 y
1–2 years
2–3 years
3–4 years
4–5 years
≥ 5 years
none
6 char. minimum

5182527
5182527
12261556
10332348
9290840
29104856

20434875
13332334

6.9
6.9
6.2
6.2
6.1
6.8

6.6
6.5

password requirements at registration

last recorded login

6.5
6.5
7.0

32627777
55777259
8212643

9.0
9.0
9.5
number of login locations
8.6
16447906
9.2
52853431
17146723
9.7
number of password changes
8.8
10.4
10.7
10.9

52117133
9608164
7576040
930035

6.2
8.3
8.6
9.1

6.0
6.7
7.3

17.1
18.8
19.5
19.7
number of password resets (forgotten password)
17.3
19.2
19.7
19.9

61805038
4378667
3117632
387469

8.9
10.5
10.8
10.6

6.4
8.2
8.7
8.7

amount of data stored with Yahoo!

< 30 days
< 90 days
> 90 days

1
≥2
≥ 10
none
1
>1
≥5
none
1
>1
≥5
1st quartile
2nd quartile
3rd quartile
4th quartile

usage of different Yahoo! features

9830792
20702119
21307618
17447029

5976663
2139160
15965774
37337890
14204900
20676566
1359713
6222547
3843404

5.6
6.3
6.8
7.6

7.7
8.8
6.3
6.2
7.1
6.7
8.3
8.1
7.6

8.2
8.8
9.3
10.0

10.1
10.5
8.8
8.7
9.6
9.3
10.3
10.1
10.0

media sharing
retail
webmail
chat
social networking
mobile access
Android client
iPhone client
RIM client

9.3
8.8

8.7
8.8
9.4
9.8
9.8

8.6
9.7
9.0
9.0
7.9
9.0
9.5
9.0
9.1

9.1
9.1
8.6
8.8
8.8
9.3

9.2
9.0

17.2
17.7

16.7
17.1
17.4
17.3
17.3

17.3
15.8
17.4
14.8
14.3
14.5
18.1
15.6
15.6

18.0
18.0
17.7
17.5
17.2
17.2

16.8
17.6

17.5
17.5
17.7

17.1
17.7
18.3

17.3
17.5
17.5
17.8

18.0
16.8
17.4
17.1
17.7
17.1
17.3
17.6
17.2

21.1
21.8

20.9
21.2
21.3
21.3
21.4

22.0
19.7
21.5
18.6
17.0
18.0
22.7
18.8
19.7

22.5
22.5
21.8
21.6
21.2
21.2

20.7
21.6

21.5
21.5
21.9

21.1
21.7
22.6

20.9
23.2
24.2
25.9

21.3
23.8
24.6
26.6

21.5
21.5
21.4
22.0

22.3
21.4
21.2
21.2
21.8
21.1
21.5
21.6
21.1

Note: Estimates in italics are not signiﬁcantly different from the aggregate
population of users, as discussed in Section V-C.

GUESSING STATISTICS FOR VARIOUS GROUPS OF YAHOO! USERS.

Table IV

actively used different Yahoo! services. Users who have
used Yahoo!’s online retail platform (which means they have
stored a payment card) do choose very weak passwords
with lower frequency, with ˜λ10 increasing by about 2 bits.
However, the distribution is indistinguishable from average
users against ofﬂine attack. A similar phenomenon occurs
for users of some other features, such as media sharing
or dedicated smartphone clients for Android, Blackberry,
or iOS, which see slightly better security against online
attacks but are indistinguishable otherwise. Other popular
features, such as webmail, chat, and social networking, saw
slightly fewer weak passwords than normal, but again were
indistinguishable against ofﬂine attacks.

One other interesting categorization is the amount of data
that users have stored with Yahoo!. While this is a very
rough proxy for how active user accounts have been, there
is a clear trend that users with a large amount of stored data
choose better passwords.

C. Effects of dictionary speciﬁcity

While we have focused so far only on comparing the
shape of distributions, it is also interesting to compare their
content to examine the extent to which an inappropriate
cracking dictionary might slow down attackers (or skew
the conclusions of academic studies). To do this, we can
simulate a guessing attack on one distribution by guessing
passwords in the order they appear in another distribution,
instead of an optimal attack. We tested the top 1,000
passwords in each subpopulation, comparing ˆλ1000 for an
attack with the optimal dictionary to a sub-optimal one.
A simple example is to compare male and female-chosen
passwords:

dictionary

t ♀

e
g
r
a
t

♂
♀
7.8% 6.8%
♂ 6.3% 7.1%

There is a 10–15% loss in efﬁciency if an attacker uses the
optimal male dictionary against female-chosen passwords, or
vice-versa. This is small enough that we may conclude real-
world attackers are unlikely to tailor their guessing approach
based on the gender distribution of their target users. In
general, using an inappropriate dictionary has surprisingly
little impact on guessing efﬁciency, at least for an attacker
with a desired success rate α < 10%, which we tested to stay
in the well-approximated region given our data. In Table V
we compare the efﬁciency loss when using a password
dictionary from users of different languages, perhaps the
most inappropriate dictionaries possible. Surprisingly, the
worst efﬁciency loss observed is only a factor of 4.8, when
using an optimal Vietnamese-language password dictionary
against French speakers’ passwords.

We also observe in Table V that simply using the global
list of most popular passwords performs very well against

549

e
n
s
a
k
e
m
n
e
e
r
i
h
e
r
G
G
C
4.4% 1.9%
2.7%
2.0% 6.5% 2.1%
9.3%
4.4%
2.7%
6.7%
4.0%
3.7%
3.9%
3.6%
7.0%

h
s
i
l
g
n
E
2.4%
3.3%
7.7% 13.4% 8.4%
4.6%
4.0%
6.3%
6.0%
2.0%
3.9%
5.0%
5.7%

3.9%
2.9%
6.5%
4.6%
3.0%
4.0%
4.0%
6.2%

2.0%
1.7%
2.2%
2.9%
8.1%
7.4%
8.0% 4.3%
4.5%
4.2% 10.0% 2.9%
8.7%
6.3%
2.6%
4.3%
5.6%
7.7%

2.0%
2.8%
8.0%
4.3%
3.2%
14.9% 6.2%
4.6%
2.3%
3.9%
4.1%
6.3%

6.3%
5.3%
1.8%
3.8%
4.6%
5.8%

dictionary

n
a
i
s
e
n
o
d
n
I

h
c
n
e
r
F

e
s
e
u
g
u
t
r
o
P

n
a
i
l
a
t
I

n
a
e
r
o
K
2.9%
1.6%
8.0%
3.4%
2.2%
5.8%
14.6% 3.3%
2.0%
4.4%
6.1%
5.7%

1.8%
1.7%
2.1%
2.6%
7.7%
7.8%
3.5%
4.2%
3.1%
3.4%
6.0%
6.2%
5.7%
6.8%
5.8% 2.4%
1.9%
3.5% 11.1% 5.8%
3.1%
6.0%

6.3%
5.8%

l
a
b
o
l
g

h
s
i
n
a
p
S

e
s
e
m
a
n
t
e
i
V
2.0%
1.6%
7.7%
3.5%
2.1%
5.9%
3.2%
2.2%
2.9%
12.1% 2.9%
5.5%

x
a
m
i
n
i
m
2.9% 2.7%
3.5% 3.4%
8.6% 8.9%
7.9% 7.7%
5.0% 4.9%
9.3% 9.6%
7.2% 7.1%
2.8% 3.0%
5.1% 5.3%
6.9% 7.0%
14.3% 7.8% 8.3%

t
e
g
r
a
t

Chinese
German
Greek
English
French
Indonesian
Italian
Korean
Portuguese
Spanish
Vietnamese

LANGUAGE DEPENDENCY OF PASSWORD GUESSING. EACH CELL INDICATES THE SUCCESS RATE OF A GUESSING ATTACK WITH 1000 ATTEMPTS

USING A DICTIONARY OPTIMAL FOR USERS REGISTERED AT YAHOO! WITH DIFFERENT PREFERRED LANGUAGES.

Table V

list

most subsets. The greatest efﬁciency loss for any subset
when using the global
is only 2.2, for Portuguese
language passwords. We can improve this slightly further
by constructing a special dictionary to be effective against
all subsets. We do this by repeatedly choosing the password
for which the lowest popularity in any subset is maximal and
call it the “minimax” dictionary, also seen in Table V. This
dictionary performs very similarly to the global dictionary,
reducing the maximum efﬁciency loss to a factor 2.1, also
for Portuguese language passwords.

Digging into our data we ﬁnd “global passwords” which
are popular across all subgroups we observed. The single
most popular password we observed, for example, occurred
with probability at least 0.14% in every subpopulation. Some
overall popular passwords were very rare in certain subpop-
ulations. For example, the third most common password,
with overall probability 0.1%, occurred nearly 100 times
less frequently in some subpopulations. However, there were
eight passwords which occurred with probability at least
0.01% in every subpopulation. Without access to the raw
passwords, we can only speculate that these are numeric
passwords as these are popular21 and internationalize well.
Despite the existence of globally popular passwords,
however, we still conclude that dictionary speciﬁcity can
have surprisingly large results. For example, the following
table shows efﬁciency losses of up to 25% from dictionaries
tailored to people from different English-speaking countries:

dictionary

s
u

k
u

a
c

u
a

l
a
b
o
l
g

t
e
g
r
a
t

us
uk
ca
au

8.2% 6.6% 7.4% 7.2% 8.1%
5.4% 6.9% 5.5% 5.6% 5.5%
8.8% 7.9% 9.9% 8.7% 8.8%
7.4% 7.2% 7.6% 8.8% 7.5%

21Within the RockYou data set, 123456 was the most popular password

and 5 other number-only passwords were amongst the top ten.

550

We observe comparable efﬁciency losses based on age:

dictionary

0
2
–
3
1

4
3
–
1
2

4
5
–
5
3

+
5
5

l
a
b
o
l
g

t
e
g
r
a
t

13–20
21–34
35–54
55+

8.4% 7.8% 7.1% 6.5% 7.9%
7.3% 7.9% 7.3% 6.7% 7.8%
5.4% 5.8% 6.4% 6.1% 6.2%
5.4% 5.8% 6.8% 7.3% 6.5%

We even observe efﬁciency losses based on service usage:

dictionary

l
i
a
t
e
r

t
a
h
c

a
i
d
e
m

l
i
a
m

l
a
b
o
l
g

t
e
g
r
a
t

retail
chat
media
mail

7.0% 5.6% 6.6% 5.6% 6.0%
6.9% 8.4% 7.8% 8.3% 8.3%
5.7% 5.6% 6.0% 5.6% 5.8%
6.7% 8.0% 7.5% 8.2% 8.1%

VII. CONCLUDING REMARKS

By establishing sound metrics and rigorously analyzing
the largest password corpus to date, we hope to have
contributed both tools and numbers of lasting signiﬁcance.
As a rule of thumb for security engineers, passwords
provide roughly equivalent security to 10-bit random strings
against an optimal online attacker trying a few popular
guesses for large list of accounts. In other words, an attacker
who can manage 10 guesses per account, typically within the
realm of rate-limiting mechanisms, will compromise around
1% of accounts, just as they would against random 10-bit
strings. Against an optimal attacker performing unrestricted
brute force and wanting to break half of all available
accounts, passwords appear to be roughly equivalent to 20-
bit random strings. This means that no practical amount of
iterated hashing can prevent an adversary from breaking a
large number of accounts given the opportunity for ofﬂine

search. An important caveat is that these passwords were
chosen with very few restrictions—a stricter password se-
lection policy might produce distributions with signiﬁcantly
higher resistance to guessing.

Still,

these numbers represents a minimal benchmark
which any serious password replacement scheme should
aim to decisively clear. The enormous gap between a real
password distribution and the theoretical space of passwords
shows why research proposals involving human-chosen se-
crets should estimate security using metrics like ˜µα and ˜Gα
to model partial guessing attacks. Where possible, compar-
ison to past empirical estimates of guessing attacks should
be provided, as we have done with Figures 1 and 6.

The most troubling ﬁnding of our study is how little
password distributions seem to vary, with all populations
of users we were able to isolate producing similar skewed
distributions with effective security varying by no more than
a few bits. Factors increasing security motivation like regis-
tering a payment card only seem to nudge users away from
the weakest passwords, and a limited natural experiment
on actively encouraging stronger passwords seems to have
made little difference. Passwords have been argued to be
“secure enough” for the web with users rationally choosing
weak passwords for accounts of little importance [50], but
these results may undermine this explanation as user choice
does not vary greatly with changing security concerns as
would be expected if weak passwords arose primarily due
to user apathy. This may indicate an underlying problem
with passwords that users aren’t willing or able to manage
how difﬁcult their passwords are to guess.

ACKNOWLEDGMENTS

This research would not have been possible without the
gracious cooperation and support of many people at Yahoo!,
in particular Henry Watts, my mentor, Elizabeth Zwicky
who provided extensive help collecting and analyzing data,
as well as Ram Marti, Clarence Chung, and Christopher
Harris who helped set up data collection experiments. I
would also like to thank my supervisor Ross Anderson, the
paper’s shepherd Arvind Narayanan, as well as Paul van
Oorschot, Richard Clayton, Andrew Lewis, Cormac Herley,
Saar Drimer, Markus Kuhn and Bruce Christianson for
helpful comments and discussions about password statistics.
My research is funded by the Gates Cambridge Trust.

REFERENCES

[1] M. V. Wilkes, Time-sharing computer systems. New York:

Elsevier, 1968.

[4] D. Klein, “Foiling the Cracker: A Survey of, and Improve-
the 2nd

ments to, Password Security,” in Proceedings of
USENIX Security Workshop, 1990, pp. 5–14.

[5] E. Spafford, “Observations on Reusable Password Choices,”
in Proceedings of the 3rd USENIX Security Workshop, 1992.

[6] B. Schneier, “Real-World Passwords,” December 2006.
[Online]. Available: www.schneier.com/blog/archives/2006/
12/realworld passw.html

[7] M. Dell’Amico, P. Michiardi, and Y. Roudier, “Password
Strength: An Empirical Analysis,” in INFOCOM’10: Pro-
ceedings of the 29th Conference on Information Communi-
cations.

IEEE, 2010, pp. 983–991.

[8] M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing
metrics for password creation policies by attacking large sets
of revealed passwords,” in CCS ’10: Proceedings of the 17th
ACM Conference on Computer and Communications Security.
ACM, 2010, pp. 162–175.

[9] D. Seeley, “Password Cracking: A Game of Wits,” Commun.

ACM, vol. 32, pp. 700–703, 1989.

[10] “John the Ripper,” http://www.openwall.com/john/.

[11] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek, “Pass-
word Cracking Using Probabilistic Context-Free Grammars,”
the 30th IEEE Symposium on
in SP ’09: Proceedings of
Security and Privacy.

IEEE, 2009, pp. 391–405.

[12] T. Wu, “A Real-World Analysis of Kerberos Password Se-
curity,” in NDSS ’99: Proceedings of the 1999 Network and
Distributed System Security Symposium, 1999.

[13] C. Kuo, S. Romanosky, and L. F. Cranor, “Human Selec-
tion of Mnemonic Phrase-based Passwords,” in SOUPS ’06:
Proceedings of the 2nd Symposium on Usable Privacy and
Security. ACM, 2006, pp. 67–78.

[14] J. A. Cazier and B. D. Medlin, “Password Security: An Em-
pirical Investigation into E-Commerce Passwords and Their
Crack Times.” Information Systems Security, vol. 15, no. 6,
pp. 45–55, 2006.

[15] B. L. Riddle, M. S. Miron, and J. A. Semo, “Passwords in
use in a university timesharing environment,” Computers and
Security, vol. 8, no. 7, pp. 569–578, 1989.

[16] A. Narayanan and V. Shmatikov, “Fast dictionary attacks
on passwords using time-space tradeoff,” in CCS ’05: Pro-
the 12th ACM Conference on Computer and
ceedings of
Communications Security. ACM, 2005, pp. 364–372.

[17] C. Castelluccia, M. D¨urmuth, and D. Perito, “Adaptive
Password-Strength Meters from Markov Models,” NDSS ’12:
Proceedings of the Network and Distributed System Security
Symposium, 2012.

[2] J. H. Saltzer, “Protection and the Control of Information
Sharing in Multics,” Commun. ACM, vol. 17, pp. 388–402,
1974.

[18] M. Zviran and W. J. Haga, “Password security: an empirical
study,” Journal of Management Information Systems, vol. 15,
no. 4, pp. 161–185, 1999.

[3] R. Morris and K. Thompson, “Password Security: A Case
History,” Commun. ACM, vol. 22, no. 11, pp. 594–597, 1979.

[19] M. M. Devillers, “Analyzing Password Strength,” Radboud

University Nijmegen, Tech. Rep., 2010.

551

[20] W. E. Burr, D. F. Dodson, and W. T. Polk, “Electronic
Authentication Guideline,” NIST Special Publication 800-63,
2006.

[21] D. Florˆencio and C. Herley, “A large-scale study of web
the 16th
password habits,” in WWW ’07: Proceedings of
International Conference on the World Wide Web. ACM,
2007, pp. 657–666.

[22] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L.
Mazurek, L. Bauer, N. Christin, and L. F. Cranor, “Encoun-
tering Stronger Password Requirements: User Attitudes and
Behaviors,” in SOUPS ’10: Proceedings of the 6th Symposium
on Usable Privacy and Security. ACM, 2010.

[23] P. G. Kelley, S. Komanduri, M. L. Mazurek, R. Shay, T. Vidas,
L. Bauer, N. Christin, L. F. Cranor, and J. Lopez, “Guess
again (and again and again): Measuring password strength by
simulating password-cracking algorithms,” Carnegie Mellon
University, Tech. Rep. CMU-CyLab-11-008, 2011.

[24] J. Yan, A. Blackwell, R. Anderson, and A. Grant, “Password
Memorability and Security: Empirical Results,” IEEE Secu-
rity and Privacy Magazine, vol. 2, no. 5, pp. 25–34, 2004.

[25] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szyd-
lowski, R. Kemmerer, C. Kruegel, and G. Vigna, “Your botnet
is my botnet: Analysis of a botnet takeover,” in CCS ’09:
Proceedings of the 16th ACM Conference on Computer and
Communications Security. ACM, 2009, pp. 635–647.

[26] C. E. Shannon, “A Mathematical Theory of Communication,”
in Bell System Technical Journal, vol. 7, 1948, pp. 379–423.

[27] C. Cachin, “Entropy measures and unconditional security in

cryptography,” Ph.D. dissertation, ETH Z¨urich, 1997.

[28] J. O. Pliam, “On the Incomparability of Entropy and
Marginal Guesswork in Brute-Force Attacks,” in Progress in
Cryptology-INDOCRYPT 2000, 2000.

[29] S. Boztas, “Entropies, Guessing, and Cryptography,” Depart-
ment of Mathematics, Royal Melbourne Institute of Technol-
ogy, Tech. Rep. 6, 1999.

[30] J. L. Massey, “Guessing and Entropy,” in Proceedings of the
1994 IEEE International Symposium on Information Theory,
1994, p. 204.

[31] A. R´enyi, “On measures of information and entropy,” Pro-
ceedings of the 4th Berkeley Symposium on Mathematics,
Statistics and Probability, pp. 547–561, 1961.

[32] R. V. Hartley, “Transmission of Information,” Bell System

Technical Journal, vol. 7, no. 3, pp. 535–563, 1928.

[33] J. Bonneau, S. Preibusch, and R. Anderson, “A birthday
present every eleven wallets? The security of customer-chosen
banking PINs,” FC ’12: The 16th International Conference on
Financial Cryptography and Data Security, 2012.

[34] J. Bonneau, M. Just, and G. Matthews, “What’s in a name?
Evaluating statistical attacks against personal knowledge
questions,” FC ’10: The 14th International Conference on
Financial Cryptography and Data Security, 2010.

[35] S. Brostoff and A. Sasse, ““Ten strikes and you’re out”: In-
creasing the number of login attempts can improve password
usability,” in Proceedings of CHI 2003 Workshop on HCI and
Security Systems.

John Wiley, 2003.

[36] J. Bonneau and S. Preibusch, “The password thicket: technical
and market failures in human authentication on the web,”
WEIS ’10: Proceedings of the 9th Workshop on the Economics
of Information Security, 2010.

[37] M. Alsaleh, M. Mannan, and P. van Oorschot, “Revisiting
Defenses Against Large-Scale Online Password Guessing
Attacks,” IEEE Transactions on Dependable and Secure Com-
puting, vol. 9, no. 1, pp. 128–141, 2012.

[38] S. Egelman, J. Bonneau, S. Chiasson, D. Dittrich, and
S. Schechter, “Its Not Stealing If You Need It: On the ethics of
performing research using public data of illicit origin (panel
discussion),” WECSR ’12: The 3rd Workshop on Ethics in
Computer Security Research, 2012.

[39] B. Kaliski, RFC 2898: PKCS #5: Password-Based Cryptog-

raphy Speciﬁcation Version 2.0, IETF, 2000.

[40] D. E. Denning and P. J. Denning, “The tracker: a threat to
statistical database security,” ACM Transactions on Database
Systems, vol. 4, pp. 76–96, 1979.

[41] A. Narayanan and V. Shmatikov, “How To Break Anonymity
of the Netﬂix Prize Dataset,” eprint arXiv:cs/0610105, 2006.

[42] H. R. Baayen, Word Frequency Distributions, ser. Text,

Speech and Language Technology. Springer, 2001.

[43] W. A. Gale, “Good-Turing smoothing without tears,” Journal

of Quantitative Linguistics, vol. 2, 1995.

[44] A. Clauset, C. R. Shalizi, and M. E. J. Newman, “Power-
Law Distributions in Empirical Data,” SIAM Rev., vol. 51,
pp. 661–703, 2009.

[45] M. Font, X. Puig, and J. Ginebra, “A Bayesian analysis of
frequency count data,” Journal of Statistical Computation and
Simulation, 2011.

[46] H. Sichel, “On a distribution law for word frequencies,”

Journal of the American Statistical Association, 1975.

[47] D. Davis, F. Monrose, and M. K. Reiter, “On User Choice
in Graphical Password Schemes,” in Proceedings of the 13th
USENIX Security Symposium, 2004.

[48] S. Wiedenbeck, J. Waters, J.-C. Birget, A. Brodskiy, and
N. Memon, “PassPoints: design and longitudinal evaluation
of a graphical password system,” International Journal of
Human-Computer Studies, vol. 63, pp. 102–127, 2005.

[49] Y. Zhang, F. Monrose, and M. K. Reiter, “The security of
modern password expiration: an algorithmic framework and
empirical analysis,” in CCS ’10: Proceedings of the 17th
ACM Conference on Computer and Communications Security.
ACM, 2010, pp. 176–186.

[50] C. Herley, P. van Oorschot, and A. S. Patrick, “Passwords: If
We’re So Smart, Why Are We Still Using Them?” FC ’09:
The 13th International Conference on Financial Cryptography
and Data Security, 2009.

552

