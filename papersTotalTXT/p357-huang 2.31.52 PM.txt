Screen-Off Trafﬁc Characterization and Optimization

in 3G/4G Networks

Junxian Huang

University of Michigan

Feng Qian

University of Michigan

Z. Morley Mao

University of Michigan

Subhabrata Sen
AT&T Labs - Research

Oliver Spatscheck
AT&T Labs - Research

ABSTRACT
Today’s cellular systems operate under diverse resource constraints:
limited frequency spectrum, network processing capability, and hand-
set battery life. We consider a novel and important factor, hand-
set screen status, i.e., whether the screen is on or off, which was
ignored by previous approaches for optimizing cellular resource
utilization. Based on analyzing real smartphone trafﬁc collected
from 20 users over ﬁve months, we ﬁnd that off-screen trafﬁc ac-
counts for 58.5% of the total radio energy consumption although
their trafﬁc volume contribution is much smaller. Such unexpected
results are attributed to the unique cellular resource management
policy that is not well understood by developers, leading to cellular-
unfriendly mobile apps. We then make a further step by propos-
ing screen-aware optimization, by leveraging the key observation
that screen-off trafﬁc is much more delay-tolerant than its screen-
on counterpart due to a lack of user interaction. Our proposal can
better balance the key tradeoffs in cellular networks. It saves up
to 60.92% of the network energy and reduces signaling and delay
overhead by 25.33% and 30.59%, respectively.

Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: wireless communica-
tion; C.4 [Performance of Systems]: design studies, performance
attributes

Keywords
Screen-off trafﬁc, cellular network, trafﬁc optimization, fast dor-
mancy, batching, LTE, radio resource optimization

1.

INTRODUCTION

Smartphones with cellular data access have become increasingly
popular across the globe, with the wide deployment of 3G and
emerging LTE [1] networks, and a plethora of applications of all

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.

kinds. Cellular networks are typically characterized by limited ra-
dio resources and signiﬁcant device power consumption for net-
work communications. The battery capacity of smartphones cannot
be easily improved due to physical constraints in size and weight.
Hence, battery life remains a key determinant of end-user expe-
rience. Given the limited radio resources in these networks and
device battery capacity constraints, optimizing the usage of these
resources is critical for cellular carriers and application developers.
In 3G and 4G cellular networks, the user equipment (UE) must
stay in a high-power state, occupying radio resources for some re-
quired time before the allocated resource is released by the net-
work, and then the UE enters a low power state. This required time
period, also known as the Radio Resource Control (RRC) tail [6],
is necessary and important for cellular networks to prevent frequent
state promotions (resource allocation), which can cause unaccept-
ably long delays for the UE, as well as additional processing over-
heads for the radio access network [4, 12]. Today’s cellular carriers
use a static and conservative setting of the tail time in the order of
many seconds, and previous studies have revealed this tail time to
be the root cause of energy and radio resource inefﬁciencies in both
3G [15, 6, 11, 7] and 4G networks [9]. Various optimization solu-
tions have been proposed to address this problem, e.g., the use of
fast dormancy [2, 3, 16] and client-side trafﬁc shaping and schedul-
ing [14, 18, 6]. In addition, specialized energy saving techniques
for mobile applications have been proposed for speciﬁc applica-
tions [21, 10] and for speciﬁc protocols [5].

In this paper we consider a novel angle to the above problem and
explore the impact of screen status, i.e., whether the screen is on
or off, on the device’s network trafﬁc patterns. The screen status is
easy to monitor for most mobile OSes. We propose that the screen-
off trafﬁc should not be treated the same as the screen-on trafﬁc
for trafﬁc optimization purposes, and the former can be optimized
more aggressively. The main intuition is that the user (and possibly
application) behavior have signiﬁcant differences when the screen
is on v.s. off, resulting in different trafﬁc patterns and different per-
formance requirements. When the screen is off, there is a much
higher chance that the user is not actively interacting with the de-
vice and the network trafﬁc is most likely to be more delay tolerant.
Hence we can be more aggressive in optimizing this trafﬁc using
techniques such as batching and fast dormancy. In contrast, when
the screen is on, it is harder to predict the delay sensitivity of the
network trafﬁc and aggressive optimizations may harm the user ex-
perience. To validate this intuition, we characterize the screen-off
trafﬁc for a real-world user data set and evaluate the beneﬁts of us-

357ing “screen-aware” optimization for balancing UE energy savings
and the resulting overheads in radio resource usage and response
delay.

The proposed screen-aware optimization focuses on the overall
device trafﬁc, and is complementary to other efﬁciency improve-
ment efforts, e.g., better application design. While it is important
for individual mobile applications to be better designed, the power
state on a device is a function of the trafﬁc pattern across all the
running applications. Another advantage is that the approach works
across both optimized and unoptimized (e.g., legacy) applications.

The main contributions of this study are as follows:
• We perform the ﬁrst characterization of screen-off trafﬁc us-
ing 20 smartphone users’ trafﬁc over a 5 month interval.
We compare the differences between screen-off and -on traf-
ﬁc patterns, both overall and for different individual applica-
tions.

• We ﬁnd that although the number of packets and total pay-
load for screen-off trafﬁc are smaller than that of screen-on
trafﬁc, the former accounts for a disproportionate majority of
the total network energy consumed by a device - 58.55% for
all users, and up to 73.53% for some user.

• Evaluating various optimization techniques using an LTE RRC
state machine energy model, we ﬁnd that fast dormancy, for
the same parameter settings, generates more energy savings
and less signaling/delay overhead for screen-off trafﬁc, com-
pared with that for screen-on trafﬁc. This can be attributed
to the different trafﬁc patterns for the two trafﬁc classes.
In total, the screen-aware optimization achieves 60.92% en-
ergy savings, 25.33% reduction in signaling overhead, and
30.59% reduction in channel scheduling delays, compared
with the default smartphone settings.

2. METHODOLOGY

We next describe the data set used in this study, the burst analysis
methodology, as well as the network and power simulation method-
ology.
2.1 UMICH data set

The UMICH data set [9] totals 118 GB and consists of ﬁve-
month (05/12/2011 ∼ 10/12/2011) data (both cellular and WiFi)
from 20 volunteers who used smartphones running Android 2.2.
There are three types of data: (i) packet traces in tcpdump for-
mat including both headers and payload, (ii) the process name re-
sponsible for sending or receiving each packet, using the method
described in [17] by correlating the socket, inode, and process ID
in Android in realtime, and (iii) screen on/off status data with a
sampling rate of 1Hz. We strictly follow an anonymous analysis
procedure to protect the users’ privacy.

In order to associate individual packets with their screen status,
we deﬁne a time window [t1, t2] to be a screen-on (or screen-off,
respectively) window if “all” the screen samples in this window
have screen-on (or screen-off) status. Then we classify a packet as
either screen-on or off if its timestamp falls respectively into any
screen-on or screen-off window, and unknown otherwise. One rea-
son for the occurrence of the unknown category is data collection
errors.

2.2 Burst Analysis Methodology

In order to understand the screen-off trafﬁc pattern and its impact
on radio resource and device energy, we use the following trafﬁc
model for burst analysis. Intuitively, a burst is a continuous data
transfer with preceding and succeeding idle times. For each user,
the trafﬁc trace is a sequence of network packets, Pi(1 ≤ i ≤ n).
Notice that Pi could be either downlink or uplink. If the times-
tamp of Pi is deﬁned to be ti, we have ti ≤ tj for any i < j.
Using a burst threshold BT, the packets are divided into bursts,
i.e., {Pp, Pp+1,··· , Pq} belongs to a burst B, if and only if: i)
tk+1 − tk ≤ BT for any k ∈ {p,··· , q − 1}, ii) tq+1 − tq > BT
and iii) tp − tp−1 > BT. We deﬁne the inter-burst time IBT for
burst B to be the time gap following this burst, i.e., tq+1 − tq. In
this paper, we empirically choose to use BT = 2 seconds, which is
validated to be larger than most packet gaps for 3G/4G networks
within a continuous data transfer, such as downloading a web ob-
ject.
2.3 LTE Network and Power Simulation

Methodology

For evaluating optimization performance, we rely on network
and power simulations. In this paper, we focus on the emerging
LTE cellular technology to understand the energy and radio re-
source overhead of a particular packet trace. However, since there
are important similarities in the network and power models for the
LTE and 3G UMTS networks [8, 13, 19], e.g., distinct energy states
with very different power consumptions, long tail times etc., the
overall conclusions apply to 3G as well.

Speciﬁcally, we use the LTE 4G network and power simulation
model, as well as three important performance metrics E, S and D,
detailed in our earlier work [9]. E is the total UE network energy -
the energy consumed by the device’s cellular network interface. A
previous study [20] indicates that this network energy typically ac-
counts for a third of the energy drain on the phone. Given that E is
larger when the allocated radio resource is occupied by the UE for a
longer duration, reducing E is aligned with reducing the total radio
resource occupation time. S is deﬁned to be the signaling overhead,
i.e., the number of RRC promotions from RRC_IDLE (the idle state
for LTE) to RRC_CONNECTED (the high-power state for LTE) trig-
gered by the packets in a speciﬁc trace. Such state transitions cause
signiﬁcant signaling loads on the RAN and reducing this overhead
is therefore important. D is the user-perceived channel schedul-
ing delay, including promotion delay, caused by state promotions
from RRC_IDLE to RRC_CONNECTED, and paging delay caused by
UE’s sleeping before checking the data channel (a mechanism in
the cellular network to save energy). Reducing D is desirable as it
improves user experience.
2.4 Trafﬁc Optimization Methodology

In this paper, we mainly focus on two trafﬁc optimization tech-

niques:

(i) Fast dormancy (FD) [2, 3] is a mechanism in 3G networks for
reducing the amount of tail time incurred by a device by quickly
demoting it to a low energy RRC state without waiting for the tail
timer to expire. In our simulations, we explore fast dormancy in an
LTE setting, motivated by the fact that LTE, like 3G, also suffers
from a serious tail problem [9]. Our fast dormancy-based optimiza-
tion works as follows: when the UE has not observed any network
activity for some idle time Ti, it sends a special RRC message to

358# of packets (million)

%

Total

Screen on
Screen off
Unknown

131.49
72.50
47.14
11.85

100%
55.13%
35.84%
9.02%

Table 1: Packet statistics of the UMICH data set.

the network to make the allocated radio resource be released ear-
lier, instead of occupying it for the whole RRC tail. After the ra-
dio resource is released, the UE switches to the low power idle
state (RRC_IDLE for LTE networks), saving energy. The setting of
Ti is important for balancing the tradeoffs among UE energy sav-
ing (∆E), signaling overhead (∆S) and channel scheduling delay
(∆D), i.e., a smaller Ti would results in a larger ∆E at the cost of
larger ∆S and ∆D, and vice versa.

(ii) Batching is a widely used trafﬁc shaping technique, which
has been discussed in previous studies [6, 14]. In this study, batch-
ing uses two parameters, source window size α (seconds) and tar-
get window size β (seconds), and α > β. For each α seconds long
time window [t, t + α], packets within [t, t + α − β] are delayed
and batched with those inside [t + α− β, t + α]. Notice that if α/β
is too large, the limited bandwidth of the cellular network could
become the bottleneck, making the batching impossible. So in this
study, we make sure that our choice of α and β results in acceptable
bandwidth usage for LTE networks.

3. CHARACTERISTICS OF SCREEN-OFF

TRAFFIC

In this section, we present packet characteristics and burst anal-
ysis of screen-off trafﬁc in the UMICH data set. Then we compare
screen-on and screen-off trafﬁc and scrutinize the top applications
generating screen-off trafﬁc.
3.1 Packet Characteristics of Screen-off

Trafﬁc

Using the methodology described in §2.1, we classify all packets
to be screen-on, screen-off or unknown. Table 1 lists the number
of packets in different categories. Among the total 131.49 mil-
lion packets, 55.12% of them are screen-on packets and 35.85% are
screen-off packets, with 9.02% unknown. The possible reasons for
unknown packets are multifold, including that voluntary users may
have accidentally killed the data collector. For the unknown cate-
gory, we conservatively choose not optimize it for either screen-on
or screen-off trafﬁc optimization.

The top section of Table 2 lists the packet characteristics of both
screen-on and screen-off trafﬁc. Packet payload size refers to the
size in bytes of an IP packet excluding the TCP/UDP and IP head-
ers, and payload for a given process is the sum of the packet pay-
load sizes of all packets corresponding to that process. We no-
tice that screen-off trafﬁc has far less packets (35.84% of total)
than screen-on trafﬁc (55.13% of total), much smaller total pay-
load (27.26% for screen-off and 64.31% for screen-on trafﬁc), and
smaller average downlink packet payload size.

To understand individual process behavior within screen-off traf-
ﬁc, we scrutinize the top processes sorted by the number of screen-
off packets, in the bottom section of Table 2. In the second column,
titled “Off payload”, we observe that some processes have most
of their payload transferred during screen-off sessions, e.g., Genie

Widget, Epicurious Recipe, etc. Especially for Yahoo! Sportacular,
80.45% of all its payload is transferred when the screen is off. This
is possibly due to the background behaviors of these processes, in-
volving either periodically pulling updates from servers or trafﬁc
triggered by server-initiated push notiﬁcations. In terms of the % of
downlink payload, compared to other processes, Skypekit, Gmail,
Sportacular and Facebook have smaller proportions of their respec-
tive total downlink payloads associated with the screen-off states.
These processes also have a smaller average downlink packet size
(<500B). In contrast, a process like android.process.media
has an average size of 1388B, indicating that most packets have a
size of MTU (maximum transmission unit, ∼1500B). This shows
that for screen-off trafﬁc, application behavioral diversity still ex-
ists similar to that of screen-on trafﬁc.

A group of processes share quite similar behavior patterns, in-

cluding Google Music, /system/bin/mediaserver and
android.process.media, which have larger payload (>2GB),
and >99% of the payload is downlink. Their average downlink
packet sizes are close to the MTU and average uplink packet sizes
are close to 0. Also, their ratio of downlink packets is close to
2/3. This is because TCP’s delayed ACK would generate one up-
link ACK packet for every two downlink data packets, resulting
in a ratio of 2/3 of downlink packets. These observations suggest
that Google Music is downloading large amount of data, as it can
run in the background allowing users to listen to the music with
the screen off. Similarly, although /system/bin/mediaserver
and android.process.media are not actual applications, they
are used by other applications, such as Pandora, to download con-
tents for users while the screen is off. However, this group of pro-
cesses does not necessarily have higher energy consumption com-
pared with the remaining processes, and we explore this in more
detail in latter sections.
3.2 Burst Analysis of Screen-off Trafﬁc

Following the methodology in §2.2, Table 3 lists the results of
the burst analysis for screen-off trafﬁc, with that of screen-on trafﬁc
listed for comparison purposes.

We observe that screen-off trafﬁc contains much more bursts
than screen-on trafﬁc, although the total number of packets for
screen-off trafﬁc is smaller. For screen-off trafﬁc, bursts are smaller
in terms of the number of downlink/uplink packets and payload.
Especially, for average downlink payload per burst, screen-on traf-
ﬁc is 7 times that for screen-off trafﬁc. In addition, the average
burst length and the IBT following bursts for screen-off trafﬁc are
both shorter than those of screen-on trafﬁc. The above observations
indicate that screen-off bursts are smaller in size and duration and
appear more often — such behavior is likely to cause longer chan-
nel occupation time in the high energy RRC state and therefore
incur signiﬁcant battery usage.

By studying the screen-off burst behavior of individual processes,
we classify them into two separate groups. The ﬁrst group, which
we call Gathered group, includes Genie Widget, Google Music,
/system/bin/mediaserver and android.process.media.
These processes have a small number of larger bursts in terms of
the number of uplink/downlink packets per burst and the average
downlink payload. Notice that the uplink payload for these bursts
is not necessarily large, since a small uplink payload of HTTP re-
quest can result in a large ﬁle download. The Gathered group also
has longer bursts and longer trailing IBT in average, indicating a
less frequent appearance.

359Trafﬁc type

Screen-on
Screen-off

Process name

Genie Widget
Google Music

Epicurious Recipe

/system/bin/mediaserver
android.process.media

Skypekitg
Facebook

Yahoo! Sportacular

Gmail

Payload
(GB) / %a

51.47 / 64.31%
21.82 / 27.26%

Off payload
(GB) / %c

1.76 / 72.21%
3.13 / 57.14%
1.65 / 70.05%
2.39 / 10.09%
2.35 / 28.42%
0.04 / 25.54%
0.46 / 32.96%
0.23 / 80.45%
0.39 / 46.00%

% of downlink

payload
96.31%
93.52%

% of downlink
off payloadd

97.01%
99.91%
99.22%
99.77%
99.98%
48.44%
86.13%
83.53%
63.65%

% of downlink

packets
60.71%
52.60%

1126
823

off packetsf

payload size (B)

payload size (B)

Avg uplink packet
payload size (B)

Avg downlink packet

payload size (B)

# of packets
(×106) / %b
72.50 / 55.13%
47.14 / 35.84%
# of off packets % of downlink Avg downlink off packet Avg uplink off packet
(×106) / %e
3.80 / 73.16%
3.30 / 57.02%
2.69 / 69.29%
2.66 / 11.05%
2.37 / 29.06%
2.07 / 46.73%
1.95 / 40.67%
1.94 / 81.05%
1.33 / 54.46%

49.97%
68.60%
50.46%
66.95%
71.55%
48.32%
42.55%
41.98%
47.70%

901
1384
1212
1342
1388
22
487
238
400

67
63

28
3
10
6
1
22
58
34
208

a Payload refers to the total screen-on/off payload, and % is relative to the total payload of all trafﬁc.
b % relative to the total number of packets of all trafﬁc.
c Off payload refers to the screen-off payload of the speciﬁc application, and % is relative to the total payload of this application.
d % of downlink screen-off payload of the speciﬁc application relative to the total screen-off payload of that application.
f % of downlink screen-off packet count of the speciﬁc application relative to the total screen-off packet count of that application.
g Full process name: /data/data/com.skype.raider/ﬁles/skypekit, which is not the actual Skype application (com.skype.raider).

Table 2: Packet characteristics of screen-on/off trafﬁc and top processes for screen-off trafﬁc.

Trafﬁc type

Screen-on
Screen-off

Process name

Genie Widget
Google Music

Epicurious Recipe

/system/bin/mediaserver
android.process.media

Skypekit
Facebook

Yahoo! Sportacular

Gmail

# of bursts

650,941
1,910,939

# of bursts

5,952
5,297
63,236
8,163
1,442
42,744
203,535
133,785
105,478

Avga # of

uplink packets

Avga # of

downlink packets

Avga uplink Avga downlink
payload (B)
payload (KB)

Avga burst
length (sec)

Avga IBT

following (sec)

43.75
11.69

67.62
12.98

2910.44
739.78

76.17
10.68

2.92
1.37

335.13
113.60

Avga # of

uplink packets

Avga # of

downlink packets

Avga uplink Avga downlink
payload (B)
payload (KB)

Avga burst
length (sec)

Avga IBT

following (sec)

319.73
195.69
21.07
106.44
461.88
25.08
5.49
8.39
6.60

319.36
427.56
21.46
215.53
1,156.93

23.46
4.07
6.07
6.02

8852.48
505.54
202.22
669.82
246.99
555.38
318.83
285.44
1375.30

287.88
591.92
26.01
289.35
1,605.84

0.52
1.98
1.45
2.41

17.87
4.53
0.67
5.01
19.83
1.93
0.86
1.52
1.17

3,892.87
5,111.50
159.34

14,451.70
123,565.00

832.79
547.23
261.78
2,002.60

a Each “avg” in this table stands for the average value per burst.

Table 3: Burst analysis of screen-on/off trafﬁc and top processes for screen-off trafﬁc.

The rest of the processes fall into the second group, called the
Scattered group, which generate signiﬁcantly more bursts and on
average, these bursts contain less packets and smaller downlink
payload. In addition, these bursts are shorter in duration and appear
more frequently. A representative process from this group is Face-
book, which includes over 200,000 bursts, and the major reason for
this behavior of Facebook is the periodic keep-alive transfers [14].
Based on this comparison, we believe that it is both easy and im-
portant for mobile application developers to optimize their applica-
tion behaviors during the screen-off stage, e.g., for delay-insensitive
trafﬁc, they can batch the data into larger bursts, or even eliminate
the screen-off data transfers if they are not necessary.

4. RADIO RESOURCE, ENERGY IMPACT

AND OPTIMIZATION

Using the network and power model simulation (§2.3), we now
evaluate the radio resource and energy impact of screen-off trafﬁc
and evaluate some optimization approaches.

4.1 Radio Resource and Energy Impact of

Screen-off Trafﬁc

Table 4 presents highlights of the simulation results using the
LTE network and power model deﬁned in our previous work [9].
∆E, ∆S and ∆D represents the change of network energy, sig-
naling overhead and channel scheduling delay after removing the
trafﬁc of an application or type, and a negative value indicates a
reduction. The results indicate that, compared to screen-on trafﬁc,
screen-off trafﬁc clearly has larger impact on the network energy
E, as well as S and D. For example, removing all screen-off trafﬁc
reduces the total network energy by 58.55%, and for one user, this
reduction is as high as 73.53%.

Comparing the Gathered group and Scattered group discussed
in §3.2, the former has very small impact on E, S and D, while
the later has a substantial impact. This is because, for the Scattered
group, a large number of small bursts could result in a large number
of RRC tails if the IBTs among these bursts are larger than the tail
time and a long channel occupation time otherwise. For example,

360Trafﬁc type
Screen-on
Screen-off

Process name
Genie Widget
Google Music

Epicurious Recipe

/system/bin/mediaserver
android.process.media

Skypekit
Facebook

Yahoo! Sportacular

Gmail

38.11%
73.53%

3.78%
12.39%

∆E %a Min |∆E| %c Max |∆E| %c ∆S %a ∆D %a
-22.18%
-14.87% -17.57%
-58.55%
-58.03% -54.46%
∆E %b Min |∆E| %c Max |∆E| %c ∆S %b ∆D %b
-0.81%
-0.34%
-0.08%
-0.12%
-0.94%
-1.63%
-0.13%
-0.16%
-0.05%
-0.08%
-0.51%
-0.96%
-4.15%
-5.25%
-1.44%
-3.01%
-1.18%
-1.47%

2.46%
1.68%
26.06%
1.08%
0.52%
7.32%
34.68%
20.04%
4.59%

0.11%
-0.02%
-1.78%
0.02%
0.02%
-0.24%
-5.82%
-1.88%
-0.69%

0%
0%
0%
0%

0%
0%
0%

0.01%

0.04%

a ∆E, ∆S and ∆D are calculated by removing all screen-on/off trafﬁc from the original traces
b ∆E, ∆S and ∆D are calculated by removing the screen-off trafﬁc of one process from the original traces
c Min and max refer to the minimum and maximum energy saving |∆E| across all users, respectively.

Table 4: Radio resource and energy impact of screen-on/off trafﬁc and top processes for screen-off trafﬁc.

compared with screen-on trafﬁc, and these gaps are larger when Ti
is smaller, i.e., applying fast dormancy more aggressively. So in or-
der to achieve the same energy saving for screen-off and screen-on
trafﬁc, the Ti should be set to a much smaller value for screen-on
trafﬁc, incurring much larger ∆S and ∆D. However, the respon-
siveness requirement when the screen is on is actually higher, hence
a higher ∆D for screen-on trafﬁc is not acceptable. A better strat-
egy would be being more aggressive (a smaller Ti) for screen-off
trafﬁc, which produces signiﬁcant energy savings, and more con-
servative (a relatively larger Ti) for screen-on trafﬁc, which limits
the negative impact on user experience, though with less energy
savings. For example, when Ti = 8s, there is 42% energy sav-
ings with 52% ∆S and 40% ∆D for screen-off trafﬁc, and when
Ti = 4s, for screen-on trafﬁc, though the energy saving is small
(24%), ∆S (43%) and ∆D (30%) are also limited. With these two
fast dormancy settings, for the whole trafﬁc, we can achieve 34%
energy saving, with 47.04% ∆S and 35.21% ∆D. This is a better
tradeoff than one single Ti setting for both screen-on and screen-off
trafﬁc.

Besides fast dormancy, batching [14, 6] is also proposed for op-
timizing mobile trafﬁc.
In Table 5, we compare fast dormancy
and batching under different settings for all applications together,
and also individually for two applications, Facebook representing
the Scattered group and Google Music representing the Gathered
group. For fast dormancy, with reduced E, there is increased S, D,
while for batching, all E, S, D are decreased. This is because for
fast dormancy, since UE demotes to RRC_IDLE earlier, there would
be more promotions resulting in increased S, D, while for batch-
ing, since the trafﬁc pattern is altered, scattered packets are gath-
ered into groups and hence there are less promotions. Notice that
the metric D here does not include the delay of packets incurred
by batching. In this work, we only focus on batching for screen-
off trafﬁc, since any delay for screen-on trafﬁc is likely to be more
perceptible to users.

In Table 5, when applying fast dormancy to all applications, we
set a different Ti for screen-on/off trafﬁc, i.e., Ti,on and Ti,of f .
For simplicity, let <a, b> stands for the case when Ti,on = a sec-
onds and Ti,of f = b seconds. Based on Figure 1, we empirically
select two values for Ti,on and Ti,of f , 4s as an aggressive setting
and 8s as a conservative setting. Compared with <8, 8>, reduc-
ing Ti,on to 4s, i.e., <4, 8>, only saves 4.21% energy additionally.

Figure 1: Effectiveness comparison of fast dormancy.

although the Facebook process does not generate the most screen-
off trafﬁc, it has the largest energy impact among all processes, i.e.,
5.25% of the total network energy can be saved by only removing
Facebook’s screen-off trafﬁc, and for some users this number could
be as high as 34.68%.
4.2 Trafﬁc Optimization

Based on the above analysis, we ﬁnd that screen-off trafﬁc has
a clearly different pattern compared to screen-on trafﬁc, and ac-
counts for a huge proportion of the UE network energy E, sig-
naling overhead S and channel scheduling delay D. At the same
time, because screen-off trafﬁc is likely to be more delay-tolerant
(see discussions in §1), it is more amenable to more aggressive op-
timization efforts. Intuitively a trafﬁc optimization approach that
is appropriately tuned to the two different trafﬁc categories would
yield signiﬁcant efﬁciencies. To verify this intuition, we study two
common optimization techniques, fast dormancy and batching.

We ﬁrst compare applying fast dormancy to screen-on and screen-
off trafﬁc with a separate Ti settings. The default setting of the
RRC_CONNECTED inactivity timer is 11.58 seconds for a major LTE
ISP [9]. In Figure 1, we vary the setting of Ti from 10 seconds to 2
seconds with a step-size of 2 seconds (from left to right in Figure 1)
and calculate the ∆(E, S, D) relative to when fast dormancy is not
applied. We observe that for the same Ti setting, there is a higher
energy saving ∆E and a lower ∆S and ∆D for screen-off trafﬁc,

 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 0 0.1 0.2 0.3 0.4 0.5 0.6∆-∆E∆S: screen-on∆D: screen-on∆S: screen-off∆D: screen-off361Process name

Optimization

Settings

b = 8s, Ti,of f

b = 8s

Fast dormancy

Batching

Fast dormancy +

Batching

Fast dormancy +

Batching

Fast dormancy +

Batching

All applications

Facebookc

Google Musicc

Ti,on

Ti,on = 4s, Ti,of f = 8s
Ti,on = 8s, Ti,of f = 4s
Ti,on = 4s, Ti,of f = 4s

Only for screen-off, α = 50s, β = 10s
Only for screen-off, α = 50s, β = 5s
Only for screen-off, α = 100s, β = 10s
Only for screen-off, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s
Ti,on = 8s, Ti,of f = 4s, batching only
for screen-off trafﬁc, α = 100s, β = 5s

∆Da
∆Ea
∆Sa
13.14%
-16.39% 16.95%
21.26%
-20.60% 28.29%
35.21%
-34.44% 47.04%
-38.66% 58.38%
43.31%
-22.33% -6.24% -11.27%
-27.15% -6.24% -10.67%
-36.72% -30.00% -33.43%
-40.79% -30.00% -34.25%
-60.92% -25.33% -30.59%

-60.19% -36.27% -34.93%

-57.30%

7.12%

-21.11%

a ∆E, S, D are relative to the E, S, D of all trafﬁc for the speciﬁc application.
b Ti,on is the inactivity threshold of fast dormancy for screen-on trafﬁc, and Ti,of f is for screen-off trafﬁc.
c For these two application rows, we consider the trafﬁc of only one speciﬁc application, excluding that from other applications.

Table 5: Trafﬁc optimization with fast dormancy and batching.

And <8, 4> has 11.34% reduction in S and 8.10% reduction in
D, with only 4.22% less energy saving, compared with <4, 4>.
This veriﬁes that a different setting for Ti,on and Ti,of f balances
the tradeoff of saving energy and reducing overhead, and we select
<8, 4> as a reasonable setting. Notice that there are other possible
parameter settings representing different aggressiveness with dif-
ferent energy saving and overhead, which may be more appropriate
for different settings.

In Table 5, batching applied to the screen-off trafﬁc is able to
reduce all E, S, and D. Notice that we do not apply batching for
screen-on trafﬁc since it may affect the user experience, e.g., when
the user is waiting for a response at real time. We observe that
most of the screen-off trafﬁc (in terms of the energy impact) is less
delay-sensitive, e.g., push notiﬁcation, since user interaction is not
involved. However, there are also some exceptions for screen-off
applications which requires real-time data transfer, e.g., when the
user is making a VoIP call with the screen off. Ideally, trafﬁc from
these delay-sensitive applications should not be batched even dur-
ing screen-off stage. In this study, we do not attempt to completely
solve this problem, instead, we show an upper bound of the beneﬁt
by batching all screen-off trafﬁc. In reality, we need to prioritize
delay-sensitive trafﬁc during screen-off stage, and we leave it to fu-
ture study. In §2.4, we discuss that the choice of α and β values is
limited by the available bandwidth for 3G/4G networks. Compar-
ing among the empirically selected candidate settings in Table 5, α
= 100s and β = 5s is a better setting, which saves up to 40.79% en-
ergy, with a 30.00% reduction in S and 34.25% in D. Notice that
the α and β settings studied are just example settings that work
well in practice. The goal is to demonstrate the beneﬁt of batching
for screen-off trafﬁc and the selection of optimal settings is left to
future work.

Then we evaluate applying fast dormancy and batching jointly
for all applications and for two sample applications, with the set-
tings speciﬁed in Table 5. For all applications, there is a total net-
work energy saving of 60.19%, with 25.33% reduction in S and
30.59% reduction in D. Facebook has similar energy saving, and
due to its more “scattered” trafﬁc pattern for screen-off trafﬁc, the
batching optimization results in even more reduction for S and D.
However, for Google Music, whose trafﬁc is already “gathered”
as large bursts, the impact of fast dormancy is more obvious than

batching, hence the reduction for D is smaller and there is even an
increase in S, unlike the other two scenarios.

5. DISCUSSIONS AND CONCLUSION

In this study, we took a ﬁrst step towards understanding the im-
pact of screen status on cellular application trafﬁc behavior. Our
evaluations in the context of LTE cellular networks, show that al-
though the number of packets and total payload for screen-off traf-
ﬁc are much smaller than that for screen-on trafﬁc, the former ac-
counts for a disproportionate majority (58.55%) of the total net-
work energy consumed by a device. Exploration of resource opti-
mization techniques like fast dormancy and batching indicate that
the strategy of optimizing the screen-off trafﬁc more aggressively
than screen-on trafﬁc can realize substantial resource savings, with-
out adversely impacting user experience.

We are pursuing this research further, ﬁrst to explore screen-off
trafﬁc in greater detail and explore optimization strategies tailored
to the potentially different delay-requirements of subsets of that
trafﬁc. Second, in this paper, our optimization strategies imposed
the strict constraint that screen-on trafﬁc should not suffer any addi-
tional delays that come with trafﬁc shaping approaches. In reality,
some limited delay jitter would be tolerable depending on the ap-
plication and trafﬁc semantics - this is be an additional source of
resource optimization beyond the savings we have shown in this
paper. Finally, logistics permitting, it would be nice to extend the
study to a larger user group.

6. ACKNOWLEDGEMENT

We thank Chen-nee Chuah for her many helpful comments and
suggestions for improving the ﬁnal version of this paper. We also
thank the anonymous reviewers for their feed- back and helpful
suggestions. This research was partially supported by the National
Science Foundation under grants CNS-1111699, CNS-1059372,
CNS-0939707, and CNS-1050157.

3627. REFERENCES
[1] 3GPP LTE. http://www.3gpp.org/LTE.
[2] UE "Fast Dormancy" behavior. 3GPP discussion and

decision notes R2-075251, 2007.

[3] Conﬁguration of fast dormancy in release 8. 3GPP

discussion and decision notes RP-090960, 2009.

[4] System impact of poor proprietary fast dormancy. 3GPP

discussion and decision notes RP-090941, 2009.

[5] Y. Agarwal, R. Chandra, A. Wolman, P. Bahl, K. Chin, and
R. Gupta. Wireless wakeups revisited: energy management
for VoIP over WiFi smartphones. In MobiSys, 2007.

[6] N. Balasubramanian, A. Balasubramanian, and

A. Venkataramani. Energy Consumption in Mobile Phones:
A Measurement Study and Implications for Network
Applications. In IMC, 2009.

[7] M. Chuah, W. Luo, and X. Zhang. Impacts of Inactivity

Timer Values on UMTS System Capacity. In Wireless
Communications and Networking Conference, 2002.

[8] H. Holma and A. Toskala. HSDPA/HSUPA for UMTS: High

Speed Radio Access for Mobile Communications. John
Wiley and Sons, Inc., 2006.

[9] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and

O. Spatscheck. A Close Examination of Performance and
Power Characteristics of 4G LTE Networks. In MobiSys,
2012.

[10] S. Kang, J. Lee, H. Jang, H. Lee, Y. Lee, S. Park, T. Park,

and J. Song. Seemon: scalable and energy-efﬁcient context
monitoring framework for sensor-rich mobile environments.
In MobiSys, 2008.

[11] C.-C. Lee, J.-H. Yeh, and J.-C. Chen. Impact of inactivity

timer on energy consumption in WCDMA and CDMA2000.
In the Third Annual Wireless Telecommunication Symposium
(WTS), 2004.

[12] P. P. C. Lee, T. Bu, and T. Woo. On the Detection of

Signaling DoS Attacks on 3G Wireless Networks. 2007.

[13] J. Perez-Romero, O. Sallent, R. Agusti, and M. Diaz-Guerra.
Radio resource management strategies in UMTS. John Wiley
and Sons, Inc., 2005.

[14] F. Qian, Z. Wang, Y. Gao, J. Huang, A. Gerber, Z. M. Mao,

S. Sen, and O. Spatscheck. Periodic Transfers in Mobile
Applications: Network-wide Origin, Impact, and
Optimization. In World Wide Web, 2012.

[15] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and

O. Spatscheck. Characterizing Radio Resource Allocation
for 3G Networks. In IMC, 2010.

[16] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and

O. Spatscheck. TOP: Tail Optimization Protocol for Cellular
Radio Resource Allocation. In Proc. ICNP, 2010.

[17] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. Proﬁling Resource Usage for Mobile
Applications: a Cross-layer Approach. In MobiSys, 2011.
[18] M. Ra, J. Paek, A. Sharma, R. Govindan, M. Krieger, and

M. Neel. Energy-delay tradeoffs in smartphone applications.
In MobiSys, 2010.

[19] S. Sesia, I. Touﬁk, and M. Baker. LTE: The UMTS Long
Term Evolution From Theory to Practice. John Wiley and
Sons, Inc., 2009.

[20] A. Shye, B. Sholbrock, and M. G. Into the wild: Studying
real user activity patterns to guide power optimization for
mobile architectures. In Micro, 2009.

[21] Y. Wang, J. Lin, M. Annavaram, Q. Jacobson, J. Hong,

B. Krishnamachari, and N. Sadeh. A framework of energy
efﬁcient mobile sensing for automatic user state recognition.
In MobiSys, 2009.

363