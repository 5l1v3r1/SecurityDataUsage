Throttling Tor Bandwidth Parasites

Rob Jansen
Paul Syverson
{rob.g.jansen, paul.syverson}@nrl.navy.mil

U.S. Naval Research Laboratory

Nicholas Hopper

University of Minnesota

hopper@cs.umn.edu

Tor’s network congestion and performance problems
stem from a small percentage of users that consume a large
fraction of available network capacity. These users con-
tinuously drain relays of excess bandwidth, creating new
network bottlenecks and exacerbating the effects of exist-
ing ones. This may currently be a performance issue due
to unfair resource consumption, but it also shows that the
network is vulnerable to malicious service degradation by a
relatively low-resource adversary using similar techniques.
There are three general approaches to alleviate Tor’s per-
formance problems: optimizing scheduling strategies, in-
creasing network capacity, and reducing network load. Im-
proved path selection and circuit scheduling may shift net-
work load to better utilize the available bandwidth, but do
not increase the capacity of the network or provide any de-
fense against DoS. Organizations such as The Tor Project
may increase network capacity by joining new relays to the
network, however this approach is a short-term solution that
does not scale: the bulk users attracted to the faster network
will continue to leech the additional bandwidth.

In this work, we present the design of three new algo-
rithms that throttle clients to reduce network congestion
and increase web client performance. Unlike existing tech-
niques, our new adaptive throttling algorithms use informa-
tion local to a relay to dynamically select which connec-
tions get throttled and to adjust the rate at which those con-
nections are throttled. Adaptively tuned throttling mech-
anisms are paramount to our algorithm designs in order
to avoid the need to re-evaluate parameter choices as net-
work capacity and load changes. Our bit-splitting algo-
rithm adaptively throttles each connection at its fair share of
bandwidth, our ﬂagging algorithm adaptively throttles only
connections whose throughput exceeds the statistically fair
throughput, and our threshold algorithm adaptively throt-
tles connections above a throughput quantile at a rate repre-
sented by that quantile.

We implement our algorithms in Tor and compare sig-
niﬁcant client performance beneﬁts using network-wide de-
ployments of our algorithms under a range of light to heavy
network loads. We test various conﬁgurations of our algo-
rithms and compare our results to static throttling under a

Figure 1: Throttling improves web client performance for each
throttling algorithm over vanilla Tor, using 50 relays and a load of
950 web clients and 50 bulk clients.

varied range of network loads. We ﬁnd that the effectiveness
of the existing static throttling approach is highly dependent
on network load and conﬁguration whereas our adaptive al-
gorithms work well under various loads with no conﬁgura-
tion changes or parameter maintenence: web client perfor-
mance was improved for every parameter setting we tested.
Figure 1 shows that each of our new algorithms provides
a signiﬁcant improvement in web client performance over
vanilla Tor.

We also analyze the security of our algorithms under
adversarial attack, discussing several realistic attacks on
anonymity while comparing the information leaked by each
algorithm relative to unthrottled Tor. We ﬁnd that throttling
clients reduces information leakage and improves network
anonymity against realistic adversaries, and is an effective
defense against practical bulk trafﬁc DoS attacks while min-
imizing the false positive impact on honest users.

For a more detailed discussion of this work, please see

our technical report [1].
References
[1] Rob Jansen, Paul Syverson, and Nicholas Hopper,
Throttling Tor Bandwidth Parasites. University of Min-
nesota TR 11-019, 2011.

051015202530WebDownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillastaticsplitﬂagthresh