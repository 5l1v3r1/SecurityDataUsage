Towards a Bayesian Network Game Framework for

Evaluating DDoS Attacks and Defense

∗

Guanhua Yan

Information Sciences Group

Los Alamos National

Laboratory

Los Alamos, NM 87545

ghyan@lanl.gov

Alex Kent

Advanced Computing

Solutions Program Ofﬁce

Los Alamos National

Laboratory

Los Alamos, NM 87545

alex@lanl.gov

Carnegie Mellon University

Ritchie Lee

Silicon Valley

NASA Ames Research Park
Moffett Field, CA 94035
ritchie.lee@nasa.gov

†

David Wolpert

Information Sciences Group

Los Alamos National

Laboratory

Los Alamos, NM 87545
dwolpert@lanl.gov

ABSTRACT
With a long history of compromising Internet security, Dis-
tributed Denial-of-Service (DDoS) attacks have been inten-
sively investigated and numerous countermeasures have been
proposed to defend against them. In this work, we propose
a non-standard game-theoretic framework that facilitates
evaluation of DDoS attacks and defense. Our framework
can be used to study diverse DDoS attack scenarios where
multiple layers of protection are deployed and a number of
uncertain factors aﬀect the decision making of the players,
and it also allows us to model diﬀerent sophistication lev-
els of reasoning by both the attacker and the defender. We
conduct a variety of experiments to evaluate DDoS attack
and defense scenarios where one or more layers of defense
mechanisms are deployed, and demonstrate that our frame-
work sheds light on the interplay between decision makings
of both the attacker and the defender, as well as how they
aﬀect the outcomes of DDoS attack and defense games.

Categories and Subject Descriptors
C.2 [Computer-Communication Networks]: Security
and protection; K.6.5 [Management of Computing and
Information Systems]: Security and protection

∗Los Alamos National Laboratory Publication No. LA-UR
†David Wolpert is also aﬃliated with Santa Fe Institute,

12-20831

1399 Hyde Park Road, Santa Fe, NM 87501.

This paper is authored by an employee(s) of the United States Government
and is in the public domain.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
ACM 978-1-4503-1651-4/12/10.

Keywords
DDoS attacks and defense, game theory, Bayesian networks

1.

INTRODUCTION

Distributed Denial-of-Service (DDoS) attacks have been
plaguing the cyber space for a long time [29, 5, 26]. Accord-
ing to a VeriSign survey [25], almost two thirds of enterprise
companies were victims of DDoS attacks, and 11 percent
of them were attacked more than six times; also, there is a
high price tag to defend against DDoS attacks as the aver-
age cost was estimated at as much as 2.5 million dollars. To
ﬁght back against DDoS attacks, researchers have proposed
a number of countermeasures, many of which have been
covered in the comprehensive surveys by Mirkovic and Rei-
her [14] and Peng et al. [17]. Performance evaluation of these
methods, however, has been mostly conducted in a static en-
vironment (e.g., simulation [9, 11] or a controlled real-world
testbed [19, 15]) where behaviors of the attacker and the
defender are predeﬁned in an experiment. Although conclu-
sions drawn from these studies shed light on the strengths
and/or weaknesses of proposed defense techniques, they typ-
ically do not take into account strategic thinking of either
the attacker or the defender, and thus fail to characterize
accurately the dynamic interactions between the decisions
made by the attacker and the defender in a real-world DDoS
attack and defense incident.

In a few previous studies, evaluation of DDoS attacks and
defense has been performed in a game-theoretic context [22,
27, 31, 28, 20]. These studies typically formulated DDoS at-
tacks and defense as a static game (or a one-shot game) for
a speciﬁc DDoS defense mechanism such as pushback [12],
and studied the behaviors of the attacker and the defender
in an equilibrium state (e.g., Nash equilibrium). Although
these studies oﬀer insights into how the attacker and the de-
fender behave in a strategic manner in a DDoS attack and
defense game, they suﬀer from the following three major
shortcomings. First, these previous eﬀorts mainly focused
on the equilibrium states, particularly Nash equilibrium, in

553the strategy spaces of the attacker and the defender.
In
practice, however, both the attacker and the defender have
only bounded rationality due to limited information or re-
sources, which makes them diﬃcult, if not impossible, to
always take the best-response actions. This is particularly
true for DDoS attacks and defense because they usually take
place within a short period of time. Second, most previous
studies targeted one speciﬁc defense mechanism by the de-
fender, in which the defender’s decisions lie in how she sets
the parameters in the method, and did not consider exis-
tence of multiple layers of protection against DDoS attacks
commonly deployed in modern enterprise networks. Tradi-
tionally, game theorists use the mixed strategy approach
to integrate multiple possible actions by a player with a
probability distribution, but this method is inappropriate
for modeling defense in depth against DDoS attacks, as it
fails to model correlation among changes to the system state
by diﬀerent defense mechanisms. Third, in a real-life DDoS
attack and defense incident, the strategic thinking of both
the attacker and the defender is aﬀected by many uncertain
factors, such as how many legitimate users are using the
service, how much traﬃc is generated from each user, and
random packet dropping due to congestion at routers. Stan-
dard game theoretic methods such as extensive form games
commonly used in the previous studies often ignore or sim-
plify possible distributions behind these random events, and
thus do not provide a seamless and coherent way of quanti-
fying the eﬀects of these uncertain factors.

Due to these constraints, game theory has not yet been
widely applied in practice to evaluate DDoS attacks and
defense. Against this backdrop, in this work we develop a
game-theoretic evaluation framework, which is able to model
diﬀerent sophistication levels of strategic thinking by the at-
tacker and the defender, oﬀers great freedom in choosing
distributions characterizing legitimate traﬃc, and provides
a seamless method for reasoning among uncertain factors
in DDoS attacks and defense. Based on a semi network-
form game theoretical model proposed recently by Lee and
Wolpert [10], our evaluation framework leverages a Bayesian
graphical model for system state inference, where a set of
random variables are used to characterize system states in
DDoS attacks and defense and a directed acyclic graph to
model their conditional dependencies. For uncertain factors
such as the number of legitimate users which are decided by
the nature, the modeler can use distributions inferred from
historical data of the network. Dependencies among random
variables are modeled based on the underlying mechanisms
that govern the changes of system states. For instance, we
can model diﬀerent packet scheduling mechanisms at routers
and diﬀerent blocking methods by ﬁrewalls in this evalua-
tion framework. Due to the ﬂexibility of modeling depen-
dencies among random variables, the framework also allows
us to study multiple layers of protection against DDoS at-
tacks. Also, the level-K reasoning used in the framework
allows us to model players of diﬀerent sophistication levels.
A na¨ıve defender, for instance, may think that DDoS attacks
would never take place, and a more sophisticated defender,
however, will take into consideration how the attacker re-
sponds if she does this and how she should further respond
accordingly. Level-K thinking naturally reﬂects such type
of reasoning in practice by assuming that a player’s best re-
sponse at a certain level depends on her observations from
the previous one.

In this work, we use the proposed framework to evalu-
ate DDoS attacks and defense in a typical enterprise net-
work that deploys three layers of defense against DDoS at-
tacks, including adding extra bandwidth to the external link,
blocking suspicious traﬃc, and limiting the traﬃc rate from
each source. Assuming that the attacker uses a botnet to
launch DDoS attacks, he has the freedom to choose the num-
ber of bots in the attack and the sending rate per bot. We
also model normal traﬃc from legitimate users, and take
into consideration factors such as costs in adding more band-
width to the external link, capacity of the server, and the
detection rate and false alarm rate of the intrusion detec-
tion system. Using a variety of experiments with diverse
parameter settings, we demonstrate how diﬀerent sophisti-
cation levels of strategic thinking lead to diﬀerent outcomes
of a DDoS attack and defense game, how diﬀerent system
parameters (e.g., average number of legitimate users, band-
width price, server capacity, performance of intrusion de-
tection systems) aﬀect the decisions made by the attacker
and the defender, respectively, and how multiple layers of
defense against DDoS attacks complement each other when
they are put into eﬀect simultaneously.

The remainder of the paper is organized as follows.

In
Section 2, we brieﬂy introduce the related work. Section 3
provides the motivation behind using the semi network-form
game to analyze DDoS attacks and defense. We introduce
system variables used in this framework in Section 4, how
to model conditional dependencies among them in Section 5,
and level-K reasoning in Section 6. We show how to use this
framework to analyze scenarios with a single layer of defense
in Section 7 and those with multiple layers of defense in
Section 8. Section 9 draws concluding remarks of this work.

2. RELATED WORK

The long history of DDoS attacks has inspired numerous
defense techniques. Mirkovic and Reiher proposed a taxon-
omy of DDoS attack and defense mechanisms [14], and Peng
et al. presented a survey of network-based DoS attacks and
defense techniques [17]. Game theory has been previously
applied to gain insights into cyber security issues. Roy et
al.
surveyed game-theoretic solutions to network security
applications, largely along the line of the types of games
used (i.e., static and dynamic games) and whether the in-
formation available to the players is perfect or imperfect,
and complete or incomplete [18]. Manshaei et al. surveyed
previous works on applying game-theoretic techniques to ad-
dress security and privacy problems [13].

Previously, there were a few eﬀorts on conducting game-
theoretic analysis of DDoS attacks and defense. Zang et
al. applied a Bayesian game model to analyze the defense
against DDoS attack traﬃc with unclear signatures [31]. In
their model, the defender is uncertain about the type of the
traﬃc origin, which can be either a legitimate user or an at-
tacker, and thus infers it using Bayesian rules. In [22], Sny-
der et al. introduced a DDoS traﬃc injection game, which is
a two-person zero-sum game with imperfect knowledge. In
the model developed by Wu et al. [27], the attacker attempts
to optimize the attack eﬀect by choosing the most eﬀective
attack traﬃc sending rate or number of zombie machines
to send out attack traﬃc, while the defender optimizes the
eﬀectiveness of ﬁltering attack traﬃc at the ﬁrewall. The en-
tire game works in a continuous setting and the Nash equi-
librium strategy can be computed analytically. In [28], Xu

554probability distribution from the Bayesian network given
some observed information, a player is assumed to sample
it in order to approximate system states. To speed up the
sampling process, the semi network-form game takes advan-
tage of the d-separation property of a Bayesian network and
likelihood weighting [8]. The tricky part in sampling is, how-
ever, how to deal with decision nodes, as no predeﬁned con-
ditional probability distributions are associated with them.
The semi network form game applies the following meth-
ods. First, when a player samples from her own decision
node, she use a predeﬁned satisﬁcing function that reﬂects
her preferences in her decision making. For instance, when
a person sees a car driving towards her, she would prefer to
shun towards the left with probability 30% (choice 1) and
the right with probability 70% (choice 2). Hence, when she
samples from her decision node, she would have 30% of sam-
ples with choice 1 and 70% with choice 2, but which choice
she eventually takes depends on her evaluation of the out-
come based on her utility function. Second, when player A
samples from player B’s decision node, she uses the classical
level-K strategy [3] for reasoning. With this strategy, player
A’s decision at a certain level k depends on how player B
reasons at level k − 1. The rigorous deﬁnition of a semi
network-form game model is provided in Appendix A.

Using the semi network-form game model to evaluate DDoS
attacks and defense has a few advantages. First, it provides
a seamless way of integrating multiple defense mechanisms.
The Bayesian network in it naturally models dependencies
among these components. For example, adding extra band-
width to the external link allows more traﬃc to arrive at
the ﬁrewall, which thus has to deal with more packets when
blocking suspicious traﬃc. Such dependencies are diﬃcult
to capture by traditional game theoretic methods such as the
mixed strategy approach. Second, uncertain factors such as
how much legitimate traﬃc is destined to the server and in-
tensity of background traﬃc can be conveniently modeled as
chance nodes in the framework. Third, the level-K reasoning
strategy oﬀers a natural way for modeling the sophistication
levels in strategic reasoning by both the attacker and the
defender. A na¨ıve attacker, for example, would think there
is no defense at level 0, but a more sophisticated attacker
would take the defender’s potential defense into considera-
tion with higher k in reasoning.

In the following sections, we shall describe our framework
which applies the semi network-form game model to evaluate
DDoS attacks and defense. We will ﬁrst introduce a number
of random variables to describe system states in Section 4,
and in the ensuing section, we will explain how to use a
Bayesian network to model dependencies among these sys-
tem variables. In Section 6, we will discuss how each player
uses this Bayesian network to reason about the adversary’s
move and accordingly derive her best response action.

4. SYSTEM VARIABLES

In this section, we present the random variables that are
used to model the system state. Table 1 summarizes all the
variables introduced to describe the system state. These
variables fall into three groups. The ﬁrst group describes the
network state, such as how much traﬃc arrives at the exter-
nal link and how much traﬃc is served by the server. Since
the network state changes after the defender takes mitigation
actions, diﬀerent variables are deﬁned to reﬂect this change.
The second and third groups of variables describe possible

Figure 1: DDoS attack and defense scenario for an
enterprise network

and Lee proposed a defense system against DDoS attacks
and analyzed its performance in a game-theoretic context.
Khirwadkar et al. developed a repeated game model based
on the ﬁctitious play process for pushback-based DDoS de-
fense [7]. The key idea of their approach is that each player
estimates the mixed strategy of the opponent’s actions based
on her previous observations, and then plays the pure strat-
egy that is the best response accordingly. In [30], Yan and
Eidenbenz proposed a truthful mechanism to provide eco-
nomic incentives to ISPs to defend against DDoS attacks in
a noncooperative environment.

Besides pushback and ﬁrewall ﬁltering, client puzzle is an-
other DoS/DDoS defense mechanism, in which a client has
to solve a computational puzzle before the server commits
resources to deal with his or her request. Game theory has
also been applied to study this type of protection against
DDoS attacks [2, 6]. In this work, we do not consider de-
fense based on client puzzles, although they in principle can
be incorporated into our evaluation framework.
3. MOTIVATION

In this work, we consider DDoS attacks that target a high-
value server (e.g., a DNS server or an HTTP server) in an
enterprise network. Figure 1 illustrates an DDoS attack and
defense scenario for an enterprise network with a critical
webserver, S. In this example, the attacker acquires a num-
ber of bots to send DDoS attack traﬃc to server S. In the
enterprise network, the defender (i.e., network administra-
tor) monitors the utilization level of the link from ISP to ﬁre-
wall F0, and also the utilization level of the webserver. Once
the defender infers that an attack is taking place, she takes
actions to counter against it, including adding extra band-
width to external link ISP → F0, blocking suspicious traﬃc,
and limiting the maximum traﬃc rate from each source.

To analyze the strategies of both the attacker and the
defender, we build an evaluation framework based on semi
network-form games, which were previously proposed to model
pilots’ behaviors during mid-air encounters [10]. The semi
network-form game model uses a Bayesian network for prob-
abilistic inference of uncertain system states. Nodes in the
Bayesian network are classiﬁed into two categories: chance
nodes, which represent states of non-human components,
and decision nodes, each of which describes how a player
makes a decision based on her observed system states. Con-
ditional probability distributions of chance nodes are prede-
ﬁned according to the physical law or mechanism that gov-
erns dependencies among system states. In a player’s think-
ing process, she evaluates possible outcomes of the game
(i.e., system states) due to a certain decision she could have
made, based on a predeﬁned utility function. Due to dif-
ﬁculty of obtaining a closed-form formula of the posterior

555Table 1: Summary of system parameters

Var. Meaning

A
J
L
X bf
h
X af
h
Gh
Obf
d
D
Ysb
Yrl

Attacker’s decision
State of attacker’s traﬃc arriving at external link
State of external legitimate users’ traﬃc
Output of foreground traﬃc from h before D’s move
Output of foreground traﬃc from h after D’s move
Rate of background traﬃc traversing resource h
Defender’s observation before D’s move
Defender’s mitigation parameters
Output of foreground traﬃc after static blocking
Output of foreground traﬃc after rate limiting

actions of the attacker and the defender, respectively. In the
following, we shall explain these system variables in detail.
Network state. We ﬁrst deﬁne parameters to character-
ize the system state in an enterprise network. Let C denote
the set of resources vulnerable to DDoS attacks on the path
of inbound attack traﬃc to the target server in the enterprise
network. We call set C critical resource set and a resource
in C a critical resource. A non-critical resource is assumed
to have suﬃcient capacity so that no traﬃc is dropped due
to it. In the example shown in Figure 1, we simply assume
that C contains only the link ISP → F0 and the server.

There are partial ordering relationships among some crit-
ical resources.
In the previous example, an attack packet
must traverse ﬁrewall F0 before arriving at the server. In
this work, we assume that there is no conﬂict due to such
ordering relationships. That is to say, if an attack packet has
to use resource h1 before resource h2, no other attack packet
should use resource h2 before resource h1. This is a reason-
able assumption because in an enterprise network setting,
there is usually a unique path from the perimeter ﬁrewall to
the server. Such partial ordering constraint prevents cycles
in the Bayesian graphical model described later.

There are two types of traﬃc that traverses a critical re-
source:
foreground traﬃc refers to those packets that are
destined to the server, and background traﬃc means those
that do not go to the server. For critical resource h, we also
introduce two vector variables: X bf
h to describe
the output state of foreground traﬃc from the resource be-
fore and after the defender’s mitigation action, respectively.
Each of these variables is a vector with the following repre-
sentation:

h and X af

X = (cid:104)X[1], X[2], X[3](cid:105),

(1)

where X[1] denotes the utilization level of the resource, X[2]
and X[3] denote the states of attack traﬃc and legitimate
users’ traﬃc destined to the server, respectively.

In this work, we focus on application-level DDoS attacks.
Hence, we measure the traﬃc rate in terms of the number of
transactions per second. To simplify our analysis later, we
assume that a transaction has a constant number of packets
and contains a constant number of bytes. Another impor-
tant issue is how to represent the state of traﬃc traversing
a resource. One approach is representing the traﬃc state
as the aggregate number of transactions per second. This
method, however, suﬀers when modeling the eﬀect of the de-
fender’s mitigation. For example, the rate limiting scheme
is usually performed per individual source IP, and aggregat-
ing the transaction rates over all sources (either malicious
or benign) thus loses the information at the granularity rele-
vant to rate limiting. Hence, we need to have full knowledge
on the rate of each ﬂow. We thus let X[2] and X[3] be a

total legitimate users’ traﬃc rate is(cid:80)size(L)

rate vector in which each element represents the rate of a
ﬂow. For clarity, we also use size(X[i]), where i = 2 or 3,
to denote the number of ﬂows in X[i]. To model legitimate
traﬃc, we use rate vector L to characterize transactions gen-
erated from legitimate users. Hence, the number of source
IP addresses in legitimate transactions is size(L) and the
A critical resource such as the link ISP → F0 is usually
used not just for the traﬃc destined to the server. Hence,
Gh is used to denote the rate of background traﬃc that
traverses h. This rate is represented at the level that is
relevant to resource h.
In the example, for the link from
ISP → F0, the background traﬃc is represented in terms of
bytes per second, rather than transactions per second.

k=1 L[k].

Attacker’s move space. The goal of the attacker is to
deplete the resources at the target. As now DDoS attacks
are often launched with automatic software such as Stachel-
draht [23], which requests bots to send attack traﬃc with
the same rate, we assume that the attacker picks the same
rate for each bot. Hence, the action space of the attacker
can be characterized with a tuple:

A = (cid:104)A[1], A[2](cid:105),

(2)

where A[1] denotes the number of bots used in the attack,
and A[2] the transaction rate from each bot. When the
attack traﬃc from all bots reach the external link, its traﬃc
is denoted as a rate vector J .

Defender’s move space. The defender monitors the
network state to detect ongoing DDoS attacks. The de-
fender’s observed network state obviously depends on the
monitoring scheme deployed. We consider the following
monitoring scheme: ﬁrst, the defender monitors the uti-
lization level of every resource in the critical resource set
S; second, the defender monitors two statistics of the traf-
ﬁc destined to the server at the ﬁrewall, number of unique
source IPs and average transaction rate from each source
IP. We deﬁne the defender’s observed network state before
her mitigation action, Obf
d [i], for i = 1, 2, 3, 4,
represents the utilization level of the external link, the uti-
lization level of the server, the number of source IPs destined
to the server, and the average transaction rate per ﬂow, re-
spectively.

d , where Obf

Once the defender infers that a DDoS attack is going on
based on the network state observed, her potential moves
include requesting the upstream ISP to increase the down-
link bandwidth (bandwidth inﬂation), blocking traﬃc from
suspicious source IP addresses (static blocking), and limit-
ing the maximum transaction rate allowed per source IP
address (rate limiting). As these actions can be taken si-
multaneously, we use D to denote the defender’s mitigation
parameters:

D = (cid:104)D[1], D[2], D[3](cid:105),

(3)

where D[1] denotes the fraction of increased bandwidth from
the upstream ISP, D[2] whether static blocking is enabled
(1 if enabled and 0 if disabled), and D[3] the upper limit on
the maximum transaction rate allowed per source IP.

For ease of presentation, we assume the defender performs
static blocking before rate limiting, both taking place at the
ﬁrewall. To characterize the state of foreground traﬃc after
each of these two actions by the defender, we introduce two
other variables Ysb and Yrl, each of which contains two rate
vectors, to denote the rates of foreground traﬃc after the

556defender performs static blocking and rate limiting, respec-
tively. For Yt, where t ∈ {sb, rl}, Yt[1] and Yt[2] are the
rate vectors for the attack traﬃc and the legitimate traﬃc,
respectively.
5. MODELING CONDITIONAL DEPENDEN-

CIES WITH BAYESIAN NETWORK

In the previous section, we have introduced a number of
random variables to describe the system state in a DDoS
attack and defense scenario. The dependencies among these
variables are governed by the underlying scheduling mecha-
nism deployed by each critical resource and also the ordering
relationships among critical resources imposed by network
connectivity. We use (cid:96) to describe the dependence rela-
tionship. That is to say, Z0 (cid:96) Z1, Z2 means that variable
Z0 conditionally depends on both variables Z1 and Z2. In
the following, we describe how to model the conditional de-
pendencies with a Bayesian network. To explain the basic
principles, we take our best-eﬀort guesses about the models
that characterize conditional dependencies among the sys-
tem variables.
In a practical setting, we can adjust these
models accordingly based on realistic data.
Critical resource dependencies. As we only consider a
single server, the critical resources in set S form a path h0 =
ISP → F0, h1, ..., hm = S where output of foreground traﬃc
from hi (i.e., X bf
) depends on that from the previous one
hi
(i.e., X bf
) and its background traﬃc before the defender’s
mitigation action:

hi−1

X bf
hi

(cid:96) X bf

hi−1

, Ghi ,

i = 1, 2, ..., m.

(4)

The input traﬃc fed to the external link includes attack
traﬃc, legitimate users’ traﬃc destined to the server, and
background traﬃc that traverses the external link. Hence,
we have the following for the external link ISP → F0:

X bf

ISP →F0

(cid:96) J , L, GISP →F0 .

(5)

After the defender’s mitigation action, the path formed
by the critical resources remains intact, except that the de-
fender’s actions of static blocking and rate limiting aﬀect
the traﬃc rate at the ﬁrewall. Also, the output rate of fore-
ground traﬃc from the external link after the defender’s
mitigation action depends on D, which includes how much
bandwidth has been added to the external link. Hence we
have:

X af

ISP →F0

(cid:96) J , L, GISP →F0 , D.

(6)

As the attacker’s traﬃc seen at the external link depends

on how the attacker generates his attack traﬃc, we have:

J (cid:96) A.

(7)

Moreover, the output rate of foreground traﬃc after static
blocking depends on both the output rate of foreground traf-
ﬁc from the external link, and the defender’s decision on
whether static blocking is enabled:

Ysb (cid:96) X af

ISP →F0

, D.

(8)

Similarly, the output rate of foreground traﬃc after rate
limiting depends on the output rate of foreground traﬃc
from the static blocking component, and the defender’s choice
on the upper limit on the maximum transaction rate allowed
per source IP:

Yrl (cid:96) Ysb, D.

(9)

For critical resources after the ﬁrewall on the path, we

have:

(cid:40)

X af
hi
X af
hi

(cid:96) Yrl, Ghi
(cid:96) X af
hi−1

, Ghi

if i = 1
if i > 1

(10)

In the following, we shall elaborate on the conditional de-

pendencies in Equations (4)-(10).

Attack traﬃc.

Although the attacker speciﬁes the
number of bots used in the attack and the rate of transac-
tions sent from each bot, the traﬃc coming out of each bot’s
physical machine, however, is subject to random distortion,
and rates of attack traﬃc may be changed due to congestion
before packets arrive at the target enterprise network. Let
the true transaction rate from any bot arriving at the target
enterprise network be Kq, where 0 ≤ K ≤ n − 1 and q is
the traﬃc resolution. Note that in reality, traﬃc rates are in
the continuous space. To model them in our framework, we
discretize them and let the largest possible rate for each ﬂow
be (n − 1)q. We further assume that given A = (cid:104)M, R(cid:105), we
sample K using the following modiﬁed Poisson distribution:

(cid:26) Rke−k

Ck!

0

if 0 ≤ k ≤ n − 1
if k ≥ n

(11)

P{K = k} = g(k) =

where C =(cid:80)n−1

Rke−k

is the normalizer. We can further
easily obtain the attacker’s traﬃc J from Equation (11).
Note that size(J ) is equal to M .

k=0

k!

FCFS scheduling.

It is observed that Equations (4),

(5), and (10) all take one of the following forms:

h , U u
h , U u

h (cid:105) (cid:96) (cid:104)V a
h (cid:105) (cid:96) (cid:104)V l

h , V u
h, V a

h (cid:105), Gh
h , V u

h (cid:105), Gh

(12)

(cid:26) (cid:104)U l

(cid:104)U l

h, U a
h, U a
h and U u

h and V u

where U a
h are the output rate vectors of attack and
legitimate foreground traﬃc from resource h, respectively,
V a
h are the input rate vectors of attack and legit-
imate foreground traﬃc fed to resource h, respectively, U l
h
is the utilization of resource h, V l
h is the utilization level
of the previous critical resource, and Gh is the background
traﬃc rate. As V l
h is not used for computation, we can do
the computation in the same manner for both cases. The de-
pendency shown in Equation (12) is dictated by the schedul-
ing mechanism deployed by the resource. Here we consider
only the widely deployed FCFS (First Come First Serve)
packet scheduling scheme, but the proposed framework can
be easily extended to other scheduling schemes such as WFQ
(Weighted Fair Queueing) [24].

Let Φ(h) denote the capacity of resource h. If resource h
is a link, then Φ(h) gives the bandwidth of that link, and
Gh gives the background traﬃc rate in terms of bytes per
second. Otherwise, if resource h is a server, then Φ(h) pro-
vides the maximum number of transactions the server can
handle per second, and both Φ(h) and Gh are measured in
the number of transactions per second. Let constant b be
the number of bytes in a transaction. In order to deal with
two diﬀerent types of resources, we introduce notation τ (h):

τ (h) =

h is a link
h is a server

(13)

We also deﬁne Wh as follows:

Wh = Gh/τ (h) +

V a

h [k] +

k=1

k=1

h )(cid:88)

size(V u

V u

h [k],

(14)

(cid:26) b
h )(cid:88)

1

size(V a

557Figure 2: DDoS attack and defense modeled as a semi network-form game

which is to say, the handy variable Wh is actually the ag-
gregate input transaction rate fed to resource h.
According to the FCFS scheduling mechanism, when there
is no congestion (i.e., Wh ≤ Φ(h)/τ (h)), no transaction
is dropped; otherwise, transactions are dropped with the
same probability from each source IP. More speciﬁcally, if
Wh ≤ Φ(h)/τ (h), we have:

h
h [k] = V a
U a
U u
h [k] = V u

= τ (h)Wh
Φ(h)
h [k]
h [k]

∀k : 1 ≤ k ≤ size(U a
h )
∀k : 1 ≤ k ≤ size(U u
h )

(15)

and if Wh > Φ(h)/τ (h), we have:

 U l
 U l

h
U a
U u

= 1

h [k] = Φ(h)V a
h [i]
τ (h)Wh
h [k] = Φ(h)V u

h [i]

τ (h)Wh

∀k : 1 ≤ k ≤ size(U a
h )
∀k : 1 ≤ k ≤ size(U u
h )

(16)

h , V u

Instead, it takes the form (cid:104)U a

It is noted that Equation (6) does not take the form shown
h (cid:105) (cid:96)
in Equation (12).
h (cid:105), Gh, D. The computation is similar, though, ex-
(cid:104)V a
cept that Φ(h) in Equations (15) and (16) (including their
corresponding conditions) have to be replaced with the new
capacity, which is (1 + D[1]) · Φ(h).

h , U u

Static blocking. Static blocking is performed on traﬃc
destined to the server at each source IP level. We assume
a simple Bernoulli process for both attack traﬃc and legit-
imate users’ traﬃc: each source IP address in the attack
traﬃc is classiﬁed as a bot with probability p0 (true positive
rate), and each source IP address in legitimate users’ traﬃc
is classiﬁed as a bot with probability p1 (false positive rate).
If D[2] = 1, which means that static blocking is enabled,

then we have the following for j = 1, 2:
Ysb[j][k] | X af
[j + 1][k], D ∼
ISP →F0

(cid:26) X af

ISP →F0

[j + 1][k] with probability 1 − pj−1

0

with probability pj−1

Otherwise, if D[2] = 0, which means that static blocking

is disabled, then we always have

(cid:40)

Ysb[1][k] = X af
Ysb[2][k] = X af

ISP →F0
ISP →F0

[2][k]
[3][k]

(17)

Rate limiting. Recall D[3] is the maximum transaction
rate allowed per source IP. For each source IP, if its rate is
above the threshold D[3], its traﬃc is reshaped to make its
rate become D[3], irrespective of whether it is a bot or not.
Therefore, we have:

(cid:26) Ysb[j][k]

D[3]

Yrl[j][k] =

if Ysb[j][k] ≤ D[3]
if Ysb[j][k] > D[3]

,

(18)

for both j = 1 and j = 2.

Observed state by the defender. Recall that the de-
fender monitors the utilization level of each critical resource,
and also the number of unique source IPs and the average
transaction rate from each source IP in the traﬃc destined
to the server. The statistics of traﬃc destined to the server
can be obtained from X bf

. Hence, we have:

ISP →F0

d (cid:96) X bf
Obf

ISP →F0

, X bf
S .

(19)

More speciﬁcally, we have the following:

Obf
Obf
Obf

[1]

d [3] = (cid:80)3
d [1] = X bf
ISP →F0
d [2] = X bf
S [1]
j=2 size(X bf
(cid:80)size(X
(cid:80)3
(cid:80)3

d [4] =

Obf

k=1

j=2

[j])

ISP →F0
ISP →F0

bf

[j])

Xbf
ISP →F0

[j])

ISP →F0

[j][k]

j=2 size(Xbf

(20)
As the defender’s decision is made based on her observed
network state before her mitigation action, the following
holds:

D (cid:96) Obf
d .

(21)

Construction of Bayesian Network. After all depen-
dencies deﬁned, we can construct a Bayesian network. Each
state variable listed in Table 1 is a node in the Bayesian



558network. When there is such a dependency relationship
Z0 (cid:96) Z1, Z2, ..., Zm, then we create a directed edge from
each of Zi, where 1 ≤ i ≤ m, to Z0. The conditional prob-
ability density functions are also deﬁned accordingly based
on how each state variable is calculated. Following the same
example, its corresponding Bayesian network is illustrated
in Figure 2.

6. LEVEL-K REASONING

In contrast to previous attempts of applying game theory
to analyze DDoS attacks and defense, our evaluation frame-
work considers bounded rationality [21] for both the attacker
and the defender. Bounded rationality reﬂects many real-
world situations in which people tend to satisﬁce rather than
maximizing their preferences in decision making due to lim-
ited information or time available or the diﬃculty involved
in sophisticated reasoning. To this end, we assume that both
the attacker and the defender adopt the ”level-K thinking”
strategy [3], in which each player optimizes her best response
at level k based on her observations from the previous level.
Under the level-K reasoning model, we further deﬁne sat-
isﬁcing distributions, utility functions, and level-0 distribu-
tions for both the attacker and the defender.

Satisﬁcing distributions λ.

The satisﬁcing distri-
butions in the semi network-form game indicate a player’s
preferences in her decision making given an observed system
state. They serve the purpose of sampling from a player’s
decision space in her reasoning. In our model, the attacker
initiates the attack, and his decision does not depend on any
other system variables. We also assume that the traﬃc rate
from each bot is uniformly drawn from K by the attacker.
On the other hand, let B denote the set of the number of
bots that the attacker would like to choose in an attack. The
number of bots used in the attack is uniformly drawn from
B.

The defender’s satisﬁcing distribution hinges on her ob-
served network state Obf
d . The defender’s observed network
state helps her make decisions on (1) whether to perform a
speciﬁc mitigation action (bandwidth inﬂation, static block-
ing, and rate limiting) and (2) how to set the parameters if
a mitigation action is performed.

For each of these mitigation actions, we model the de-
fender’s satisﬁcing function with a two-step process includ-
ing whether to perform it and next how to set correspond-
ing parameters. We use simple delta functions and logistic
functions to model the probability with which the defender
adopts a speciﬁc mitigation action based on her observed
network state. Note that the delta function δ(x) returns 1
if x is true or 0 otherwise. The cumulative density function
of the logistic distribution is Q(x; µ, s) = 1/(1 + e−(x−µ)/s).
Let Dbi, Dsb, Drl denote whether bandwidth inﬂation,
static blocking, and rate limiting is adopted, respectively.
We have:

d } = δ(Obf
d } = δ(Obf
d } = δ(Obf

d [1] ≥ tbi)
d [2] ≥ ts) · Q(Obf
d [2] ≥ ts) · Q(Obf

d [3]; µsb, ssb)
d [4]; µrl, srl)

 λ{Dbi = 1 | Obf

λ{Dsb = 1 | Obf
λ{Drl = 1 | Obf

That is to say, when the utilization level of the external link
exceeds threshold tbi, bandwidth inﬂation is enabled; only
when the server utilization level exceeds threshold ts, will
static blocking be enabled according to a logistic distribution
function Q(Obf
d [3]; µsb, ssb). Similarly, when the server uti-

lization level exceeds threshold ts, rate limiting is enabled ac-
cording to a logistic distribution function Q(Obf
d [4]; µrl, srl).
In our model, the defender samples D[1], D[2], and D[3]
in Equation (3) independently given Obf
d . If the defender
decides to perform bandwidth inﬂation (i.e., Dbi = 1), we
assume that she samples the fraction of increased bandwidth
uniformly from a set F; otherwise, D[1] is always 0. In the
case of static blocking, we note that D[2] = Dsb. Hence,
Equation (22) gives us λ{D[2] | Obf
d }. Similar to the case of
bandwidth inﬂation, we assume that the defender samples
an upper limit uniformly from set H when Drl = 1.

Utility functions. From the standpoint of the attacker,
his goal is to maximize the fraction of dropped transactions
from legitimate users’ traﬃc. Meanwhile, the attacker also
wants to minimize the number of bots used in the attack, as
he needs to pay the botherder for each bot used [4]. Hence,
a feasible utility function for the attacker is:

(cid:80)size(L)
k=1 L[k] −(cid:80)size(Xaf

(cid:80)size(L)
k=1 L[k] × A[1]

S [3])

k=1

ua =

X af

S [3][k]

,

(23)

which is the fraction of dropped legitimate users’ transac-
tions normalized by the number of bots used in the attack.
The reason that we incorporate the number of bots into
the attacker’s utility function is because botnets are usually
rented for malicious purposes such as DDoS attacks based on
the number of bots used [4]. Here, alternative utility func-
tions can also be applied, such as the diﬀerence between the
attacker’s gain (i.e., fraction of dropped legitimate traﬃc)
and his cost on paying bots (after proper scaling). Evalua-
tion of these diﬀerent utility functions remains as our future
work.

On the other hand, the defender values the fraction of
served legitimate users’ transactions. In the case of band-
width inﬂation, the defender may need to pay the fee for
increased bandwidth from the upstream ISP. Let the price
per increased fraction be ρ. We deﬁne the the defender’s
utility function ud as follows:

(cid:80)size(Xaf
(1 + ρD[1])(cid:80)size(L[k])

X af

S [3])

k=1

k=1

S [3][k]

L[k]

ud =

.

(24)

Note that in the Equation (24), the defender’s utility is nor-
malized by how much price he pays for the increased fraction
of external link’s bandwidth.

Level-0 distributions. To bootstrap the level-K think-
ing process, a player needs to make an assumption about
how her opponent behaves nonstrategically, i.e., at level 0.
From the defender’s viewpoint, we assume that she thinks
that there is no attack from the attacker. Similarly, we as-
sume that the attacker thinks that the defender does not
deploy any defense in advance. Hence, in our model, pa-
rameter K indicates the sophistication level of the player:
the higher K is, the more sophisticated a player’s strategic
thinking is.

(22)

7. ANALYSIS OF INDIVIDUAL DEFENSE
In this section, we use the evaluation framework, imple-
mented with around 10,000 lines of C++ code, to analyze
scenarios with a single mitigation scheme deployed. Un-
derstanding the intricacies in games played when a single
defense scheme is put in place not only oﬀers us insights
into its strength and weakness against defending against

559(1) number of bots vs. price

(2) sending rate per bot vs. price

(3) fraction of increased bandwidth vs. price

Figure 3: Decisions vs. diﬀerent prices under the bandwidth inﬂation scheme (C: server capacity)

Table 2: Parameter settings in baseline case

Variable
Ref.
n
Eq. (11)
q
Eq. (11)
b
Eq. (13)
Φ(ISP → F0) Table 1
Table 1
Φ(S)
G(ISP → F0) Table 1
Table 1
G(S)
L
Table 1
B
K
F
H
tbi
ts
µsb
ssb
µrl
srl

Eq. (22)
Eq. (22)
Eq. (22)
Eq. (22)
Eq. (22)
Eq. (22)

Setting
100
1.0 trans/sec
8000 bits
1Gbps
20K, 100K, and 500K trans/sec
N (0.5Gbps, (0.2Gbps)2 )
N (150 trans/sec, (50 trans/sec)2 )
number of users ∼ Poisson(5,000)
transactions/user ∼ Uniform(1,3)
{5000i}i=0,...,10
{kq}k=1,...,10
{0.5i}i=1,...,10
{i}i=1,...,10
0.99
0.99
10000
1000
5
1

DDoS attacks, but also helps us understand later how the
entire defense system works when multiple defense schemes
are deployed simultaneously. To do so, we let Di where
i ∈ {bi, sb, rl} always be 0 in Equation (22) if the correspond-
ing defense scheme is not enabled. Table 2 summarizes the
parameter settings in the experiments. Due to space limi-
tation, we present only results for bandwidth inﬂation. For
each scenario, we average results from 500 simulation runs.
We consider only K = 1, 2 as when K > 2, it becomes too
computationally prohibitive. Fortunately, empirical studies
have suggested that people usually reason at only low levels.
For instance, K was observed to be mostly 1 or 2 in [16], or
almost always no greater than 3 in [1].
7.1 Decisions of attacker and defender

Decisions of the attacker and the defender under diﬀerent
bandwidth prices are shown in Figure 3, from which we make
the following observations.

Na¨ıve reasoning (K = 1): The number of bots and
the sending rate per bot do not change with the bandwidth
price ρ, because when K = 1, the attacker assumes that the
defender does not deploy any mitigation scheme, thereby
making the bandwidth price irrelevant. Moreover, when the
server capacity is low, the number of bots used by the at-
tacker is only 5000 (the lowest positive in set B), suggesting
that the small number of bots is suﬃcient for ﬂooding the
server. When the server capacity is high, the attacker needs
more bots to degrade the performance of the server, even

though the utility function of the attacker is inversely pro-
portional to the number of bots used. On the other hand,
the sending rate per bot chosen by the attacker is close to
the maximum value he can use in set K (i.e., 10 transactions
/ sec). This is because the utility function of the attacker
is not explicitly aﬀected by the sending rate per bot. Note
that when the server capacity is low, the sending rate per
bot is slightly lower than those when the server capacity is
higher. We conjecture that it is because the diﬀerence is
negligible when the server is overloaded.

By contrast, the defender’s decisions are aﬀected by the
bandwidth price. Albeit the defender assumes that there
is no attack, increasing the bandwidth of the external link
helps reduce the fraction of legitimate traﬃc dropped by
the external link due to congestion. With a higher band-
width price, the defender becomes more reluctant to increase
the bandwidth, which agrees with our intuition. When the
server capacity is lower, the defender has less incentive to
increase the bandwidth because the traﬃc, even passing
through the external link, would still be dropped by the over-
loaded server. Hence, we observe from Figures 3(3) that the
higher the server capacity is, the more likely the defender
will increase the bandwidth of the external link when the
bandwidth price is not high.

Sophisticated reasoning (K = 2). When K = 2, the
attacker uses only a small number of bots for attacks when
the server capacity is low, regardless of the bandwidth price.
However, when the server capacity is high, the attacker tends
to reduce the number of bots for attacks when the bandwidth
price increases. This is interesting because the bandwidth
price is only directly related to the defender’s decision (from
her utility function). Actually, when the bandwidth price in-
creases, the attacker ﬁgures that the defender is less likely to
increase the bandwidth of the external link, and as a result,
he tends to use a smaller number of bots for attacks. On the
other hand, when the server capacity increases, the attacker
ﬁgures that the defender tends to increase the bandwidth of
the external link by a higher fraction if the bandwidth price
is not high; hence, he has to use a larger number of bots to
achieve desired attack eﬀects. As in the cases when K = 1,
the attacker uses a high sending rate per bot for attacks.

From the defender’s side, with a higher bandwidth price,
she has less incentive to increase the bandwidth of the exter-
nal link. When the server capacity is high, not only does she
have the same incentive to increase the bandwidth of the ex-
ternal link as she does when K = 1, but also she also knows
that the attacker would use a higher number of bots for at-
tacks and is thus more willing to increase the bandwidth

 5000 10000 15000 20000 25000 30000 35000 40000 1e-05 0.0001 0.001 0.01 0.1 1Number of bots used by attackerPriceC = 20000, K = 1C = 20000, K = 2C = 100000, K = 1C = 100000, K = 2C = 500000, K = 1C = 500000, K = 2 8 8.2 8.4 8.6 8.8 9 9.2 9.4 9.6 9.8 10 1e-05 0.0001 0.001 0.01 0.1 1Sending rate per botPriceC = 20000, K = 1C = 20000, K = 2C = 100000, K = 1C = 100000, K = 2C = 500000, K = 1C = 500000, K = 2 0 0.5 1 1.5 2 2.5 3 1e-05 0.0001 0.001 0.01 0.1 1Fraction of increased bandwidth  on external linkPriceC = 20000, K = 1C = 20000, K = 2C = 100000, K = 1C = 100000, K = 2C = 500000, K = 1C = 500000, K = 2560(1) C = 20000, K = 1

(2) C = 100000, K = 1

(3) C = 500000, K = 1

(4) C = 20000, K = 2

(5) C = 100000, K = 2

(6) C = 500000, K = 2

Figure 4: Fraction of legitimate traﬃc served by critical resources vs. diﬀerent bandwidth prices under the
bandwidth inﬂation scheme (Server capacity: C)

of the external link unless the bandwidth price is high. We
thus observe from Figures 3(3) that the diﬀerences in the de-
fender’s decisions when K = 2 are prominent under diﬀerent
server capacities.

7.2 Outcomes of DDoS attack and defense games

The outcomes of the game under varying prices are illus-
trated in Figure 4. They show the fraction of legitimate
traﬃc that has been served by the external link and the
server before and after the mitigation scheme takes eﬀect,
respectively. We observe that when the server capacity is
low (Figures 4(1,4)), although the majority of legitimate
traﬃc (above 90%) passes through the external link, the
server only serves about 35% of legitimate traﬃc, regardless
of whether mitigation takes eﬀect. Under a low bandwidth
price, the defender decides to increase the bandwidth on
the external link, resulting that almost all legitimate traﬃc
passes through the external link (in both cases of K = 1 and
K = 2).

Medium/high server capacity, K = 1: When the server
capacity is 100,000, before mitigation takes eﬀect, about
56% of legitimate traﬃc passes through the external link
and is then served by the server, regardless of bandwidth
price; after mitigation takes eﬀect, the fraction of legitimate
traﬃc passing through the external link increases, leading
to more legitimate traﬃc served by the server. When the
server capacity reaches 500,000, all traﬃc passing through
the external link is served by the server. Also, both frac-
tions of legitimate traﬃc passing through the external link
and served by the server decrease with bandwidth price, as
the defender becomes more reluctant to add more bandwidth
to the external link with a higher bandwidth price.

Medium/high server capacity, K = 2: When the server ca-
pacity increases, both the fraction of legitimate traﬃc pass-
ing through the external link and then served by the server
before mitigation takes eﬀect increase as the bandwidth price
increases, because the attacker reduces the number of bots

used in the attack (see Figure 3(1)). From Figure 4(5),
we note that when the server capacity is 100,000, as band-
width price increases, the fraction of legitimate traﬃc pass-
ing through the external link ﬁrst decreases, then increases,
and ﬁnally decreases again. This interesting phenomenon
reﬂects mixed eﬀects from two factors. On one hand, as
bandwidth price increases, the attacker tends to reduce the
number of bots used in the attack (see Figure 3(1)). On the
other hand, the defender also tends to reduce the fraction
of bandwidth added to the external link as bandwidth price
increases.

When the server capacity is 100,000, the fraction of legit-
imate traﬃc served by the server ﬁrst increases, and then
decreases as bandwidth price increases (Figure 4(5)). The
shape of this curve diﬀers from the one corresponding to
that served by the external link, because the fraction of at-
tack traﬃc arriving at the server decreases as bandwidth
price increases. But when the server capacity is high (i.e.,
500,000), all traﬃc passing through the external link can be
served by the server, thus making the two curves identical
in Figure 4(6).

Practical implications:

Our analysis of individual
defense reveals the following: (1) When the attacker and
the defender reason at diﬀerent sophistication levels, their
decisions can change signiﬁcantly, which further aﬀect the
outcome of the game. This implies that players’ strategic
thinking plays an important role in deciding the outcome of
a DDoS attack and defense game. From the defender’s per-
spective, if she knows she faces a sophisticated attacker, she
knows that the attacker knows some defense would be de-
ployed in advance and thus could use more bots. She needs
to take that into consideration in the guessing game to ﬁnd
her best response. Our framework can be used in these sit-
uations to help predict actions of the adversary at diﬀerent
sophistication levels and accordingly derive the best strate-
gies for the defender. (2) A player’s decision can be aﬀected
by a parameter that is not directly related to her decision.

 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1e-05 0.0001 0.001 0.01 0.1 1Fraction of served legitimate trafficPriceExternal link, before mitigationExternal link, after mitigationServer, before mitigationServer, after mitigation561Table 3: Parameter settings in multi-layer defense
experiments

Parameter
Avg. #users
Server capacity
Bandwidth price
Detection rate
False alarm rate

Values
5000 (low), 10000 (medium), 15000 (high)
20000 (low), 100000 (medium), 500000 (high)
0.0001 (low), 0.01 (medium), 1 (high)
0.6 (low), 0.8 (medium), 1.0 (high)
0 (low), 0.1 (medium), 0.2 (high)

When the bandwidth price changes, this aﬀects not only be-
haviors of the defender whose utility is directly related, but
also actions of the attacker, although indirectly. This sug-
gests that game-theoretic evaluation of DDoS attacks and
defense could lead to diﬀerent results from traditional eval-
uation methods which usually ignore such indirect eﬀects.
The defender needs to consider such eﬀects on both sides
to ﬁnd the best response. Our framework can be used in
these situations to help the defender predict how changes of
system parameters (e.g., bot price, bandwidth price, etc.)
would aﬀect the adversary’s action and then ﬁnd the best
move to maximize her own utility.

8. ANALYSIS OF MULTI-LAYER DEFENSE
We now consider scenarios where the defender put multi-
ple defense schemes in place. The parameters are set simi-
larly as in Table 2, except those shown in Table 3. In total,
we have 243 scenarios due to diﬀerent combinations of pa-
rameter settings. For each scenario, we simulate 256 random
samples, and the average decisions made by the attacker and
the defender in these samples are shown in Figure 5. As we
have a high-dimension input parameter space, we use dif-
ferent colors, shapes and sizes of markers to diﬀerentiate
diﬀerent inputs. As some irregular patterns in the ﬁgures
suggest, the players’ best strategies may not have linear re-
lationships with the system parameters.
In the following,
we will interpret these plots and highlight some interesting
observations.

Attacker’s decisions: For a na¨ıve attacker (i.e., K is
1), the number of bots used depends on both the server ca-
pacity and the average number of users: with a low server
capacity, the attacker chooses a low number of bots for at-
tacks (around 5000); with a medium or high server capacity,
the attacker increases the number of bots when the average
number of users decreases. The na¨ıve attacker also uses a
high sending rate per bot (close to 10) in all scenarios.

For a sophisticated attacker (i.e., K is 2), when the server
capacity is low, the attacker still uses a small number of bots
(close to 5000). When the server capacity is high and the
bandwidth price is not high, the attacker uses a high number
of bots for the attack (around 25,000). When the server ca-
pacity is medium or high, the general trend is that a higher
bandwidth price leads to a smaller number of bots used for
the attack. Moreover, the detection rate and the false pos-
itive rate of the static blocking scheme have little eﬀect on
the number of the bots used by the attacker. Regarding the
sending rate per bot, the attacker tends to use a high rate
for most of the scenarios, but if the server capacity is low
(circles) a lower sending rate per bot may be used. Interest-
ingly, the performance of the static blocking scheme aﬀects
the sending rate per bot by the attacker: a better performed
static blocking scheme with a lower false alarm rate or a
higher detection rate could make the attacker use a lower
sending rate per bot.

Defender’s decisions: Bandwidth inﬂation. The frac-
tions of increased bandwidth on the external link by the
defender are shown in Figure 5(3) and 5(6). (1) When the
bandwidth price is high (large-sized markers), the defender
chooses not to increase bandwidth on the external link, re-
gardless of other parameter settings. This is in concert with
our intuition.
(2) When the bandwidth price is medium
(medium-sized markers) and the server capacity is medium
or high (blue or red ), if K = 2, the fraction of increased
bandwidth on the external link does not change much with
other parameters but if K = 1, it mostly increases with the
average number of users (indicated by color). When the
bandwidth price is medium and the server capacity is low
(red medium-sized circles), if K = 1, the defender does not
add more bandwidth to the external link, but if K = 2, her
decision seems to be aﬀected by the detection rate of the
static blocking scheme: the higher detection rate, the lower
fraction of increased bandwidth on the external link. This
suggests that the defender’s three layers of defense mecha-
nisms could complement each other: a better performed de-
fense component allows the defender to rely less on others.
(3) When the bandwidth price is low (small-sized markers),
the defender’s decisions become more complicated. For in-
stance, if K is 1, the defender adds a relatively high amount
of extra bandwidth to the external link when false positive
rate of the static blocking scheme is non-zero, the server ca-
pacity is low, and the average number of users is medium
(small-sized blue circles in Figure 5 (3)), but if K = 2, the
defender adds a relatively high amount of extra bandwidth
when the server capacity is high (diamonds), regardless of
the performance of the static blocking scheme.

Static blocking. The fraction of samples when the defender
enables static blocking are shown in Figure 5(7) and 5(10).
We ﬁrst consider the scenarios when K = 1 (Figure 5(7).
The defender tends not to enable static blocking when the
server capacity is high (diamonds), or the server capacity
is low but the average number of users is also low (yellow
circles). She also tends to always enable static blocking
when the server capacity is low and the average number of
users is high (red circles). The defender enables static block-
ing with probability around 20% when the server capacity
is medium (boxes). When the server capacity is low and
the number of users is medium (blue circles), the defender’s
decision depends on the performance of the static blocking
scheme. For instance, if the static blocking scheme does not
produce false alarms or if the bandwidth price is high, the
defender enables static blocking with probability at around
80%; otherwise, the probability of enabling static blocking
is between 40% and 60%. The results are surprising, be-
cause when K = 1, the defender does not assume existence
of any attack and she thus does not have any incentive to
enable static blocking. Close examination reveals that when
the server is overloaded, the defender will sample decisions
with static blocking enabled, which would drop legitimate
traﬃc due to false alarms. As the server is overloaded any-
way, turning on static blocking produces exactly the same
utility for the defender as if she does not.

When K = 2 (Figure 5(10)), the defender disables static
blocking when the server capacity is high (diamonds), and
almost always enables static blocking when the server ca-
pacity is low and the average number of users is medium
or high (blue and red circles). When the server capacity
is medium (boxes), the defender enables static blocking in

562(1) bots, K = 1

(2) rate per bot, K = 1

(3) bandwidth inﬂation, K = 1

(4) bots, K = 2

(5) rate per bot, K = 2

(6) bandwidth inﬂation, K = 2

(7) static blocking, K = 1

(8) no rate limit, K = 1

(9) rate limit, K = 1

(10) static blocking, K = 2

(11) no rate limit, K = 2

(12) rate limit, K = 2

Figure 5: Decisions made by the attacker and the defender when multiple layers of protection are deployed.
Shape: Circle (capacity = 20000), Box (capacity = 100000), Diamond (capacity = 500000); Color: Yellow
(Avg. #users = 5000), Blue (Avg. #users = 10000), Red (Avg. #users = 15000). The X-axis:
(a, b)
means the detection rate is a and the false positive rate is b. Size of each marker implies the corresponding
bandwidth price. Best viewed in color.

(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario50001000015000200002500030000Numberofbotsusedinattack(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario9.29.39.49.59.69.79.89.910.0Sendingrateperbotinattack(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.20.40.60.81.01.21.41.6Fractionofincreasedbandwidthonexternallink(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario50001000015000200002500030000Numberofbotsusedinattack(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario4.05.06.07.08.09.010.0Sendingrateperbotinattack(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.51.01.52.0Fractionofincreasedbandwidthonexternallink(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.20.40.60.81.0Fractionofsamplesenablingstaticblocking(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.20.40.60.81.0Fractionofsampleswithoutratelimiting(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.01.02.03.04.05.06.07.08.0Ratelimitusedbydefender(ifused)(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.20.40.60.81.0Fractionofsamplesenablingstaticblocking(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.00.20.40.60.81.0Fractionofsampleswithoutratelimiting(0.6,0)(0.6,0.1)(0.6,0.2)(0.8,0)(0.8,0.1)(0.8,0.2)(1,0)(1,0.1)(1,0.2)Scenario0.01.02.03.04.05.06.07.08.0Ratelimitusedbydefender(ifused)563about 23% of the samples, and the fraction slightly varies
with the average number of users and the bandwidth price.
When the server capacity is low and the average number of
users is low (yellow circles), the defender’s decision depends
on the performance of the static blocking scheme as well as
the bandwidth price; hence, it diﬀers from what she would
have done if K = 1.

Rate limiting. The decisions regarding rate limiting are
shown in Figures 5(8-9) and 5(11-12). When K is 1, one in-
teresting observation is that when the server capacity is low
and the average number of users is medium or high (red or
blue circles), the defender’s decision depends on the perfor-
mance of the static blocking scheme:
if the static blocking
scheme does not generate false positives, in around 21% of
samples, the defender disables rate limiting; otherwise, the
fraction of samples in which the defender does not enable
rate limiting is about between 40% and 60%.
In the re-
maining samples when the defender enables rate limiting,
the rate limit is aﬀected by the performance of the static
blocking scheme. One may wonder why the performance of
the static blocking scheme aﬀects the defender’s decisions in
rate limiting since when K = 1, the defender assumes no at-
tacks. This is actually because if the static blocking scheme
is prone to false alarms, some legitimate traﬃc would be
dropped by the static blocking scheme, and if the rate limit-
ing component sees that the sending rate per source is below
a certain threshold, it would not enable rate limiting. Reve-
lation of such correlation in changes of system states by dif-
ferent layers of protection is made possible due to reasoning
based on Bayesian networks but is diﬃcult under traditional
game theoretic models.

We next consider the results when K = 2. In this case,
the defender’s decisions regarding rate limit when the server
capacity is high or medium are similar to those when K = 1
(boxes and diamonds). But when the server capacity is low
(circles), we observe that if the detection rate of the static
blocking scheme is not perfect, then the defender is more
likely to enable rate limiting with a high probability and use
a low rate limit (if the rate limiting scheme is enabled); oth-
erwise if the detection rate of the static blocking scheme is
100%, the defender is more likely to disable rate limiting and
in cases where it is not enabled, she tends to use a higher
rate limit. This further conﬁrms our previous observation
that the diﬀerent layers of defense mechanisms can comple-
ment each other, and having a better performed component
allows the defender to rely less on other components in the
defense system.

Practical implications: Our analysis of multi-layer
defense reveals the following: (1) In some scenarios the de-
ployment of multi-layer defense against DDoS attacks allows
the defender to rely less on a speciﬁc defense mechanism if
another is well performed, but the degree of reduction de-
pends on various factors, such as the server capacity and
intensity of legitimate users’ traﬃc. When the defender
needs to decide whether to invest on a new defense tech-
nology, say, a better intrusion detection system, she needs
to understand relationships between it and other defense
schemes. A number of scenarios have shown having a better-
performed traﬃc blocking scheme does not necessarily mean
it is useful, because other defense schemes can complement
a poorly-performed one. Hence, our framework is instru-
mental in identifying those scenarios where investment on

a new defense technology will indeed pay oﬀ. (2) When
there are multiple layers of defense, players’ decisions be-
come complicated due to their nonlinear relationships with
system parameters. Our framework can help the defender
get better outcome or control defense mechanisms in these
situations, due to its ability to infer the best action (e.g.,
optimal settings of defense parameters) given an observed
network state. Moreover, our framework is capable of sort-
ing through a number of uncertain factors (e.g., number of
normal users, amount of DDoS traﬃc, and fraction of normal
traﬃc falsely classiﬁed by the intrusion detection system) to
ﬁnd optimal strategies for the defender.

9. CONCLUSIONS

The goal of this work is to explore new methodology for
evaluating DDoS attacks and defense. Although there were
a few previous attempts in using traditional game theory
tools to model DDoS attacks and defense, our contribution
in this work is development of a game-theoretic framework
that is able to model much more complicated scenarios in
DDoS attacks and defense. This framework uses Bayesian
networks for players to infer system states in a probabilistic
manner. Level-K thinking is used to model diﬀerent sophis-
tication levels of the players. Observations from our exper-
iments show that taking strategic thinking of players into
account brings a new perspective to analysis of DDoS at-
tacks and defense, and it is necessary to do so if we want
to gain a realistic glimpse into behaviors of both players in
DDoS attacks and defense.

In our future work, we plan to incorporate incomplete
information into our evaluation framework by letting each
player deﬁne a separate Bayesian network for her own rea-
soning, rather than having a single Bayesian graphical model
as described in Sections 4 and 5. Such ﬂexibility will allow
each player to model more ﬁne-grained knowledge about the
adversary in her decision making process.

In this study we mainly focused on games in which the
attacker and the defender reason at the same level K, but
it would be interesting to see how players thinking at diﬀer-
ent sophistication levels aﬀect the outcomes of the games. In
another plan of our future work, we would like to extend the
static game model used in our current framework to dynamic
games where decisions of both the attacker and the defender
change over time. Techniques such as reinforcement learning
can be used to model how a player learns about the adver-
sary’s strategies dynamically. This will further improve the
richness of our framework.

Appendix A: Semi Network-Form Game [10]
The formal deﬁnition of semi network-form game uses the
following notations. ∆Z denotes the probabilistic simplex
over a space Z, and ∆Z|Y = ×y∈Y ∆Z is the space of all
possible conditional distributions of z ∈ Z conditioned on
y ∈ Y . As in standard game theory, for any particular
player i, −i is used to denote the set of all players excluding
player i.

A semi network-form game involving N players is a quin-
tuple (G, X, u, R, π) that satisﬁes the following conditions:
1. G is a ﬁnite directed acyclic graph {V, E}, where V and
E are the sets of nodes and edges in it, respectively.
For any node v ∈ V , we let pa(v) denote the set of
parent nodes of v.

5642. X is a Cartesian product of |V | ﬁnite sets, each with at
least two elements. Xv denotes the set corresponding
to v ∈ V , and Xpa(v) the Cartesian product of sets
for all elements in pa(v). Intuitively, Xv contains all
possible states at node v and Xpa(v) all possible states
of v’s parent nodes.

3. u is a function X → RN . It also can be seen as a set

of N utility functions ui : X → R for each player i.

4. R is a partition of V into N + 1 subsets. Each of R(i),
where 1 ≤ i ≤ N , contains a single element, which is a
decision node, and all elements in R(N + 1) are chance
nodes. D = ∪N
i=1R(i) and C = R(N + 1) represent the
set of decision nodes and chance nodes, respectively.

5. π is a function from v ∈ R(N +1) → ∆Xv|×v(cid:48)∈pa(v)Xv(cid:48) .
That is to say, π assigns to every chance node v ∈
R(N + 1) a conditional probability distribution of v
conditioned on the states of its parents.

In a semi network-form game, each player needs to infer
the system state based on her observed information, and
then takes the best-response action. A player performs sta-
tistical inference by treating G, augmented with conditional
probability functions in π, in the semi network-form game
as a Bayesian graphical model. Typically, it is diﬃcult to
derive a closed form of posterior probability distributions for
a Bayesian network conditioned on some observed informa-
tion, and hence sampling techniques such as forward sam-
pling and importance sampling are widely used for approxi-
mating these distributions. In the context of semi network-
form games, however, the challenge is how to sample from
a decision node, as in the deﬁnition of a semi network-form
game no conditional probability distributions are speciﬁed
for these nodes. Note that π is only deﬁned for chance nodes
in the model.

To address this challenge, level-K relaxed strategies are
proposed. The key idea is level-K thinking,
in which a
player’s reasoning is recursively deﬁned with level K. Deﬁne
the level-K relaxed strategy of a decision node v ∈ D, where
K ≥ 1, to be ΛK−1(Xv(cid:48) | Xpa(v(cid:48))). We have the following
deﬁnitions for a semi network-form game (G, X, u, R, π):

• U = V \ {v, pa(v)},
• P K (Xv | Xpa(v)) = π(Xv | Xpa(v)) if v ∈ C,
• P K (Xv | Xpa(v)) = ΛK−1(Xv | Xpa(v)) if v ∈ D,

• P K (XZ ) =(cid:81)

v(cid:48)(cid:48)∈Z P K (Xv(cid:48)(cid:48) | Xpa(v(cid:48)(cid:48))).

As level-K relaxed strategies are recursively deﬁned, we

specify a level-0 distribution Λ0(Xv | xpa(v)) ∈ ∆Xv|×v(cid:48)∈pa(v)Xv(cid:48)
for every decision node. With these notations, the level-K
relaxed strategy for any decision node v ∈ D is deﬁned as
follows. First, for every decision node, a satisﬁcing function
distribution λ(Xv | xpa(v)) ∈ ∆Xv|×v(cid:48)∈pa(v)Xv(cid:48)
is speciﬁed
to indicate a player’s preference in sampling from the space
of her possible moves. Also specify two integers M and M(cid:48)
used in the sampling process. Suppose that decision node v
corresponds to player i, where 1 ≤ i ≤ N . Next, perform the
following process independently for each xpa(v) ∈ Xpa(v):

1. Choose M independent and identically distributed (IID)
samples of λ(Xv | xpa(v)). After removing all dupli-
cates, we obtain a set {x(cid:48)
v(j) : j = 1, . . . , m} with m
elements;

2. For each j where j = 1, . . . , m, choose M(cid:48) IID samples

of the joint distribution:

(cid:89)

P K (XV | x
(cid:48)
v(j), xpa(v)) =
P K (Xv(cid:48) | Xpa(v(cid:48)))δXpa(v),xpa(v) δXv ,x(cid:48)

v (j);

V (k; x(cid:48)

v(cid:48)∈V
and let {x(cid:48)
v(j)) : k = 1, . . . M(cid:48)} be the set of
these samples. In the above equation, the delta func-
tion δa,b returns 1 if a = b or 0 otherwise. Here, rejec-
tion sampling is applied: if in the sample XV node v’s
state is not x(cid:48)
v(j) or its parents’ states are not xpa(v),
the sample is simply rejected.

3. For each j where j = 1, . . . , m, we estimate player i’s

utility under her possible action x(cid:48)

v(j):

ˆuK
i (x

(cid:48)
(cid:48)
v(j)), x
U (; x

(cid:48)
v(j), xpa(v)) =

M(cid:48)(cid:88)

k=1

1
M(cid:48)

(cid:48)
(cid:48)
V (k, x
ui(x
v(j))).

(25)

4. Player i takes the best-response action x(cid:48)

v(j∗) where

∗

j

= argmaxj[ˆuK

(cid:48)
i (x
U (; x

(cid:48)
v(j)), x

(cid:48)
v(j), xpa(v))].

The rejection sampling applied by the level-K relaxed strat-
egy can be extremely costly, as a large number of samples
are rejected because they do not contain observed informa-
tion (node v’s parents’ states) or the player’s action sampled
from her satisﬁcing function. To further improve the per-
formance of the level-K relaxed strategy, the following two
optimization techniques can be adopted:

D-separation. Let X, Y, Z be three sets of nodes in a
Bayesian network. X and Y are called d-separated given
Z if there is no active trail between any node in X and any
node in Y given Z [8]. Intuitively speaking, given Z we can
guarantee the independence between X and Y , if X and Y
are d-separated given Z.
In the context of semi network-
form games, we can ﬁnd the set of nodes independent of a
decision node v given the set of its parent nodes pa(v). For
these nodes, we can sample them independently ﬁrst and
then combine them with the samples for the other nodes as
described in the level-K relaxed strategy.

Likelihood weighting. Rejection sampling is computation-
ally expensive because it rejects samples if they are incom-
patible with the evidence. Likelihood weighting is a method
that forces samples to take appropriate values at evidence
nodes and then compensate it with a weight characterizing
the likelihood that the evidence nodes take the forced values
in the sample. In the semi network-form game, calculation
of the utility function in Equation (25) is adjusted accord-
ingly to take the weight of each sample into account. Also,
we do not have to normalize the weights as unnormalized
weights are suﬃcient for comparing utilities under diﬀerent
actions.
Acknowledgment
The authors acknowledge and appreciate the support pro-
vided for this work by the Los Alamos National Labora-
tory Directed Research and Development Program (LDRD,
project number 20110093DR) and NASA Aviation Safety
Program SSAT project.

56510. REFERENCES
[1] A. Arad and A. Rubinstein. The 11-20 money request

game: Evaluating the upper bound of k-level
reasoning. Technical report, Tel Aviv University
Working Paper, May 2010.

[2] B. Bencsath, I. Vajda, and L. Buttyan. A game based
analysis of the client puzzle approach to defend against
DoS attacks. In Proceedings of the 2003 International
Conference on Software, Telecommunications and
Computer Networks, pages 763–767, 2003.

[3] C. F. Camerer. Behavioral game theory: experiments

in strategic interaction. Princeton University Press,
2003.

[4] N. Christin, S. Egelman, T. Vidas, and J. Grossklags.

It’s all about the Benjamins: An empirical study on
incentivizing users to ignore security advice. In
Proceedings of IFCA Financial Cryptography’11, pages
16–30, Saint Lucia, February 2011.

[5] http://edition.cnn.com/2008/TECH/04/18/cnn.

websites/.

[6] M. Fallah. A puzzle-based defense strategy against

ﬂooding attacks using game theory. IEEE
Transactions on Dependable And Secure Computing,
7:5–19, January 2010.

[7] T. Khirwadkar, K. C. Nguyen, D. M. Nicol, and

T. Basar. Methodologies for evaluating game theoretic
defense against DDoS attacks. In Proceedings of the
2010 Winter Simulation Conference, 2010.

[8] D. Koller and N. Friedman. Probabilistic Graphical

Models: Principles and Techniques. MIT Press, 2009.

[9] I. Kotenko and A. Ulanov. Simulation of internet

DDoS attacks and defense. In Proceedings of the 9th
international conference on Information Security,
ISC’06, pages 327–342, 2006.

[10] R. Lee and D. Wolpert. Game theoretic modeling of
pilot behavior during mid-air encounters. In Decision
Making with Imperfect Decision Makers, pages 75–111.
Springer, 2012.

[11] Z. Li, Y. Xiang, and D. He. Computational

intelligence and security. chapter Simulation and
Analysis of DDoS in Active Defense Environment,
pages 878–886. Springer-Verlag, 2007.

[12] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis,

V. Paxson, and S. Shenker. Controlling high
bandwidth aggregates in the network. ACM
SIGCOMM Computer Communication Review,
32:62–73, July 2002.

[13] M. H. Manshaei, Q. Zhu, T. Alpcan, T. Basar, and
J.-P. Hubaux. Game theory meets network security,
2010. Submitted to ACM Survey.

[14] J. Mirkovic and P. Reiher. A taxonomy of DDoS

attack and DDoS defense mechanisms. ACM
SIGCOMM Computer Communications Review, 34(2),
April 2004.

[15] J. Mirkovic, S. Wei, A. Hussain, B. Wilson,

R. Thomas, S. Schwab, S. Fahmy, R. Chertov, and
P. Reiner. DDoS benchmarks and experimenter’s
workbench for the deter testbed. In Proceedings of the
3rd International Conference on Testbeds and Research
Infrastructures for the Development of Networks and
Communities (TridentCom’07), pages 1–7, May 2007.

[16] R. Nagel. Unraveling in guessing games: An

experimental study. American Economic Review,
85(5):1313–26, December 1995.

[17] T. Peng, C. Leckie, and K. Ramamohanarao. Survey
of network-based defense mechanisms countering the
DoS and DDoS problems. ACM Computing Surveys,
39, April 2007.

[18] S. Roy, C. Ellis, S. Shiva, D. Dasgupta, V. Shandilya,

and Q. Wu. A survey of game theory as applied to
network security. In Proceedings of the 2010 43rd
Hawaii International Conference on System Sciences,
pages 1–10, 2010.

[19] D. Schmidt, S. Suriadi, A. Tickle, A. Clark, G. Mohay,

E. Ahmed, and J. Mackie. A distributed denial of
service testbed. In Jacques Berleur, Magda Hercheui,
and Lorenz Hilty, editors, What Kind of Information
Society? Governance, Virtuality, Surveillance,
Sustainability, Resilience, volume 328 of IFIP
Advances in Information and Communication
Technology. Springer Boston, 2010.

[20] P. Shi and Y. Lian. Game-theoretical eﬀectiveness
evaluation of DDoS defense. In Proceedings of the
Seventh International Conference on Networking
(ICN’08), pages 427 –433, April 2008.

[21] H. A. Simon. Rational choice and the structure of the

environment. Psychological Review, 63(2):129–138,
1956.

[22] M. E. Snyder, R. Sundaram, and M. Thakur. A

game-theoretic framework for bandwidth attacks and
statistical defenses. In Proceedings of the 32nd IEEE
Conference on Local Computer Networks, 2007.

[23] http://www.sans.org/security-resources/

malwarefaq/stacheldraht.php.

[24] D. Stiliadis and A. Varma. Latency-rate servers: a

general model for analysis of traﬃc scheduling
algorithms. IEEE/ACM Transactions on Networking,
6(5):611 –624, October 1998.

[25] http:

//www.internetnews.com/security/article.php/
3933046/How+Much+Does+a+DDoS+Attack+Cost.htm.

[26] http:

//www.pcmag.com/article2/0,2817,2374063,00.asp.

[27] Q. Wu, S. Shiva, S. Roy, C. Ellis, and V. Datla. On

modeling and simulation of game theory-based defense
mechanisms against DoS and DDoS attacks. In
Proceedings of the 2010 Spring Simulation
Multiconference, SpringSim ’10, pages 159:1–159:8.
ACM, 2010.

[28] J. Xu and W. Lee. Sustaining availability of web

services under distributed denial of service attacks.
IEEE Transactions on Computers, 52(2):195 – 208,
feb. 2003.

[29] http://news.cnet.com/2100-1023-236621.html.
[30] G. Yan and S. Eidenbenz. DDoS mitigation in

non-cooperative environments. In Proceedings of the
7th international IFIP-TC6 networking conference,
NETWORKING’08, Singapore, 2008.

[31] W. Zang, P. Liu, and M. Yu. How resilient is the

Internet against DDoS attacks? – a game theoretic
analysis of signature-based rate limiting. International
Journal of Intelligent Control and Systems,
12(4):307–316, December 2007.

566