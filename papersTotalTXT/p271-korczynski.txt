Zone Poisoning: The How and Where of Non-Secure

DNS Dynamic Updates

Maciej Korczy ´nski
Delft University of

Technology

The Netherlands

Michał Król

Université de Technologie

de Compiègne

France

Michel van Eeten
Delft University of

Technology

The Netherlands

Maciej.Korczynski@tudelft.nl

Michal.Krol@hds.utc.fr

M.J.G.vanEeten@tudelft.nl

ABSTRACT
This paper illuminates the problem of non-secure DNS
dynamic updates, which allow a miscreant to manipu-
late DNS entries in the zone ﬁles of authoritative name
servers. We refer to this type of attack as to zone
poisoning. This paper presents the ﬁrst measurement
study of the vulnerability. We analyze a random sam-
ple of 2.9 million domains and the Alexa top 1 mil-
lion domains and ﬁnd that at least 1,877 (0.065%) and
587 (0.062%) of domains are vulnerable, respectively.
Among the vulnerable domains are governments, health
care providers and banks, demonstrating that the threat
impacts important services. Via this study and subse-
quent notiﬁcations to aﬀected parties, we aim to im-
prove the security of the DNS ecosystem.

Keywords
Domain Name System; zone poisoning; dynamic up-
dates; measurement; security

1.

INTRODUCTION

The Domain Name System (DNS) provides a critical
service for all Internet applications that depend on do-
main names. Over the years, a variety of threats have
emerged that undermine the trustworthy resolution of
domain names into IP addresses. Two well-known at-
tacks are cache poisoning [21] and malicious name res-
olution services [23, 16]. What these attacks share in
common is that they compromise the resolution path
somewhere between the user and the authoritative name
server for a domain.

In this study, we explore an attack against the au-
thoritative end of the path: the zone ﬁle of the authori-
tative name server itself. We detail how the vulnerable-
by-design, non-secure DNS dynamic update protocol
extension potentially allows anyone who can reach an
authoritative name server to update the content of its
zone ﬁle. The attacker only needs to know the name of
the zone and the name server for that zone. The vul-
nerability was indicated already in 1997 by Vixie et al.
in RFC 2136 [38], but its relevance in the current DNS
landscape has not been recognized nor studied.

We refer to this type of attack as to zone poisoning.
In the simplest version of an attack, a miscreant could
replace an existing A or MX resource record (RR) in a
zone ﬁle of an authoritative server and point the domain
name to an IP address under control of an attacker.

We already know that criminals are interested in hack-
ing DNS records of legitimate domains from the practice
of domain shadowing, where registrant credentials are
compromised in order to create a large volume of subdo-
mains of a legitimate domain. They are used for, among
other things, distributing malware exploit kits [13]. A
more ambitious vector is hacking the registrars directly,
as illustrated by the attack of Syrian Electronic Army
on Melbourne IT, the registrar for the New York Times
and Twitter [10].
In contrast to these attacks, zone
poisoning does not require compromising registrants or
registrars, but is as simple as sending a single RFC-
compliant DNS dynamic update packet to a misconﬁg-
ured server.

We present the ﬁrst study to detail this vulnerabil-
ity and measure its prevalence in the wild. Our main
contributions are summarized as follows:

Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.

IMC 2016, November 14-16, 2016, Santa Monica, CA, USA

c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987477

• We analyze the root cause of non-secure dynamic up-

dates and how they can be exploited.

• We measure which domains allow non-secure dynamic
updates in a random sample of 1% from 286 million
domains and ﬁnd that 0.065% is vulnerable. Surpris-
ingly, we ﬁnd a similar rate (0.062%, meaning 587
domains) for the Alexa top 1 million domains.

• Alarmingly, we ﬁnd a signiﬁcant number of domains

271of national governments, universities, and businesses,
including nine domains belonging to banks in Europe,
Middle East, and Asia, from the domain of a pri-
vate banking ﬁrm to a domain belonging to one of
the largest banks in the world.

• We ﬁnd signiﬁcant concentrations of the vulnerabil-
ity: securing the zone ﬁles of just 10 providers would
reduce the prevalence of the issue with 88.6% in the
random sample.

• We observe suspicious domains among the vulnerable
population, but ﬁnd no direct evidence of ongoing at-
tacks.

• We ﬁnd that most vulnerable servers are running Win-

dows DNS, NLnetLabs NSD, and ISC BIND.

The objective of this paper is to strengthen the se-
curity of DNS. We notiﬁed all operators of non-secure
servers discovered during our measurements.

2. BACKGROUND

The DNS protocol was initially designed to support
queries of a statically conﬁgured database. Most of the
data in the system was updated manually and expected
to change only slowly [30]. However, with the intro-
duction of dynamic allocation of network addresses to
hosts [18], a more dynamic update mechanism for DNS
became essential.

2.1 Dynamic Updates in DNS

DNS dynamic update speciﬁcations have been intro-
duced by Vixie et al. in RFC 2136 [38] in 1997. Follow-
ing this speciﬁcation, one can add or delete any type of
RR, such as A, AAAA, CNAME, or NS. The proposed UP-
DATE message complies with the standard DNS message
format (cf. RFC 1035 [31]).

it veriﬁes:

When a primary master server that supports dynamic
updates receives an update request,
i) if
all prerequisites deﬁned by the requestor are met (e.g.
check whether a speciﬁc record does or does not ex-
ist) and ii) whether restrictions are set regarding which
hosts are allowed to make updates and, if so, whether
those restrictions are met. If no restrictions are deﬁned,
anyone who knows the name of the zone and the name
server for that zone is capable of updating its content.
This constitutes a serious technological vulnerability in-
dicated by Vixie et al. in RFC 2136 [38]. If the request
is sent to an authoritative slave server, it is expected
that it will be forwarded towards the primary server
that is able to modify the zone ﬁle.

2.2 Secure DNS Dynamic Updates

Vixie et al. strongly recommended the use of security
measures such as those described in RFC 2137 [14] (su-
perseded by RFC 3007 [39]). If secure communication
is not implemented, it is expected that an authoritative
server accepts the dynamic updates only from a stat-
ically conﬁgured IP address of, for example, a DHCP

server [38].
In RFC 2137, Donald Eastlake describes
how to use the DNS Security Extensions (DNSSEC) [15]
to restrict dynamic updates to authorized entities based
on cryptographic keys [14]. However, using the public
key mechanism is less eﬃcient and harder to manage.
Three years after the introduction of DNS dynamic up-
dates, Vixie et al. proposed an eﬃcient, lightweight al-
ternative to authenticate dynamic updates: Secret Key
Transaction Authentication for DNS (TSIG), which is
based on shared secret keys and message authentication
code (MAC) [34].

2.3 Implementations

We now analyze common implementations of DNS
dynamic updates, paying special attention to the de-
fault protocol conﬁgurations.
BIND: Berkeley Internet Name Domain (BIND) is open
source and the most widely used DNS software on the
Internet [19]. Version 8, released in 1997, ﬁrst included
a dynamic DNS component [20, 37]. In BIND 8 and 9,
dynamic updates are disabled by default. An adminis-
trator can add allow-update in the zone conﬁguration
and specify the hosts that are allowed to update records.
An address match list can include entire subnetworks
or the built-in argument any, that allows all hosts to
make dynamic updates. Since BIND 8.2, released in
1999, the address match list supports TSIG. The basic
conﬁguration is still supported, however. Since BIND
9.1, slave servers are allowed to forward dynamic up-
dates to a master server (RFC 2136 [9]). These can
use address match lists similar to those of the master,
meaning that non-secure conﬁgurations provide an ad-
ditional path for a miscreant, as updates forwarded by
the slave will be accepted by the master, regardless of
the original requestor.
Microsoft DNS: Windows 2000 is the ﬁrst operating
system developed by Microsoft that supported DNS dy-
namic updates [28]. The server can be conﬁgured either
as standard primary or as Microsoft’s Active Directory–
integrated zone [26]. Windows 2000 and its successors,
i.e. Windows Server 2003 [25], 2008 [29], and 2012
[27], all support secure dynamic updates. They im-
plement an extended TSIG algorithm (RFC 3645 [24]).
When an administrator creates an Active Directory–
integrated zone, by default the server allows only se-
cure updates via extended TSIG. However, the server
can also be conﬁgured for no or non-secure dynamic
updates. More importantly, the secure update func-
tionality is not available for standard primary zones. In
any primary zone conﬁgured for DNS dynamic updates,
anyone can modify zones.
Other Implementations: As indicated in RFC 2137
[14], any zone ﬁle allowing dynamic updates is less se-
cure than the one conﬁgured statically. Some of the
popular open-source authoritative servers such as Name
Server Daemon (NSD) developed by NLnet Labs [32],
DJBDNS created by Daniel J. Bernstein [12], or Un-
logic Eagle DNS [33] do not support dynamic updates.

272,

However, the functionality is sometimes added via ex-
ternal tools1
2. PowerDNS has recently added the dy-
namic update component. According to the documen-
tation, by default all IP ranges are allowed to perform
updates [35]. Our lab experiments (cf. Section 4.1) re-
veal, however, that by default only loopback IP space
can make dynamic updates.

In short: common implementations not only support
vulnerable conﬁgurations, such as accepting requests
from all hosts, but some are vulnerable by default. Of
the two common security mechanisms, TSIG-variants
and address match lists, only the former provides a re-
liable defense to malicious updates. Since the attack
only needs a single UDP packet, an attacker can guess
and spoof source IP addresses on the match list. This
risk could be mitigated by restricting dynamic updates
to the TCP protocol only.

3. THREAT MODEL

We refer to an attack that exploits non-secure dy-
namic updates as zone poisoning. This attack itself is
nothing more than sending a single RFC-compliant pack-
et. The requirements are: i) non-secure updates are al-
lowed by an authoritative server for a given zone ii) the
miscreant knows the name of a zone and its name server.
An attacker can replace existing A or MX RRs in a zone
ﬁle and point the domain to an IP address controlled
by the attacker and potentially running a fake web or
mail server. This would hijack the domain and allow the
attacker to determine where clients or their emails go.
A miscreant could also abuse the reputation of a legit-
imate domain (e.g. onlineshopping.com) and add an
extra A RR to an existing zone ﬁle that associates an
IP address of a fake web server with a malicious sub-
domain (e.g. paypal.account.onlineshopping.com).
An interesting variant is to delegate a malicious sub-
domain of a legitimate domain to the criminal’s own
DNS server. This would allow him to generate as many
new subdomains as needed, without making additional
update requests.

Non-secure updates could also be abused to acquire a
Domain Validated (DV) SSL certiﬁcate for the vulnera-
ble domain name, to be used in impersonation attacks.
DV SSL certs are validated and provisioned automati-
cally using a system of “challenge-response” emails. The
attacker could re-route the conﬁrmation message to the
contact email listed in WHOIS via a dynamic update for
the mail server domain.

4. METHODOLOGY

4.1 Lab Experiments

We performed lab experiments to establish if and
how the protocol allows unauthorized dynamic updates,

1https://www.sixxs.net/wiki/NSD
2http://www.thismetalsky.org/projects/dhcp dns

in particular adding, deleting and modifying existing
records in the zone. We selected BIND 9.8.4 and Pow-
erDNS 4.0.0-alpha2 as case studies, as both implemen-
tations are non-commercial and widely used. We con-
ﬁgured master servers for our domain name (e.g., exam-
ple.com) and we tested various conﬁguration setups as
explained in Section 2.3. To perform updates, we used
both the standard Linux nsupdate3 command and our
own scanner (see Section 4.2). Updates were sent from
both legitimate and spoofed source IP addresses on the
address match list.

The update requests successfully added and deleted
A, AAAA, NS, MX, PTR, SOA and TXT RRs corresponding
to the domain name (example.com), as well as extra
records for subdomain names (researchdelft.example
.com). This way, we were also able to replace a pre-
existing A RR (example.com) that had been manually
added to the zone ﬁle at the beginning of the study.
More speciﬁcally, using dynamic updates, we ﬁrst added
an extra A record that associated the domain name with
a new IP address, and then removed the original one.
Finally, for BIND we also conﬁgured the slave server to
forward updates towards the master. As expected, the
changes were accepted by the master even though the
original requestor is allowed to make changes only in
the slave server.

To conclude, our lab experiments demonstrate that
systems which allow non-secure dynamic updates are
vulnerable to attacks that can “modify” existing records
and add new records. Non-secure update mechanisms
cover both overly promiscuous address match lists (“any”)
as well as more focused match lists, which can be by-
passed via IP spooﬁng.

4.2 Scanning Setup

To assess the potential impact of non-secure dynamic
updates, we have developed an eﬃcient scanner capable
of sending DNS packets compliant with RFC 2136 [38].
The scanner attempts to add an extra A record to the
zone ﬁle, associating a new upper-level domain, re-
searchdelft, with the IP address of our project’s web
server. We do not spoof the source IP address of the
update request. Our web server describes the project
and provides a method to opt-out from our scans. Note
that we have not received a single abuse complaint or
opt-out request – which might mean that the insertion
of the record was not seen as problematic or, perhaps
more likely, that the insertion went unnoticed. The scan
does not interact with the existing data in the zone ﬁle.
Since our request is technically equivalent to a regular
update request, we do not expect it to interfere with
normal activity and have seen no evidence to the con-
trary.

We analyzed responses of authoritative name servers
and performed DNS lookups to verify if our domain
resolved to our web server’s IP address. We also per-

3http://linux.die.net/man/8/nsupdate

273Table 1: Datasets

Table 2: DNS responses to UPDATE requests

#
Domains
NS
IPs of NS
Domain–NS–IP

1% Sample Alexa 1M
947,823
2,865,393
487,515
510,850
418,251
438,478
7,368,659

27,499,061

formed a ten-day long study to estimate the time the
added RR stays in a zone. Finally, we removed the test
DNS record by sending a delete UDPATE request and
then tried to resolve it again. All added records were
successfully deleted.

4.3 Ethical Considerations

While vulnerability scanning has become an estab-
lished part of security research, our approach does raise
ethical questions because of the fact that the only valid
method available to us for assessing the vulnerability of
a DNS server was to add a record to the zone ﬁle.

We have submitted the study to the TU Delft Human
Research Ethics Committee. The committee evaluated
our request and stated that we did not need their autho-
rization since we were not conducting human subjects
research. While this makes sense, it also signals that
current institutional review procedures are not set up
to evaluate ethical issues in computer security.

We have assessed our work using the principles out-
lined in the Menlo report [17]. We do not collect data
on persons. Getting informed consent before adding a
record to the zone ﬁle is both unpractical and would
introduce selection bias, since administrators of well-
secured servers are more likely to consent. We do pro-
vide a clear opt-out mechanism via the website refer-
enced in the added DNS record. The site also provides
full transparency regarding the study and its objectives.
Our approach in testing the vulnerability has been
designed to have as minimal impact as possible: we send
a single RFC-compliant packet. We do not read, change
or otherwise engage with any existing records. We feel
the drawback of lacking consent from server operators is
outweighed by the beneﬁts of our measurement for those
operators: to be made aware of a critical vulnerability in
their DNS server. All notiﬁcations have been completed
before the publication of this paper. The new record is
highly unlikely to be discovered by accident and it is
removed at the end of the study.

4.4 Dataset

To measure the prevalence of non-secure conﬁgura-
tions, we collected data for two samples: a random
sample of 1% of the domain space and the Alexa top
1 million domains (or Alexa 1M) [1].

First, we extracted all domains observed in two com-
plementary datasets between Jan 2015 and Jan 2016: i)
DNSDB that is a large passive DNS database fed by
hundreds of sensors across the world, operated by Far-
sight Security [3], which generously provided access to

DNS
Response
All
REFUSED
FORMERR
NOTAUTH
NOTIMP
SOA
SQR∗
NOERROR
SERVFAIL
Other

1% Sample
in #

6,007,462
2,325,377
1,374,015
1,198,337
727,734
237,175
114,677
13,580
6,621
9,946

in %
100
38.7
22.8
19.9
12.1
3.9
1.9
0.2
0.2
0.2

Alexa 1M

in #

2,294,099
1,265,544
260,094
357,442
357,592
18,241
25,851
5,093
3,830
412

in %
100
55.2
11.3
15.6
15.6
0.8
1.1
0.2
0.2
0

* Standard Query Response

us and ii) Project Sonar Data Repository obtained though
ANY RR requests, made available by Rapid7 Labs [4].

From the total 286,788,250 unique domains in the
set, we randomly sampled 1%. For that sample and
for the Alexa 1M, we enumerated all observed combi-
nations of name servers and their IP addresses in both
datasets: over 27 and 7 million, respectively (cf. Table
1). The long period of observation and the fact that
DNSDB contains many entries that are poisoned either
maliciously [23, 16] or unintentionally [40], means we
expected a lot of IP addresses on the list to be obsolete,
but we wanted to ﬁnd as many as possible.

We performed the vulnerability assessment against
the random sample on Mar 30, 2016 and against the
Alexa 1M on Apr 10, 2016. For each domain, we sent
an UPDATE request directly to all IP addresses on the list.
As expected, many did not respond. Next to obsolete
NS information, this can also indicate network ﬁltering
and other policies at work. We received responses from
6.0 million (random sample) and 2.3 million (Alexa 1M)
name servers (see Table 2).

5. RESULTS

5.1 Prevalence of Vulnerable Resources

Table 2 summarizes the DNS status codes received
in response packets related to the UPDATE requests. As
expected, the great majority of requests fail to add RRs
to the zone. The most common code is REFUSED, mean-
ing that the server refuses to perform the operation for
security or policy reasons. Around 12.1% and 15.6% of
name servers signal NOTIMP meaning that they do not
implement the protocol extension, whereas 22.8% and
11.3% of servers are not even able to parse and interpret
the dynamic update request and signal FORMERR. Next,
19.9% and 15.6% of name servers signal that they are
not authoritative for the zone. The main reason for
DNS responses with the NOTAUTH error ﬂag is the pres-
ence of obsolete NS information in our dataset as de-
scribed in Section 4.4. Approximately 0.2% of servers
signal SERVFAIL meaning that a hardware error or an
out-of-memory condition might have taken place and

274275276have overwritten the added entries. At the end of our
experiment, records were still present in around 94.3%
(3,696) of the random sample and 95.9% (1,622) of the
Alexa 1M domains. Interestingly enough, the Alexa 1M
does not have a higher removal rate than the random
sample; in fact, it does slightly worse. In light of the
fact that we were not contacted by any of the operators
of the non-secure servers, suggesting no one saw the
added record, it seems that there are no other security
mechanisms in place to discover and mitigate the threat.

6. CONCLUSIONS

We presented the ﬁrst measurement study into the
vulnerability of non-secure DNS dynamic updates, which
enables an attack we referred to as zone poisoning. We
have measured prevalence rates for a random sample of
2.9 million domains (0.065%) and for the Alexa top 1
million domains (0.062%) and found that the vulnera-
bility poses a serious security ﬂaw that deserves more
attention from domain owners and DNS service opera-
tors.

Certain limitations have to be taken into account to
contextualize the obtained results. First, and perhaps
foremost, we should note that our measurements estab-
lish a conservative lower bound for the magnitude of the
problem. The servers that rely on address match lists to
secure dynamic updates are counted as ’secure’ in our
measurement, but they are still vulnerable to IP spoof-
ing. The attack requires only a single packet, making
it possible for attackers to guess addresses that are on
the match list.

The datasets in our study also present certain inher-
ent limitations. For example, DNSDB has extensive,
but not complete coverage of the domain name space.
It also contains entries that are poisoned or obsolete,
so many servers did not respond to our dynamic up-
dates. Finally, we should note that responsibility is dis-
tributed and complicated. The fact that we found cer-
tain providers and software packages to be associated
with vulnerable domains, should not be interpreted as
assigning blame.

The next step for this work is to expand measure-
ment and notify all aﬀected parties, in order to improve
the security of the DNS ecosystem, a critical service for
many applications.

Acknowledgments
Authors thank Paul Vixie and Eric Ziegast from Far-
sight Security for sharing DNSDB, Jeroen van der Ham
from the National Cyber Security Center (NCSC), Jelte
Jansen, Moritz M¨uller and Marco Davids from SIDN,
and the anonymous reviewers for their constructive and
valuable comments. This work was supported by SIDN,
the .NL Registry and by NWO (grant nr. 12.003/628
.001.003), NCSC. This work has been carried out in
the framework of the project ”IMATISSE” (Inundation
Monitoring and Alarm Technology In a System of Sys-

tEms), funded by the Region Picardie, France, through
the European Regional Development Fund (ERDF).

7. REFERENCES

[1] Alexa Top 1,000,000 Sites. http:

//s3.amazonaws.com/alexa-static/top-1m.csv.zip,
Retrieved March 28, 2016.

[2] Anti-Phishing Working Group (APWG):

Cross-industry Global Group Supporting Tackling
the Phishing Menace.

[3] Farsight Security: DNS Database (DNS-DB).

https://www.dnsdb.info.

[4] Internet-Wide Scan Data Repository: DNS

Records (ANY).
https://scans.io/study/sonar.fdns.

[5] StopBadware: A Nonproﬁt Anti-malware

Organization. https://www.stopbadware.org.

[6] FPDNS-DNS Fingerprinting Tool.

https://www.dns-oarc.net/tools/fpdns, 2014.

[7] Over a Quarter of Phishing Attacks in 2014

Targeted Users’ Financial Data.
http://www.kaspersky.com, February 2015.

[8] Aaron, G., and Rasmussen, R. Anti-Phishing
Working Group (APWG) Global Phishing Survey:
Trends and Domain Name Use in 2H2014. http:
//internetidentity.com/wp-content/uploads/2015/
05/APWG Global Phishing Report 2H 2014.pdf,
May 2015.

[9] Albitz, P., and Liu, C. DNS and BIND, 4th

Edition. O’Reilly Media, 2001.

[10] Arthur, C. Twitter and New York Times Still

Patchy as Registrar Admits SEA Hack.
https://www.theguardian.com, 2013.

[11] Asghari, H., van Eeten, M. J., and Bauer,

J. M. Economics of Fighting Botnets: Lessons
From a Decade of Mitigation. IEEE Security &
Privacy, 5 (2015), 16–23.

[12] Bernstein, D. J. DJBDNS.

https://cr.yp.to/djbdns.html, Retrieved March
2016.

[13] Biasini, N., and Esler, J. Threat Spotlight:

Angler Lurking in the Domain Shadows.
http://blogs.cisco.com, March 2015.

[14] D. Eastlake 3rd. Secure Domain Name System
Dynamic Update. Internet RFC 2137, April 1997.

[15] D. Eastlake 3rd. Domain Name System

Security Extensions. Internet RFC 2535, March
1999.

[16] Dagon, D., Provos, N., Lee, C. P., and Lee,

W. Corrupted DNS Resolution Paths: The Rise
of a Malicious Resolution Authority. In Proc. of
NDSS (2008).

[17] Dittrich, D., and Kenneally, E. The Menlo

Report: Ethical Principles Guiding Information
and Communication Technology Research. Tech.
rep., U.S. Department of Homeland Security,

277August 2012.

[18] Droms, R. Dynamic Host Conﬁguration

Protocol. Internet RFC 2131, March 1997.

[19] Internet Systems Consortium, Inc. BIND –

The Most Widely Used Name Server Software.
https://www.isc.org/downloads/bind, November
2015.

[20] Internet Systems Consortium, Inc. History

of BIND. https://www.isc.org/history-of-bind,
January 2015.

[21] Kaminsky, D. It’s The End Of The Cache As

We Know It. In: Black Hat Conference,
http://www.slideshare.net/dakami/dmk-bo2-k8,
August 2008.

[22] Kaplan, E. L., and Meier, P. Nonparametric

Estimation from Incomplete Observations.
Journal of the American Statistical Association
53, 282 (1958), 457–481.

[23] K¨uhrer, M., Hupperich, T., Bushart, J.,

Rossow, C., and Holz, T. Going Wild:
Large-Scale Classiﬁcation of Open DNS Resolvers.
In Proc. of ACM IMC (2015), pp. 355–368.

[24] Kwan, S., Garg, P., Gilroy, J., Esibov, L.,
Westhead, J., and Hall, R. Generic Security
Service Algorithm for Secret Key Transaction
Authentication for DNS (GSS-TSIG). Internet
RFC 3645, October 2003.

[25] Microsoft TechNet.

https://technet.microsoft.com/en-us/library/
cc784052(v=ws.10).aspx, January.

[26] Microsoft TechNet. Active

Directory-Integrated DNS Zones.
https://technet.microsoft.com/en-us/library/
cc731204(v=ws.10).aspx, April 2012.

[27] Microsoft TechNet. What’s New in DNS
Server. https://technet.microsoft.com/en-us/
library/dn305898.aspx, June 2015.

[28] Microsoft TechNet. Dynamic Update and

Secure Dynamic Update. https://technet.
microsoft.com/en-us/library/cc959275.aspx,
Retrieved March 2016.

[29] Microsoft TechNet. Understanding Dynamic

Update. https://technet.microsoft.com/en-us/
library/cc771255.aspx, Retrieved March 2016.
[30] Mockapetris, P. Domain Names - Concepts

and Facilities. Internet RFC 1034, November
1987.

[31] Mockapetris, P. Domain Names -

Implementation and Speciﬁcation. Internet RFC
1035, November 1987.

[32] NLnet Labs. NSD: Name Server Daemon.

http://www.nlnetlabs.nl/projects/nsd/, Retrieved
March 2016.

[33] Olofsson, R. Eagle DNS.

http://www.unlogic.se/projects/eagledns,
Retrieved March 2016.

[34] P. Vixie, O. Gudmundsson, D. Eastlake

3rd, and B. Wellington. Secret Key
Transaction Authentication for DNS (TSIG).
Internet RFC 2845, May 2000.

[35] PowerDNS. Dynamic DNS Update (RFC2136).

https://doc.powerdns.com/md/authoritative/
dnsupdate, Retrieved March 2016.

[36] Tajalizadehkhoob, S., Korczy´nski, M.,

Noroozian, A., Ga˜n´an, C., and van Eeten,
M. Apples, Oranges and Hosting Providers:
Heterogeneity and Security in the Hosting Market.
In Proc. of IEEE NOMS (2016), IEEE Press.

[37] Univerit¨at T¨ubingen. BIND Version 8 Online

Documentation.
http://astro.uni-tuebingen.de/software/bind,
March 1998.

[38] Vixie, P., Thomson, S., Rekhter, Y., and

Bound, J. Dynamic Updates in the Domain
Name System (DNS UPDATE). Internet RFC
2136, April 1997.

[39] Wellington, B. Secure Domain Name System

(DNS) Dynamic Update. Internet RFC 3007,
November 2000.

[40] Wessels, D. DNS Survey: Cache Poisoners.

http://dns.measurement-factory.com/surveys/
poisoners.html, 2007.

278