Analysis of the HTTPS Certiﬁcate Ecosystem∗

Zakir Durumeric, James Kasten, Michael Bailey, J. Alex Halderman

Department of Electrical Engineering and Computer Science

University of Michigan, Ann Arbor, MI 48109, USA

{zakir, jdkasten, mibailey, jhalderm}@umich.edu

ABSTRACT
We report the results of a large-scale measurement study of the
HTTPS certiﬁcate ecosystem—the public-key infrastructure that un-
derlies nearly all secure web communications. Using data collected
by performing 110 Internet-wide scans over 14 months, we gain
detailed and temporally ﬁne-grained visibility into this otherwise
opaque area of security-critical infrastructure. We investigate the
trust relationships among root authorities, intermediate authorities,
and the leaf certiﬁcates used by web servers, ultimately identify-
ing and classifying more than 1,800 entities that are able to issue
certiﬁcates vouching for the identity of any website. We uncover
practices that may put the security of the ecosystem at risk, and we
identify frequent conﬁguration problems that lead to user-facing
errors and potential vulnerabilities. We conclude with lessons and
recommendations to ensure the long-term health and security of the
certiﬁcate ecosystem.

Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: [Network Proto-
cols]; C.2.3 [Computer-Communication Networks]: [Network
Operations]; E.3 [Data Encryption]: [Public key cryptosystems,
Standards]

Keywords
TLS; SSL; HTTPS; public-key infrastructure; X.509; certiﬁcates;
security; measurement; Internet-wide scanning

1.

INTRODUCTION

Nearly all secure web communication takes place over HTTPS
including online banking, e-mail, and e-commerce transactions.
HTTPS is based on the TLS encrypted transport protocol and a
∗Permission to make digital or hard copies of part or all of this work
is granted without fee provided that copies are not distributed for
proﬁt and that copies bear this notice and the full citation on the
ﬁrst page. Copyright is held by the authors. This more permissive
statement supersedes the ACM-mandated statement below, which
has no effect. Please join us in supporting open access publication.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504755.

supporting public key infrastructure (PKI) composed of thousands
of certiﬁcate authorities (CAs)—entities that are trusted by users’
browsers to vouch for the identity of web servers. CAs do this by
signing digital certiﬁcates that associate a site’s public key with its
domain name. We place our full trust in each of these CAs—in
general, every CA has the ability to sign trusted certiﬁcates for any
domain, and so the entire PKI is only as secure as the weakest CA.
Nevertheless, this complex distributed infrastructure is strikingly
opaque. There is no published list of signed website certiﬁcates
or even of the organizations that have trusted signing ability. In
this work, we attempt to rectify this and shed light on the HTTPS
certiﬁcate ecosystem.

Our study is founded on what is, to the best of our knowledge,
the most comprehensive dataset of the HTTPS ecosystem to date.
Between June 2012 and August 2013, we completed 110 exhaustive
scans of the public IPv4 address space in which we performed TLS
handshakes with all hosts publicly serving HTTPS on port 443. Over
the course of 14 months, we completed upwards of 400 billion SYN
probes and 2.55 billion TLS handshakes, collecting and parsing
42.4 million unique X.509 certiﬁcates from 109 million hosts. On
average, each of our scans included 178% more TLS hosts and
115% more certiﬁcates than were collected in earlier studies of the
certiﬁcate authority ecosystem [14], and we collected 736% more
unique certiﬁcates in total than any prior study of HTTPS [16].

Using this dataset, we investigate two classes of important security
questions, which relate to the behavior of CAs and to site certiﬁcates.
Certiﬁcate Authorities We analyze the organizations involved
in the HTTPS ecosystem and identify 1,832 CA certiﬁcates, which
are controlled by 683 organizations including religious institutions,
museums, libraries, and more than 130 corporations and ﬁnancial
institutions. We ﬁnd that more than 80% of the organizations with
a signing certiﬁcate are not commercial certiﬁcate authorities and
further investigate the paths through which organizations are acquir-
ing signing certiﬁcates. We investigate the constraints on these CA
certiﬁcates and ﬁnd that only 7 CA certiﬁcates use name constraints,
and more than 40% of CA certiﬁcates have no path length constraint.
We identify two sets of misissued CA certiﬁcates and discuss their
impact on the security of the ecosystem.
Site Certiﬁcates We analyze leaf certiﬁcates used by websites
and ﬁnd that the distribution among authorities is heavily skewed
towards a handful of large authorities, with three organizations con-
trolling 75% of all trusted certiﬁcates. Disturbingly, we ﬁnd that the
compromise of the private key used by one particular intermediate
certiﬁcate would require 26% of HTTPS websites to immediately
obtain new certiﬁcates. We provide an up-to-date analysis on the
keys and signatures being used to sign leaf certiﬁcates and ﬁnd
that half of trusted leaf certiﬁcates contain an inadequately secure
1024-bit RSA key in their trust chain and that CAs were continuing

291to sign certiﬁcates using MD5 as late as April 2013. We ﬁnd that
5% of trusted certiﬁcates are for locally scoped names or private
IP address space (and therefore do not protect against man-in-the-
middle attacks) and that 12.7% of hosts serving certiﬁcates signed
by trusted CAs are serving them in a manner that will cause errors
in one or more modern web browsers.

Lastly, we examine adoption trends in the HTTPS ecosystem from
the past year, discuss anomalies we noticed during our analysis, and
provide high-level lessons and potential paths forward to improve the
security of the HTTPS ecosystem security. We ultimately hope that
this global perspective and our analysis will inform future decisions
within the security community as we work towards a more secure
PKI. In order to facilitate future research on this critical ecosystem,
we are releasing our dataset to the research community, including 42
million certiﬁcates and historical records of the state of 109 million
HTTPS server IP addresses. This data and up-to-date metrics can
be found at https://httpsecosystem.org/.

2. BACKGROUND

In this section, we present a brief review of TLS, digital certiﬁ-
cates and their respective roles within the HTTPS ecosystem. We
recommend RFC 5280 [11] for a more in-depth overview of the
TLS public key infrastructure.
Transport Layer Security (TLS) Transport Layer Security (TLS)
and its predecessor Secure Sockets Layer (SSL) are cryptographic
protocols that operate below the application layer and provide end-to-
end cryptographic security for a large number of popular application
protocols, including HTTPS, IMAPS, SMTP, and XMPP [12]. In the
case of HTTPS, when a client ﬁrst connects, the client and server
complete a TLS handshake during which the server presents an
X.509 digital certiﬁcate, which is used to help identify and authenti-
cate the server to the client. This certiﬁcate includes the identity of
the server (e.g. website domain), a temporal validity period, a public
key, and a digital signature provided by a trusted third party. The
client checks that the certiﬁcate’s identity matches the requested
domain name, that the certiﬁcate is within its validity period, and
that the digital signature of the certiﬁcate is valid. The certiﬁcate’s
public key is then used by the client to share a session secret with
the server in order to establish an end-to-end cryptographic channel.
Certiﬁcate Authorities Certiﬁcate authorities (CAs) are trusted
organizations that issue digital certiﬁcates. These organizations are
responsible for validating the identity of the websites for which they
provide a digital certiﬁcate. They cryptographically vouch for the
identity of a website by digitally signing the website’s leaf certiﬁ-
cate using a browser-trusted signing certiﬁcate. Modern operating
systems and web browsers ship with a set of these trusted signing
certiﬁcates, which we refer to as root certiﬁcates. In all but a small
handful of cases, all CAs are trusted unequivocally: a trusted CA
can sign for any website. For example, a certiﬁcate for google.com
signed by a German University is technically no more or less valid
than a certiﬁcate signed by Google Inc., if both organizations control
a trusted signing certiﬁcate.

The set of root authorities is publicly known because it is included
with the web browser or operating system. However, root authorities
frequently sign intermediate certiﬁcates, which generally retain all
of the signing privileges of root certiﬁcates. This practice not only
allows root authorities to store their signing keys ofﬂine during daily
operation, but also allows authorities to delegate their signing ability
to other organizations. When a server presents a leaf certiﬁcate, it
must include the chain of authorities linking the leaf certiﬁcate to a
trusted root certiﬁcate. This bundle of certiﬁcates is referred to as a
certiﬁcate chain. We refer to certiﬁcates that have a valid chain back

to a trusted root authority as trusted certiﬁcates. It is important to
note that while intermediate authorities provide additional ﬂexibility,
the set of intermediate authorities is not publicly known until they
are found in the wild—we ultimately do not know the identity of
the organizations that can sign any browser-trusted certiﬁcate.

3. RELATED WORK

Several groups have previously studied HTTPS deployment and
the certiﬁcate ecosystem. Most similar to our work, Holz et al.
published a study in 2011 that focused on the dynamics of leaf cer-
tiﬁcates and the distribution of certiﬁcates among IP addresses, and
attempted to roughly classify the overall quality of served certiﬁ-
cates. The study was based on regular scans of the Alexa Top 1 Mil-
lion Domains [1] and through passive monitoring of TLS trafﬁc on
the Munich Scientiﬁc Research Network [17]. The group collected
an average 212,000 certiﬁcates per scan and a total 554,292 unique
certiﬁcates between October 2009 and March 2011, approximately
1.3% of the number we have seen in the past year. Their passive
experiments resulted in an average of 130,000 unique certiﬁcates.
The aggregate size across both datasets was not speciﬁed.

We are aware of two groups that have performed scans of the
IPv4 address space in order to analyze aspects of the certiﬁcate
ecosystem. In 2010, the Electronic Frontier Foundation (EFF) and
iSEC partners performed a scan over a three-month period as part
of their SSL Observatory Project [14]. The project focused on
identifying which organizations controlled a valid signing certiﬁcate.
The EFF provided the ﬁrst recent glimpse into the HTTPS certiﬁcate
ecosystem, and while their study was never formally published,
we owe the inspiration for our work to their fascinating dataset.
Heninger et al. later performed a scan of the IPv4 address space in
2012 as part of a global study on cryptographic keys [16]. Similarly,
Yilek et al. performed daily scans of 50,000 TLS servers over several
months to track the Debian weak key bug [35]. We follow up on the
results provided in these earlier works, adding another data point in
the study of Debian weak keys and other poorly generated keys.

Most recently, Akhawe et al. published a study focusing on the
usability of TLS warnings presented by web servers, deriving the
logic used by web browsers to validate certiﬁcates, and making
recommendations on how to better handle these error conditions [4].
Akhawe et al. also discuss differences in how OpenSSL and Mozilla
NSS validate certiﬁcates, which we arrived at simultaneously.

Our study differs from previous work in the methodology we
applied, the scope of our dataset, and the focus of our questions.
While Holz et al. explored several similar questions on the dynamics
of leaf certiﬁcates, the dataset we consider is more than 40 times
larger, which we believe provides a more comprehensive view of
the certiﬁcate ecosystem. The certiﬁcates found by scanning the
Alexa Top 1 Million Domains provide one perspective on the CA
ecosystem that is weighted towards frequently accessed websites.
However, many of the questions we address are dependent on a more
comprehensive viewpoint. The CA ecosystem is equally dependent
on all certiﬁcate authorities and, as such, we are interested in not
only the most popular sites (which are likely to be well conﬁgured)
but also the potentially less visible certiﬁcates used by smaller sites
and network devices. This difference is clearly visible in the number
of CA certiﬁcates seen among the Alexa Top 1 Million sites. If our
study had been founded only on these domains, we would have seen
less than 30% of the trusted certiﬁcate authorities we uncovered,
providing us with a less accurate perspective on the state of the
ecosystem. Similarly, we build on many topics touched on by the
EFF study, but we present updated and revised results, ﬁnding more
than 3.5 times the number of hosts serving HTTPS than were seen
three years ago and a changed ecosystem. Ultimately, we consider a

292different set of questions that are more focused on the dynamics of
CAs and the certiﬁcates they sign, using a dataset that we believe
provides a more complete picture than any previous study.

4. METHODOLOGY

Our data collection (which is ongoing as this paper goes to press)
involves repeatedly surveying the certiﬁcate ecosystem through
comprehensive scans of the IPv4 address space conducted at regular
intervals. In this section, we describe how we perform these scans,
collect and validate X.509 certiﬁcates, and ﬁnally, analyze our data.
Each scan consists of three stages: (1) discovering hosts with
port 443 (HTTPS) open by enumerating the public address space,
(2) completing a TLS handshake with responsive addresses and
collecting the presented certiﬁcate chains, and (3) performing cer-
tiﬁcate parsing and validation. The scan process requires 18 hours
to complete, including ﬂushing all changes to the backend database,
and is implemented in approximately 13,000 SLOC of C. The scans
in this work were conducted using the regular ofﬁce network at the
University of Michigan Computer Science and Engineering division,
from a single Dell Precision workstation with a quad-core Intel
Xeon E5520 processor and 24 GB of memory. The access layer of
the building runs at 10 Gbps and the building uplink to the rest of
the campus is an aggregated 2 × 10 gigabit port channel.
4.1 Host Discovery

In the ﬁrst stage of each scan, we ﬁnd hosts that accept TCP
connections on port 443 (HTTPS) by performing a single-packet
TCP SYN scan of the public IPv4 address space using ZMap [13].
We choose to utilize ZMap based on its performance characteristics—
ZMap is capable of completing a single packet scan of the IPv4
address space on a single port in approximately 45 minutes. Using
ZMap, we send a single TCP SYN packet to every public IPv4
address and add hosts that respond with a valid SYN-ACK packet
to an in-memory Redis queue for further processing. Our previous
work ﬁnds an approximate 2% packet drop rate when performing
single packet scans on our network [13]. In order to reduce the
impact of packet loss on our long-term HTTPS results, we also
consider hosts that successfully completed a TLS handshake in the
last 30 days for follow-up along with the hosts found during the
TCP SYN scan.
4.2 Collecting TLS Certiﬁcates

In the second processing stage, we complete a TLS handshake
with the hosts we identiﬁed in the ﬁrst stage and retrieve the pre-
sented certiﬁcate chain. We perform these TLS handshakes in an
event-driven manner using libevent and OpenSSL [24, 33]. Specif-
ically, we utilize libevent’s OpenSSL-based bufferevents, which
allow us to deﬁne a callback that is invoked after a successful
OpenSSL TLS negotiation. The retrieval process runs in paral-
lel to the TCP SYN scan and maintains 2,500 concurrent TLS
connections.

In order to emulate browser validation, we designed a custom
validation process using the root browser stores from Apple Mac OS
10.8.2, Windows 7, and Mozilla Firefox. We ﬁnd that a large number
of web servers are misconﬁgured and present incomplete, misor-
dered, or invalid certiﬁcate chains. OpenSSL validates certiﬁcates in
a more stringent manner than most web browsers, including Mozilla
Firefox and Google Chrome, which utilize Mozilla NSS [27] to
perform certiﬁcate validation. To simulate the behavior of modern
web browsers, we take the following corrective steps:

intermediate certiﬁcates are provided, but are in the incorrect
order.

2. We add previously seen intermediate authorities into OpenSSL’s

root store. This allows us to validate any certiﬁcate signed by
a previously encountered intermediate CA regardless of the
presented certiﬁcate chain.

3. Following each scan, we check certiﬁcates without a known
issuer against the set of known authorities and revalidate any
children for which there is a newly found issuer. This resolves
the case where an intermediate is later found in a subsequent
scan.

We parse collected TLS certiﬁcates using OpenSSL and maintain

a PostgreSQL database of parsed data and historical host state.
4.3 Reducing Scan Impact

We recognize that our scans can inadvertently trigger intrusion
detection systems and may upset some organizations. Many net-
work administrators perceive port scans as the preliminary step in a
targeted attack and in most cases are unable to recognize that their
systems are not being uniquely targeted or that our research scans
are not malicious in nature.

In order to minimize the impact of our scans and to avoid trigger-
ing intrusion detection systems, we scanned addresses according to
a random permutation over a twelve hour period from a block of 64
sequential source IP addresses. When we perform a host discovery
scan, an individual destination address receives at most one probe
packet. At this scan rate, a /24-sized network receives a probe packet
every 195 s, a /16 block every 0.76 s, and a /8 network block every
3 ms on average. In the certiﬁcate retrieval phase, we perform only
one TLS handshake with each host that responded positively during
host discovery.

In order to help users identify our intentions, we serve a simple
webpage on all of the IP addresses we use for scanning that explains
the purpose of our scanning and how to request that hosts be ex-
cluded from future scans. We also registered reverse DNS records
that identify scanning hosts as being part of an academic research
study. Throughout this study, we have coordinated with our local
network administrators to promptly handle inquiries and complaints.
Over the course of 14 months, we received e-mail correspondence
from 145 individuals and organizations. In most cases, notiﬁcations
were informative in nature—primarily notifying us that we may
have had infected machines—or were civil requests to be excluded
from future scans. The vast majority of these requests were received
at our institution’s WHOIS abuse address or at the e-mail address
published on the scanner IPs. In these cases, we responded with
the purpose of our scans and excluded the sender’s network from
future scans upon request. Ultimately, we excluded networks be-
longing to 91 organizations or individuals and totaling 3,753,899
addresses (0.11% of the public IPv4 address space). Two requests
originating from Internet service providers accounted for 49% of
the excluded addresses. During our scans, we received 12 actively
hostile responses that threatened to retaliate against our institution
legally or via denial-of-service (DoS) attacks on network. In 2 cases
we received retaliatory DoS trafﬁc, which was automatically ﬁltered
by our upstream provider.

We discuss the ethical implications of performing active scanning
and provide more details about the steps we take to reduce scan
impact in our previous work [13].
4.4 Data Collection Results

1. If the presented chain is invalid, we attempt to reorder the
certiﬁcate chain. This resolves the situation when the correct

We completed 110 successful scans of the IPv4 address space,
completing 2.55 billion TLS handshakes, between June 6, 2012 and

293Scan
Date Completed
Hosts with port 443 Open
Hosts serving HTTPS
Unique Certiﬁcates
Unique Trusted Certiﬁcates
Alexa Top 1 Mil. Certiﬁcates
Extd. Validation Certiﬁcates

EFF [14]
2010-8
16,200,000
7,704,837
4,021,766
1,455,391
(unknown)
33,916

Ps & Qs [16]
2011-10
28,923,800
12,828,613
5,758,254
1,956,267
89,953
71,066

First Representative
2013-3-22
33,078,971
21,427,059
8,387,200
3,230,359
141,231
103,170

2012-6-10
31,847,635
18,978,040
7,770,385
2,948,397
116,061
89,190

Latest
2013-8-4
36,033,088
24,442,824
9,031,798
3,341,637
143,149
104,167

Total
Unique
(unknown)
108,801,503
42,382,241
6,931,223
261,250
186,159

Table 1: Internet-wide Scan Results — Between June 6, 2012 and August 4, 2013, we completed 110 scans of the IPv4 address space on
port 443 and collected HTTPS certiﬁcates from responsive hosts.

August 4, 2013. Like to Holz et al. [17], we note that a large number
of hosts on port 443 do not complete a TLS handshake. In our
case we ﬁnd that only 67% of hosts with port 443 open successfully
complete a TLS handshake.

We retrieved an average of 8.1 million unique certiﬁcates during
each scan, of which 3.2 million were browser trusted. The remaining
4.9 million untrusted certiﬁcates were a combination of self-signed
certiﬁcates (48%), certiﬁcates signed by an unknown issuer (33%),
and certiﬁcates signed by a known but untrusted issuer (19%). In to-
tal, we retrieved 42.4 million distinct certiﬁcates from 108.8 million
unique IP addresses over the past eleven months. Of the hosts that
performed complete TLS handshakes, an average of 48% presented
browser-trusted X.509 certiﬁcates.

In our largest and most recent scan on August 4, 2013, we re-
trieved 9.0 million certiﬁcates from 24.4 million IP addresses of
which 3.3 million were browser trusted. We show a comparison
with previous work in Table 1. We also note that over 95% of trusted
certiﬁcates and over 98% of hosts serving trusted certiﬁcates are
located in only ten countries, shown in Table 2.

Authorities Certiﬁcates

Country
United States
United Kingdom
Belgium
Israel
Netherlands
Japan
Germany
France
Australia
Korea

30.34%
3.27%
2.67%
1.63%
2.18%
3.38%
21.28%
3.98%
0.81%
1.41%

Hosts
77.55% 75.63%
10.88% 18.15%
1.51%
3.29%
0.87%
2.56%
0.49%
1.32%
1.06%
1.19%
0.35%
0.88%
0.14%
0.38%
0.11%
0.34%
0.24%
0.09%

Table 2: Top 10 Countries Serving Trusted Certiﬁcates

In this study, we choose to perform non-temporal analysis on
the results from a representative scan, which took place on March
22, 2013 (highlighted column in Table 1). We choose to focus
on the results from a single point-in-time instead of considering all
certiﬁcates found over the past year due to varying lifespans. We ﬁnd
that organizations utilize certiﬁcates of differing validity periods
and that in some cases, some devices have presented a different
certiﬁcate in all of our scans. If we considered all certiﬁcates from
the past year instead instead of what was hosted at a single point in
time, these short lived certiﬁcates would impact the breakdown of
several of our statistics.
4.5 Is Frequent Scanning Necessary?

Frequent repeated scans allow us to ﬁnd additional certiﬁcates
that would not otherwise be visible. We can illustrate this effect

by considering the 36 scans we performed between January 1 and
March 31, 2013 and analyzing the number of scans in which each
certiﬁcate was seen. We ﬁnd that 54% of browser-trusted certiﬁcates
appeared in all 36 scans and that 70% of trusted certiﬁcates appear
in more than 30 of our 36 scans. However, surprisingly, we ﬁnd that
33% of self-signed certiﬁcates appeared in only one scan during the
three month period. Many of these self-signed certiﬁcates appear to
be served by embedded devices that generate new certiﬁcates on a
regular basis. We found an average of 260,000 new certiﬁcates per
scan during this period. The distribution is shown in Figure 1. Ulti-
mately, we ﬁnd that there are considerable advantages to scanning
more frequently in obtaining a global perspective on the certiﬁcates
valid at any single point in time, as well as the changing dynamics
of the ecosystem over extended periods.
4.6 Server Name Indication Deployment

Both Holz [17] and Akhawe [4] cite Server Name Indication (SNI)
as one of the reasons they choose to scan the Alexa Top 1 Million
Domains and perform passive measurement instead of performing
full IPv4 scans. Server Name Indication is a TLS extension that
allows a client to specify the hostname it is attempting to connect
to from the start of the TLS negotiation [9]. This allows a server to
present multiple certiﬁcates on a single IP address and to ultimately
host multiple HTTPS sites off of the same IP address that do not
share a single certiﬁcate. Because we connect to hosts based on
IP address in our scans and not by hostname, we would potentially
miss any certiﬁcates that require a speciﬁc hostname.

In order to better understand the deployment of SNI and its impact
on our results, we scanned the Alexa 1 Million Domains [1] using the
same methodology we used for scanning the IPv4 address space. Of
the Alexa Top 1 Million Domains, 323,502 successfully performed
TLS handshakes and 129,695 of the domains presented browser-
trusted certiﬁcates. Of the domains that completed a TLS handshake,
only 0.7% presented certiﬁcates we had not previously seen in the
most recent scan of the IPv4 address space. We cannot bound the
number of hosts missed due to the deployment of SNI and it is clear
that a small number of websites are adopting SNI, but we believe
that our results are representative of certiﬁcate usage patterns. One
reason SNI has not seen widespread deployment is because Internet
Explorer on Windows XP does not support SNI. Although Windows
XP market share is on the decline, it still represents more than a
third of all operating system installations [26].

5. CERTIFICATE AUTHORITIES

The security of the HTTPS ecosystem is ultimately dependent on
the set of CAs that are entrusted to sign browser-trusted certiﬁcates.
Except in a small handful of cases, any organization with control of
a signing certiﬁcate that chains to a browser-trusted root can sign
a leaf certiﬁcate for any domain. As such, the entire ecosystem is

294as fragile as the weakest CA. However, because there is no central,
public registry of browser-trusted intermediate authorities, the or-
ganizations that control these signing certiﬁcates may be unknown
until certiﬁcates they have signed are spotted in the wild. In this
section, we describe the CAs we found during our scans and some
of the practices they employ.
5.1 Identifying Trusted Authorities

We observed 3,788 browser-trusted signing certiﬁcates between
April 2012 and August 2013 of which 1,832 were valid on March
22, 2013. All but seven of these signing certiﬁcates can sign a
valid browser-trusted certiﬁcate for any domain. This is 25% more
than were found by the EFF in 2010 and more than 327% more
than were found by Ristic [31]. Holz et al. ﬁnd 2,300 intermediate
certiﬁcates in their active scanning [17]. However, this count appears
to represent both browser-trusted and untrusted intermediates, of
which we ﬁnd 121,580 in our March 22 scan and 417,970 over the
past year. While the raw number of signing certiﬁcates and HTTPS
ecosystem as a whole have grown signiﬁcantly over the past three
years, we were encouraged to ﬁnd that the number of identiﬁed
organizations has not grown signiﬁcantly.

These 1,832 signing certiﬁcates belong to 683 organizations and
are located in 57 countries. While a large number of countries have
jurisdiction over at least one trusted browser authority, 99% of the
authorities are located in only 10 countries. We show the breakdown
in Table 2. We classiﬁed the types of the organizations that control
a CA certiﬁcate, which we show in Table 3. We were surprised
to ﬁnd that religious institutions, museums, libraries, and more
than 130 corporations and ﬁnancial institutions currently control an
unrestricted CA certiﬁcate. Only 20% of organizations that control
signing certiﬁcates are commercial CAs. We were unable to identify
15 signing certiﬁcates due to a lack of identiﬁcation information
or ambiguous naming. We also note that while there has been a
2% increase in the raw number of valid signing certiﬁcates over
the past year, we have found negligible change in the number of
organizations with control of a signing certiﬁcate.
5.2 Sources of Intermediates

Organizations other than commercial CAs control 1,350 of the
1,832 (74%) browser-trusted signing certiﬁcates, which raises the
question of who is providing intermediate certiﬁcates to these orga-
nizations. We ﬁnd that 276 of the 293 academic institutions along
with all of the libraries, museums, healthcare providers, and reli-
gious institutions were signed by the German National Research and
Education Network (DFN), which offers intermediate certiﬁcates to
all members of the German network. DFN provided CA certiﬁcates
to 311 organizations in total, close to half of the organizations we
identiﬁed. While DFN has provided a large number of interme-
diate authorities to German institutions, we ﬁnd no evidence that
any are being used inappropriately. However, as we will discuss in
Section 9, the attack surface of the certiﬁcate ecosystem could be
greatly reduced by limiting the scope of these signing certiﬁcates.
The largest commercial provider of intermediate certiﬁcates is
GTE CyberTrust Solutions, Inc., a subsidiary of Verizon Business,
which has provided intermediate signing certiﬁcates to 49 third-party
organizations ranging from Dell Inc. to Louisiana State University.
Comodo (under the name The USERTRUST Network) provided
intermediates to 42 organizations and GlobalSign to 20. We also
saw a number of commercial authorities that provided a smaller
number of certiﬁcates to seemingly unrelated entities. For exam-
ple, VeriSign, Inc. provided intermediates for Oracle, Symantec,
and the U.S. Government; SwissSign AG provided certiﬁcates for
Nestle, Trend Micro, and other Swiss companies; StartCom Ltd.

Figure 1: CDF of Scan Presence by Certiﬁcate — We performed
36 scans from 1/2013 to 3/2013. Here, we show the number of
scans in which each certiﬁcate was found. We note that over 30%
of self-signed certiﬁcates were only found in one scan.

Figure 2: CDF of Leaf Certiﬁcates by CA — We ﬁnd that 90% of
trusted certiﬁcates are signed by 5 CAs, are descendants of 4 root
certiﬁcates, and were signed by 40 intermediate certiﬁcates.

Figure 3: Validity Periods of Browser Trusted Certiﬁcates —
Trusted CA certs are being issued with validity periods as long as
40 years, far beyond the predicted security of the keys they contain.

 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 5 10 15 20 25 30 35CDF of CertificatesNumber of Scans PresentAll CertificatesTrusted Certificates 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 5 10 15 20 25 30 35 40 45 50Signed Certificatesn most popularCertificate AuthoritiesRoot CertificatesIntermediate Certificates 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 5 10 15 20 25 30 35 40CertificatesValidity Period (in years)Leaf CertificatesIntermediate AuthoritiesRoot Store Authorities295Organization Type
Academic Institution
Commercial CA
Government Agency
Corporation
ISP
IT/Security Consultant
Financial Institution
Unknown
Hosting Provider
Nonproﬁt Org
Library
Museum
Healthcare Provider
Religious Institution
Military

Organizations

Authorities

273
135
85
83
30
29
17
unknown
7
7
5
4
3
1
1

(39.79%)
(19.67%)
(12.39%)
(12.09%)
(4.37%)
(4.22%)
(2.47%)

(1.02%)
(1.02%)
(0.72%)
(0.58%)
(0.43%)
(0.14%)
(0.14%)

292
819
250
191
58
88
49
15
12
15
6
4
4
1
27

(15.93%)
(44.70%)
(13.64%)
(10.42%)
(3.16%)
(4.80%)
(2.67%)
(0.81%)
(0.65%)
(0.81%)
(0.32%)
(0.21%)
(0.21%)
(0.05%)
(1.47%)

Leaf Certiﬁcates
85,277
3,260,454
17,865
30,115
8,126
22,568
2,412
2,535
10,598
11,480
281
35
173
11
9,017

(2.46%)
(94.20%)
(0.51%)
(0.87%)
(0.23%)
(0.65%)
(0.06%)
(0.07%)
(0.30%)
(0.33%)
(0.00%)
(0.00%)
(0.00%)
(0.00%)
(0.26%)

Hosts

85,277
3,260,454
17,865
30,115
8,126
22,568
2,412
2,535
10,598
11,480
281
35
173
11
9,017

(0.92%)
(76.33%)
(0.23%)
(4.80%)
(1.55%)
(0.98%)
(0.03%)
(0.02%)
(14.70%)
(0.11%)
(0.00%)
(0.00%)
(0.00%)
(0.00%)
(0.27%)

Table 3: Types of Organizations with Signing Certiﬁcates — We found 1,832 valid browser-trusted signing certiﬁcates belonging to 683
organizations. We classiﬁed these organizations and ﬁnd that more than 80% of the organizations that control a signing certiﬁcate are not
commercial certiﬁcate authorities.

Parent Company
Symantec
GoDaddy.com
Comodo
GlobalSign
DigiCert Inc
StartCom Ltd.
Entrust, Inc.
Network Solutions
TERENA
Verizon Business

Signed Leaf Certiﬁcates
(34.23%)
1,184,723
(29.13%)
1,008,226
(12.19%)
422,066
170, 006
(4.90%)
(4.19%)
145,232
(2.56%)
88,729
(2.22%)
76,990
62,667
(1.81%)
(1.22%)
42,310
32,127
(0.92%)

Organization
GoDaddy.com, Inc.
GeoTrust Inc.
Comodo CA Limited
VeriSign, Inc.
Thawte, Inc.
DigiCert Inc
GlobalSign
Starﬁeld Technologies
StartCom Ltd.
Entrust, Inc.

Signed Leaf Certiﬁcates
(28.6%)
913,416
(18.4%)
586,376
(11.8%)
374,769
317,934
(10.0%)
(7.2%)
228,779
(4.6%)
145,232
(3.7%)
117,685
94,794
(3.0%)
(2.8%)
88,729
76929
(2.4%)

Table 4: Top Parent Companies — Major players such as Syman-
tec, GoDaddy, and Comodo have acquired smaller CAs, leading to
the 5 largest companies issuing 84.6% of all trusted certiﬁcates.

Table 5: Top Certiﬁcate Authorities — The top 10 commercial
certiﬁcate authorities control 92.4% of trusted certiﬁcates present in
our March 22, 2013 scan.

provided certiﬁcates for The City of Osmio, Inc. and WoSign, Inc;
QuoVadis Limited provided certiﬁcates for Migros and the Arab
Bank Switzerland Ltd.; Entrust.net provided signing certiﬁcates to
Disney, Experian PLC, and TDC Internet; and Equifax provided
intermediates to Google Inc. This is not a clandestine practice, and
several CAs advertise the sale of subordinate CA certiﬁcates.

Several corporations had a company authority in browser root
stores. Approximately 30 of the 149 certiﬁcates in the Mozilla
NSS root store belonged to institutions that we did not classify as
commercial CAs, including Visa, Wells Fargo, Deutsche Telekom
AG and the governments of France, Taiwan, Hong Kong, Japan,
Spain, and the United States.

5.3 Distribution of Trust

While there are 683 organizations with the ability to sign browser-
trusted certiﬁcates, the distribution is heavily skewed towards a small
number of large commercial authorities in the United States. The
security community has previously expressed concern over the sheer
number of signing certiﬁcates [14], but it also worth considering the
distribution of certiﬁcates among various authorities. An increasing
number of signing certiﬁcates may in fact be a healthy sign if it
indicates that authorities are using the new certiﬁcates in order to
reduce the impact of compromise.

As shown in Figure 2, we ﬁnd that more than 90% of browser-
trusted certiﬁcates are signed by the 10 largest commercial CAs,
are descendants of just 4 root certiﬁcates, and are directly signed
by 40 intermediate certiﬁcates. Several large companies have ac-
quired many of the smaller, previously independent commercial
CAs. Symantec owns Equifax, GeoTrust, TC TrustCenter, Thawte,
and VeriSign; GoDaddy owns Starﬁeld Technologies and ValiCert;
and Comodo owns AddTrust AB, eBiz Networks, Positive Software,
RegisterFly, Registry Pro, The Code Project, The USERTRUST
Network, WebSpace-Forum e.K., and Wotone Communications.
These consolidations ultimately allow three organizations (Syman-
tec, GoDaddy, and Comodo) to control 75% of the browser-trusted
certiﬁcates seen in our study. We list the top 10 parent organizations
in Table 4 and the top 10 commercial CAs in Table 5.

There is a long history of commercial CA compromise [8, 30, 32].
In each of these cases, web browsers and operating systems explic-
itly blacklisted the compromised signing certiﬁcate or misissued
certiﬁcates [8, 28]. However, if a compromised signing certiﬁcate
had signed for a substantial portion of the Internet, it would poten-
tially be infeasible to revoke it without causing signiﬁcant disruption
to the HTTPS ecosystem [23]. As such, we would hope that large
commercial authorities would distribute signing among a number
of intermediate certiﬁcates. However, as seen in Figure 2, the exact
opposite is true. More than 50% of all browser-trusted certiﬁcates

296have been directly signed by 5 intermediate certiﬁcates and a single
intermediate certiﬁcate has signed 26% of currently valid HTTPS
certs. If the private key for this intermediate authority were com-
promised, 26% of websites that rely on HTTPS would need to be
immediately issued new certiﬁcates. Until these websites deployed
the new certiﬁcates, browsers would present certiﬁcate warnings for
all HTTPS communication. While it is not technically worrisome
that a small number of organizations control a large percentage
of the CA market, it is worrying that large CAs are not following
simple precautions and are instead signing a large number of leaf
certiﬁcates using a small number of intermediates.
5.4 Browser Root Certiﬁcate Stores

Microsoft, Apple, and Mozilla all maintain a distinct set of trusted
signing certiﬁcates, which we refer to as root authorities. Google
Chrome utilizes the OS root store in Windows and Mac OS and
utilizes the root store maintained by Mozilla on Linux. Combined,
the three groups trust 348 root authorities, but there are large discrep-
ancies between the root certiﬁcates trusted by each organization. For
example, as can be seen in Table 6, Windows trusts 125 additional
authorities that are not present in any other OS or browser.

Systems Valid In
Windows Only
Mozilla Only
Apple Only
Windows & Mozilla
Windows & Apple
Mozilla & Apple
All Browsers

Roots
125
2
26
32
31
3
109

CAs
283
3
30
97
47
3
1,346

Signed
24,873
23
3,410
12,282
9,963
0
8,945,241

Table 6: Differences in Browser and OS Root Stores — While
there are signiﬁcant differences in the root certiﬁcates stores, 99.4%
of trusted certiﬁcates are trusted in all major browsers.

The differences in the root stores lead to 463 partially trusted
CAs. All but a small handful of the partially trusted authorities
belong to government, regional, or specialty issuers. Only one of
the partially trusted CAs, ipsCA, advertised itself as a commercial
authority and sold certiﬁcates to the global market. Incidentally, the
company claims to be “recognized by more than 98% of today’s
desktops” [2]. It fails to mention that its certiﬁcates are not trusted
in Mozilla Firefox or on Mac OS.

Further investigation indicates that ipsCA was in the Mozilla root
store in 2009, but was removed after several violations including
the issuance of embedded-null preﬁx certiﬁcates, the unavailability
of OCSP servers, and the issuance of leaf certiﬁcates with validity
periods beyond the lifetime of the root CA certiﬁcate [34].

These 463 partially trusted authorities have little presence on the
Internet. In total, they have signed certiﬁcates for only 51 domains in
the Alexa Top 1 Million and for one domain in the Alexa Top 10,000
which belongs to mci.ir, an Iranian telecommunications company.
Of the 348 root certiﬁcates, 121 of the authorities never signed any
leaf certiﬁcates seen in our study, and 99.4% of the leaf certiﬁcates
trusted by any browser are trusted in all browsers.
5.5 Name Constraints

While it is not an inherently poor idea to provide signing cer-
tiﬁcates to third-party organizations, these certiﬁcates should be
restricted to a limited set of domains. Instead, all but 7 CAs in
our March 22 scan can sign for any domain. X.509 Name Con-
straints [18] provide a technical mechanism by which parent au-

thorities can limit the domains for which an intermediate signing
certiﬁcate can sign leaf certiﬁcates. Optimally, signing certiﬁcates
provided to third-party organizations, such as universities or corpo-
rations, would utilize name constraints to prevent potential abuse
and to limit the potential damage if the signing certiﬁcate were
compromised.

We ﬁnd that only 7 trusted intermediate authorities out of 1,832
have name constraints deﬁned, of which 3 were labeled as Comodo
testing certiﬁcates. The remaining 4 are:

1. An intermediate provided by AddTrust AB to the Intel is

limited to small a number of Intel owned domains.

2. An intermediate controlled by the U.S. State Department and
provided by the U.S. Government root authority is prevented
from signing certiﬁcates with the .mil top-level domain.

3. An intermediate provided to the Louisiana State University
Health System is limited to a small number of afﬁliated do-
mains.

4. A root certiﬁcate belonging to the Hellenic Academic and
Research Institutions Certiﬁcation Authority is restricted to
the .gr, .eu, .edu, and .org domains.
5.6 Path Length Constraints

A signing authority can limit the number of intermediate authori-
ties that can appear below it in a certiﬁcate chain by specifying an
X.509 path length constraint [18] on the intermediate certiﬁcates that
it signs. This is frequently used to prevent intermediate authorities
from further delegating the ability to sign new certiﬁcates.

In our dataset, we ﬁnd that 43% of signing certiﬁcates do not have
any path length restriction deﬁned. While this may not be a concern
for large commercial CAs, we note that more than 80% of the
intermediate authorities belonging to other types of organizations
(e.g. corporations, academic, and ﬁnancial institutions). While
we saw little evidence of non-commercial CAs providing signing
certiﬁcates to third-party organizations, we did observe governments
using their intermediate authority to sign subordinate CA certiﬁcates
for corporations within their country.
5.7 Authority Key Usage

All of the browser-trusted leaf certiﬁcates in our study were signed
using an RSA key. As shown in Table 8, over 95% of browser
trusted certiﬁcates were signed with 2048-bit RSA keys. We also
note 6 browser-trusted authorities with ECDSA keys belonging
to Symantec, Comodo, and Trend Micro. However, we found no
trusted certiﬁcates that were signed using a ECDSA certiﬁcate.

Surprisingly, we ﬁnd that 243 (13%) of the browser-trusted sign-
ing certiﬁcates were signed using a weaker key than they themselves
contained. In all of these cases, the weakest key was the root author-
ity. While only 58 (15.2%) of the 348 browser root authorities utilize
1024-bit RSA keys, these keys were used to indirectly sign 48.7%
of browser-trusted certiﬁcates. In all of these cases, the CA organi-
zation also controlled a browser-trusted 2048-bit root certiﬁcate that
could be used to re-sign the intermediate certiﬁcate.

NIST recommends that the public stop using 1024-bit keys in
2016 based on the expected computational power needed to compro-
mise keys of this strength [5]. However, as seen in Figure 5, more
than 70% of CA certiﬁcates using 1024-bit keys expire after this
date and 57% of roots using 1024-bit RSA keys have signed children
that expire after 2016. Figure 3 shows how certiﬁcate authorities are
using certiﬁcates valid for up to 40 years—far beyond when their
keys are expected to be compromisable. Most worryingly, it does
not appear that CAs are moving from 1024-bit roots to more secure
keys. As shown in Figure 4, we ﬁnd only a 0.08% decrease in the
number of certiﬁcates dependent on a 1024-bit root authority in the

297Type
ECDSA
RSA (1024-bit)
RSA (2028-bit)
RSA (4096-bit)

Root Authorities
(1.8%)
(16.0%)
(61.0%)
(21.2%)

6
53
202
70

Recursively Signed
(0%)
(48.6%)
(48.4%)
(2.9%)

0
1,694,526
1,686,814
102,139

Table 7: Key Distribution for Trusted Roots — The distribution
of keys for root certiﬁcates shipped with major browsers and OSes.

Key Type
ECDSA
RSA (1024-bit)
RSA (2048-bit)
RSA (4096-bit)

Authorities

Signed Leaves

6
134
1,493
198

(0.3%)
(7.3%)
(78.9%)
(10.5%)

0
133,391
3,034,751
16,969

(0%)
(4.2%)
(95.3%)
(0.5%)

Table 8: Key Distribution for Trusted Signing Certiﬁcates

past year. In 2012, 1.4 million new certiﬁcates were issued that were
rooted in a 1024-bit authority, and 370,130 were issued between
January and April 2013.

6. LEAF CERTIFICATES AND HOSTING
Over the last 14 months, we collected 6.93 million unique trusted
certiﬁcates. In our March 22 scan, we observed 3.2 million unique
trusted certiﬁcates from 21.4 million hosts.
In this section, we
discuss the dynamics of these trusted leaf certiﬁcates and the hosts
serving them.
6.1 Keys and Signatures
Public Keys
In line with previous studies, we ﬁnd that over 99%
of trusted leaf certiﬁcates contain RSA public keys. We provide
a breakdown of leaf key types in Table 9. Over the course of the
past year, we found 47 certiﬁcates that contain ECDSA public keys;
none were present in our March 22 scan and none were browser
trusted. Recently, Google began to use ECDSA certiﬁcates for
several services. However, these sites are only accessible through
the use of server name indication (SNI) and so do not appear in our
dataset.

We ﬁnd 2,631 browser-trusted certiﬁcates using 512-bit RSA
keys, which are known to be easily factorable, and 73 certiﬁcates
utilizing 768-bit keys, which have been shown to be factorable with
large distributed computing efforts [20]. While a large number of
these certiﬁcates were found being actively hosted, only 16 have
not yet expired or been revoked. No browser-trusted authorities
have signed any 512-bit RSA keys since August 27, 2012. We
were further encouraged to ﬁnd that less than 4% of valid trusted
certiﬁcates used 1024-bit keys.
Weak Keys
Previous studies have exposed the use of weak keys
in the HTTPS space [16,22,35]. We revisit several of these measure-
ments and provide up-to-date metrics. Following up on the study
performed by Heninger et al. [16], we ﬁnd that 55,451 certiﬁcates
contained factorable RSA keys and are served on 63,293 hosts, a
40% decrease in the total percentage of hosts with factorable keys,
but only a slight decrease (1.25%) in the raw number of hosts found
using factorable keys since 2011. Three of the factorable certiﬁ-
cates are browser trusted; the last was signed on August 9, 2012.
2,743 certiﬁcates contained a Debian weak key [7], of which 96
were browser trusted, a 34% decrease from 2011 [16]. The last
browser-trusted certiﬁcate containing a Debian weak key was signed
on January 25, 2012.

Figure 4: Temporal Trends in Root Key Size — We ﬁnd that
48.7% of browser-trusted leaf certiﬁcates are dependent on 1024-bit
RSA based root authorities, contrary to recommended practice [5].

Figure 5: Expiration of 1024-bit Root Certiﬁcates — This ﬁgure
shows when trusted 1024-bit RSA CA certiﬁcates expire. We note
that more than 70% expire after 2016 when NIST recommends
discontinuing the use of 1024-bit keys.

Figure 6: CDF of Certiﬁcate Removal — We ﬁnd that 20% of
expiring certiﬁcates and 19.5% of revoked certiﬁcates are removed
retroactively (to the right of 0 days).

 1.2 1.3 1.4 1.5 1.6 1.7 1.808/1209/1210/1211/1212/1201/1302/1303/1304/13Browser Trusted Certificates (millions)Scan Date1024-bit Root Authority2048-bit Root Authority 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30Certificate AuthoritiesYears until ExpirationNIST recommended end of 1024-bit key usage 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1-400-350-300-250-200-150-100-50 0 50 100 150 200 250 300 350 400Browser Trusted CertificatesLast Seen Timeline (Days)Expired CertificatesRevoked Certificates298Key Type
RSA (≤ 512-bit)
RSA (768-bit)
RSA (1024-bit)
RSA (1032–2040-bit)
RSA (2048-bit)
RSA (2056–4088-bit)
RSA (4096-bit)
RSA (> 4096-bit)
DSA (all)
ECDSA (all)

All Trusted
2,631
73
341,091
23,888
2,816,757
1,006
74,014
234
17
0

(0.1%)
(0.0%)
(10.5%)
(0.7%)
(86.4%)
(0.0%)
(2.3%)
(0.0%)
(0.0%)
(0.0%)

Valid Trusted
16
0
165,637
105
2,545,693
921
65,780
192
7
0

Table 9: Trusted Leaf Certiﬁcate Public Key Distribution

Type
SHA-1 with RSA Encryption
MD5 with RSA Encryption
SHA-256 with RSA Encryption
SHA-512 with RSA Encryption
MD2 with RSA Encryption
Other

Trusted Certiﬁcates
5,972,001
(98.7%)
(0.54%)
32,905
(0.25%)
15,297
(0.00%)
7
(0.00%)
21
29,705
(0.49%)

Table 10: Trusted Leaf Certiﬁcate Signature Algorithms

Signature Algorithms
In line with the results presented by Holz
et al. [17], we ﬁnd that 98.7% of browser-trusted certiﬁcates are
signed using SHA-1 and RSA encryption. We ﬁnd 22 trusted certiﬁ-
cates with MD2-based signatures and 31,325 with MD5 signatures.
Due to known weaknesses in these hash functions, no organiza-
tions should currently be using them to sign certiﬁcates. The last
certiﬁcate signed with MD5 was issued on April 17, 2013 by Finmec-
canica S.p.A., an Italian defense contractor, more than 4 years after
Sotirov et al. published “MD5 considered harmful today” [32]. We
provide a breakdown of leaf certiﬁcate signature types in Table 10.

Certiﬁcate Depth
Similarly to the EFF and Holz et al., we ﬁnd
that the vast majority (98%) of leaf certiﬁcates are signed by in-
termediate authorities one intermediate away from a root authority.
However we ﬁnd that 61 root authorities directly signed 41,000
leaf certiﬁcates and that there exist leaf certiﬁcates as many as 5
intermediates away from a root authority. All but a handful of the
authorities 4 or more intermediates away from a browser-trusted
root belonged to agencies within the U.S. Federal Government.

We are not aware of any vulnerabilities created by having a long
certiﬁcate chain. However, it is worrisome to see leaf certiﬁcates
directly signed by root authorities, because this indicates that the
root signing key is being actively used and may be stored in a
network-attached system, raising the risk of compromise. If the
signing key were to be compromised, the root certiﬁcate could not
be replaced without updating all deployed browser installations.
If an intermediate authority were used instead to sign these leaf
certiﬁcates, then it could be replaced by the root authority without
requiring browser updates, and the root could be kept ofﬂine during
day-to-day operation.
6.2 Incorrectly Hosted Trusted Certiﬁcates

We ﬁnd that 1.32 million hosts (12.7%) serving once-valid browser-
trusted leaf certiﬁcates are misconﬁgured in a manner such that they
are inaccessible to some clients or are being hosted beyond their
validity period. We show a breakdown of reasons that certiﬁcates
are invalid in Table 11. We note that Mozilla Network Security

Services (NSS) [27], the certiﬁcate validation library utilized by
many browsers, caches previously seen intermediates. Because of
this, many certiﬁcates with invalid trust chains will appear valid in
users’ browsers if the intermediate authorities have previously been
encountered.

Approximately 5.8% of hosts are serving now-expired certiﬁcates,
which will be considered invalid by all browsers. We ﬁnd that 22%
of certiﬁcates are removed retroactively after their expiration and
that 19.5% of revoked certiﬁcates are removed after they appear in a
certiﬁcate revocation list (CRL). We show the distribution of when
certiﬁcates are removed from servers in Figure 6. Another 42.2%
of hosts are providing unnecessary certiﬁcates in the presented trust
chain. Although this practice has no security implications, these
additional certiﬁcates provide no beneﬁt to the client and ultimately
result in a slight performance degradation.

Holz et al. report that 18% of all certiﬁcates are expired. However,
this statistic reﬂected all certiﬁcates, over 25% of which are self-
signed and would already raise a browser error. We instead consider
only certiﬁcates signed by browser-trusted authorities, which would
otherwise be considered valid.

Status
Expired
Not Yet Valid
Revoked
No Trust Chain
Misordered Chain
Incorrect Chain
Unnecessary Root
Optimally Conﬁgured

Hosts

595,168
1,966
28,033
654,667
25,667
11,761
4,365,321
4,657,133

(5.80%)
(0.02%)
(0.27%)
(6.30%)
(0.24%)
(0.14%)
(42.2%)
(45.0%)

Table 11: Common Server Certiﬁcate Problems — We evaluate
hosts serving browser-trusted certiﬁcates and classify common cer-
tiﬁcate and server conﬁguration errors. The number of misconﬁg-
ured hosts indicates that procuring certiﬁcates and correctly conﬁg-
uring them on servers remains a challenge for many users.

6.3 Invalid Authority Types

We ﬁnd that 47 (2.6%) of the 1,832 browser-trusted signing cer-
tiﬁcates are not denoted for signing TLS certiﬁcates for use on the
web. Of these 47 signing certiﬁcates, 28 (60%) are designated for
signing Microsoft or Netscape Server Gated Crypto certiﬁcates, a
now obsolete cryptographic standard that was used in the 1990s in
response to U.S. regulation on the export of strong cryptographic
standards [29].

The remaining 19 signing certiﬁcates are designated for combina-
tions of Code Signing, E-mail Protection, TLS Web Client Authenti-
cation, Time Stamping, and Microsoft Encrypted File System. These
intermediate certiﬁcates were not found in any browser or operat-
ing system root stores but were found being served on public web
servers. It does not appear that any of these authorities were signing
certiﬁcates inappropriately; nobody was attempting to sign a TLS
Web Server Authentication certiﬁcate using an authority marked for
another use. Instead, we found that individuals and organizations
were mistakenly using valid code signing and e-mail certiﬁcates as
the TLS leaf certiﬁcate on their websites.
6.4 Certiﬁcate Revocation

Certiﬁcate authorities can denote that previously issued certiﬁ-
cates should no longer be trusted by publishing their revocation in

299a public certiﬁcate revocation list (CRL). The location of author-
ity CRLs are listed in each signed certiﬁcate. In order to under-
stand why certiﬁcates are being revoked, we fetched and parsed the
CRLs listed in all browser-trusted certiﬁcates. We ﬁnd that 2.5% of
browser-trusted certiﬁcates are eventually revoked by their authority.
We present a breakdown of revocation reasons in Table 9. While
RFC 5280 [11] strongly encourages issuers to provide “meaning-
ful” reason codes for CRL entries, we ﬁnd that 71.7% of issuers
who revoked certiﬁcates do not provide reasons for any of their
revocations.

While 2.5% of certiﬁcates are eventually revoked, we ﬁnd that
only 0.3% of hosts presenting certiﬁcates in our scan were revoked.
We expect that this is because the site operators will request a
certiﬁcate be revoked and simultaneously remove the certiﬁcate
from the web server. As can be seen in Figure 6, more than 80% of
certiﬁcates are removed proactively and were not seen again after
the time of their revocation.

WebTrust for Certiﬁcate Authorities [3], an audit mandated by the
three major root stores, requires that authorities maintain an online
repository that allows clients to check for certiﬁcate revocation
information. However, we ﬁnd that 14 trusted signing certiﬁcates
from 9 organizations fail to include revocation data in at least some
of their certiﬁcates, and in 5 cases do not supply revocation data in
any of their signed certiﬁcates.

7. UNEXPECTED OBSERVATIONS

We observed a variety of unexpected phenomenon during our

scans over the past year. We describe these observations here.
7.1 CA Certs with Multiple Parents

Of the 1,832 browser-trusted signing certiﬁcates we found, 380
shared their subject, public key, and subject key identiﬁer with
another browser-trusted certiﬁcate forming 136 groups of “sibling”
CA certiﬁcates. Because of this, leaf certiﬁcates can have more
than one parent from the browsers’ point of view. We ﬁnd that
only 37.4% of browser trusted leaf certiﬁcates have a single parent;
38.7% have two parents; 12.3% have three; 11.3% have four; and a
small number have 5–9 valid parents. Depending on which parent is
presented in a trust chain, the perceived validity of the leaf certiﬁcate
can change. For example, if the presented intermediate certiﬁcate
has expired, then the leaf certiﬁcate will be considered invalid. We
note that subject key identiﬁed sometimes also speciﬁes additional
constraints such as a constraint on issuer serial number. However, we
ﬁnd that only a handful of certiﬁcates contain additional constraints.
In 86 of the 136 groups of sibling certiﬁcates, the signing cer-
tiﬁcates had differing validity periods.
In four sets, one of the
certiﬁcates was revoked, in a separate four sets, each authority was
in a different browser or OS root store, and in 49 cases the author-
ities were signed by different parent authorities. While previous
studies found evidence of this phenomenon, we were not aware of
the prevalence of this behavior. We are not aware of any security
vulnerabilities that are introduced by this practice, but we do ﬁnd
that 43,674 (1.35%) of the browser-trusted certiﬁcates are presented
with the incorrect parent, which limits their perceived validity (e.g.
the presented CA certiﬁcate expires earlier the leaf certiﬁcate, but
another parent exists with a later expiration date).
7.2 CA Certs with Negative Path Lengths

We ﬁnd that 1,395 browser-trusted CA certiﬁcates have a nega-
tive path length constraint, which renders them unable to sign any
certiﬁcates due to a path length restriction earlier in the trust chain.
These malformed intermediate certiﬁcates were signed by the Gov-
ernment of Korea and provided to educational institutions ranging

Figure 7: Growth in HTTPS Usage — Over the past 14 months,
we observe between 10-25% growth of all aspects of HTTPS usage.

Figure 8: Change in Authority Market Share — In this ﬁgure,
we should the individual growth of the top 10 most proliﬁc certiﬁcate
authorities.

Revocation Reason
Cessation Of Operation
Not Provided
Afﬁliation Changed
Privilege Withdrawn
Unspeciﬁed
Superseded
Key Compromise
Certiﬁcate Hold
CA Compromise
Total

Revoked Certiﬁcates
(64.9%)
101,370
(20.2%)
31514
(4.7%)
7,384
(3.5%)
5,525
4,523
(2.9%)
(2.5%)
3,887
(1.2%)
1,945
(0.0%)
45
2
(0.0%)
156,195

Figure 9: Reasons for Revocation — We ﬁnd that 10,220 (2.5%)
of the browser trusted certiﬁcates seen in our study were eventually
revoked. Both of the “CA Compromised” revocations were due to
the DigiNotar compromise [8].

 0.95 1 1.05 1.1 1.15 1.2 1.2506/1207/1208/1209/1210/1211/1212/1201/1302/1303/1304/1305/13Trusted CertificatesScan DateHTTPS HostsUnique CertificatesTrusted CertificatesAlexa Top 1 Mil. DomainsE.V. CertificatesNetcraft HTTP Hosts 1 1.05 1.1 1.15 1.2 1.25 1.3 1.3506/1207/1208/1209/1210/1211/1212/1201/1302/1303/1304/1305/13Trusted CertificatesScan DateSymantecGoDaddyComodoDigiCertStartComGlobalSign300from elementary schools to universities, libraries, and museums.
However, because they are still technically CA certiﬁcates, web
browsers including Mozilla Firefox and Google Chrome will not
recognize them as valid leaf certiﬁcates.

We do not include these certiﬁcates when referring to the set of
browser-trusted authorities because they are unable to sign any cer-
tiﬁcates and therefore do not have the same inﬂuence as other valid
authorities. However, we note that some less common client imple-
mentations may fail to properly check the path length constraint and
incorrectly treat these as valid. One of these CA certiﬁcates, issued
to a Korean elementary school, was compromised by Heninger [15],
who factored the 512-bit key a few hours after the certiﬁcate expired.
7.3 Mis-issued CA Certiﬁcates

We found one mis-issued signing certiﬁcate during the course of
our study, which was issued for *.EGO.GOV.TR, by Turktrust, a
small Turkish certiﬁcate authority. We found the certiﬁcate served as
a leaf certiﬁcate on what appeared to be an unconﬁgured IIS server
on a Turkish IP address. We saw 487 certiﬁcates that were signed
by Turktrust over the course of our study. All were for Turkish
organizations or the Turkish Government; we saw no evidence of
other mis-issued certiﬁcates.

The certiﬁcate was later found by Google after being used to sign
a Google wildcard certiﬁcate [21] and was revoked by Turktrust on
December 26, 2012. It was last seen in our scans on December 27,
2012.
7.4 Site Certiﬁcates with Invalid Domains

We ﬁnd that 4.6% (149,902) of browser-trusted certiﬁcates con-
tain a common name (CN) or subject alternate name for a locally
scoped domain or private IP address. Because these names are not
fully qualiﬁed, the intended resource is ambiguous and there is no
identiﬁable owner. As such, these local domain names frequently
appear on more than one certiﬁcate. In one example, there are 1,218
browser-trusted certiﬁcates for the domain mail owned by organiza-
tions ranging from the U.S. Department of Defense to the Lagunitas
Brewing Company.

The vast majority of certiﬁcates appear to be related to mail ser-
vices. Of the 157,861 certiﬁcates with locally scoped names, 25,964
contain the name exchange (Microsoft Exchange Mail Server) and
99,773 contain a variation on the name mail. More than 100,000 of
the certiﬁcates contain a domain ending in .local.

We suspect that certiﬁcates include these locally scoped names in
order to facilitate users that are part of an Active Directory domain
in connecting to their local Exchange mail server. In this scenario,
the integrated DNS service in Active Directory will automatically
resolve locally scoped names to the correct server on the domain.
However, these clients will receive a name mismatch error if the
TLS certiﬁcate presented by the Exchange Server does not match
the locally scoped name that was originally resolved. Instead of
requiring users to use the fully qualiﬁed domain name (FQDN) of
the Exchange Server unlike other servers on the domain, certiﬁcate
authorities include the local name of the Exchange server. In the
case of certiﬁcates ending in .local, Active Directory Forests are
generally rooted in an FQDN. In cases where organizations have
not registered an FQDN for their forest, Active Directory elects to
use the .local TLD.

Unfortunately, this practice does not provide security against man-
in-the-middle attacks. It is trivial to procure a certiﬁcate with the
same locally scoped name as another organization. Because there is
no identiﬁable owner for the domain, both certiﬁcates are equally
valid, and the subsequent certiﬁcate can be used to impersonate the
original organization.

8. ADOPTION TRENDS

We observe a steady, linear increase in nearly all aspects of
HTTPS adoption between June 2012 and April 2013, as shown
in Figure 7. Most notably, there is a 23.0% increase in the number
of Alexa Top 1 Million domains serving trusted certiﬁcates and a
10.9% increase in the number of unique browser-trusted certiﬁcates
found during each scan. During this time, the Netcraft Web survey
ﬁnds only a 2.2% increase in the number of active sites that respond
over HTTP [25]. Based on the Netcraft Survey, we ﬁnd an 8.5%
increase in the number of websites utilizing HTTPS from 1.61% to
1.75%. This indicates that the increase in the number of certiﬁcates
is not solely dependent on the growth of the Internet, but that there is
an increase in the adoption of HTTPS in existing sites. We also note
a 16.8% increase in the number of extended validation certiﬁcates, a
19.6% increase in the number of hosts serving HTTPS on port 443,
and an 11.1% increase in the total number of TLS certiﬁcates over
this period.

The market share of each authority did not change drastically
over the past year. In terms of number of valid signed leaf certiﬁctes,
Symantec grew 6%, GoDaddy 13%, and Comodo 17%. During this
time, there was a 10.9% increase in the global number of unique
valid browser-trusted certiﬁcates. StartCom, a smaller authority
based in Israel that offers free basic certiﬁcates, grew by 32% over
the course of the year, from 2.17% to 2.56% market share. We plot
the growth of the top authorities in Figure 8.

9. DISCUSSION

Analyzing the certiﬁcate authority ecosystem from a global per-
spective reveals several current practices that put the entire HTTPS
ecosystem at risk. In this section, we discuss our observations and
possible paths forward.

Ignoring Foundational Principles
The security community has
several widely accepted best practices such as the principle of least
privilege and defense in depth. However, these guidelines are not
being well applied within one of our most security critical ecosys-
tems. For instance, there are several technical practices already at
our disposal for limiting the scope of a signing certiﬁcate, including
setting name or path length constraints and distributing leaf certiﬁ-
cates among a large number intermediate certiﬁcates. There are
clear cases for using these restrictions, but the vast majority of the
time, CAs are not fully utilizing these options.

One example of how defense in depth successfully prevented
compromise can be seen in the 1,400 signing certiﬁcates that were
mis-issued to organizations in South Korea (Section 7.2). In this
case, a path length constraint on a grandparent certiﬁcate prevented
this error from becoming a massive vulnerability. To put this in
context, if defense in depth had not been practiced, the erroneous
action of a single certiﬁcate authority would have tripled the number
of organizations controlling a valid signing certiﬁcate overnight.
Unfortunately, while a path length constraint was in place for this
particular situation, more than 40% of CA certiﬁcates do not have
any constraints in place to prevent this type of error and only a small
handful use name constraints.

In a less fortunate example, Turktrust accidentally issued a sign-
ing certiﬁcate to one of its customers that ultimately signed a valid
certiﬁcate for *.google.com (Section 7.3). If name or path con-
straints had been applied to Turktrust’s CA intermediate certiﬁcate,
the incident could have been avoided or, at the very least, reduced
in scope. In other situations, the risk associated with compromise of
a single signing certiﬁcate could be decreased by simply spreading
issuance across multiple certiﬁcates (Section 5.3).

301Standards and Working Groups
The CA/Browser Forum is a
voluntary working group composed of certiﬁcate authorities and In-
ternet browser software vendors. The group has recently attempted
to resolve many of the security risks previously introduced by cer-
tiﬁcate authorities, and in November 2011, the it adopted guidelines
for certiﬁcate authorities [10] that touch on many of the concerns
we raise.

However with only 20% of the organizations controlling signing
certiﬁcates being commercial certiﬁcate authorities and less than
25% of commercial authorities participating in the workgroup, there
remains a disconnect. It is unclear how many organizations are
aware of the existence of the baseline standard, but it is clear that a
large number of organizations are either unaware or are choosing
to ignore the forum’s baseline requirements. One example of this
non-adherence can be seen in the agreement to cease the issuance
of certiﬁcates containing internal server names and reserved IP
addresses. Despite the ratiﬁcation of this policy, more than 500
certiﬁcates containing internal server names and which expire after
November 1, 2015 have been issued since July, 1, 2012 by CA/B
Forum members (Section 7.4).

Without any enforcement, members of the CA/Browser Forum
have disregarded adopted policies and we expect that other organiza-
tions are unaware of the standards. There is still work required from
the security community to reign in these additional authorities and
to follow up with members that are disregarding existing policies.

Browsers to Lead the Way Web browser and operating system
maintainers are in a unique position to set expectations for certiﬁcate
authorities, and it is encouraging to see increasing dialogue in the
CA/Browser Forum. However, browsers also have a responsibility to
commit resources towards a healthier ecosystem. Many new, more
secure technologies are dependent on support in common browsers
and web servers. Without browser compatibility, certiﬁcate authori-
ties lack incentive to adopt new, more secure options regardless of
support from the security community.

This can immediately be seen in the deployment of name con-
straints. We ﬁnd that the vast majority of the CA certiﬁcates issued
to non-CAs are used to issue certiﬁcates to a small number of do-
mains and, as such, could appropriately be scoped using name
constraints with little impact on day-to-day operations. Restricted
scopes have been shown to greatly reduce the attack surface of
the CA ecosystem [19], and with 80% of existing signing certiﬁ-
cates belonging to organizations other than commercial certiﬁcate
authorities, there is a clear and present need for name constraints
(Section 5). However, Safari and Google Chrome on Mac OS do
not currently support the critical server name constraint extension.
As a result, any certiﬁcate signed using an appropriately scoped CA
certiﬁcate with the extension marked as critical will be rejected on
these platforms. Therefore, while there is community consensus on
the value of server name constraints, progress will be slow until all
browsers support the extension.

Failing to Recognize Cryptographic Reality
It is encouraging
to ﬁnd that over 95% of trusted leaf certiﬁcates and 95% of trusted
signing certiﬁcates use NIST recommended key sizes [6]. However,
more than 50 root authorities continue to use 1024-bit RSA keys,
the last of which expires in 2040—more than 20 years past recom-
mended use for a key of this size (Section 5.7). Authorities are not
adequately considering long-term consequences of authority certiﬁ-
cates and need to anticipate what the cryptographic landscape will
be in the future. Many of these root certiﬁcates were signed prior to
guidelines against such long-lived CA certiﬁcates. However, today,
we need to be working to resolve these past errors and preparing to
remove now-inappropriate root CAs from browser root stores.

10. CONCLUSION

In this work, we completed the largest known measurement study
of the HTTPS certiﬁcate ecosystem by performing 110 comprehen-
sive scans of the IPv4 HTTPS ecosystem over a 14 month period. We
investigated the organizations that the HTTPS ecosystem depends
on and identiﬁed several speciﬁc practices employed by certiﬁcate
authorities that lead to a weakened public key infrastructure. We
provided updated metrics on many aspects of HTTPS and certiﬁcate
deployment along with adoption trends over the last year. Lastly, we
discussed the high-level implications of our results and make sev-
eral recommendations for strengthening the ecosystem. Our study
shows that regular active scans provide detailed and temporally
ﬁne-grained visibility into this otherwise opaque area of security
critical infrastructure. We are publishing the data from our scans
at https://httpsecosystem.org/ in the hope that it will assist other
researcher in further investigating the HTTPS ecosystem.

Acknowledgments
The authors thank the exceptional sysadmins at the University of
Michigan for their help and support throughout this project. This
research would not have been possible without Kevin Cheek, Chris
Brenner, Laura Fink, Paul Howell, Don Winsor, and others from
ITS, CAEN, and DCO. We thank the anonymous reviewers and
our shepherd, Udi Weinsberg, for their insightful suggestions and
comments. We also thank Brad Campbell, Peter Eckersley, Ralph
Holz, Ben Laurie, Pat Pannuto, and Eric Wustrow. This work was
supported in part by the Department of Homeland Security Sci-
ence and Technology Directorate under contracts D08PC75388,
FA8750-12-2-0314, and FA8750-12-2-0235; the National Science
Foundation (NSF) under contracts CNS 1111699, CNS 091639,
CNS 08311174, CNS 0751116, CNS 1330142, and CNS 1255153;
and the Department of the Navy under contract N000.14-09-1-1042.

11. REFERENCES
[1] Alexa Top 1,000,000 Sites.

http://s3.amazonaws.com/alexa-static/top-1m.csv.zip.
[2] Facts about ipsCA, April 2013. http://certs.ipsca.com/

companyIPSipsCA/competitorssay.asp.

[3] WebTrust for Certiﬁcation Authorities — SSL Baseline

Requirements Audit Criteria v.1.1, Jan. 2013. http://
www.webtrust.org/homepage-documents/item72056.pdf.

[4] D. Akhawe, B. Amann, M. Vallentin, and R. Sommer. Here’s

my cert, so trust me, maybe? Understanding TLS errors on
the web. In Proceedings of the 22nd international conference
on the World Wide Web, pages 59–70, 2013.

[5] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid.

Recommendation for Key Management - Part 1: General
(Revision 3), 2012. http://csrc.nist.gov/publications/nistpubs/
800-57/sp800-57_part1_rev3_general.pdf.

[6] E. Barker and A. Roginsky. Transitions: Recommendation for
Transitioning the Use of Cryptographic Algorithms and Key
Lengths, Jan. 2011. http://csrc.nist.gov/publications/nistpubs/
800-131A/sp800-131A.pdf.

[7] L. Bello. DSA-1571-1 OpenSSL—Predictable random

number generator, 2008. Debian Security Advisory.
http://www.debian.org/security/2008/dsa-1571.

[8] S. Bhat. Gmail users in Iran hit by MITM Attacks, Aug. 2011.
http://techie-buzz.com/tech-news/gmail-iran-hit-mitm.html.

[9] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen,
and T. Wright. Transport Layer Security (TLS) Extensions.
RFC 3546 (Proposed Standard), June 2003.

302[10] CA/Browser Forum. Baseline Requirements for the Issuance
and Management of Publicly-Trusted Certiﬁcates, v.1.1, Nov.
2011. https://www.cabforum.org/
Baseline_Requirements_V1_1.pdf.

[11] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley,

and W. Polk. Internet X.509 Public Key Infrastructure
Certiﬁcate and Certiﬁcate Revocation List (CRL) Proﬁle. RFC
5280 (Proposed Standard), May 2008. Updated by RFC 6818.

[12] T. Dierks and E. Rescorla. The Transport Layer Security

(TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard),
Aug. 2008. Updated by RFCs 5746, 5878, 6176.

[13] Z. Durumeric, E. Wustrow, and J. A. Halderman. ZMap: Fast

Internet-wide scanning and its security applications. In
Proceedings of the 22nd USENIX Security Symposium, Aug.
2013.

[14] P. Eckersley and J. Burns. An observatory for the SSLiverse.

Talk at Defcon 18 (2010).
https://www.eff.org/ﬁles/DefconSSLiverse.pdf.

[15] N. Heninger. Factoring as a service, Aug. 2013. Talk at

CRYPTO Rump Session 2013.
http://crypto.2013.rump.cr.yp.to/
981774ce07e51813fd4466612a78601b.pdf.

[16] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman.

Mining your Ps and Qs: Detection of widespread weak keys
in network devices. In 21st USENIX Security Symposium,
Aug. 2012.

[17] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The SSL
landscape: A thorough analysis of the X.509 PKI using active
and passive measurements. In 11th ACM SIGCOMM
conference on Internet measurement (IMC), 2011.

[18] R. Housley, W. Ford, W. Polk, and D. Solo. Internet X.509

public key infrastructure certiﬁcate and CRL proﬁle. (2459),
Jan. 2009.

[19] J. Kasten, E. Wustrow, and J. A. Halderman. Cage: Taming
certiﬁcate authorities by inferring restricted scopes. In 17th
International Conference on Financial Cryptography and
Data Security (FC), 2013.

[20] T. Kleinjung, K. Aoki, J. Franke, A. Lenstra, E. Thomé,

J. Bos, P. Gaudry, A. Kruppa, P. Montgomery, D. Osvik, et al.
Factorization of a 768-bit rsa modulus. In Advances in
Cryptology–CRYPTO 2010, pages 333–350. Springer, 2010.

[21] A. Langley. Enhancing digital certiﬁcate security. Google

Online Security Blog,

http://googleonlinesecurity.blogspot.com/2013/01/
enhancing-digital-certiﬁcate-security.html, Jan. 2013.

[22] A. K. Lenstra, J. P. Hughes, M. Augier, J. W. Bos,

T. Kleinjung, and C. Wachter. Ron was wrong, Whit is right.
IACR Cryptology ePrint Archive, 2012:64, 2012.

[23] M. Marlinspike. SSL and the future of authenticity, Aug. 2011.

Talk at BlackHat 2011. http://www.thoughtcrime.org/blog/
ssl-and-the-future-of-authenticity/.

[24] N. Mathewson and N. Provos. libevent—An event notiﬁcation

library. http://libevent.org.

[25] Netcraft, Ltd. Web server survey. http://news.netcraft.com/

archives/2013/05/03/may-2013-web-server-survey.html,
May 2013.

[26] NetMarketShare. Desktop operating system market share, Apr.

2013. http://www.netmarketshare.com/
operating-system-market-share.aspx.

[27] M. D. Network. Mozilla network security services (nss).

http://www.mozilla.org/projects/security/pki/nss/.

[28] J. Nightingale. Comodo Certiﬁcate Issue – Follow Up, Mar.

2011. https://blog.mozilla.org/security/2011/03/25/
comodo-certiﬁcate-issue-follow-up/.

[29] E. Rescorla. SSL and TLS: designing and building secure

systems, volume 1. Addison-Wesley Reading, 2001.

[30] R. Richmond. Comodo fraud incident, Mar. 2011.

http://www.comodo.com/
Comodo-Fraud-Incident-2011-03-23.html.

[31] I. Ristic. Internet SSL survey 2010. Talk at BlackHat 2010.

http://media.blackhat.com/bh-ad-10/Ristic/
BlackHat-AD-2010-Ristic-Qualys-SSL-Survey-HTTP-
Rating-Guide-slides.pdf.

[32] A. Sotirov, M. Stevens, J. Appelbaum, A. Lenstra, D. Molnar,
D. A. Osvik, and B. de Weger. MD5 considered harmful today.
http://www.win.tue.nl/hashclash/rogue-ca/.

[33] J. Viega, M. Messier, and P. Chandra. Network Security with

OpenSSL: Cryptography for Secure Communications.
O’Reilly, 2002.

[34] K. Wilson. Bug 523652 - IPS action items re IPS

SERVIDORES root certiﬁcate, Nov. 2009.
https://bugzilla.mozilla.org/show_bug.cgi?id=523652.

[35] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage.

When private keys are public: results from the 2008 Debian
OpenSSL vulnerability. In 2009 ACM SIGCOMM Internet
Measurement Conference, pages 15–27.

303