A Comprehensive Measurement Study  

of Domain Generating Malware

Daniel Plohmann, Fraunhofer FKIE; Khaled Yakdan, University of Bonn;  

Michael Klatt, DomainTools; Johannes Bader; Elmar Gerhards-Padilla, Fraunhofer FKIE

 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/plohmann

This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX A Comprehensive Measurement Study of Domain Generating Malware

Daniel Plohmann
Fraunhofer FKIE

Khaled Yakdan

University of Bonn

Michael Klatt
DomainTools

Johannes Bader

Elmar Gerhards-Padilla

Fraunhofer FKIE

Abstract
Recent years have seen extensive adoption of domain
generation algorithms (DGA) by modern botnets. The
main goal is to generate a large number of domain names
and then use a small subset for actual C&C communica-
tion. This makes DGAs very compelling for botmasters
to harden the infrastructure of their botnets and make it
resilient to blacklisting and attacks such as takedown ef-
forts. While early DGAs were used as a backup com-
munication mechanism, several new botnets use them
as their primary communication method, making it ex-
tremely important to study DGAs in detail.

In this paper, we perform a comprehensive measure-
ment study of the DGA landscape by analyzing 43 DGA-
based malware families and variants. We also present a
taxonomy for DGAs and use it to characterize and com-
pare the properties of the studied families. By reimple-
menting the algorithms, we pre-compute all possible do-
mains they generate, covering the majority of known and
active DGAs. Then, we study the registration status of
over 18 million DGA domains and show that correspond-
ing malware families and related campaigns can be reli-
ably identiﬁed by pre-computing future DGA domains.
We also give insights into botmasters’ strategies regard-
ing domain registration and identify several pitfalls in
previous takedown efforts of DGA-based botnets. We
will share the dataset for future research and will also
provide a web service to check domains for potential
DGA identity.

1

Introduction

Botnets are networks of malware-affected machines
(bots) that are remotely controlled by an adversary (bot-
master) through a command and control (C&C) com-
munication channel. Botnets have become the primary
means for cyber-criminals to carry out their malicious
activities, such as launching denial-of-service attacks,

sending spam, and stealing personal data. Recent studies
have shown that some botnets consist of more than a mil-
lion bots [40], illustrating the magnitude of their threat.
Law enforcement and security researchers often try to
disrupt active botnets by performing takedown attempts.
The main target of these attacks is the C&C communica-
tion infrastructure of the botnet. A prominent example of
these attacks is sinkholing, where all bots are redirected
to an attacker-controlled machine called a sinkhole. In
consequence, the bots will be prevented from communi-
cating with the original C&C servers. As a response to
these efforts, botmasters have started inventing new tech-
niques to protect the infrastructure of their botnets. An
important approach that has gained wide popularity in
recent years is the use of domain generation algorithms.
A domain generation algorithm (DGA) is used to dy-
namically generate a large number of seemingly random
domain names and then selecting a small subset of these
domains for C&C communication. The generated do-
mains are computed based on a given seed, which can
consist of numeric constants, the current date/time, or
even Twitter trends. The seed serves as a shared secret
between botmasters and the bots to compute shared ren-
dezvous points. By constantly changing the used do-
mains, detection approaches that rely on static domain
blacklists are rendered ineffective. Moreover, by dy-
namically generating domain names, botmasters do not
have to include hard-coded domain names in their mal-
ware binaries, complicating the extraction of this infor-
mation. Also, making the generated domains dependent
on time lessens the value of domains extracted from dy-
namic malware analysis systems since different domains
will be observed at different time points. Another ad-
vantage of using short-lived domains that are registered
shortly before they become valid is evading domain rep-
utation services.

The use of DGAs creates a highly asymmetric situa-
tion between attackers (botmasters) and defenders (secu-
rity researchers and law enforcement). Botmasters need

USENIX Association  

25th USENIX Security Symposium  263

1

access to a single domain to control or migrate their bots
while defenders need to control all of the domains to en-
sure a successful takedown. With more than 1000 top-
level domains (TLDs) [9] to choose from, it is easy for an
attacker to create a global spread of responsibility for do-
mains, forcing the defenders into additional coordination
and cooperation efforts. For example, the DGA of the
infamous Conﬁcker botnet (version C) generated 50,000
domain names per day, which spread out over 113 TLDs.
This required global cooperative efforts of 30 different
organizations including ICANN [2] to contain the threat.
In this work we perform a comprehensive measure-
ment study of the DGA landscape by analyzing 43 DGA-
based malware families and variants. Our analysis is
based on reverse-engineering the DGAs of these fami-
lies. We propose a taxonomy to characterize the main
aspects of DGAs and use it to describe and compare
the studied DGAs. We furthermore reimplemented all
of these DGAs and computed all their possible outputs
based on a set of 253 seeds used in previous and ongo-
ing malicious campaigns. We then used this set to iden-
tify DGA-generated domains in a set of 9 billion WHOIS
records collected over the last 14 years. We analyze the
registration status of these domains and their ownership
changes, which often indicates transitioning from a mali-
cious into a sinkholed domain. This enables us to proﬁle
the registration behaviour of both botmasters and sink-
hole operators and investigate in detail the lifetime of
DGA domains.

To the best of our knowledge, our work reﬂects the
ﬁrst systematic study of the DGA landscape as employed
by modern botnets. Security researchers have previously
examined DGAs and proposed approaches to detect and
cluster DGA-based malware [13, 18, 43, 54]. Our study
is instead based on an in-depth analysis of the DGAs in
a bottom-up manner, by reimplementing the algorithms
and enumerating the complete set of domains they gen-
erate, enabling us to have a ground truth about DGA-
generated domains with no false positives.

and compare their properties.

In summary, we make the following contributions:
• We propose a taxonomy for DGAs to characterize
• We analyze the DGAs of 43 malware family and
variants. Using 253 identiﬁed seeds, we enumerate
all possible domains generated by those algorithms,
covering the majority of known and active DGAs.
• We study the registration status of 18 million DGA-
generated domains covering a period of 8 years and
show that corresponding malware families and re-
lated campaigns can be reliably identiﬁed by pre-
computing future DGA domains.

• We analyze the strategies of both botmasters and
sinkholers with regard to domain registration and

identify several pitfalls in previous takedown efforts
of DGA-based botnets.

• We share the dataset for future research and pro-
vide a web service called DGArchive [38] to check
whether a queried domain originates from a DGA.

2 A DGA Taxonomy

In this section, we propose a taxonomy for DGAs to char-
acterize their properties and enable a comparison. To
model the entire spectrum of different properties, we pro-
pose two features designed to capture the different as-
pects of a domain generation algorithm. Both features
are then combined in a single taxonomy that classiﬁes
DGAs into classes.

2.1 Seed Source
The seed serves as a shared secret required for the cal-
culation of generated domains, also referred to by the
term Algorithmically-Generated Domains (AGD) [54].
It is the aggregated set of parameters required for the ex-
ecution of a domain generation algorithm. Typical pa-
rameters include numerical constants (e.g., length of do-
mains or seeds for pseudo random number generators) or
strings (e.g., the alphabet or the set of possible TLDs).

Two properties of seeding have superior signiﬁcance

to characterize a DGA (cp. Barabosch et al.[16]):

Time dependence means that the DGA incorporates
a time source (e.g. the system time of the compromised
host or the date ﬁeld in a HTTP response) for calculation
of AGDs. In consequence, generated domains will have
a validity period only during which these domains are
queried by the compromised system.

Determinism addresses the observability and avail-
ability of parameters. For the majority of known DGAs,
all parameters required for DGA execution are known to
a degree that all possible domains can be calculated. Two
DGAs use temporal non-determinism to disallow arbi-
trary prediction of future AGDs by using unpredictable
but publicly accessible data for seeding. The malware
family Bedep [44] makes use of foreign exchange refer-
ence rates published daily by the European Central Bank
while a later variant of Torpig [50] used Twitter trends
for seeding.
In both cases, this only leads to attack-
ers and defenders having to compete for the registration
of domains in each active time window once the unpre-
dictable data used for seeding becomes available. How-
ever, it does not prevent historic analysis, as the seeding
data and thus generated domains can still be collected
over time. Another kind of non-determinism has been
observed by Symantec [45]. Their analysis of Jiripbot
revealed that the malware exﬁltrates a set of system prop-
erties including MAC address and hard drive volume ID

264  25th USENIX Security Symposium 

USENIX Association

2

to make it available to the attacker to be used in a DGA
seed.
In this case, the system information is consid-
ered non-deterministic to the attacker prior to compro-
mise and also never publicly observable.

Time-dependence and determinism allow the follow-
ing four combinations: time-independent and determin-
istic (TID), time-dependent and deterministic (TDD),
time-dependent and non-deterministic (TDN),
time-
independent and non-deterministic (TIN). In our dataset,
we have only observed DGAs using the ﬁrst three classes
of seeding properties.

2.2 Generation Schemes

Apart from the characteristics of seeding, 4 different gen-
eration schemes emerged during our analysis.
Arithmetic-based DGAs calculate a sequence of values
that either have a direct ASCII representation usable for a
domain name or designate an offset in one or more hard-
coded arrays, constituting the alphabet of the DGA. They
are the most common type of DGA.
Hash-based DGAs use the hexdigest representation of
a hash to produce an AGD. We identiﬁed DGAs using
MD5 and SHA256 to generate domains.
Wordlist-based DGAs will concatenate a sequence of
words from one or more wordlists, resulting in less
randomly appealing and thus more camouﬂaging do-
mains. These wordlists are either directly embedded in
the malware binary or obtained from a publicly accessi-
ble source.
Permutation-based DGAs derive all possible AGDs
through permutation of an initial domain name.

We abbreviate the generation scheme with the respec-
tive starting letter: A, H, W, or P. As part of any of
the above-mentioned generation schemes, some DGAs
leverage pseudo-random number generators (PRNGs) to
generate domains. These range from implementing own
PRNGs to the use of well-known techniques such as lin-
ear congruential generators (LCGs) [36].

2.3 DGA Types

As DGA type, we consider the combination of seed-
ing properties and generation scheme, denominated by
the combined abbreviations, e.g. “TID-A” for a time-
independent, deterministic DGA using a arithmetic-
based domain generation scheme. Of 16 possible com-
binations, we have only observed 6 types being used by
the 43 DGAs in our dataset: TDD-A (20), TID-A (16),
TDD-W (3), TDD-H (2), TDN-A (1), TID-P (1).

Filtering

Identiﬁcation

Enumeration

input
domains

Alexa Filter

DGA Score

DGA Filter

Detectors

new DGA

ne w seed

Veriﬁcation

Generation

update AGDs

Known AGDs

Figure 1: DGA collection approach.

3 DGA-Malware Dataset

In this section, we describe how we identiﬁed and col-
lected malware samples that employ a DGA. Then, we
describe our efforts to reverse-engineer the algorithms,
reimplementing and evaluating their implementation.

3.1

Identifying DGA-based Malware

The ﬁrst step of our study was to collect a representa-
tive set of DGA-based malware families. To this end, we
developed a system to automatically identify potentially
new DGAs by analyzing a set of domain names gener-
ated by a given malware sample. This helps us to min-
imize the set of malware samples we need to manually
reverse-engineer, and thus focus our efforts on samples
that are likely to implement new DGAs. A high-level
overview of the system is presented in Figure 1. First,
we ﬁlter out known AGDs and benign domains. Second,
we identify domains that are generated by a previously
known DGA but with a new seed, and domains poten-
tially generated by new DGAs. Third, if a new DGA or
a new seed is identiﬁed, we manually reverse-engineer
the corresponding sample, extract the seed and the algo-
rithm, and compute the set of domains it generates. In
the following, we discuss these steps in detail.
Filtering. We ﬁrst ﬁlter out known benign and popular
domains by comparing them against the ﬁrst 10,000 en-
tries of the Alexa list of top-ranked domain names [10].
Second, we ﬁlter out known AGDs by comparing the in-
put domains against our current collection of enumerated
AGDs. A good starting point for collecting DGA-based
malware samples are malware analysis reports and blogs.
Using these as sources and based on our experience, we
identiﬁed an initial set of 22 families using DGAs. In
9 of these cases, we already found a reimplementation
of the DGA that we only had to verify. This enables us
to compute an initial set of domains to use in the DGA
ﬁlter.

USENIX Association  

25th USENIX Security Symposium  265

3

Identiﬁcation. In this step we identify samples that im-
plement a previously known DGA but use new seeds, and
potentially new DGAs. To that end, we use a set of detec-
tors implemented as regular expressions to quickly de-
cide for a given domain if it matches the expected output
of one of these known DGAs. The regular expressions
catch major characteristics such as minimum and maxi-
mum length of the generated part (Lmin and Lmax), DGA
alphabet Σ, and the set of known TLDs. If a majority of
input domains is matched by the same pattern, we mark
the sample as using a known DGA with new seed.

If the detectors produce an inconsistent or insufﬁcient
result, we compute a collective DGA score for the in-
put domains to measure the likelihood of these domains
being generated by a DGA. This score is based on fea-
tures such as n-gram frequency, entropy, and length anal-
ysis. If available, we further increase the score in case of
an NX domain result. This approach relies on previous
work on DGAs [13, 18, 34, 43, 54]. If the score exceeds
a threshold derived through prior experiments and man-
ual veriﬁcation, we mark the sample as a candidate for
using a new unknown DGA.
DGA enumeration. Whenever the system identi-
ﬁes a potentially new DGA, we manually veriﬁed this
by reverse-engineering the corresponding sample.
If
present, we then extracted the domain generation logic
from the binary, reimplemented it, identiﬁed the used
seed, and ﬁnally computed all domains generated by the
algorithm. Moreover, by analyzing the algorithm we up-
dated the set of detectors to identify future samples that
use the same algorithm with different seeds.

As input to our system, we used a special sandbox feed
that was kindly provided by the Shadowserver Foun-
dation, consisting of timestamp, malware sample hash,
DNS query, and DNS response. This feed contains a
mix of both newly observed malware samples and older
samples undergoing re-processing, dating back to at least
2009. This re-processing increases the likelihood to en-
counter unknown seeds and families that may no longer
be active. Taking data of 3 months starting in May 2015
from this feed, we examined a total of 1,235,443 sandbox
runs, performing a total of 15,660,256 DNS queries to-
wards 959,607 unique domain names. Based on the data
of the Shadowserver feed, our system enabled us to iden-
tify, analyze, and re-implement another 21 DGAs and the
majority of seeds listed in Table 3.

3.2 Reimplementing DGAs
To ensure our reimplementation is correct, we compared
its output against the domain queries issued by the re-
spective malware sample when executed in a sandbox.
For each family, the reverse-engineering and reimple-
mentation of the corresponding DGA took around one

day. After analyzing the algorithm, we extracted the
DGA seed from the binary. In many cases, we fully au-
tomated the process of seed extraction, which enabled
us to easily extract seeds from new binaries of the same
family. After unpacking the malware binaries, we rarely
encountered further protection layers of the original un-
packed code, which allowed considerable analysis speed.
Nymaim and Suppobox samples are heavily obfuscated
and employ family-speciﬁc code obfuscations. To handle
these cases, we analyzed the obfuscation techniques and
implemented custom deobfuscators to automatically de-
obfuscate these samples. Pykspa 2 was an exceptionally
difﬁcult case.
Instead of reverse-engineering the seed
derivation function, it was much easier to instrument it
in order to generate all possible seed values that we later
used in the reimplementation of the DGA.

The manual analysis of samples previously identiﬁed
by the system helped us to eliminate several samples that
would otherwise be false positives. For example, during
the evaluations of the sandbox DNS feed, we came across
many samples whose DNS queries appeared like typical
AGDs but were in fact hardcoded domains as veriﬁed
through our reverse-engineering. Furthermore, we only
consider DGAs in which the AGDs are actually used as
valid, potential C&C endpoints and not as distractions
like in the following cases. For instance, we found an
early variant of Sality [1] prepending dynamically gen-
erated third-level parts to hardcoded domains, which is
the earliest hint to DGA-like behavior we were able to
identify. Another example is the Zeus-derivate Citadel,
which produces unused decoy AGDs when having de-
tected a virtualized environment [21].

We are aware that more malware families than listed
in this paper are potentially using DGAs. However, we
believe that the given data set provides a sufﬁcient basis
to draw meaningful conclusions on a majority of effects
caused by domain generation algorithms.

4

Insights into the DGA Landscape

In this section, we present a comprehensive overview of
the 43 DGA implementations and their 253 seeds that
we collected. We use our taxonomy to characterize and
compare the studied DGAs. More speciﬁcally, we com-
pare domain structure, validity periods, and generation
schemes. We also study how random the generated do-
mains are and the priority of the DGA as C&C commu-
nication mechanism. Table 1 presents an overview of the
different DGA features. The table includes different vari-
ants of some families with different DGAs. This is the
case for Gameover Zeus, Murofet, Pushdo, and Pykspa.

266  25th USENIX Security Symposium 

USENIX Association

4

Name

Reference

DGA Type

Bamital
Banjori
Bedep
Conﬁcker
Corebot
CryptoLocker
DirCrypt
Dyre
Feodo
Fobber
Gameover DGA
Gameover P2P
Geodo
Gootkit
Gozi
Hesperbot
Kraken
Matsnu
Mewsei
Murofet 1
Murofet 2
Necurs
Nymaim
Pushdo
Pushdo TID
Pykspa 1
Pykspa 2
QakBot
Ramdo
Ramnit
Ranbyus
Redyms
Rovnix
Shifu
Simda
Suppobox
Szribi
Tempedreve
TinyBanker
Torpig
UrlZone
Virut
VolatileCedar

[37]
[14]
[44]
[25]
[14]
[3]
[14]
[5]
-
[47]
[14]
[11]
[30]
[48]
[4]
[27]
[41]
[49]
[14]
[14]
[14]
[14]
[15]
[6]
-
[14]
[14]
-
[29]
[46]
[14]
[32]
-
[24]
[14]
[22]
[52]
[7]
[14]
[50]
[14]
[20]
[17]

TDD-H (MD5)
TID-A
TDN-A
TDD-A
TDD-A (NR LCG)
TDD-A
TID-A (PM LCG)
TDD-H (SHA256)
TID-A (NR LCG)
TID-A (own LCG)
TDD-A (MD5)
TDD-A (MD5)
TDD-A
TDD-A (PM LCG)
TDD-W (NR LCG)
TID-A
TID-A
TDD-W
TDD-A (MS LCG)
TDD-A (MD5)
TDD-A (MD5)
TDD-A
TDD-A (Xorshift)
TDD-A (MD5)
TID-A (NR LCG)
TDD-A
TDD-A (own LCG)
TDD-A (MT, CRC32)
TID-A
TID-A (PM LCG)
TDD-A
TID-A
TID-A (MS LCG)
TID-A (own LCG)
TID-A
TDD-W
TDD-A
TID-A (own LCG)
TID-A
TDD-A
TID-A
TDD-A (Delpi LCG)
TID-P

C2prio
1/1
2/2*
1/1
2/2
2/2
1/1
1/1
3/3
1/1
1/1
1/1
2/2
1/1
1/1
1/1
2/2
1/1
2/2*
1/1
1/1
1/1
2/2
2/2*
2/2
1/1
1/1
1/1
1/1
1/1
2/2
1/1
1/1
2/3
2/2
1/1
1/1
2/2
1/1
2/2*
1/1
2/2*
2/2
2/2

Valid

1d
∞
7d
1d
1d
1d
∞
1d
∞
∞
1d
1-7d
900s
12h
1-3mo
∞
∞
3d
16d
1d
1-7d
4d
1d
60d
∞
2d
1-20d
8-11d
∞
∞
28-31d
∞
∞
∞
∞
12h
1-3d
∞
∞
1d
∞
1d
∞

|Dcycle|
104
2,196-15,373
22-28
250-50,000
40
1,000
30
1,000
64
1,000
1,000/10,000
1,000
time-based
1
5-80
50-64
300
3
64
1,020
1,000
2,048
30
30
6,000
5,000
1,000
5,000
1,000
1,000
40
34
10,000
777
1,000
168
4
204
100-4,000
3
2,000
100*100
170

Lmin
32
11
12
4
12
12
8
34
16
10
20
11
16
16
12
8
6
12
8
8
32
7
6
8
10
6
6
8
16
8
14
9
18
7
5
8
8
7
12
7
9
6
14

Lmax
32
26
18
11
23
15
20
34
18
17
28
32
16
16
24
24
11
24
15
16
47
21
11
12
10
15
12
25
16
19
14
15
18
7
11
26
8
11
12
9
15
6
14

TLDs

4
1
1
123
1
7
1
8
1
2
4
6
1
1
12
1
4
1
1
5
6
43
8
2
5
6
4
5
1
1
8
1
5
1
4
1
1
4
15
3
2
1
1

|Σ|
16
26
36
26
34
25
26
36
26
26
36
26
25
26
26
26
26
27
23
26
36
25
26
26
26
26
26
26
13
25
25
27
34
25
26
26
15
26
25
30
32
26
9

Hrel
1.000
0.948
0.944
1.000
1.000
1.000
0.999
0.805
0.993
1.000
0.983
1.000
1.000
0.997
0.883
0.997
0.998
0.895
0.939
0.965
0.994
1.000
1.000
0.962
1.000
0.963
0.998
1.000
1.000
1.000
1.000
0.990
0.999
1.000
0.965
0.889
0.949
0.996
0.987
0.937
1.000
0.984
0.959

Table 1: Overview of studied DGA implementation characteristics. Type according to our taxonomy. C2prio lists the priority of
DGA among all C&C rendezvous mechanisms found (with * indicating hardcoded domains being redundant or used as part of
seed). Valid describes the duration and Dcycle the number of domains generated per period. Lmin,max denotes extrema of domain
length, TLDs is a combined value over all seeds of this DGA. Σ is the alphabet used in AGDs, Hrel normalized entropy.

4.1 Domain Structure

Alphabet. We ﬁrst study the alphabet, denoted by Σ,
used by the DGAs to generate domains. The alphabets
contain between 9 and 36 characters. While some DGAs
use intentionally short alphabets, the majority of DGAs
with small alphabets seems to result from ﬂawed imple-
mentations. An example of the ﬁrst case is VolatileCedar,
which generates domains by permuting the second-level
part of a hard-coded domain (dotnetexplorer.net).
Ramdo’s DGA is an example of a buggy implementation.
Only letters with odd indexes are chosen when building
the domain name (i.e., a, c, e, ...), resulting in an
alphabet with only 13 letters. Hash-based DGAs have
alphabets of 16 characters consisting of digits and letters
from a to f.

Many DGAs use a hard-coded array of characters from
which is chosen by an index computed iteratively. A

common bug in these DGAs are off-by-one errors, where
one or more characters are never chosen. For example,
Geodo omits the last character of its alphabet, thus gen-
erated domains never contain a z. Other DGAs with this
bug include CryptoLocker, Necurs, Ramnit, Ranbyus,
Shifu, TinyBanker, and Torpig. They all miss the last
character in their alphabet. This type of error is worse for
DGAs that use multiple separate arrays to choose char-
acters from. For example, Mewsei uses two arrays, one
for vowels and one for consonants (intentionally or not,
missing the letter j). An off-by-one bug results in one
character in each array to be missed, reducing the effec-
tive alphabet size by two. Rovnix and Corebot use two
separate arrays of letters and digits and suffer from the
same malfunction, causing their AGDs to never contain
a z or 9. We found this bug in 11 of the studied DGAs.

USENIX Association  

25th USENIX Security Symposium  267

5

We also observed truncation errors, where the alpha-
bet is truncated into a smaller array that is used for com-
puting the domains. For example, Szribi truncates its 26
intended hard-coded letters to only 15. The same error
occurs in Urlzone, reducing the possible 35 characters to
only 32. Torpig suffers from both bugs: Torpig’s ran-
domness is ﬂawed in a way that only 30 out of 34 possi-
ble (36 minus 2 resulting from the off-by-one error) are
reachable. The largest alphabet of 36 symbols is used
Dyre, Gameover DGA, and Murofet 2.
AGD length. The length of generated domains ranges
from 4 to 47 with median minimum length 9 and median
maximum length 16. 14 DGAs produce AGDs that all
have identical length. In three cases (Banjori, Simda, and
Torpig), we found multiple length values across seeds but
all AGDs of one seed have the same length.
Domains levels. Only three families (Corebot, Kraken,
and Mewsei) generate third-level domains, using one or
more Dynamic DNS providers. All remaining DGAs
only generate a second-level domain that is then concate-
nated with a top-level part. Note that we consider con-
structs as co.uk or com.tw as top-level part since they
are managed by a single registry. Conﬁcker and Necurs
make extensive use of TLDs with 123 and 43 TLDs re-
spectively. These cases strikingly illustrate the need of
global cooperation to successfully sinkhole some bot-
nets. This also holds for botnets with DGAs that use a
smaller set of TLDs. Table 2 shows the most popular
TLDs used by the studied DGAs and identiﬁed seeds.
The 7 most common TLDs are the same in both list-
ings and they only differ in their order. com and net
are the two top TLDs. We observe a trend to use popu-
lar TLDs with no regional reference, as com and net to-
gether make up about 45% of all registered domains [8].
We assume that attackers want their generated domains
to blend in well with benign trafﬁc.

per DGAs

Occurrences

28
21
16
15
13
10
6
5
5
4

TLD

com
net
org
info
biz
ru
in
cc
su
eu

per Seeds

Occurrences

178
82
56
40
40
32
29
26
21
18

TLD

com
net
ru
biz
in
info
org
pw
su
cc

valid for a certain period of time. Most of these DGAs
(21/24) generate domains with disjunct validity periods.
That is, only a single set of domains is valid at each point
in time. The three exceptions are 1) Matsnu, which gen-
erates 3 domains which are each valid for 3 consecutive
days, meaning that there are 9 potential C&C domains at
a time; 2) Pushdo, which will generate domains relative
to a given date, starting 45 days in the past and up to 15
days in the future. With 30 domains per day, this gives
900 domains valid at a time; and 3) Suppobox, produc-
ing one AGD per 512 seconds, which is then valid for
the next 85 periods, totalling to 12 hours, 5 minutes, 20
seconds per AGD.

11 time-dependent DGAs generate domains that are
valid for one day. Other families increase their domain
validity by performing certain calculations on the date.
For example, both Gameover P2P and Murofet 2 round
the day of month down to the next lowest value of 1,
7, 14, 21, or 28, resulting in validity periods of variable
length (1-7 days). Qakbot employs a similar scheme but
uses different values for rounding (1, 11, and 21). The
domains generated by Szribi’s DGA [52] are valid for 1-
3 days. This variable period length appears to be a bug
since the DGA tries to round the day to the nearest third
day (i.e., Julian days).

Both versions of Pykspa have unique characteris-
tics with regard to the validity of generated domains.
Pykspa 1 generates a list of 5000 domains every two
days, and the validity of each domain depends on its po-
sition in this list. The ﬁrst 20 domains are generated at
random while the remaining 4,980 are chosen from two
static sets of domains, alternating between these sets ev-
ery two days. This is caused by the DGA raising the ini-
tial 32-bit seed to power of 2 for each new computed do-
main, thus drastically reducing the randomness of com-
puted domains. In order to increase resilience to detec-
tion, Pykspa 2 generates fake domains with shorter va-
lidity periods than the real ones. While 200 real domains
are generated that are valid for 20 days, the DGA gen-
erates 800 fake domains, each of which is only valid for
one day.

Geodo has a unique generation strategy with regard
to validity periods among all time-dependant DGAs. It
queries the current date from the response of an HTTP re-
quest to a Microsoft website. Then, it will consequently
generate one AGD every 900 seconds starting from a
hard-coded start date until this current date is reached.

Table 2: Popularity of TLDs, both on for DGAs and seeds.

4.2 Domain Validity Periods
More than half of the studied DGAs (24/43) are time-
dependent, meaning that the generated domains are only

4.3 Generation Schemes
Arithmetic-based DGAs are by far the most common
generation scheme (37/43). Among these, 26 DGAs
directly compute the ASCII codes of the characters to
be used in the domain, while 11 DGAs compute an in-

268  25th USENIX Security Symposium 

USENIX Association

6

dex that is used to select characters from hard-coded ar-
rays representing the used alphabet. Three DGAs are
wordlist-based: Matsnu, Suppobox, and Gozi. Mat-
snu and Suppobox embed the list of words in their
corresponding malware binary. On the other hand,
Gozi extracts its wordlist from a publicly available text
ﬁle, which is very unlikely to be changed in the fu-
ture. For example, it uses the United States Decla-
ration of Independence to generate domains such as
amongpeaceknownlife.com. Matsnu and Gozi ran-
domly combine words until a certain length is reached,
while Suppobox only combines 2 of its 384 included
words and adds .net as TLD.

The two families Bamital and Dyre are hash-based and
use the hexdigest output of hashing functions MD5 and
SHA256 over date and domain index as input parame-
ters. VolatileCedar is the only permutation-based family,
which can produce 170 possible permutations of the ini-
tial domain. It is worth mentioning that Banjori, Tiny-
Banker, Urlzone and VolatileCedar use a domain muta-
tion scheme where either a seed or a previously gener-
ated domain is used as input for the calculation of the
subsequent domain.

4.4 Domain Randomness
Given that various DGAs make use of PRNGs in their
domain generation schemes, we analyzed the random-
ness of generated domains. To this end, for each DGA,
we compute the global string by concatenating all gener-
ated parts of the domains. Then we calculate the Shan-
non entropy of this string. This gives a global indicator
for the randomness of the algorithm. Finally, we com-
pute the relative entropy, denoted by Hrel, by dividing
the calculated value with the maximum entropy. This
enables us to compare the relative entropy of different
DGAs. For simplicity, we use the term entropy to refer
to Hrel.

We make the following observations. All wordlist-
DGAs have a signiﬁcantly lower entropy (Hrel < 0.9),
which is expected since they combine complete words
whose characters are not uniformly distributed. How-
ever, the lowest entropy is observed in Dyre, a hash-
based DGA. While the SHA256 algorithm produces uni-
formly distributed characters, Dyre prepends an extra
character in the range [a-z] to the calculated hexdigest,
thus destroying the uniform distribution since the hexdi-
gest does not contain any letters in the range [g-z].

The low entropy (Hrel < 0.99) observed in other DGAs
is a result of speciﬁc implementation choices. We discuss
this in the following.
1) Multiple sub-alphabets. By splitting the alphabet
into multiple distinct lists and randomly drawing charac-
ters from these lists for different positions in the com-

puted domain name, some DGAs cause an imbalance on
the overall distribution of characters. This is the case for
Bedep, Gameover DGA, Mewsei, Pushdo, Simda, Tor-
pig, and Virut. Redyms uses a hyphen in every AGD.
2) Imperfect PRNG. We observed several causes of im-
perfect PRNGs: ﬁrst, some DGAs (Pykspa 1 and Szribi)
use their own self-designed PRNGs, which have imper-
fect randomness. Second, other DGAs (Murofet 1 and
TinyBanker) impose certain conditions on the output of
the used PRNGs, and thus cause an imbalance in the dis-
tribution of derived characters.
3) Partial modiﬁcations. Some DGAs compute the
next domain based on an initial domain name. This trans-
formation may impact the DGA entropy if it does not in-
troduce enough modiﬁcations in the initial domain seed.
An example of this category is Banjori, which only mod-
iﬁes the ﬁrst four positions of a given hard-coded seed
domain.

It is worth mentioning that several DGAs use well-
known PRNG algorithms. Notably, almost a third of
the studied DGAs (14/43) use a linear congruential gen-
erator (LCG) [36] deﬁned by the recurrence relation
Xn+1 = (aXn + c) mod m. By matching the used pa-
rameters a, c, and m against those of common LCGs,
we found that 10 DGAs use known LCG constants: 4
DGAs use the implementation described in the Numer-
ical Recipes book [39] (NR LCG), 3 DGAs use the
minimal standard implementation proposed by Park and
Miller [36] (PM LCG), 2 DGAs use the Microsoft Visual
C library (MS LCG), and one DGA uses the Delphi LCG.
The remaining 4 LCGs use self-chosen constants. Other
uses of well-known PNRGs we identiﬁed are Mersenne
Twister [33] and Xorshift [31]. Five DGAs use MD5 for
initializing their own PRNG and one uses the checksum
CRC32.

4.5 Command & Control Priority
More than half of the studied botnets (23/43) use their
DGA as the only C&C rendezvous mechanism. More-
over, although 5 other families (identiﬁed by a star in Ta-
ble 1) ﬁrst try hard-coded domains before turning to their
DGAs, the DGAs can also be considered as the primary
communication mechanism. Banjori, TinyBanker, and
UrlZone ﬁrst try a single hard-coded domain that is later
used in computing the initial seed of the corresponding
DGA. Matsnu contains multiple prioritized hard-coded
domains. However, the same domains are also gener-
ated by its DGA at some point in time. Nymaim con-
tains a legacy primary hard-coded domain that is long
mitigated and probably disregarded by the botmasters,
meaning that it mainly relies on its DGA instead.

Other families use their DGAs as a backup mecha-
nism when their primary communication method (usu-

USENIX Association  

25th USENIX Security Symposium  269

7

ally hard-coded domains) fails. For example, Rovnix
tries to connect to one of its hard-coded domains. If this
fails, it resorts to its DGA before ﬁnally trying a connec-
tion via Invisible Internet Project (I2P). The remaining
families use their DGAs as a last resort to reach the C&C
server.

This clearly shows the prevalence of DGAs in modern
botnets. For this reason, we believe that DGAs should be
no longer perceived mainly as a backup mechanism but
instead as a primary C&C concept.

5 DGA Domain Usage

In this section, we present the results of our analysis on
how DGAs are actually used in practice. We base our
analysis on WHOIS data for the last 14 years, and give
insights into the family activity periods, registration sta-
tus of DGA domains, and botmaster registration strate-
gies. We also analyze the mitigation response time.

5.1 WHOIS Dataset
We based our analysis on the DomainTools WHOIS
dataset, which contains over 9 billion WHOIS records
collected over the last 14 years [19]. Based on our reim-
plementations and the available seeds, we computed all
possible domains generated by the studied 43 DGAs. We
provided the computed domains to DomainTools, and
they kindly provided us with WHOIS records for DGA
domains they found in their dataset. The data provided
by DomainTools for this study was compiled on the 22nd
September of 2015. This enabled us to identify 303,165
DGA-related WHOIS records for 115,387 domains.

A special care had to be given to time-dependant
DGAs, which use the date information for computing
their domains. To ensure a good coverage and minimize
the set of DGA domains we miss, we computed all do-
mains that cover a time period of one year before any
publicly known starting date until 31st December 2015
(three months after the last WHOIS record in the Do-
mainTools dataset). This end date provides around 3
months of lookahead, detecting domains that are regis-
tered for some time before being actually used.

These WHOIS records contain the following ﬁelds
• Date of the WHOIS record
• Date of updates to the WHOIS record
• Dates for domain creation and expiration
• Registrar name
• Registrant name and e-mail address
• Nameservers registered in WHOIS
This enabled us to infer the following information:

1) Domain ﬁrst registration. This is based on the date of
the WHOIS record and date of domain creation.

2) Start of botnet activity. The ﬁrst record for any do-
main implicitly indicates that the domain is registered
and helps to estimate when the corresponding malware
family started its operation.
3) Changes in domain ownership. The date of updates
to a WHOIS record often corresponds to a change in re-
sponsibility for a domain. This can be veriﬁed by ac-
companying changes to the registrar, registrant, and reg-
istered nameserver ﬁelds. This allows us to derive when
a potential C&C domain has been mitigated (e.g., sink-
holed), by observing changes of the WHOIS record from
a non-sinkhole operator to a sinkhole operator. We iden-
tify 29 different organizations running sinkholes, but we
will not disclose further details about the features used to
detect sinkhole organizations to protect their operations.
4) Parked domains. The registrar, registrant, and regis-
tered nameserver ﬁelds convey information that we use
to identify parked domains in order to investigate how
common AGDs are held for the purpose of picking up
accidental trafﬁc or reselling.
In total, we identify 36
services offering domain parking or domain reselling.

Our dataset covers all but ﬁve of the studied families:
Conﬁcker and Virut generate an exceedingly large num-
ber of domains, and were therefore not included in the
dataset provided to us. Corebot, Kraken, and Mewsei
use DDNS-based DGAs, and are thus not available in
the original DomainTools WHOIS dataset, which only
contains primary domain names but no subdomains. It
is noteworthy that non-deterministic seeding as used by
Bedep does not prevent retroactive analysis, as we are
still able to generate all domains by collecting the used
exchange rates over time.

5.2 Family Activity Periods
In this section, we analyze the period of time in which the
studied botnets were active and domains were registered
for malicious purposes. To this end, we ﬁrst identify the
date of the ﬁrst related record in our dataset, denoted by
Tf irst. In many cases, this is the ﬁrst observed registration
overall. In cases where the data indicates collisions with
benign domains (cp. Section 5.4), we analyze records
from the ﬁrst sinkhole event backwards. Then, we iden-
tify the time when the domains were either taken down
or they were registered last, denoted by Tlast. The de-
tailed activity periods for the studied botnets are shown
in Table 3. For families we did not have data for, their
respective Tf irst is estimated from public sources as men-
tioned before.

In case of Bamital, CryptoLocker, and Gameover P2P,
Tlast is the date of their takedown, marked by a †. For
identiﬁes the date on which the last
Conﬁcker, Tlast
known Conﬁcker variant deleted itself from compro-
mised systems [26]. A special case is Rovnix, for which

270  25th USENIX Security Symposium 

USENIX Association

8

Name

Tf irst

Tlast

Kraken
Torpig
Szribi
Conﬁcker
Pushdo TID
Pykspa 1
Gozi
Murofet 1
Bamital
Nymaim
Simda
Ramnit
Virut
Murofet 2
Gameover P2P
Feodo
Gootkit
Redyms
Necurs
CryptoLocker
Suppobox
Banjori
Pushdo
Pykspa 2
VolatileCedar
DirCrypt
Hesperbot
Ramdo
UrlZone
QakBot
Matsnu
Dyre
Gameover DGA
TinyBanker
Geodo
Tempedreve
Mewsei
Fobber
Ranbyus
Rovnix
Bedep
Corebot
Shifu

2007-07*
2008-01
2008-11
2008-11*
2009-07
2009-10
2010-01
2010-08
2010-11
2011-06
2011-06
2011-06
2011-08*
2011-09
2011-09
2012-02
2012-06
2012-12
2013-01
2013-01
2013-02
2013-03
2013-03
2013-04
2013-04
2013-07
2013-07
2013-10
2013-11
2013-12
2014-01
2014-06
2014-07
2014-08
2014-10
2014-10
2014-10*
2014-10
2015-01
2015-01*
2015-02
2015-06*
2015-07

-
2011-06-22
2011-06-22
2009-05-03†
2012-04-06
2012-09-09
2015-09-18
2011-09-08
2013-02-06†
2015-09-16
2014-11-06
2015-02-07
-
2011-12-20
2014-05-28†
2012-10-06
2013-11-08
2014-02-10
2015-06-12
2014-05-30†
2015-09-20
2013-09-10
2015-08-05
2013-10-01
2015-03-30
2014-06-15
2015-01-07
2014-05-03
2015-09-20
2015-09-20
2015-09-20
2015-08-19
2014-11-21
2015-09-21
2014-11-16
2015-04-19
-
2015-07-01
2015-08-10
-
2015-09-20
-
2015-09-10

|S|
1
2
1
3
1
1
9
2
1
3
12
18
1
1
1
3
1
1
6
1
3
30
4
2
1
14
3
3
6
1
2
1
2
90
2
1
1
2
7
1
4
2
2

|Dgen|
300
17,610
4,396
129,807,750
6,000
32,920
21,890
4,063,680
197,600
277,112
13,000
18,000
16,140,000
262,000
262,000
192
2,190
34
3,551,232
1,108,000
545,169
434,556
124,080
775,400
170
420
178
3,000
12,006
385,000
3,375
592,000
6,182,000
84,291
90,240
204
1,984
2,000
105,840
10,000
3,906
18,160
1,554

|Duniq|
300
17,610
2,949
125,118,625
6,000
22,764
16,963
4,063,680
197,600
65,040
11,528
18,000
15,355,008
262,000
262,000
192
730
34
3,551,232
1,108,000
98,304
421,390
124,021
775,342
170
420
178
3,000
10,009
385,000
3,346
592,000
6,182,000
81,930
90,232
204
1,984
2,000
64,400
10,000
3,806
18,160
1,554

|Rall|
-
139
54
-
245
455
305
3,172
8,340
656
379
939
-
559
74,755
110
198
11
295
3,820
11,338
683
453
1,927
13
86
15
47
127
1,088
610
850
1,081
1,733
107
20
-
13
98
1
654
-
11

Aggregated

-

-

253

165,161,439

159,712,234

115,387

|Rall|
|Duniq|
-
0.79%
1.83%
-
4.08%
2.00%
1.80%
0.08%
4.22%
1.01%
3.29%
5.22%
-
0.21%
28.53%
57.29%
27.12%
32.35%
0.01%
0.34%
11.53%
0.16%
0.37%
0.25%
7.65%
20.48%
8.43%
1.57%
1.27%
0.28%
18.23%
0.14%
0.02%
2.12%
0.12%
9.80%
-
0.65%
0.15%
0.01%
17.18%
-
0.71%

0.63%

|RP|
-
2
0
-
0
12
48
0
0
70
66
0
-
0
0
0
0
0
10
0
8,434
0
3
757
0
0
0
0
0
0
244
0
0
0
0
0
-
0
0
0
0
-
0

9,646

|RM|
-
1
8
-
0
0
4
50
150
17
9
126
-
4
23
1
0
2
0
341
19
3
0
5
0
13
1
5
24
61
33
1
14
272
0
0
-
2
0
0
10
-
0

|RS|
-
57
40
-
0
49
143
369
30 (7,891)
388
44
372
-
261
391 (72,713)
9
4
2
158
240 (2,899)
792
33
54
101
7
21
10
23
34
35
61
273
549
326
39
13
-
4
36
1
201
-
8

1,199

5,177 (83,503)

Table 3: Overview of DGA usage characteristics.
|S|: seeds known for this DGA. D: domains generated until 31.12.2015, R:
registered domains (|RP|: prior to Tf irst; |RM|: turned into a sinkhole; |RS|: directly registered as sinkhole; in brackets: related to
botnet takedowns). Registration percentage based on Duniq∗, thus considering only AGDs where registration data was available.

we only identiﬁed a single registration by a sinkhole op-
erator, and thus decided to leave Tlast open.

After identifying the starting date for each family
(Tf irst), we removed the AGDs we computed for ear-
lier points in time. This reduces the computed set to
165,161,439 AGDs in total, 159,712,234 of them being
unique across all DGAs. Additionally, we remove the
computed domains for the families not available in the
DomainTools dataset, leaving us with a set of 18,446,125
unique AGDs. We denote this set by Duniq∗ and use it for
all following examinations.

Having a closer look at Tf irst shows that although the
concept has been ﬁrst used in 2007, more than half of the
analyzed DGAs (25/43) were introduced 2013 and later.
It seems like malware authors waited for early adopters
to gather experience with running DGA-based botnets
before trying it out themselves. Cases with short activ-

ity times indicate that some authors seemingly also only
experimented with DGAs. For example, while early ver-
sions of Geodo used hard-coded IP addresses for C&C
communication, one version with a DGA was used for
only about 6 weeks. After that, the botmasters returned
back to the old communication method.

Murofet 2 remained active for three months only, be-
fore its widespread successor Gameover P2P, which used
a very similar DGA, appeared. Gameover DGA, an-
other successor that appeared shortly after the takedown
of Gameover P2P, was active for only about 5 months.
Although binary difﬁng implies that it relies on the same
source code as Gameover P2P, it is uncertain whether it
was operated by same original author Slavik [42] or if it
was only used as a distracting maneuver.

We use Tlast to identify active families as of this writ-
ing. We consider a family to be active if its DGA gener-

USENIX Association  

25th USENIX Security Symposium  271

9

ated a domain that was used within the last month of the
time period covered by the WHOIS dataset. Based on
that, we identify 10 families: Gozi, Nymaim, Suppobox,
UrlZone, QakBot, Matsnu, Dyre, TinyBanker, Bedep,
and Shifu. This serves as a lower bound for estimating
active families since some do not use DGA as their pri-
mary C&C rendezvous mechanism.

5.3 Domain Registration Status
Out of the 18,446,125 unique generated AGDs, 115,079
were actually registered (0.62%). 72,37% of these regis-
tered AGDs correspond to sinkhole operators, while the
remaining 27,63% are non-takedown domains. We di-
vide the set of registered AGDs into four categories:
1) Pre-registered domains (30.25%). Domains that
have been registered before Tf irst. These domains were
usually registered long before the corresponding botnet
appeared, and are very likely benign.
2) Mitigated domains (3.76%). Domains that were
originally held by a non-sinkhole registrant but then
changed to a sinkhole operator, usually indicating that
the domain has been mitigated (Section 5.6).
3) Pure sinkhole domains (16.24%). Domains regis-
tered by a sinkhole operator from the start.
4) Remaining domains (49.75%). This set contains
domains that were registered between Tf irst and Tlast but
we were not able to reliably identify them as sinkholes,
or otherwise tell whether they are benign or malicious
(mostly due to the use of a WHOIS privacy service).
However, the number of benign domains (at least for
non-wordlist DGAs) is highly likely to be a minority,
given that few DGAs have pre-registered domains and
the common randomness and domain length produced by
most DGAs.

5.4 Domain Collisions
In order to evaluate if AGDs are a good feature to reli-
ably identify the corresponding botnet, we analyze col-
lisions between domains generated by different DGAs.
Out of the 43 DGAs, the two aggressive DGAs Virut
and Conﬁcker have collisions among each other and with
Necurs, Nymaim, and Pykspa 2. More speciﬁcally, Virut
has 1791 collisions with Pykspa 2, 1316 with Conﬁcker,
and 179 with Nymaim. Conﬁcker has 11 collisions with
Pykspa 2, 4 with Necurs, and 1 with Nymaim. All of the
colliding domains are 5 to 6 characters long. Apart from
that, only Nymaim and Pykspa 2 have a single collision
since they both generate the AGD wttttf.net.

Next, we analyze collisions between DGA-generated
domains and benign domains. To this end, we use the
Alexa list [10] and compare it to the set of domains gen-
erated by each DGA. Again here, only a small num-

ber of collisions were found. Virut has 2507 collisions
with Alexa top million domains, which corresponds to
0,016% of its unique AGDs. For all other DGAs, we
only found 27 collisions with the Alexa list: 24 collisions
with wordlist-based DGAs (Suppobox: 21, Matsnu: 2,
Gozi: 1), and three collisions with Pykspa 2 domains that
are 6 character long.

We then investigated the collisions between DGA-
generated domains and domains that were already reg-
istered before the corresponding botnet appeared (before
Tf irst). As one would expect, the highest number of colli-
sions were observed with wordlist-based DGAs: 74.39%
of Suppobox AGDs and 40.0% of Matsnu AGDs col-
lide with already existing domains. In spite of being a
wordlist DGA, Gozi has a low number of collisions with
already registered domains. This is because the DGA
truncates, with a probability of 33%, a chosen word be-
fore appending it to the computed AGD. This creates
many domains that contain a broken word, making ac-
cidental registration far less likely. For the remaining
families, 856 of 928 (92.24%) pre-registered AGDs have
length 5 to 6, and everything longer is accidentally a
word (e.g. veterans.kz) or otherwise very pronounce-
able (e.g. kankanana.com, kandilmed.com).

These results clearly show that DGAs not based on
wordlists and generating domain names longer than 6
characters (which is the case for 34/43 DGAs) serve as a
reliable source to detect the corresponding botnet family.

5.5 Domain Registration Lookahead
A special property of AGDs from time-dependent DGAs
is, that they are only valid during certain periods of time.
In this section, we give insights into the domain reg-
istration lookahead for time-dependant DGAs, i.e., the
amount of time from registering the domain until the
point in time where it becomes valid (produced by the
DGA at that time). Here, we distinguish between sink-
hole and non-sinkhole registrations (potentially by bot-
masters).

Figure 2 provides an overview of our results for the 22
time-dependant DGAs in our dataset. For each family,
the results are summarized using a boxplot showing the
registration times of DGA domains relative to the start of
the corresponding validity periods (day zero). That is, a
registration event at x =−1 means that the corresponding
domain was registered one day before it became valid.
For better visualization, we choose a symmetric mixed
linear (for the ﬁrst 10 days) and logarithmic (everything
beyond) scale. This allows best to display data with a
ﬁner resolution around the majority of validity periods
but also allows to include events up to a thousand days
away. For better orientation, the red bars indicate the
whole validity period of AGDs per family. In this Fig-

272  25th USENIX Security Symposium 

USENIX Association

10

USENIX Association  

25th USENIX Security Symposium  273

Figure2:Lookaheadofdomainregistrationsintime-dependentDGAs,dividedintoidentiﬁablesinkholesandremainingdomains.ThedatainthisboxplotisappliedrelativetothestarttherespectiveAGD’svalidityperiod(showninlightredforbetterorientation).Bamital,GameoverP2P,CryptoLockerdataisfurtherdividedintopreandposttakedown(indicatedby†).ure,wedistinguishbetweenfourpossiblecategoriesforeachfamily:1)nonesinkholeregistrations;2)sinkhole(markedbyS)registrations;3)pre-takedownregistra-tions;and4)post-takedownregistrations(markedby†).NotethattheregistrationnumbersmayvaryfromthoseinTable3.ThisisaresultofplottingdataafterTfirstwithrespecttovaliditystartinsteadoftheregistrationdates.Themainobservationisthatfor14of22DGAs,sink-holeoperatorsregisteredthedomainsearlierthannon-sinkholers.Comparingthemediansofthesecasesre-vealsthatin7casessinkholeregistrationshappenbe-tween1and10daysearlier,whileintheremaining7casestheyhappenbetween18and143daysearlier.The143daysareforTorpig,wherethemajorityofsinkholedomainswereregistered5monthsinadvancewithclosevalidityperiods,whichseemstobeatakedownattempt.Thesecondhighestdifference(48days)wasforCryp-toLocker.For3/22DGAs,sinkholeandnon-sinkholeregistrationshappenedatthesametime.Intheremaining5/22DGAs,non-sinkholeregistrationsoccurredbetween2and37daysbeforesinkholeregistrations.InthecaseofGootkit,asinglesinkholeoperatorregis-teredDGAdomainsonthesamedaywhentheybecamevalid,indicatingareactiveresponsetothesedomainsbe-ingusedbythemalwarebutnotbeingtakenyet,poten-tiallyblockingthebotmasterfromregisteringthem.Sinkholeoperatorsusuallydonotfearthattheirdo-mainswillbetakenawaybyotherentities,whichex-plainsthegeneraltrendofsinkholersregisteringdomainsbeforebotmasters.Moreover,thisenablesthemtoeval-uateincomingtrafﬁcforthesedomainsevenbeforetheybecomevalid.Ontheotherhand,botmastershavetoassumethattheirdomainswilleventuallybemitigated.Asaresult,theyregistertheirdomainsshortlybeforeorinsidethevalidityperiodinordertoensuretheavailabil-ityofthesedomainswhenthebotsareexpectedtotrytocontactthem.ThismeansthatconstantmonitoringofAGDswithvalidityperiodsaroundthetakedowndateisanecessaryconditionforsuccess.Forthethreefamilieswithtakedowns,sinkholereg-istrationshappenedatleastweeksandoftenmonthspriortovalidityoftheAGDs.Thisensuresthatbot-masterscannotquicklyregaincontroloftheirbotnetbyregisteringfurtherAGDs.WhilethetakedownofGameoverP2P’sAGDswasseeminglycomplete,AGDsforbothBamitalandCryptoLockerwereregisteredbynon-sinkholersafterthetakedown.IncaseofCryp-toLocker,thesedomainswereregisteredshortlybefore11their validity started, indicating that not all domains re-
main blocked through the same central authority.

We observed an interesting pattern in the case of
Bamital. On January 1st, 2011, AGDs for January 4th,
2012, January 3rd, 2013, and January 4th, 2014 domains
were registered by the same registrant. We believe that
this was done by the operators of Bamital in an attempt to
timely secure insurance domains to be used as backup in
case of a later takedown, speculating that these domains
do not get discovered. We identiﬁed similar strategies by
the botmasters of Nymaim and Murofet. In case of Ny-
maim, on December 6th, 2012 and December 9th, 2012,
two domains becoming valid in 1 and 2 years respec-
tively were registered. For Murofet, on March 12th, 2011
and the 3 following days, 4 domains becoming valid in 1
year, 5 valid in 2 years, 3 valid in 3 years, and 3 valid
in 4 years have been registered. All of them use dif-
ferent, apparently fake identities but the same registrar.
This shows that potential registrations of AGDs should
be checked considerably far ahead during the preparation
of a takedown campaign.

The number for sinkhole registrations of Pykspa 1 and
Suppobox is impressively small. For these families, most
AGDs are registered with the same lookahead by single
sinkhole operators over longer periods of time. Regis-
tering only a small fraction of available domains indi-
cates botnet monitoring operations by sinkholers. On
the other hand, we observed many different entities in-
volved on non-sinkhole registrations of Suppobox do-
mains. Given the comparatively high collision rate with
benign domains (Section 5.4), we believe that many of
these domains belong to benign registrants. This shows
that the Suppobox DGA blends in very well with legit-
imate domain owners, allowing the botmasters to hide
their C&Cs among benign domains.

We observed a few peculiarities with regard to domain
registrations. Registrations for Gozi tend to be late for
both sinkholers and others. We found no coherent expla-
nation for this. Another oddity are the sinkhole registra-
tions for Szribi. While 8 registrations happened in 2008
when the botnet was active, another 32 registrations hap-
pened in 2015, more than 4 years after the botnet disap-
peared. Moreover, all of these 32 domains were regis-
tered one month after they became invalid. We believe
that the respective sinkholing organization used a wrong
DGA reimplementation to calculate the AGDs.

5.6 Mitigation Response Time
By mitigation we mean a change of domain ownership
from a non-sinkhole to a sinkhole operator. In this sec-
tion, we analyze the time offset for these events in order
to measure the effectiveness of these operations. Here,
we only consider DGAs where 10 or more mitigations

were identiﬁed that are not related to takedowns. Ta-
ble 4 summarizes the results of this examination. In most
cases, the ﬁrst mitigations against new DGAs or seeds
are carried out within a week.

One would expect that after initial identiﬁcation of a
DGA or a new seed for a DGA, all further mitigations
would have a much lower response time as the potentially
generated domains should be known. We observe rela-
tively short median reaction times ˜m for Murofet 1, Sup-
pobox, Gameover DGA, and TinyBanker. These are also
the DGAs where most AGDs were mitigated within their
respective validity periods. On the other hand, the coun-
termeasures for Bamital and CryptoLocker have been
very ineffective as they mostly targeted AGDs that were
no longer valid.

Response times for all other DGAs increase after the
ﬁrst mitigation. Interestingly, multiple follow-up mitiga-
tions for these DGAs were carried out on the same day.
This pattern corresponds to a common practice by de-
fenders. After identifying initial malicious domains, they
look at other domains that point to the same C&C server
by performing a reverse IP lookup. This identiﬁes addi-
tional AGDs which may have been registered even be-
fore the initially identiﬁed AGD. This was observed for
Nymaim, Ramnit, and UrlZone.

5.7 DGAs and Domain Parking
Next, we examine how many AGDs are registered to-
wards domain parking services. For identiﬁcation of
such domains, we used a procedure similar to Vissers et
al. [51]. In total, we found 6,458 AGDs that contained a
registration pointing to a parking service at some point in
time. This corresponds to the common practice that after
the registration period of an original owner ends, the ex-
pired domain is transferred to domain parking or picked
up by a domain reseller.

To our surprise, for 3,852 of these AGDs, the park-
ing registration was also the ﬁrst and in many cases only
registration entry. In particular, ﬁrst parking registration
events constitute a signiﬁcant portion of registrations for
the following DGAs: Banjori 620 (90.78%), QakBot 595
(54.69%), Pykspa 2 883 (45.82%), Necurs 122 (41.36%),
Pushdo TID 91 (37.14%), Ramnit 286 (30.46%), Muro-
fet 1 736 (23.20%). Except for Pykspa 2, none of these
DGAs has a signiﬁcant number of pre-registrations |RP|,
which makes unintended or accidental registration ex-
tremely unlikely.
It is also noteworthy, that for these
DGAs, 2,917 (87.52%) domains are registered with the
same domain parking service. With regard to validity pe-
riods, 464 out of 2336 (19.86%) time-dependent AGDs
are registered before the end of the respective validity
periods.
In this special case, together with the time-
independent AGDs, at least 1461 AGDs were potentially

274  25th USENIX Security Symposium 

USENIX Association

12

Name

Seeds Mitigations

Validity Period
after
within

Murofet 1
Bamital
Nymaim
Ramnit
CryptoLocker
Suppobox
DirCrypt
UrlZone
QakBot
Matsnu
Gameover DGA
TinyBanker
Bedep

1
1
2
16
1
2
7
4
1
2
2
51
2

50
148
16
126
216
19
13
24
33
33
14
272
10

37
16
4
-
25
13
-
-
15
11
9
-
4

13
132
12
-
191
6
-
-
18
22
5
-
6

mmin
25
6
1
2
9
3
0
0
0
2
0
0
2

˜m

¯m

25
6
16
19
9
117
3
4
0
2
1
3
5

25.00
6.00
16.00
34.60
9.00
117.50
7.00
6.75
0.00
2.50
1.50
6.39
5.00

First Reponse (in days)

¯m

Further Reponses (in days)
mmax
mmin
25
0
92
3
212
0
0
363
130
0
194
0
41
0
251
0
0
66
72
2
161
0
60
0
1
28

1.77
47.37
31.46
54.28
14.69
25.12
10.50
112.40
28.41
9.16
54.17
5.66
13.12

˜m

0
49
5
35
8
0
5
114
21
7
1
2
12

mmax
25
6
31
153
9
232
26
19
0
3
3
61
8

Table 4: Mitigation Response Timings for selected DGAs. For time-dependent DGAs, Validity Period describes the identiﬁed
mitigations for active and outdated AGDs. First Response is the time until the ﬁrst mitigation occurred, with values for minimum,
median, average, and maximum, aggregated over seeds. Further Responses describes the same measures for all following events.

abused to drive automatically generated trafﬁc from com-
promised hosts towards a domain parking system.

5.8 Discussion: Countering DGAs
In this section, we summarize the observations made in
previous sections and discuss how they inﬂuence coun-
termeasures against DGAs.

Looking at

the distribution of domain generation
schemes (Section 4.3), only 3 of 43 DGAs are based
on wordlists and therefore produce somewhat meaning-
ful domain names. On the other hand, methods for the
detection of domains that appear randomly generated are
well-studied [13, 34, 54] and our data suggests that they
remain relevant and applicable in the future.

As the study of activity periods has shown (Sec-
tion 5.2), DGAs have become very relevant to malware
authors, especially over the last 2 years, as 25 out of the
43 considered DGAs surfaced 2013 and later.

One of the core concepts of DGAs is the implied eco-
nomic asymmetry: A single valid domain grants an at-
tacker control while the defender needs to deny access
to all potential domains. The overall low number of ac-
tually registered AGDs (Section 5.3) underlines the fact
that attackers only need to make sparse use of all po-
tential domains when operating their botnets. Addition-
ally, since most attackers seem to register domains very
shortly before their validity or use (Section 5.5), there
is a high chance that they can be hit by surprise and
the perceived backup utility of DGAs can be cancelled.
However, having identiﬁed registration events up to 4
years upfront means future domains should be carefully
checked to ensure successful takedowns.

Our data indicates that in past takedowns, domains
were acquired on a large scale, imposing signiﬁcant ﬁ-
nancial efforts connected to the takedown. Having do-

mains registered as consequence of a takedown allows
them to be used as sinkholes in order to gather teleme-
try on compromised systems calling in. However, single
AGDs per validity period would be enough to achieve
the same monitoring effect, similar to how an attacker
only needs a single domain, as long as the remaining do-
mains are not available. Therefore, we propose to raise
awareness of the relevance and innerworkings of DGAs
to ICANN and make extensive use of blocking AGDs on
the level of registry operators. The expected impact of
blocking would actually be negligable for the majority
AGDs: 34/43 of the DGAs analyzed have AGDs with
minimum length 7 or more, for which we observed ba-
sically no collisions with existing domains for their en-
tire set of AGDs (Section 5.4), meaning that these do-
mains seem unlikely to be registered for benign purposes
anyway. In case of time-dependent DGAs, this block-
ing could even be lifted once the validity period of the
respective AGDs has passed, which could be a compro-
mise to address wordlist-based DGAs.

Furthermore, we identiﬁed only 3,302 collisions be-
tween 5 DGAs within 159,712,234 unique DGA do-
mains (Section 5.4). This means that a lookup database
of AGDs like our data set serves as a very reliable re-
source to aid the identiﬁcation of malware families based
on contacted domains with basically no false positives.
As a service to the community, we continue to col-
lect information on DGAs and provide this data for free
through DGArchive [38].

6 Related Work

Among others, the following works have addressed Do-
main Generation Algorithms in detail. Stone-Gross et
al. [50] have performed a botnet takeover for Torpig in
early 2009. Based on reverse-engineering, they took ad-

USENIX Association  

25th USENIX Security Symposium  275

13

vantage of the fact that this family was using a Domain
Generation Algorithm without further protection mech-
anisms in the C&C protocol. Their publication was one
of the ﬁrst descriptions detailing the concept of DGAs in
academic literature. Barabosch et al.[16] have deﬁned a
taxonomy of DGA types based on the 2 features time-
dependency and causality. They also explained a method
for the automated localization of DGA-related code us-
ing dynamic analysis for unpacking and API tracing in
combination with data ﬂow analysis for code extraction.
Mowbray et al. [34] have used collected DNS data to
identify potential DGA domains examining the query
source IP address and length distribution of queried do-
main names. With this approach they identiﬁed 19 differ-
ent schemes of AGDs and list a subset of characteristics
of those given in Table 1.

Several works target the detection of DGAs and other
maliciously used domains based on collected network
trafﬁc. In 2010, Yadav et al. [54] have evaluated several
statistical measures over character distributions and n-
grams in domain names in order to detect generated do-
main names through anomalies. Antonakakis et al. [13]
have presented Pleiades, a DNS-based system that de-
tects clusters of potential DGA domains by monitoring
unsuccessful DNS requests. As conﬁrmed by our work,
they built their system on the assumption that only a frac-
tion of AGDs is actually registered. They were able to
ﬁnd 6 new DGAs that were unknown at the time by eval-
uating trafﬁc from a large ISP. Another approach using
DNS data named Phoenix is proposed by Schiavoni et
al. [43]. They have deﬁned a model for pronounceable
domains and afterwards detect those domains deviating
from this model. Their system also groups identiﬁed
domains and allows tracking the activity of DGA-based
botnets. Bilge et al. [18] have introduced their system
Exposure. It is used to detect malicious domain names
based on a selection of 15 features observable for DNS
trafﬁc, including time-based, DNS answer-based, TTL,
and domain name features.

There are also works that explore capabilities of dy-
namic and proactive blacklisting. In 2009, Ma et al. [28]
have compared the usefulness of different information
sources for blacklisting. They found out that WHOIS
data, especially temporal information of registrations,
are very valuable in this regard. Antonakakis et al. [12]
have proposed Notos, a system to automatically assign
scores to domain names that can be used to automati-
cally generate blacklists. They focus on features of do-
main strings and TLDs. Xu et al. [53] have mentioned the
idea to pre-generate AGDs in order to enable predictive
blocking. However, they did not evaluate the effective-
ness of this idea, as shown by us in this paper.

Recently, Vissers et al. [51] have investigated the re-
lationship of domain parking services and malicious do-

mains, using DNS and WHOIS data sets. Nadji et al. [35]
have developed a concept for effective botnet takedowns
in which they identify covering potential DGA pres-
ence as important step for effectiveness. With regard to
the analysis of further innovations in C&C rendezvous
mechanisms, Holz et al. [23] have investigated Fast-Flux
Service Networks, while Rossow et al. [40] have per-
formed a survey of botnets using P2P mechanisms.

7 Conclusion

In this work, we presented the ﬁrst comprehensive mea-
surement study of domain generation algorithms as used
by modern botnets. Our study is based on reverse-
engineering the DGAs of 43 malware families and vari-
ants. Using reimplementations of the algorithms, we
generated a collection of 159,712,234 unique DGA do-
mains. We then performed an analysis on domain reg-
istrations, utilizing historic WHOIS data provided by
DomainTools. Our main ﬁndings are that our domain
dataset can be used for both predictive blocking of at-
tempted C&C accesses as well as the accurate determi-
nation of malware families and campaigns with basically
no false positives. Additionally, we characterized the
registration behavior of botmasters and sinkholers and
examined the effectiveness of domain mitigations.

further

information on DGAs.

As a further contribution, we continuously col-
lect
The full do-
main data set which results from our work is pub-
lished for
free here:
https://dgarchive.caad.
fkie.fraunhofer.de.
This web service called
DGArchive offers reverse domain lookups to support
malware analysis, as well as forward generation of do-
main lists, which can be particularly used as blocklists
for network protection.

Acknowledgments
The authors would like to express eternal gratitude to
the Shadowserver Foundation for continuously support-
ing malware research. We would also like to thank
the anonymous reviewers of USENIX Security as well
as Daniela Bennewitz, Arnold Sykosch, and Matthias
W¨ubbeling for their valuable feedback.

References
[1] W32/sality.m,

February

2006.

McAfee:

by
intelligence/malware/default.aspx?id=138354.

description
http://www.mcafee.com/threat-

Malware

[2] Conﬁcker Working Group: Lessons Learned. Tech. rep., The
Rendon Group, http://www.confickerworkinggroup.org,
January 2011.

[3] Ransom Cryptolocker. Tech. rep., McAfee Labs Threat Advisory,

November 2014.

276  25th USENIX Security Symposium 

USENIX Association

14

[4] Tracking Rovnix,

2014.

bitdefender.com/2014/11/tracking-rovnix-2/.

Blog post:

http://labs.

[5] Chasing cybercrime: network insights of Dyre and Dridex Trojan

bankers. Tech. rep., Blueliv, 2015.

[6] Pushdo It To Me One More Time. Tech. rep., Fidelis Cybersecu-

rity, April 2015.

[7] Tempedreve - Botnet overview and malware analysis. Tech. rep.,

Anubisnetworks, 2015.

[8] The Domain Name Industry Brief - Volume 12, Issue 3. Tech.

rep., Verisign, 2015.

[9] TLD DNSSEC Report, 2015.

Statistics page published by
http://stats.research.icann.org/dns/tld_

ICANN:
report/.

[10] ALEXA. Top sites on the Web, 2015. Website: http://www.

alexa.com/topsites.

[11] ANDRIESSE, D., ROSSOW, C.,

STONE-GROSS, B.,
PLOHMANN, D., AND BOS, H. Highly resilient peer-to-
peer botnets are here: An analysis of Gameover Zeus.
In
Proceedings of the 8th International Conference on Malicious
and Unwanted Software (MALWARE) (2013).

[12] ANTONAKAKIS, M., PERDISCI, R., DAGON, D., LEE, W.,
AND FEAMSTER, N. Building a Dynamic Reputation System for
DNS. In Proceedings of the 19th USENIX Conference on Secu-
rity (Berkeley, CA, USA, 2010), USENIX Security’10, USENIX
Association.

[13] ANTONAKAKIS, M., PERDISCI, R., NADJI, Y., VASILOGLOU,
N., ABU-NIMEH, S., LEE, W., AND DAGON, D. From Throw-
away Trafﬁc to Bots: Detecting the Rise of DGA-based Malware.
In Proceedings of the 21st USENIX Conference on Security Sym-
posium (2012).

[14] BADER, J. Domain Generation Algorithm analyses, 2015. Blog
posts on various DGAs: http://www.johannesbader.ch/
tag/dga/.

[15] BARABOSCH, T.

Behavior-Driven Development

in Mal-
ware Analysis: Can it Improve the Malware Analysis Pro-
cess?, 2015. Presentation: https://itsec.cs.uni-bonn.
de/spring2015/downloads/barabosch.pdf.

[16] BARABOSCH, T., WICHMANN, A., LEDER, F., AND
GERHARDS-PADILLA, E. Automatic Extraction of Domain
Name Generation Algorithms from Current Malware.
In Pro-
ceedings of the NATO Symposium IST-111 on Information Assur-
ance and Cyber Defence (2012).

[17] BAUMGARTNER, K., AND RAIU, C.

Sinkholing Volatile
Cedar DGA Infrastructure, 2015.
https:
//securelist.com/blog/research/69421/sinkholing-
volatile-cedar-dga-infrastructure/.

Blog post:

[18] BILGE, L., SEN, S., BALZAROTTI, D., KIRDA, E., AND
KRUEGEL, C. Exposure: A Passive DNS Analysis Service to
Detect and Report Malicious Domains. ACM Trans. Inf. Syst.
Secur. 16, 4 (Apr. 2014).

[19] DOMAINTOOLS. Company Proﬁle, 2015. Website: https://

www.domaintools.com/company/.

[20] FALLIERE, N.

W32.Virut:

Using Cryptography to
Prevent Domain Hijacking, 2011.
http:
//www.symantec.com/connect/blogs/w32virut-using-
cryptography-prevent-domain-hijacking.

Blog post:

[21] GASTESI, M., AND GEGENY, J.

Citadel Updates: Anti-
VM and Encryption change,
Blog post
for S21sec: http://securityblog.s21sec.com/2012/06/
citadel-updates-anti-vm-and-encryption.html.

June 2012.

[22] GEFFNER, J. End-To-End Analysis of a Domain Generating Al-
gorithm Malware Family. In Proceedings of the 2013 Blackhat
Conference (2013).

[23] HOLZ, T., GORECKI, C., RIECK, K., AND FREILING, F. Mea-
suring and Detecting Fast-Flux Service Networks. In Proceed-
ings of the 15th Annual Network & Distributed System Security
Conference (NDSS) (2008).

[24] KESSEM, L.

Shifu:

’Masterful’ New Banking Trojan Is
Blog post: https:

Attacking 14 Japanese Banks, 2015.
//securityintelligence.com/shifu-masterful-new-
banking-trojan-is-attacking-14-japanese-banks/.

[25] LEDER, F., AND WERNER, T. Know Your Enemy: Containing
Conﬁcker, To Tame a Malware. Tech. rep., The Honeynet Project,
http://honeynet.org, 2009.

[26] LEUNG, K., LIU, Y., AND KIERNAN, S. W32.Downadup.E

Technical Details. Tech. rep., Symantec, 2009.

[27] LIPOVSKY, R. Hesperbot - A new, Advanced Banking Trojan in

the Wild. Tech. rep., ESET, 2013.

[28] MA, J., SAUL, L. K., SAVAGE, S., AND VOELKER, G. M. Be-
yond Blacklists: Learning to Detect Malicious Web Sites from
Suspicious URLs. In Proceedings of the 15th ACM SIGKDD In-
ternational Conference on Knowledge Discovery and Data Min-
ing (New York, NY, USA, 2009), KDD ’09, ACM, pp. 1245–
1254.

[29] MALWARE PROTECTION CENTER.

MSRT April 2014
Malware description by Microsoft:

on Ramdo, 2014.
http://blogs.technet.com/b/mmpc/archive/2014/
04/08/msrt-april-2014-ramdo.aspx.

[30] MALWARE PROTECTION CENTER. Trojan:Win32/Emotet.C,
https:

Malware description by Microsoft:

2014.
//www.microsoft.com/security/portal/threat/
encyclopedia/entry.aspx?Name=Trojan:Win32/
Emotet.C.

[31] MARSAGLIA, G. Xorshift RNGs. Journal of Statistical Software

8, 1 (2003).

[32] MATROSOV, A. What do Win32/Redyms and TDL4 have in
common, 2013. Blog post: http://www.welivesecurity.
com/2013/02/04/what-do-win32redyms-and-tdl4-
have-in-common/.

[33] MATSUMOTO, M., AND NISHIMURA, T. Mersenne Twister:
A 623-dimensionally Equidistributed Uniform Pseudo-random
Number Generator. ACM Trans. Model. Comput. Simul. 8, 1 (Jan.
1998).

[34] MOWBRAY, M., AND HAGEN, J. Finding Domain-Generation
Algorithms by Looking at Length Distribution. In Proceedings of
the 25th IEEE International Symposium on Software Reliability
Engineering Workshops, ISSRE Workshops, Naples, Italy (2014).
[35] NADJI, Y., ANTONAKAKIS, M., PERDISCI, R., DAGON, D.,
AND LEE, W. Beheading Hydras: Performing Effective Botnet
Takedowns. In Proceedings of the 2013 ACM SIGSAC Confer-
ence on Computer and Communications Security (New York, NY,
USA, 2013), CCS ’13, ACM.

[36] PARK, S. K., AND MILLER, K. W. Random Number Genera-
tors: Good Ones Are Hard to Find. Commun. ACM 31, 10 (Oct.
1988).

[37] PIOTR KRYSIUK, V. T. Trojan.Bamital. Tech. rep., Symantec,

2013.

[38] PLOHMANN, D. DGArchive. Fraunhofer FKIE: https://

dgarchive.caad.fkie.fraunhofer.de.

[39] PRESS, W. H., TEUKOLSKY, S. A., VETTERLING, W. T., AND
FLANNERY, B. P. Numerical Recipes 3rd Edition: The Art of
Scientiﬁc Computing, 3 ed. Cambridge University Press, New
York, NY, USA, 2007.

USENIX Association  

25th USENIX Security Symposium  277

15

[40] ROSSOW, C., ANDRIESSE, D., WERNER, T., STONE-GROSS,
B., PLOHMANN, D., DIETRICH, C. J., AND BOS, H. SoK:
P2PWNED — Modeling and Evaluating the Resilience of Peer-
to-Peer Botnets. In Proceedings of the 34th IEEE Symposium on
Security and Privacy (S&P) (San Francisco, CA, May 2013).

[41] ROYAL, P. On the Kraken and Bobax Botnets. Tech. rep.,

Damballa, April 2008.

[42] SANDEE, M. GameOver ZeuS - Backgrounds on the Badguys

and the Backends. Tech. rep., Fox IT, 2013.

[43] SCHIAVONI, S., MAGGI, F., CAVALLARO, L., AND ZANERO,
S. Phoenix: DGA-Based Botnet Tracking and Intelligence. In
Detection of Intrusions and Malware, and Vulnerability Assess-
ment (DIMVA) (2014), vol. 8550 of Lecture Notes in Computer
Science.

[44] SCHWARZ, D.

Bedep’s DGA: Trading Foreign Ex-
post:

for Malware Domains,

change
Blog
https://asert.arbornetworks.com/bedeps-dga-
trading-foreign-exchange-for-malware-domains/.

2015.

[45] SECURITY RESPONSE. Butterﬂy: Corporate spies out for ﬁnan-

cial gain. Tech. rep., Symantec, July 2015.

[46] SECURITY RESPONSE. W32.Ramnit Analysis. Tech. rep.,

Symantec, February 2015.

[47] SEGURA, J. Elusive HanJuan EK Drops New Tinba Version,
https://blog.malwarebytes.org/

2015.
intelligence/2015/06/elusive-hanjuan-ek-caught-
in-new-malvertising-campaign/.

Blog post:

[48] SINEGUBKO, D.

Runforestrun and Pseudo Random Do-
for Unmask Parasites:

Blog post

June 2012.

mains,
http://blog.unmaskparasites.com/2012/06/22/
runforestrun-and-pseudo-random-domains/.

[49] SKURATOVICH, S. Matsnu. Tech. rep., Check Point Software

technologies Ltd., May 2015.

[50] STONE-GROSS, B., COVA, M., CAVALLARO, L., GILBERT,
B., SZYDLOWSKI, M., KEMMERER, R., KRUEGEL, C., AND
VIGNA, G. Your Botnet is My Botnet: Analysis of a Botnet
Takeover. In Proceedings of the 16th ACM Conference on Com-
puter and Communications Security (2009).

[51] VISSERS, T., JOOSEN, W., AND NIKIFORAKIS, N. Parking
Sensors: Analyzing and Detecting Parked Domains. In Proceed-
ings of the 2015 Network and Distributed System Security (NDSS)
Symposium (2015).

[52] WOLF,

J.

Technical details of Srizbi’s domain genera-
for Fire-
https://www.fireeye.com/blog/threat-

tion algorithm, November 2008.
Eye:
research/2008/11/technical-details-of-srizbis-
domain-generation-algorithm.html.

Blog post

[53] XU, W., SANDERS, K., AND ZHANG, Y. We Know It Before
You Do: Predicting Malicious Domains. In Proceedings of the
24th Virus Bulletin Conference (VB2014) (2014).

[54] YADAV, S., REDDY, A. K. K., REDDY, A. N., AND RANJAN, S.
Detecting Algorithmically Generated Malicious Domain Names.
In Proceedings of the 10th ACM SIGCOMM Conference on In-
ternet Measurement (2010), IMC ’10.

278  25th USENIX Security Symposium 

USENIX Association

16

