2013 IEEE Symposium on Security and Privacy

SoK: The Evolution of Sybil Defense via Social Networks

Lorenzo Alvisi

Allen Clement

UT Austin

MPI−SWS

Alessandro Epasto

Sapienza, U of Rome

Silvio Lattanzi

Google Inc.

Alessandro Panconesi
Sapienza, U of Rome

Abstract—Sybil attacks in which an adversary forges a
potentially unbounded number of identities are a danger to
distributed systems and online social networks. The goal of
sybil defense is to accurately identify sybil identities.

This paper surveys the evolution of sybil defense protocols
that leverage the structural properties of the social graph
underlying a distributed system to identify sybil identities. We
make two main contributions. First, we clarify the deep con-
nection between sybil defense and the theory of random walks.
This leads us to identify a community detection algorithm that,
for the ﬁrst time, offers provable guarantees in the context of
sybil defense. Second, we advocate a new goal for sybil defense
that addresses the more limited, but practically useful, goal of
securely white-listing a local region of the graph.

I. INTRODUCTION

The possibility that malicious users may forge an un−
bounded number of sybil identities, indistinguishable from
honest ones, is a fundamental threat to distributed systems
that rely on voting [11]. This threat is particularly acute
in decentralized systems, where it may be impractical or
impossible to rely on a single authority to certify which users
are legitimate [20]. The goal of sybil defense is to accurately
identify sybil identities1—“ideally, the system should accept
all legitimate identities but no counterfeit entities” [11]—
but simple techniques can be either too brittle (beating a
CAPTCHA [40] costs a fraction of a cent) or too blunt (IP
ﬁltering penalizes all users behind a NAT).

Against this background, Yu et al. have put forward a rad−
ically different approach [45], [46]: protecting a distributed
system by leveraging the social network that connects its
users. Intuitively, as long as sybil identities are unable to
create too many attack edges connecting them to honest
identities, it may be possible to separate the wheat from the
chaff by analyzing the topological structure of the users’
social graph. This style of sybil defense2 promises not only
to be more surgical, but offers a mathematically precise
and elegant way to characterize the robustness of a sybil
defense technique in terms of the number of attack edges it
can handle. The vision is to offer universal sybil defense
to all honest nodes in the system: as long as the social
graph conforms to certain assumptions, an honest node will

1Although this goal may be more accurately characterized as sybil
detection [38], we use here the term sybil defense originally proposed by
Yu [45] and widely adopted in the literature.

2Henceforth, mentions of sybil defense, unless speciﬁed otherwise, refer

to techniques that leverage the structure of social networks.

correctly classify almost all honest nodes in the graph while
rejecting all but a bounded number of sybil nodes [45].

Several protocols that embrace this style of sybil de−
[7], [10], [35], [42],
fense have since been proposed
[45], [46] and higher−level distributed applications that rely
on them are beginning to emerge [18], [19], [26], [36].

∼ ∗ ∼

The ﬁrst goal of this paper is to examine the promise
and the fundamental limits of universal sybil defense. We
will see that at
the core of this approach are a set of
assumptions about the structure of a social graph under
sybil attacks that, in essence, amount to modeling the social
graph as consisting of two sparsely connected regions: one
comprised of sybil nodes; and the other of honest nodes,
homogeneously connected with one another. We will report
on several studies, conﬁrmed by our own experiments, that
suggest that this model over−simpliﬁes the social structure
of the honest region of the graph: rather than homogeneous,
this region appears as a collection of tightly−knit
local
communities relatively loosely coupled with one another.

Our second goal for this paper is then to advocate a
realignment of the focus of sybil defense to leverage ef−
fectively the robustness of communities to sybil inﬁltration.
The intuition that motivates us is not new. Prior work has
suggested casting sybil defense as a community detection
problem [39] and asked whether it is possible to use off−the−
shelf community detection algorithms to ﬁnd sybils. On this
front, we make two contributions. First, we show that this
approach requires extreme caution, as the choice of the com−
munity detection protocol can dramatically affect whether
sybil nodes are accepted as honest. Second, we identify the
mathematical foundations on which the connection between
sybil defense and community detection rests: we identify a
well−founded theory and point to an established literature to
guide the development of future sybil defense protocols.

Our conclusion is that instead of aiming for universal
coverage, sybil defense should settle for a more limited
goal: offering honest nodes the ability to white−list a set
of nodes of any given size, ranked accordingly to their
trustworthiness. We believe that this is a good bargain, and
not just because it results in a goal that, unlike its alternative,
is attainable, but because (1) the guarantees it provides are
in practice what nodes that engage in crowd−sourcing [47]
or cooperative P2P applications [9], [25] need, and (2) the
computational cost of providing these guarantees depends

1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.33

382

only on the size of the desired white−listed set rather than,
as in techniques that aim for universal sybil defense, on the
total number of identities in the network.

The ﬁnal goal of this paper is to serve as a warning against
the danger of falling into a Maginot syndrome: the building
of an ever more sophisticated line of defense against attacks
that the enemy can easily circumvent. Indeed, evidence from
the RenRen social network [43] shows sybil attacks that
differ from what current sybil defenses anticipate and that,
despite their simplicity, can be devastating. We argue that
the key to address this challenge is defense in depth, where
early defense layers (of which we sketch a few) are designed
to catch the simple sybil subgraphs that current defenses are
ill−equipped to detect.

Finally, a friendly warning. Achieving the goals we have
outlined requires a good mathematical understanding of the
problem and of the techniques developed to address it.
At times the discussion will be technical; we hope that
the persevering reader will be rewarded. Bear with us.

∼ ∗ ∼

The paper proceeds as follows. Section 2 examines four
fundamental structural properties of social graphs (popular−
ity, small world property, clustering coefﬁcient, and con−
ductance) and asks: which can better serve as a foundation
for sybil defense? The answer, we ﬁnd, is conductance,
a property intimately related to the concept of mixing
time of a random walk. We then proceed in Section 3 to
discuss protocols that exploit variations in conductance as
a basis for decentralized universal sybil defense [10], [35],
[42], [45], [46]. These protocols provide elegant worst−case
guarantees when it comes to their vulnerability to sybil
attacks; however, these guarantees are critically sensitive
to a set of assumptions that do not appear to hold in
actual social networks [6], [17], [23]. This motivates us
to explore, beginning with Section 4, an alternative goal
for sybil defense that leverages two observations: (1) social
graphs have an internal structure organized around tightly−
knit communities and (2) the graph properties crucial for
sybil defense are signiﬁcantly more likely to hold within a
community rather than in the entire social graph. Section
5 reviews recent work on the theory of random walks
that provides a solid theoretical foundation to sybil defense
based on community detection; we deepen our investigation
of random walks in Section 6, where we show how the
well−known concept of Personalized PageRank (not to be
confused with PageRank itself) offers honest nodes a path
towards a realistic target for sybil defense that
is more
limited than universal coverage but nonetheless useful: a
way to white−list trustworthy nodes that proves efﬁcient
and robust in both theory and practice. After all this effort,
Section 7 greets us with a sobering result: in spite of their
sophistication, state of the art sybil defense protocols are
helpless against very crude real−life sybil attacks. However,
we show that sybil defense protocols based on random walks

continue to be effective when used in combination with
very simple checks that leverage structural properties of
the social graph other than conductance. Section 8 offers
our conclusions and points to directions for possible future
research.

II. SYBIL DEFENSE VIA SOCIAL NETWORKS

it

Sybil defense via social networks is predicated on the
assumption that
is possible to leverage the structural
properties of the social graph G underlying a distributed
system to differentiate the honest subgraph H from the
sybil subgraph S. In this section, we ask a basic question:
which structural property, if any, is most promising towards
defending against sybil attacks?

A. Structural properties of social graphs

We consider (and brieﬂy review below) four well−known
structural properties that are commonly viewed as charac−
terizing social graphs: the popularity distribution among its
nodes [5], the small world property [41], the value of its
clustering coefﬁcient [41] and its conductance [17].

Popularity: The node degree distribution of social graphs
is heavy−tailed, as in a power−law or lognormal distribution.
Small world property: The diameter of a social graph—
i.e., the longest distance between any two nodes in the
graph—is small.

Clustering coefﬁcient: A measure of how closely−knit is
a social network. When we associate a network vertex v with
the user u that it represents, the vertex’ clustering coefﬁcient
cv is the ratio between the actual number of friendships
between the friends of u and the maximum possible number
of friendships between them. Formally, let fv denote the
actual number of edges between neighbors of v, i.e. fv :=
(cid:2)
|{xy : x ∈ Nv, y ∈ Nv, xy ∈ E}; and let k be the maximum
, where
number of edges between neighbors of v: k =
fv
deg(v) denotes v’s degree. Then, cv :=
k . The clustering
coefﬁcient of a graph is the average clustering coefﬁcient of
all its vertices, i.e. c(G) :=

(cid:4)

deg(v)

v∈V (G)

cv|V | .

(cid:3)

2

Conductance: Social graphs are conjectured to be fast-
mixing, meaning that if we take a random walk in a social
graph we will quickly arrive at a random point. This property
is at the core of many solutions developed for sybil defense.
A graph’s mixing time [30], which informally conveys the
minimum length of a random walk that ends on a uniformly
random edge, is intimately related to the concept of con−
ductance: when conductance is high, mixing time is low.
Intuitively, the conductance of a set S of vertices, denoted
by ϕ(S), in a given network is the ratio between the number
of edges going out from S and the number of edges inside
S. More precisely, given a set of vertices S, the conductance
of the set is deﬁned as

|cut(S)|
vol(S)

ϕ(S) :=

383

Graph

DBLP [1]
... p = 0.01
... p = 0.10
Epinions [28]
... p = 0.01
... p = 0.1

Facebook [37]
... p = 0.01
... p = 0.10
WikiTalk [15]
... p = 0.01
... p = 0.10

Nodes
718115
1436230
1436230
26588
53176
53176
63392
126784
126784
92117
184234
184234

Edges
2786906
5601767
5851341
100120
201197
210291
816886
1641891
1715206
360767
725152
757729

Attack Edges Diameter

90% Diameter

Clustering Coeff

Est. Conductance

0

27955
277529

0
957
10051

0

8119
81434

0

3618
36195

20
19
17
16
16
14
12
14
13
9
10
10

Table I

7.43
7.94
7.02
5.98
6.72
5.97
5.15
5.79
5.25
4.63
5.02
4.75

0.73
0.71
0.67
0.23
0.23
0.21
0.25
0.25
0.23
0.14
0.13
0.12

0.016
0.006
0.031
0.020
0.005
0.027
0.020
0.005
0.020
0.048
0.005
0.053

STATISTICAL PROPERTIES OF THE LARGEST STRONGLY CONNECTED COMPONENT IN A COLLECTION OF REAL WORLD DATA SETS. THE VALUES
REPORTED REFLECT THE PROPERTIES OF THE DATA SET BEFORE AND AFTER THE ATTACK SPECIFIED IN SECTION II−B. THE DBLP GRAPH IS A
SNAPSHOT OF THE DBLP CO−AUTHOR GRAPH FROM 2011; THE EPINIONS GRAPH IS A DATASET FROM THE EPINIONS PRODUCT REVIEW SITE
OBTAINED IN 2003; THE FACEBOOK GRAPH IS A CRAWL OF THE FACEBOOK−NEW ORLEANS COMMUNITY IN 2007; THE WIKITALK GRAPH IS

DERIVED FROM THE WIKIPEDIA PAGE EDIT HISTORY AS OF JANUARY 2008.

(cid:4)

where the volume of S is deﬁned as vol(S) :=
v∈S deg(v)
(the sum of the degrees of vertices in S), and the cut induced
by S is the set cut(S) of edges with one endpoint in S and
the other endpoint outside of S. Finally, the conductance of
a graph G is deﬁned as

ϕ(G) := min

vol(S)≤|E| ϕ(S).

B. Which property is most resilient?

Consider a social network G in which every node is
honest, and assume a sybil defense that uses a structural
property of the social graph to correctly classify every node.
An attack that somehow turns some of the nodes in G into
sybils, without otherwise affecting the social network, will
be undetectable, since it will change nothing tangible. We
could term this a perfect attack. Similarly, if an adversary
can add sybil identities to G without altering G’s structural
properties, then any sybil defense that tries to leverage those
properties will be circumvented.

We can however compare the four structural properties
above in terms of the effort they require of an adversary
bent on evading detection: in particular, we measure the
number of attack edges that the adversary needs to create to
be undetectable.

To this end, we assume that a graph H with n honest
nodes is given and that the attack induces a graph S of
sybil nodes. While H is ﬁxed, the adversary has full control
over S and can build it so that its structural properties
are indistinguishable from those of H—for simplicity, we
assume that S is an exact copy of H.
The adversary tries to set up m := |E(H)| potential attack
edges that connect H with S. We assume that the endpoints
of these edges in both H and S are chosen by preferential
attachment, i.e. a vertex v is chosen with probability

deg(v)

2m

(1)

384

As we will see, preferential attachment is crucial to not alter
properties of the social network and in particular its degree
distribution.

If the attacker is able to create arbitrarily many attack
edges, no sybil defense can hope to distinguish between the
two regions of the graph. Therefore, as customary in the
sybil defense literature [45], [46], we assume that the at−
tacker’s ability to create attack edges is limited; in particular,
we postulate that tentative attack edges are accepted with
probability p and rejected with probability 1 − p, resulting
in a set A of attack edges. To account for the outcome of
recent social engineering experiments [6], we allow p to
be constant: the expected cardinality of A is then pm. We
denote with G the graph that results from joining S to H
via A.

Under this simple attack model, how resilient are then the

four deﬁning structural properties of social graphs?

1) Popularity: We ﬁnd that it is trivial for the adversary
to make sure that G’s popularity distribution is statistically
indistinguishable from that of H. We prove [2] that a) the
expected degree of an honest node in G is barely higher than
in H and b) moving to G will, in essence, at most double
the degree of a popular honest node.

(a) For each v ∈ H, E[degG(v)] =
Proposition 1.
p
.
then
degH (v)
degH (v) ≤ degG(v) ≤ degH (v) (2 + p) with probability
2
1 − o(1).

If degH (v) > 6 log n,

1 +

(b)

(cid:2)

(cid:3)

Figure 1 plots of the degree distribution of the Facebook
network before and after two attacks in which attack edges
are inserted respectively with probability p = 0.01 and
p = 0.1: the curves before and after the attacks have the
same shape. Indeed, an attack that introduced no attack
edges would produce the same curve! We conclude that
popularity is ill−suited as a foundation for sybil defense.

s
e
d
o
n

 
f

o

 
r
e
b
m
u
N

 100000

 10000

 1000

 100

 10

 1

 1

original
attacked p=.1
attacked p=.01

 10

 100

Node Degree

(a) Facebook

 1000

 10000

probability

The implications of this theorem are disappointingly clear:
the clustering coefﬁcient
is not a good basis for sybil
defense, since even after the attack its value cannot drop by
too much. In fact, if the number of attack edges is smaller
than pm, with high probability there will be only a constant
change in the clustering coefﬁcient. The Clustering Coeff
column of Table I conﬁrms the theorem’s predictions.

4) Conductance: Yu et al. [45] prove that for graphs
whose conductance is asymptotically constant, an adversary
that can introduce O(n) attack edges can build a graph G
whose conductance is indistinguishable from that of H. We
generalize that result to graphs of arbitrary conductance as
follows [2].

Figure 1. Degree distribution of the Facebook graph before and after
attack. The attack shifts the distribution up (because it doubles the size of
the graph) and to the right (proportionally to the number of attack edges),
but does not change the shape of the curves.

2) Small world property: The small world property does
not fare much better than popularity, since the adversary can
easily keep the diameter of G from growing suspiciously.
First, it is easy for the adversary to bound the relative growth
of the diameter of G with respect to that of H: if S = H
and the adversary succeeds in inserting just one attack edge
the diameter can at most double. The following proposition
immediately follows [2]:

Proposition 2. A sybil attack can at most double the
diameter of H.

Second, it is easy for the adversary, who has full control
over S, to effect any change to the diameter slowly, so that it
appears completely physiological. Our experimental evalua−
tion of several real life social networks shows (90% diameter
column of Table I) that the 90%−effective diameter [16],
which measures the maximum distance between 90% of the
pair of nodes, is indeed barely affected under attack.

3) Clustering coefﬁcient: Leveraging the clustering co−
efﬁcient appears promising because attack edges reduce
its value. Unfortunately, while the clustering coefﬁcient of
social networks is typically high, its value varies signif−
icantly from network to network [17], from 0.79 in the
actor collaboration network of IMDB, down to 0.35 for Live
Journal and to a mere 0.09 for the social network of Yahoo!
Messenger chat exchanges. Thus, if an attack modiﬁes the
clustering coefﬁcient by a small multiplicative factor, the
change is hard to detect, especially if made very gradually.

We capture that intuition in the following result [2].

Theorem 1. Let H be the graph of honest nodes and let
G be the network under the sybil attack described in II-B.
Also, let α := 8(1 + 1
2 p)2, where p is the probability that an
attack edge is accepted. Then, c(G) ≥ α
−1c(H) with high

(cid:4)

(cid:4)
sybil nodes with m

Theorem 2. Let H denote a network of n honest nodes and
m edges such that ϕ(H)m = Ω(log n), and let S denote a
edges such that ϕ(S) ≥
network of n
ϕ(H) and ϕ(H)m ≤ m
(cid:4) ≤ m. Suppose further that the
−1
adversary is able to establish between ϕ(H)m log ϕ(H)
and m attack edges. Then, with high probability, ϕ(G) =
Ω(ϕ(H)).

The fundamental implication of the theorem is that if

the adversary is able to introduce at least ϕ(H)m log
ϕ(H)
attack edges (i.e., O(m) attack edges when the mixing time
is O(log n)), then the conductance of the graph will with
high probability remain very nearly the same.

1

Table I conﬁrms the theorem’s message that an adversary
that succeeds in generating sufﬁciently many attack edges
can circumvent any technique that attempts to detect sybil
nodes by looking for signiﬁcant changes in global con−
ductance. As expected, the conductance drops signiﬁcantly
under a weak attack (p = 0.01), providing leverage for sybil
detection. However, under a strong attack (p = 0.1) the con−
ductance may actually increase because, by adding random
attack edges, the adversary enlarges every cut with some
probability, including the cut with minimum conductance
which deﬁnes the conductance of the entire network.

Note that computing a graph’s conductance is NP−hard.
The conductance values that we report are approximate and
were obtained using the the approximation method proposed
by Leskovec et al. [17].

C. Discussion

None of the structural properties of social graphs that we
have considered provides full−proof defense against sybil
attacks in general, or even against the speciﬁc attack we
have assumed. However, as Table II shows, when a graph
under attack is observed through the lens of conductance, the
adversary has to work much harder to look inconspicuous.
These results both motivate and justify the insight of Yu
and his collaborators to rely on conductance in the work
that jump−started sybil defense via social networks [46]. We

385

Number of edges to circumvent it

|A| ≥ 0
|A| ≥ 1

0 ≤ |A| ≤ m

Property

Degree distribution

Diameter

Clustering coefﬁcient

Conductance

ϕ(G)m log ϕ(G)−1 ≤ |A| ≤ m
Table II

THE TABLE SHOW HOW MANY EDGES ARE NEEDED FOR THE ATTACKER

TO CIRCUMVENT THE MAIN 4 PROPERTIES OF SOCIAL NETWORKS.

review their approach, its successes, and what we believe to
be ultimately its fundamental limitations in the next section.

III. LEVERAGING CONDUCTANCE TOWARDS UNIVERSAL

SYBIL DEFENSE

The vision behind the seminal work of Yu and his collab−
orators is to develop a decentralized approach to universal
sybil defense, with the goal of allowing honest users to
correctly assess with high probability the honesty of every
other user in the system. False positive and false negatives
would still be possible, but they would be few and, further,
their number would be bound within a rigorous theoretical
framework. This compelling vision, ﬁrst articulated in the
SybilGuard protocol [46], is further reﬁned in their later
work on SybilLimit [45] and has inspired several other
efforts in sybil defense [7], [10], [35], [42].

We begin this section by discussing the main intuition
underlying these techniques and the guarantees that they
provide; we then proceed to discuss the crucial role that
a set of key assumptions play in ensuring those guarantees
and present evidence suggesting that the assumptions do not
appear to hold in actual social graphs.

A. Picking whom to trust

In all these protocols, an honest node determines which
nodes to trust on the basis of a sample of the social graph
collected by using random walks. Different protocols apply
sampling in different ways and to different parts of the
graph. SybilLimit [46] samples edges; SybilGuard [45] and
Gatekeeper [35] sample nodes in the graph; SybilInfer [10]
uses the random walks to build a Bayesian model for
the likelihood that a trace T was initiated by an honest
node. In the following, we provide an overview of how
SybilLimit [46] applies the random sampling of edges to
identify honest users. While the details of the discussion are
speciﬁc to SybilLimit, the intuition for how the structural
properties of the graph make random sampling effective is
common to this entire family of protocols.

Let us consider a particularly simple version of the sybil
detection problem. We are given two disjoint graphs H and
S—the graph of honest and, respectively, sybil nodes; an
honest vertex u—the seed; and a vertex v. Our task is to
determine whether v belongs to H or to S. Both nodes select
an edge at random: u accepts v if they pick the same edge.

The probability of collision is very low, 1

m . To boost it
√
we can use the classic birthday paradox. Vertex u picks a
set Su of, say,
m distinct edges, while v picks a set Sv
m edges independently at random: now u accepts v if
of
there is a collision (i.e. Su ∩ Sv (cid:8)= ∅). This probability is

√

1 − Pr(no collision) = 1 −

(cid:5)
1 − 1√

m

(cid:6)√
m∼ 1 − 1

e

(2)

√

a good probability of success. Note now that the set Su can
itself be picked at random. Since |Su| =
m (cid:11) m, almost
√
all edges will be distinct. This simple protocol succeeds
with good probability: each vertex picks a set of
m
edges independently and uniformly at random. If the two
sets intersect, then u accepts v, otherwise it does not. The
protocol is symmetric and can be used by both u and v
to determine whether to trust one another. This basic idea
can be further reﬁned to obtain a test that succeeds with
overwhelming probability with small−sized edge sets.

Suppose now we have two disjoint graphs and two ver−
tices: we want to determine whether or not they belong to
the same graph. If vertices are restricted to pick the edge set
from their own graph, the simple protocol above provides
the membership test we are looking for: if the two vertices
live in different graphs the chance that they trust each other
is zero, otherwise it is given by Equation (2).

the test

But how can we implement

in a distributed
fashion? A simple approach is to take a random walk in the
graph—which, in the interest of efﬁciency, should be very
short—and pick the last edge of the walk. This is a correct
implementation of the test as long as the short random walk
picks edges at random (i.e., every edge is equally likely to
be selected). It is here that the graph’s mixing time enters
the picture: it is the minimum length of a random walk
that selects edges in an unbiased way.3 Networks for which
random walks of length O(log n) are sufﬁcient (i.e., have
mixing time O(log n)) are said to be fast mixing.

Therefore, if we assume that the graph of honest nodes
is fast mixing, we have a very good protocol for sybil
detection, as long as H and S are disjoint. In reality,
however, H and S are connected through the attack edges
that nodes in S have convinced nodes in H to accept: it is
then possible that a random walk starting from v ∈ S will
traverse an attack edge, enter H, and pick one of the edges
selected by u ∈ H. The intuition is that, as long as the cut
between H and S is sparse, such situations are sufﬁciently
unlikely that
the mechanism continues to function with
good probability. Indeed, as we already mentioned, Yu et
al. prove [46] that as long as the number of attack edges
is bound by o( n
log n ), then this approach can effectively
distinguish between honest and sybil nodes.

386

Graph
DBLP
... preprocessed
Epinions
... preprocessed
Facebook
... preprocessed
Wiki−Talk
... preprocessed

Nodes
718115
191172
26588
5624
63392
40757
92117
13069

Edges
2786906
1438509
100120
57341
816886
632597
360767
133343

Diameter

90% Diameter

Clustering Coeff

Est. Conductance

20
15
16
7
12
7
9
5

7.43
5.97
5.98
3.89
5.15
4.43
4.63
3.78

Table III

0.73
0.60
0.23
0.18
0.25
0.23
0.13
0.06

0.016
0.020
0.020
0.040
0.020
0.023
0.047
0.333

STATISTICAL PROPERTIES OF THE GRAPHS BEFORE AND AFTER PREPROCESSING. PREPROCESSING DRASTICALLY REDUCES THE GRAPHS’ SIZE AND

SIGNIFICANTLY ALTERS THEIR STRUCTURAL PROPERTIES.

Original Graph
 Preprocessed Graph

  1

  0.8

  0.6

  0.4

  0.2

n
o
i
s
i
c
e
r
P

DBLP

Epinions

  0
Figure 2.
The precision of SybilLimit when recall is 95% on each of
the social networks we consider when p = 0.01. Other SybilLimit−like
protocols show qualitatively similar results.

Wiki−Talk

Facebook

B. Cracks in the foundations

There are then two fundamental assumptions that underly
this elegant approach towards decentralized universal sybil
defense. The ﬁrst is that the cut between the sybil and
honest region—the set of attack edges— is suitably sparse.
The second is that the mixing time of the honest region
is O(log(n)). The combination of these two assumptions
ensures that random walks of Θ(log n) steps will end in a
random edge in the honest region with high probability.

Recent literature has cast doubts on whether these assump−
tions hold in practice. Social graphs do not seem to be fast
mixing after all [17], [23], and the probability with which
fake identities are accepted as friends is much higher than
anticipated [6], [43], implying that the set of attack edges
is not as sparse as assumed. We then ask: to what degree
are SybilLimit−like protocols sensitive to their assumptions
about sparse cuts and mixing time?

To answer this question, using SybilLimit [46] as repre−
sentative (we ﬁnd that the behavior of other SybilLimit−like
protocols is similar), we produce, as in [39], a ranking of
nodes with respect to a given veriﬁer node u, in decreasing
order of trust: the ﬁrst node in the ranking is the node that
u trusts the most. We then measure the defensive efﬁcacy
of SybilLimit by using two metrics well known in the ﬁeld
of information retrieval: precision and recall. In particular,
we deﬁne the precision at position k as the fraction of

3The discussion in this section is informal for the sake of clarity.

387

 1.2

 1

 0.8

 0.6

 0.4

 0.2

0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09

i

i

n
o
s
c
e
r
P

 0

 0

 0.2

 0.4

 0.6
Recall

 0.8

 1

 1.2

Figure 3.
for p (ranging from 0.01 to 0.10). The number of attack edges is pm.

Precision vs Recall of SybilLimit and the Facebook network

honest nodes among the k nodes that the protocol ranks
the highest. Similarly, we deﬁne the recall at position k as
the ratio between the number of honest nodes among the top
k positions in the ranking and the total number of honest
nodes in the network.

SybilLimit−like protocols do not operate on raw social
networks: they are to be used only on networks that have
been preprocessed by iteratively removing all nodes with
degree lower than ﬁve [46]. Table III shows the statistical
properties of the graphs we use in our experiments.
Sensitivity to sparse cuts. Figure 3 plots SybilLimit’s pre−
cision versus recall for the preprocessed Facebook data set.
SybilLimit proves very effective when the number of attack
edges is within the theoretical bound (which corresponds
to p = 0.01). Once the bound is exceeded, however, the
performance of SybilLimit decays rather quickly.
Sensitivity to mixing time. Mohaisen et al. [23] are the ﬁrst
to observe that this step, while boosting the mixing time
of social graphs to the level required by SybilLimit to be
effective, can also reduce the size of the graph. Table III
conﬁrms this observation:
the
preprocessing step removes over 85% of the nodes. Removed
nodes are effectively considered sybils by the protocol, and
while those nodes may still be able in some circumstances to
enlist other nodes in the network as proxies [45], it is unclear

in the case of Wiki−Talk,

in general how removed nodes can safely take advantage of
honest nodes’ resources and vice versa [23].

C. Discussion

The goal of universal decentralized sybil defense with
strong theoretical guarantees, which has driven early re−
search on sybil defense via social networks, rests on assump−
tions (short mixing time and cut sparseness) whose validity
is at best dubious. What to do? In a recent survey [44], Yu
suggests a couple of ways forward: one could offer sybil
defense only to the nodes in the core of the social graph, in
effect institutionalizing the removal of nodes that are not as
well connected; or one could simply renounce the elegant
theoretical worst−case claims of the current framework and
rely instead on “weaker but less clean assumptions” [44].
In the next section, we explore a third alternative that offers
every honest node a useful degree of sybil protection without
compromising on elegance and rigor.

IV. COMMUNITIES

The theoretical guarantees offered by the protocols dis−
cussed so far hold only as long as honest nodes are closely
connected to one another everywhere in the social graph and
the cut between honest and sybil nodes is sparse. Empirical
evidence suggests a different reality: social graphs consist
of communities, each a tightly knit sub−network [17], [23].
Indeed, it is quite conceivable that the cut between two
tightly−knit communities of honest nodes A and B be as
sparse as the cut between A and the sybil region: to an
honest node in A using a protocol in the style of SybilLimit,
a sybil node would then be indistinguishable from an honest
node in B [38], [39].

While these considerations argue against universal sybil
defense, they suggest an alternative goal: to provide each
honest node u with the ability to white−list a trustworthy
set of nodes—namely those in the community to which u
belongs. This new goal can be more precisely stated as
follows:

Problem 1. Let u be an honest user and S a subset of the
honest region such that: (a) u ∈ S, (b) S has mixing time τ

Figure 4. Two edge attack.

388

(cid:7)

(cid:8)

|S|
τ

edges between S and the
and (c) there are at most o
rest of the social graph. We want an algorithm capable of
distinguishing almost perfectly between the nodes in S and
the nodes outside of S.

We make two observations. First, the problem of universal
sybil defense is a special case of Problem 1 in which τ =
O(log n) and S is the entire honest network. Second, sybil
defense appears, informally, to reduce to the task of detecting
the “community” S.

The fundamental afﬁnity between community detection
and sybil defense has been ﬁrst observed by Viswanath et
al [39]. After pointing out that, from the perspective on an
honest node, SybilLimit−like protocols separate the social
graph in two communities—honest nodes and sybils—they
go on to ask a natural follow−up question: can off−the−shelf
community detection algorithms be used to detect sybils?
Their answer is mixed: on the one hand, they show that
a generic community detection algorithm due to Mislove
[21] (also a co−author in [39]) achieves results comparable
to those of SybilLimit−like protocols on both a synthetic
topology and a real−life Facebook social graph; on the other,
they observe that attackers wise to the community substruc−
ture of the honest portion of the social graph can manage,
as we discussed above, to make the sybil region appear
indistinguishable from a sub−network of honest nodes.

We believe that a ﬁrst step towards a more conclusive
answer is to recognize that casting the problem simply in
terms of generic community detection leaves it underspeci−
ﬁed. While intuitively compelling, the notion of community
is ambiguous, as the many community detection algorithms
found in the literature, each aiming for a subtly different
notion of community, clearly indicate [12]. But what should
be the basis for the notion of community to be used in sybil
defense?

A. The minimum conductance cut

A somewhat obvious candidate to serve in this role is
conductance. Conductance is hard to tamper with (see Sec−
tion II) and it is intimately related to mixing time, a critical
property to leverage against sybil attacks (see Section III).
It is tempting to deﬁne the problem of sybil defense in
terms of the minimum conductance cut problem found in the
community detection literature:

Problem 2. Find a set S whose conductance ϕ(S) is as
close as possible to ϕ(G), the minimum conductance of the
graph.

If we believe that the honest region is fast mixing and
that it is connected to the sybil region via a sparse cut, the
set S should be very close to capturing the entire honest
region. This view is of course too simplistic and can lead to
community detection algorithms that can be circumvented
by an adversary using far fewer attack edges than needed

to dupe SybilLimit−like protocols. Mislove’s algorithm [21]
serves, in this sense, as a cautionary tale.

Mislove’s algorithm is a heuristic algorithm that ﬁnds
small conductance cuts—which is, in essence, analogous to
ﬁnding an approximate solution to Problem 2. The set S is
built greedily. Starting from a vertex u, the algorithm grows
S by incorporating the vertex v connected to S that results
in a set S ∪ {v} with minimal conductance.4

Although this simple heuristic appears to capture the
intuition behind Problem 2, it fails against the following
simple attack. Let v be an honest node, that has no neighbor
of degree at most 3. We create the sybil region with nodes
s0, s1, . . . , sn as follows:

• s0 and s1 are connected to v.
• For every i ≤ n − 2, si is connected with the next two
sybil nodes in the sequence si+1, si+2, and also with
the previous two, si−1, si−2.

Figure 4 illustrates the attack, involving only the two attack
edges connecting v to s0 and s1, that results in Mislove’s
algorithm deterministically admitting every node of the sybil
region5 (see [2] for a full proof).

B. Discussion

Reframing sybil defense to leverage the community sub−
structure that exists in social graphs requires a deep un−
derstanding of the relationship between sybil defense and
conductance—in essence, understanding when a solution to
Problem 2 is also a solution to Problem 1. The key to the
approach we explore in subsequent sections relies, at a local
scale, on a technique central to the efforts towards universal
sybil defense discussed in Section III: random walks.

V. FAST MIXING COMMUNITIES

Because of its tight connection with the theory of random
walks, the minimum conductance cut problem that we have
used to formalize the intuitive relationship between sybil
defense and community detection has been studied in depth.
Problem 2, as we have called it, is NP−hard, so the best
that can be hoped for is an approximate solution. Several
sophisticated algorithms offer non trivial guarantees on the
quality of their approximation to the problem [4], [14], [31],
but they have two serious drawbacks when it comes to large
social graphs: they are not obviously parallelizable and their
running time is polynomial in the size of the entire graph. We
then consider a different style of techniques that offer less
stringent guarantees on the approximations they produce but
whose time complexity depends only on the size of the set S
we are trying to identify, which we expect to be signiﬁcantly
smaller than the size of the entire social graph.

4The original proposal for Mislove’s algorithm [21] relies on a normal−
ized conductance metric, but in the context of sybil defense the protocol
is evaluated using just conductance [39]. For consistency, we follow the
approach of the second paper.

5Furthermore this attack can be modiﬁed to withstand also the prepro−

cessing deﬁned in section III−B

The ﬁrst such “local” algorithm was developed by Spiel−
man and Teng [32]. Very roughly, their idea is to associate
a weight with each node and to identify as part of the com−
munity all nodes whose weight exceeds a certain threshold.
To determine the weight of a node they effectively run many
truncated random walks of the same length t ∈ ˜O(φ
−1), all
originating from the same node (the seed): a node’s weight
is given by the frequency with which it is visited normalized
by degree. The potential of this algorithm for sybil detection
becomes evident once one interprets the weight of a node
v as a measure of the trust that the seed node puts in v.
Indeed, the recent sybil detection protocol SybilRank [7] is
essentially an implementation of the algorithm of Spielman
and Teng, run using multiple seed nodes.

Since the work of Spielman and Teng, however, the use
of truncated random walks for computing low conductance
cuts has been further reﬁned. In particular, Andersen, Chung
and Lang [3] originate many random walks from the honest
seed, as in [32], but the length of their random walks, instead
of being ﬁxed, is determined by means of a (geometri−
cally distributed) random variable. This algorithm has two
properties that are extremely useful in our context. First, it
computes a set S whose conductance is smaller than what is
computable with the approach used in SybilRank. Second,
it is parallelizable and, crucially, its running time depends
not on the size of the entire graph, but only on the size of
S.

Andersen and Perez [27] and, very recently, Gharan and
Trevisan [24] have proposed further improvements. It is not
immediately obvious, to us at least, if these algorithms can
be used by an honest seed to rank other nodes according to
its trust in them. For this reason, we will focus henceforth
on the method proposed in [3], which naturally computes
such ranking.

A. Discussion

Formalizing community detection in terms of Problem 2
allows us to draw from the rich literature on random−walk−
based algorithms. Among them, the algorithm of Andersen,
Chung and Lang stands out for the combination of its
features: it supports node ranking; the cut it computes has
smaller conductance than most of its peers; its running time
depends on the size of the community, not that of the graph;
and it is easy to parallelize. In the next section we will see
that this algorithm solves Problems 1 and 2 simultaneously,
i.e., it is able to identify a community of honest nodes
containing the honest seed, without being lured into the sybil
region. Further, we will prove the ﬁrst theoretical guarantees
on the performance of a community detection algorithm in
the context of sybil defense and show experimentally that
the algorithm is quite competitive with the state of the art.

389

VI. A DEEP DIVE: PERSONALIZED PAGERANK AND

LOCAL DEFENSE

In this section we analyze in some depth the “variable
length” random walk algorithm of Andersen, Chung and
Lang [3], which from now we refer to as ACL. Since ACL
is based on the normalized stationary distribution of the
Personalized PageRank [13] (PPR) random walk, we start
by reviewing PPR’s deﬁnition.

Starting from an initial vertex v (which in our application
will be an honest seed), at each step in the walk a pebble
returns to v with probability α and moves to a uniformly
random neighbor of its current location with probability
1 − α. This random walk has a unique stationary distribu−
tion [3] that we denote as pα,v := (p1, . . . , pn). Clearly, this
distribution depends on the starting node v and the jumpback
parameter α.

Intuitively, it is as if, starting from the honest seed, we
performed many random walks whose length is determined
by means of a geometric random variable: a random walk
has length k with probability α(1 − α)k−1 and, as it is
−1. Note that long walks are
well−known, expected length α
likely to be rare—their probability decays exponentially—
while short walks in the neighborhood of the honest seed
are common. In this fashion, the nodes in the “community”
to which the honest seed belongs should be visited most
frequently. The weight pα,v(u) that a node u receives,
intuitively, is proportional to the number of times it is visited
when “many” random walks are performed. ACL uses the
PPR limit distribution, for a given honest seed v and a given
α, to assign a “trust” value to each vertex u in the network
as follows:

(3)

tα,v(u) :=

pα,v(u)
deg(u)

Sorting according to tα,v in descending order produces a
ranking of the nodes from the point of view of the verifying
node v, from the most trustworthy to the least trustworthy.
This ranking is signiﬁcantly more robust than that ob−
tained by methods based on PageRank (see for example
EigenTrust [29], TrustRank [48]) or that apply PPR di−
rectly [22]. First, since a random walk can reset only to the
seed node, this ranking is immune to all attacks to PageRank
based on exploiting random walks that jump back to a spam
node [8]. Second, it includes a normalization step that is
crucial to obtain the formal guarantees and experimental
performance we are seeking: in particular, it prevents high−
degree sybil nodes from spuriously outranking less popular
honest nodes just by virtue of their high degree.

We now prove that this ranking achieves precisely what
we are looking for: it deﬁnes a low−conductance cut con−
taining the honest seed and almost no sybil nodes, thereby
solving Problem 1.

Let us assume that the degree distribution of the honest
region H follows a power law and that S is a subset of

390

−1.

nodes in H. Let τ be the mixing time of the graph induced
by S, and let α := (10τ )
Theorem 3. Let 0 ≤  ≤ 1
2 be a constant and let
(cid:4) ⊂ S
cut(S, S) = o(|S|τ
of size |S
(cid:4)| ≥ (1 − )|S| such that, for every node v ∈ S
(cid:4)
,
the ﬁrst |S| positions of the ranking induced by tα,v contain
at least a 1 − o(|S|) fraction of vertices from S.

−1). Then, there exists a subset S

This theorem, proved in [2], shows that almost all vertices
of S can be used as seeds to obtain a ranking whose ﬁrst
|S| positions consist almost only of honest nodes from S,
thereby essentially solving Problem 1. Probabilistically, if
we pick a random seed inside the honest community S
then, with probability 1 −  the corresponding ranking will
correctly white−list almost all vertices in S.

We are now ready to discuss how ACL provides an

arbitrarily good approximation of this ranking.

A. Computing the ranking

The difﬁcult step in producing the ACL ranking lies
in producing the PPR distribution, which, as a stationary
distribution, is inefﬁcient to compute in general. ACL con−
sequently relies on a push−ﬂow algorithm for approximating
it quickly [3]. This algorithm, which we dub Approximate
Personalized PageRank (APPR), has three input parameters:
a starting vertex v, a jump back probability α, and an
error parameter . APPR computes an approximate vector
q
v,α := (q1, . . . , qn) that is an approximation of the PPR
vector pv,α.

To produce the approximate vector q

v,α, APPR assigns to
the starting node v an amount of “trust” equal to 1, which
then ﬂows from v to the rest of the network through a series
of “trickle” operations. Each push−ﬂow operation simulates
one step of the random walk by transferring a small amount
of trust from a vertex u to its neighbor w in proportion to the
probability that the random walk moves from u to w in one
step. For each node v, APPR keeps track of two quantities:
a ppr(v) value and a residual value r(v). The former is
the current approximation of the PPR of the node v, while
the latter is the amount of total residual trust that the node
is allowed to distribute to itself and to its neighbors. The
algorithm is described as Algorithm 1 (for a full discussion
see [3]).

The ﬁnal step in ACL is to degree−normalize the approx−

imate vector q

v,α produced by APPR as follows:

ACLv,α :=

q
v,α(u)
deg(u)

.

(4)

is important

To understand the ACL algorithm it

to
appreciate the effect of changing the α and  parameters.
Theorem 3 tells us how we should set the value of α. The
dependence on  is also reasonably straightforward. Since 
measures how far we are from the limit distribution, smaller
values of  imply longer running times. The good news is

Algorithm 1 AP P R(v, α, )

ppr(u) = 0 ∀u ∈ V
r(u) = χv
Q = {v}
for |Q| (cid:8)= 0 do

Extract u from Q.
while r(u) ≥ d(u) do

ppr, r = P ushu(ppr, r)
Insert in Q all the nodes w in the neighborhood of
u such that r(w) ≥ d(w)

end while

end for
return ppr

i

i

n
o
s
c
e
r
P

(cid:4)

Algorithm 2 P ushv(ppr, r)
Ensure: ppr
exceptions
(cid:4)
ppr
(v) = 1−α
(cid:4)
r
for all u ∈ V : (u, v) ∈ E do
(cid:4)
2d(v) r(v)

(u) = r(u) + 1−α

(v) = ppr(v) + αr(v)

2 r(v)

r

end for
return ppr

(cid:4)

(cid:4)

e r

= ppr and r = r

(cid:4)

with the following

i

i

n
o
s
c
e
r
P

 1.2

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 0.2

 0.4

0.1
0.01
0.001

 0.6
Recall

(a) p = 0.01

 0.8

 1

 1.2

 1.2

 1

 0.8

 0.6

 0.4

 0.2

that this dependence on precision is linear: it is possible
to show that the running time of the algorithm is O( 1
α )
and therefore, for ﬁxed α, the running time is O( 1
 ). Note
that this offers an interesting trade−off between speed and
precision.

A second consequence of the choice of  comes from
the way the push−ﬂow algorithm works. It can be shown
that all vertices w whose frequency pw in the stationary
distribution is smaller than  receive a trust of 0 from APPR.
When APPR stops, nodes with a non−zero ppr value deﬁne
a connected component around the source, while all vertices
outside have zero trust.

When ACL is computed with respect to the same seed
with two values  < δ, the non−zero portion of the −ranking

H

H

δ
H

H
= 10−3
= 10−4
= 10−5
= 10−6

= 10−4 = 10−5 = 10−6 = 10−7

0.84

0.83
0.81

0.82
0.79
0.73

0.82
0.79
0.73
0.99

Table IV

TAU−KENDALL DISTANCE CORRELATION BETWEEN AN −RANKING AND

A δ−RANKING FOR THE FACEBOOK SNAPSHOT. THE INDEX IS A REAL
NUMBER BETWEEN +1 (PERFECT CONCORDANCE) AND −1 (REVERSE
ORDER). A VALUE OF 0 INDICATES THAT ONE RANKING IS A RANDOM

PERMUTATION OF THE OTHER. SIMILAR HIGH CORRELATION WAS
OBSERVED FOR DIFFERENT SNAPSHOTS OF SOCIAL NETWORKS.

391

 0

 0

 0.2

 0.4

0.1
0.01
0.001

 0.6
Recall

(b) p = 0.10

 0.8

 1

 1.2

Impact of varying α. Precision vs Recall graph with Facebook−
Figure 5.
New Orleans data set under (a) a weak attack (edge density p = 0.01) and
(b) a strong attack (edge density p = 0.1).

1, . . . , u

is longer than the corresponding preﬁx of the δ−ranking. The
surprising ﬁnding is that these two rankings, u
n and
uδ
1, . . . , uδ
n are almost the same, as can be measured for
instance using the Tau−Kendall distance (see Table IV). This
is a very useful property: it says that if we want to identify
quickly a set of trusted nodes, we can do so just by using a
larger value of . Because the running time of the protocol
is dependent on the values of α and  and not the size of
the graph, this allows ACL to effectively scale in situations
where partial node rankings sufﬁce.

To conclude, we remark that Theorem 3 holds for the
values deﬁned by Equation 3 and not for their approximation
(Equation 4). We expect however this approximation to work
well in practice. We verify this next.

B. Comparative Evaluation

Our key question in evaluating ACL is to determine
whether it expands the guarantees offered by today’s social
defense systems in two directions: (1) withstanding denser
attacks; and (2) providing high quality sybil defense without

 1.2

 1

 0.8

 0.6

 0.4

 0.2

0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09

 0

 0

 0.2

 0.4

 0.6
Recall

(a) ACL

 0.8

 1

 1.2

 1.2

 1

 0.8

 0.6

 0.4

 0.2

0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09

i

i

n
o
s
c
e
r
P

i

i

n
o
s
c
e
r
P

 0

 0

 0.2

 0.4

 0.6
Recall

 0.8

 1

 1.2

(b) SybilLimit

Figure 6. The impact of varying the attack strength on (a) ACL on the
original Facebook graph and (b) SybilLimit on the preprocessed and raw
Facebook graph.

relying on the assumption that the entire graph is fast mixing
(to avoid the need for preprocessing).

Method and environment: Viswanath et al. [39] ob−
serve that, despite their peculiarities, sybil defense schemes
are based on the same fundamental principle—community
detection—and produce highly correlated results. Hence, for
the sake of clarity, the experiments we report compare ACL
only against SybilLimit, which we use as the SybilLimit−
like champion. Although SybilLimit performed better than
its peers, our experiments with SybilGuard, SybilInfer and
Gatekeeper returned qualitatively similar results.

The graphs we use to compare their performance are
generated by subjecting social networks that we assume
to include only honest nodes to the attack described in
section II−B. We then run ACL and SybilLimit on the
resulting graphs, rank the nodes using the same method−
ology discussed in Section III, and measure precision (the
percentage of nodes in the preﬁx that are honest) and recall
(the percentage of honest nodes that are in the preﬁx) from
the perspective of 10 randomly chosen seeds. We report the

392

average of the values we obtain.

√
We conﬁgure SybilLimit to have 1.5

m random walks of
−3 and 
length 1.5 log(n). ACL is conﬁgured with α = 10
sufﬁciently small to label every node in the attacked graph
−7; for all other
with non−zero weight. For DBLP  = 10
graphs  = 10

−6 sufﬁces.

ACL tolerates denser attacks: Figure 6 shows the
degree to which ACL and SybilLimit succeed in defending
the Facebook graph when the attack strength, measured as
the percentage p of attack edges in the graph, varies from
p = 0.01 to p = 0.1. Note that, to respect the “operating
range” of each protocol the results we report for ACL are
obtained on the original Facebook graph while the results
from SybilLimit apply to the preprocessed Facebook graph.
We observe that the ability of ACL to correctly classify
nodes degrades gracefully as the attack increases in strength,
remaining relatively high even when p = 0.1. Indeed, the
selectivity of ACL under an attack of strength p = 0.05
is comparable to that of SybilLimit for an attack of p =
0.01. SybilLimit on the other hand becomes confused rather
rapidly as the attack strength increases.

ACL does not need preprocessing: Figure 7 shows the
protection offered by ACL and SybilLimit to the Facebook,
DBLP, Epinions, and WikiTalk graphs for an attack where
p = 0.01. For ACL, we report only results from the raw
graph. For SybilLimit we report results from both the raw
and preprocessed graphs.

Without preprocessing, ACL achieves high precision at
high recall. SybilLimit’s performance, on the other hand, is
mixed. For Facebook, Epinions, and WikiTalk, SybilLimit
provides excellent protection as long as the graphs are
preprocessed. When the graphs are not preprocessed, the
offered coverage degrades to varying extents. The degrada−
tion in coverage for Facebook is negligible; for Epinions the
degradation is minor but noticeable.

SybilLimit performs poorly on DBLP with or without
preprocessing, though preprocessing the graph does provide
a signiﬁcant boost. We speculate that this poor performance
is the side effect of the relatively high mixing time observed
by Mohaisen et al. [23].

A second attack model: In this section we compare
the algorithms using an attack model widely used in the
literature [10], [42]. The number of attack edges g is ﬁxed,
and random honest nodes are declared to be sybil until g
attack edges are obtained. Then more sybil nodes are created
from scratch until a total of γ sybils is reached. These γ
sybils are then connected among themselves via a scale−free
topology. In our attack we use the scale−free topology of
Barabasi−Alberts, as in [42].

Figure 8 shows the results for our Facebook graph and
g = 50000 and γ = 10000. ACL and Mislove are essen−
tially perfect, outperforming all other algorithm (Gatekeeper,
SybiLimit and SybilGuard). We also ran experiments with
other graphs obtaining similar results.

i

i

n
o
s
c
e
r
P

i

i

n
o
s
c
e
r
P

 1.2

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1.2

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1.01

 1

 0.99

 0.98

 0.97

 0.96

 0.95

 0.95  0.96  0.97  0.98  0.99

 1

 1.01

 1.2

 1

 0.8

 0.6

 0.4

 0.2

i

i

n
o
s
c
e
r
P

SybilLimit w/ preprocessing
SybilLimit w/o preprocessing
ACL

 0.2

 0.4

 0.6
Recall

(a) Facebook

 0.8

 1

 1.2

 0

 0

SybilLimit w/ preprocessing
SybilLimit w/o preprocessing
ACL

 0.2

 0.4

 0.6
Recall

 0.8

 1

 1.2

(b) Epinions

 1.2

 1

 0.8

 0.6

 0.4

 0.2

i

i

n
o
s
c
e
r
P

SybilLimit w/ preprocessing
SybilLimit w/o preprocessing
ACL

 0.2

 0.4

 0.6
Recall

(c) DBLP

 0.8

 1

 1.2

 0

 0

SybilLimit w/ preprocessing
SybilLimit w/o preprocessing
ACL

 0.2

 0.4

 0.6
Recall

 0.8

 1

 1.2

(d) WikiTalk

Figure 7. The precision−recall tradeoffs for ACL and SybilLimit on DBLP, Epinions, Facebook, WikiTalk, with p = 0.01. Results for ACL are reported
for the raw graphs. Results for SybilLimit are reported for both raw and preprocessed graphs.

C. Local vs Global detection

We have shown that ACL is very effective in practice to
address Problem 1. Building a universal sybil defense system
for community−structured networks, however, remains an
open problem.

In a recently published paper Cao et al. [7] suggest to
expand defensive coverage by relying on multiple trusted
seed nodes instead of a single one. More precisely, suppose
there are several
trusted seeds evenly distributed among
communities of honest nodes; it is then possible to merge
the local ranking of the nodes to get a uniﬁed global ranking
of the nodes in the network.

While effective in practice,

the use of multiple seeds
does not immediately lead to strong theoretical guarantees,
even assuming that all seeds are honest nodes. For example,
suppose we can prove, as it is typical for ACL, that a
1− o(1) fraction of the honest seeds will assign a negligible
fraction of the overall score to sybil nodes and distribute
the rest evenly across the honest region. There is always,
however, a fraction of unlucky honest seeds for which

such guarantees are impossible—e.g., seeds at the boundary
between the honest and sybil regions. Unfortunately, because
of the arbitrary nature of the sybil region, walks originating
from these nodes might produce an unconstrained (and
adversarial) probability distribution among the sybil nodes.

This is not only true for the ACL algorithm, but virtually
for any sybil defense algorithm that relies on random walks
and mixing time (see for instance [7], [45], [46]).

Unfortunately, it is not clear how an unlucky choice of
seeds will affect the overall ranking. While lucky seeds will
distribute evenly the score among honest nodes, unlucky
ones might concentrate the score to a smaller, but still
signiﬁcant, subregion of the sybil graph, thus letting such
nodes overtake the ﬁrst positions of the ranking.

Despite these words of caution, the results obtained by
Cao et al. [7] using multiple seed in real world scenarios
are encouraging, and we believe this is a promising research
direction.

393

i

i

n
o
s
c
e
r
P

 1.2

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

SybilLimit
SybilGuard
Mislove
Gatekeeper
ACL

 0.2

 0.4

 0.6
Recall

 0.8

 1

 1.2

Figure 8. The precision of ACL and the other algorithms on Facebook
graph with standard attack model with g = 50000 and γ = 10000.

D. Discussion

We have shown experimentally that ACL is extremely
effective at identifying the community of a given honest seed
and provided formal guarantees for the rankings it produces.
To our knowledge this is the ﬁrst time that formal guarantees
are given for a community detection algorithm in the context
of sybil defense. While we have shown that ACL can be
used to effectively solve Problem 1, in the next section we
will discover a sobering reality: all sophisticated state−of−
the−art methods based on random walks, including ACL, are
helpless against some of the simple, primitive sybil attacks
that are encountered in deployed social networks.

VII. AVOIDING THE MAGINOT SYNDROME

Our appraisal

in Section II of the resilience of dif−
ferent structural properties of social graphs indicated that
leveraging the complementary notions of mixing time and
conductance are the most promising line of defense against
sybil attacks; furthermore, techniques based on this approach
can provide impressive end−to−end guarantees. Yet one key
question remains: how effective are these techniques against
actual sybil attacks?

While data on sybil attacks in deployed social networks
is not readily available, two recent papers have included
experience reports that shed light on the types of attacks
that occur in the wild.

Cao et al. report to have successfully used SybilRank to
identify sybil users in the Tuenti social network [7]. They
observe large clusters of sybil users in regular topologies
(star, mesh,
tree, etc.) that are connected to the honest
communities through a limited number of attack edges. They
also report that an unspeciﬁed fraction of the remaining
accounts are sybil but to preserve conﬁdentiality are unable
to report on the number or characteristics of those accounts.
Yang et al.’s experience in analyzing the RenRen social
network is signiﬁcantly different [43]: they do not observe

394

any large clusters of well−connected sybil nodes in turn
connected to the honest sub−graph through a small set of
attack edges, as would be expected by the sybil defense
techniques we have surveyed; instead, they ﬁnd isolated
sybil nodes each connected to the honest sub−graph with
a large number of attack edges.

The simple attack observed in the RenRen social net−
work is devastating for conductance−based protocols. We
simulated the attack on our Facebook graph and measured
the probability that a randomly−chosen honest node be
considered more trustworthy than a randomly−chosen sybil
one by SybilLimit [45], SybilGuard [46], Mislove [39],
Gatekeeper [35], and ACL. A probability of 1 corresponds
to the ideal case in which every honest node is ranked higher
than any sybil one; a probability of 0 indicates the reverse
case; a random ranking correspond to 0.5 probability. In our
results, every protocol performs poorly: the probability is
0.45 for SybilLimit, 0.44 for SybilGuard, 0.34 for Mislove,
0.49 for Gatekeeper, and 0.37 for ACL. The vulnerability of
conductance−based techniques to an attack where each sybil
node can create more than one attack edge is fundamental,
as Yu et al. proved [45].

These experiences indicate that while today’s socially−
based sybil defenses
the
theoretically−best defense posture, they are also easily cir−
cumvented. Much like the real−life Maginot line. 6

are designed to provide

A. Defense in depth

To avoid this fate, we believe that effective sybil−defense
mechanisms should embrace a strategy inspired by the
notion of defense in depth [34]: rather than relying solely on
techniques based on conductance, they should include a port−
folio of complementary detection techniques. For example,
Yang et al. observe [43] that it is possible to spot sybil nodes
by tracking their clustering coefﬁcient (see Section II) and
the rate at which their requests of friendship are accepted,
both of which in the RenRen graph are signiﬁcantly higher
for honest nodes than for sybils (in the case of the clustering
coefﬁcient, this is because a single sybil node that randomly
issues friendship requests is unlikely to have many friends
who are themselves friends with each other). As a rule of
thumb, Yang et al. suggest to report as sybil those users
whose friendship−request acceptance rate is less than 50%
and whose clustering coefﬁcient is below 1/100. They report
that this is sufﬁcient to correctly identify more than 98% of
the sybils, with a false positive rate of less than 0.5%. Note
that, while these results sound impressive, they are not cause
for unconditional celebration, as it is quite easy for a slightly
more sophisticated adversary to circumvent both checks by
issuing friendship requests to other sybil nodes under his
control. But, at the very least, checks like these make the life
of the attacker more difﬁcult and prevent more sophisticated

6http://en.wikipedia.org/wiki/Maginot Line

defenses to be trivially sidestepped. Indeed, they may even
nudge the attacker, whether he likes it or not, towards the
kind of attacks where conductance−based method can start to
be effective. For instance, simply introducing a defense layer
that monitors the rate of friendship acceptance introduces a
bound (albeit loose) on the conductance of the cut between
honest users and sybils.

In particular, assume that honest users accept sybil request
with probability p and that the threshold of accepted requests
below which a node is ﬂagged as sybil is T . Then the
following simple result holds (see [2] for the proof)

Proposition 3. Sybil nodes, to not be detected, must create
fewer than p 1−T

T−p of their edges as attack edges.

So, for example, if honest users accept friendship requests
with probability p = 10% and T = 50% (as in [43]), then
each sybil node must have seven links to sybil nodes for
every attack edge to avoid detection.

Proposition 3 bounds the conductance of the cut between
honest and sybil nodes in the sense that whenever the
sybil region has fewer edges than the honest region, the
conductance of the cut is at most 2p 1−T
T−p .

While this bound is loose, it is encouraging that it can be
obtained through a defense layer based on a fairly primitive
measure such as the rate of friendship acceptance. We
speculate that in the near future new defense layers based
on advanced machine−learning and proﬁling techniques [33]
will force a sybil attacker who wants to escape detection to
generate sybil regions that resemble ever more actual social
graphs, connected through a sparse cut of attack edges to
the honest portion of the graph: in other words, exactly the
scenario suitable for conductance−based sybil defense.

VIII. CONCLUSIONS

This work has traced the evolution of social sybil defenses
from the seminal work of Yu et al [46] to the developments
of the last several years [7], [10], [35], [45] to recent
reports [7], [43] that detail their usage in practice.

We have identiﬁed two main trends in the literature. The
ﬁrst is based on random walk methods whose goal is to
identify fast−mixing (sub)regions that contain the honest
seed. The implicit assumption is that social networks under
sybil attacks must exhibit a simple structure—a fast−mixing
region of honest nodes connected via a sparse cut to the sybil
region. We have seen how this initial simpliﬁed picture of
the world has progressively become more nuanced, leading
to methods based on random walks that are able to cope
with a more complex world consisting of a constellation
of tightly−knit, fast−mixing communities loosely connected
among themselves and to the sybil region.

The other trend that we have discussed considers sybil
defense as an instance of community detection. While we
have revealed the limitation of this approach, we have been
able to enucleate its core validity.

As we have shown with our discussion on Personalized
PageRank, the two approaches can go hand in hand to yield
more robust sybil defense protocols that are competitive
with the state of the art. The discussion has highlighted the
importance of the body of literature that studies foundational
issues on random walks. As we have shown, both algorithms
and useful conceptual tools can be distilled from it and
successfully deployed in the context of sybil defense.

Despite their growing mathematical sophistication, we
have also seen how sybil defense methods can perform
poorly when confronted with some real−world attacks that
exhibit a very primitive structure. We believe that
the
defense−in−depth approach that we have advocated as a
response to this challenge can be facilitated by moving
from the original vision of offering individual honest users
decentralized and universal sybil defense [45], [46] towards
defense techniques that assume that the defender has com−
plete knowledge of the social graph topology [7], [43]
and can deploy the kind of parallelizable implementations
suitable for handling the large graphs of on−line social
networks. In particular, social network operators are in a
position to use machine learning techniques, user proﬁling,
and monitoring of user activity to gain additional knowledge
that can help them ﬁlter sybil attacks not well−suited for de−
tection using techniques based on random walks, community
detection, and their combination. Still, as attackers increase
in sophistication, claims of a silver bullet should be met with
healthy skepticism. As the arms race between attackers and
defenders continues, it will be increasingly important that
new defense mechanisms clearly state the kind of attack
they aim to withstand, a landscape that too often is blurred.

ACKNOWLEDGEMENTS

We thank Bimal Viswanath and Alan Mislove for the
code of Mislove’s algorithm,Nguyen Tran for the Gatekeeper
code, and Krishna Gummadi for his comments on an early
draft. Lorenzo Alvisi is supported by the National Science
Foundation under Grant No. 0905625. Alessandro Epasto
is supported by the Google European Doctoral Fellowship
in Algorithms, 2011. Alessandro Panconesi is partially sup−
ported by a Google Faculty Research Award.

REFERENCES

[1] Dblp. http://dblp.uni−trier.de/xml/, 2011.

[2] L. Alvisi, A. Clement, A. Epasto, S. Lattanzi, and
A. Panconesi.
random walks and social
sybil defense. Technical Report TR−13−04, UTCS, 2013.
http://wwwusers.di.uniroma1.it/∼epasto/papers/sybil−tr.pdf.

Communities,

[3] R. Andersen, F. Chung, and K. Lang. Local graph partitioning

using pagerank vectors. In FOCS, 2006.

[4] S. Arora, S. Rao, and U. Vazirani. Expander ﬂows, geometric

embeddings and graph partitioning. J. ACM, 2009.

[5] A.−L. Barabasi and R. Albert. Emergence of scaling in

random networks. Science, 1999.

395

[6] L. Bilge, T. Strufe, D. Balzarotti, and E. Kirda. All your
contacts are belong to us: Automated identity theft attacks
on social networks. In WWW, 2009.

[7] Q. Cao, M. Sirivianos, X. Yang, and T. Pregueiro. Aiding
the detection of fake accounts in large scale social online
services. In NSDI, 2012.

[8] A. Cheng and E. Friedman. Manipulability of pagerank under

sybil strategies. In NetEcon, 2006.

[9] L. Cox and B. Noble. Samsara: Honor among thieves in

peer−to−peer storage. In SOSP, 2003.

[10] G. Danezis and P. Mittal. Sybilinfer: Detecting sybil nodes

using social networks. In NDSS, 2009.

[11] J. Douceur. The sybil attack. In IPTPS, 2002.
[12] S. Fortunato.

Community detection in graphs.

abs/0906.0612, 2009.

[28] M. Richardson, R. Agrawal, and P. Domingos. Trust man−

agement for the semantic web. In ISWC, 2003.

[29] H. G.−M. Sepandar D. Kamvar, Mario T. Schlosser. The
eigentrust algorithm for reputation management in p2p net−
works. In WWW, 2003.

[30] A. Sinclair.

Improved bounds for mixing rates of markov

chains and multicommodity ﬂow. LATIN, 1992.

[31] A. Sinclair and M. Jerrum. Approximate counting, uniform
generation and rapidly mixing markov chains. Inf. Comput.,
1989.

[32] D. A. Spielman and S.−H. Teng. Nearly−linear time algorithms
for graph partitioning, graph sparsiﬁcation, and solving linear
systems. In STOC, 2004.

CoRR,

[33] T. Stein, E. Chen, and K. Mangla. Facebook immune system.

In SNS, 2011.

[13] T. H. Haveliwala.

Topic−sensitive pagerank: A context−
sensitive ranking algorithm for web search. IEEE Trans. on
Knowledge and Data Engineering, 2003.

[14] T. Leighton and S. Rao. Multicommodity max−ﬂow min−
cut theorems and their use in designing approximation algo−
rithms. J. ACM, 1999.

[15] J. Leskovec, D. Huttenlocher, and J. Kleinberg. Predicting
In

positive and negative links in online social networks.
WWW, 2010.

[16] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graphs over
time: densiﬁcation laws, shrinking diameters and possible
explanations. In KDDWS, 2005.

[17] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W. Mahoney.
Statistical properties of community structure in large social
and information networks. In WWW, 2008.

[18] C. Lesniewski−Laas. A sybil−proof one−hop DHT.

2010.

In SNS,

[19] C. Lesniewski−Laas and M. F. Kaashoek. Whanau: A sybil−
proof distributed hash table. In NSDI, San Jose, CA, 2010.
USENIX Association.

[20] N. Margolin and B. N. Levine. Quantifying and discouraging

sybil attacks. Technical report, UMass Amherst, 2005.

[21] A. Mislove, B. Viswanath, K. P. Gummadi, and P. Druschel.
You are who you know: Inferring user proﬁles in online social
networks. In WSDM, February 2010.

[22] A. Mohaisen, N. Hopper, and Y. Kim. Keep your friends
into social network−based sybil

close: Incorporating trust
defenses. In INFOCOM, 2011.

[23] A. Mohaisen, A. Yun, and Y. Kim. Measuring the mixing

time of social graphs. In IMC, 2010.

[24] S. Oveis Gharan and L. Trevisan. Approximating the Ex−
pansion Proﬁle and Almost Optimal Local Graph Clustering.
ArXiv e-prints, 2012.

[25] J. Pouwelse, P. Garbacki, D. Epema, and H. Sips. The bit−
torrent p2p ﬁle−sharing system: Measurements and analysis.
Peer-to-Peer Systems, 2005.

[26] D. Quercia and S. Hailes. Sybil attacks against mobile users:

friends and foes to the rescue. In INFOCOM, 2010.

[34] M. Stytz. Considering defense in depth for software applica−

tions. Security Privacy, IEEE, 2004.

[35] N. Tran, J. Li, L. Subramanian, and S. Chow. Optimal sybil−

resilient node admission control. In INFOCOM, 2011.

[36] N. Tran, B. Min, J. Li, and L. Subramanian. Sybil−resilient

online content voting. In NSDI, 2009.

[37] B. Viswanath, A. Mislove, M. Cha, and K. P. Gummadi. On
the evolution of user interaction in facebook. In WOSN, 2009.
[38] B. Viswanath, M. Mondal, A. Clement, P. Druschel, K. Gum−
madi, A. Mislove, and A. Post. Exploring the design space of
social network−based sybil defenses. In COMSNETS, 2012.
[39] B. Viswanath, A. Post, K. P. Gummadi, and A. Mislove.
In

An analysis of social network−based sybil defenses.
SIGCOMM, 2010.

[40] L. Von Ahn, M. Blum, N. Hopper, and J. Langford. Captcha:
Using hard ai problems for security. Advances in Cryptol-
ogy—EUROCRYPT 2003, 2003.

[41] D. J. Watts and S. Strogatz. Collective dynamics of ’small−

world’ networks. Nature, 339, 1998.

[42] W. Wei, F. Xu, C. C. Tan, and Q. Li. Sybildefender: Defend
against sybil attacks in large social networks. In INFOCOM,
2012.

[43] Z. Yang, C. Wilson, X. Wang, T. Gao, B. Y. Zhao, and Y. Dai.
Uncovering social network sybils in the wild. In IMC, 2011.
[44] H. Yu. Using social networks to overcome sybil attacks. ACM

SIGACT News, September 2011.

[45] H. Yu, P. B. Gibbons, M. Kaminsky, and F. Xiao. Sybillimit:
A near−optimal social network defense against sybil attacks.
In OAKLAND, 2008.

[46] H. Yu, M. Kaminsky, P. B. Gibbons, and A. Flaxman. Sybil−
guard: Defending against sybil attacks via social networks.
IEEE/ACM Transactions on Networking, 2008.

[47] M.−C. Yuen, I. King, and K.−S. Leung. A survey of crowd−

sourcing systems. In IEEE Socialcom, 2011.

[48] J. O. P. Zolt´an Gyongyi, Hector Garcia−Molina. Combating

web spam with trustrank. In VLDB, 2004.

[27] Y. P. Reid Andersen.

Finding sparse cuts locally using

evolving sets. In STOC, 2009.

396

