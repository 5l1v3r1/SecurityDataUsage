Enhancing Tor’s Performance using Real-time Trafﬁc

Classiﬁcation

Mashael AlSabah, Kevin Bauer, Ian Goldberg

Cheriton School of Computer Science, University of Waterloo

{malsabah,k4bauer,iang}@cs.uwaterloo.ca

ABSTRACT
Tor is a low-latency anonymity-preserving network that enables
its users to protect their privacy online. It consists of volunteer-
operated routers from all around the world that serve hundreds of
thousands of users every day. Due to congestion and a low relay-
to-client ratio, Tor suffers from performance issues that can poten-
tially discourage its wider adoption, and result in an overall weaker
anonymity to all users.

We seek to improve the performance of Tor by deﬁning different
classes of service for its trafﬁc. We recognize that although the ma-
jority of Tor trafﬁc is interactive web browsing, a relatively small
amount of bulk downloading consumes an unfair amount of Tor’s
scarce bandwidth. Furthermore, these trafﬁc classes have different
time and bandwidth constraints; therefore, they should not be given
the same Quality of Service (QoS), which Tor offers them today.

We propose and evaluate DiffTor, a machine-learning-based ap-
proach that classiﬁes Tor’s encrypted circuits by application in real
time and subsequently assigns distinct classes of service to each
application. Our experiments conﬁrm that we are able to classify
circuits we generated on the live Tor network with an extremely
high accuracy that exceeds 95%. We show that our real-time clas-
siﬁcation in combination with QoS can considerably improve the
experience of Tor clients, as our simple techniques result in a 75%
improvement in responsiveness and an 86% reduction in download
times at the median for interactive users.

Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General— Data
communications; C.2.1 [Computer-Communication Networks]:
Network Architecture and Design; C.4 [Computer Systems Or-
ganization]: Performance of Systems; K.4.1 [Computers and So-
ciety]: Public Policy Issues—Privacy

General Terms
Measurement, Performance, Security

Keywords
Tor, machine learning, trafﬁc classiﬁcation, quality of service

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.

1.

INTRODUCTION

Recent years have witnessed a dramatic increase in the use of
privacy-enhancing technologies. One key example is Tor [11], the
most widely used anonymity network with almost half a million
users [37]. Not only does Tor enable its users to maintain their pri-
vacy online, but it also provides them with a means to resist and
circumvent network surveillance. Tor today is an inﬂuential anti-
censorship technology that allows people in oppressive regimes to
access information without the fear of being blocked, tracked or
monitored. The importance and success of Tor is evident from re-
cent global uprisings where the usage of Tor spiked [10] as people
used it as a revolutionary force to help them ﬁght their social and
political realities.

Although Tor succeeded in attracting a rapidly increasing num-
ber of users since it was launched in 2003, the number of its volun-
teer-operated relays has not been growing at the same rate. Today,
there are approximately 2,500 relays that run from all around the
world [37]. Because of the large client-to-relay ratio, users expe-
rience poor performance that manifests itself in the form of large
and highly variable delays experienced in response and download
times during web surﬁng activities.

Still worse, trafﬁc congestion adds further delays and variabil-
ity to the performance of the network. Previous studies have re-
vealed that congestion has mainly two sources in Tor. First, the
Tor network currently is not congestion controlled; instead it em-
ploys an end-to-end ﬂow control approach which does not react
to congestion in the network [4]. Second, although Tor was orig-
inally designed for interactive applications such as web browsing
and instant messaging, a small number of Tor users use bandwidth-
greedy applications such as BitTorrent that consume a large and
unfair fraction of the available bandwidth in the network [29].

Not only does the poor performance hinder a wider adoption of
the network, but it may potentially reduce its user base. Losing
users has a signiﬁcant impact on the anonymity provided to users,
since reducing the user base results in decreasing the size of the
network’s anonymity set. Therefore, it is crucial to improve the
performance and usability of Tor in order to enhance the anonymity
it provides.

This problem has received great attention from the Tor research
community. To reduce the high client-to-relay ratio, incentive-
based schemes have been proposed [21,31,32] to encourage clients
to run their own relays. However, the effects of such schemes are
poorly understood. In fact, if such approaches are adopted, users
in oppressive regimes unable to run their own relays will have to
either give up using the network or continue accepting its below-
mediocre service.

To reduce the congestion caused by greedy applications, global
or static throttling techniques have been introduced [22, 31] that

73limit the rate at which these applications can transfer data. There
are a number of problems with global network throttling techniques.
First, they are either based on ﬁxed throttling rates that can also
affect interactive or real-time application users, or their ability to
detect greedy applications is based on simple metrics that are easy
to game. Also, we believe that global network throttling prevents
the network from optimizing its resources effectively.

In this work, we propose deﬁning classes of service for Tor’s traf-
ﬁc. Our solution is based on the key observation that different ap-
plications that use Tor have inherently different time and through-
put requirements, and therefore should not need or get equivalent
service, which Tor offers them today. By deﬁning different classes
of service, we can map each application class to its appropriate QoS
requirement. This solution is signiﬁcantly more ﬂexible than pre-
vious approaches and it provides relays with more dynamic control
over their limited resources. For example, it allows relays to priori-
tize or throttle one application class over another. When the priori-
tized class ceases communication, the throttled class can utilize the
available bandwidth. Furthermore, even though the network has
limited capacity, this approach allows for ﬁner-granularity man-
agement of the existing network resources. Such management is
needed to provide good performance to important applications.
Classiﬁcation for Tor. Motivated by the need to improve the per-
formance of the Tor network, we introduce DiffTor, a framework
for classifying encrypted Tor circuits based on the applications they
serve. The key novelty in our work is that we enable differentiated
QoS using network trafﬁc classiﬁcation in anonymous communica-
tion systems. We explore two types of trafﬁc classiﬁcation: online
and ofﬂine classiﬁcation. Below we highlight the differences be-
tween the two classiﬁcation types:

• Online: The main goal of online classiﬁcation is for a router
to classify circuits on the ﬂy in order to provide differenti-
ated services. This means that classiﬁcation must take place
while the circuit is alive, and before too much trafﬁc has been
forwarded along the circuit. Online classiﬁcation is more
challenging since the classiﬁer has access to less informa-
tion about the circuit. The classiﬁer performs classiﬁcation
at the cell level and is mainly concerned with cell-level at-
tributes and some limited circuit-level attributes. Also, since
the classiﬁer runs in real time, it must also be efﬁcient.

• Ofﬂine: On the other hand, classiﬁcation can be done ofﬂine
by relay operators using circuit logs (assuming that logging
is performed in a privacy-preserving manner). Because there
are no time constraints in ofﬂine classiﬁcation, we can use
more global information about circuits as classiﬁcation at-
tributes.

The importance of ofﬂine classiﬁcation is twofold. First, it is
important to understand how much information an entry guard—
the ﬁrst router in a Tor circuit—can infer just from monitoring the
trafﬁc of its clients’ circuits. This is especially important to in-
vestigate about entry guards since they receive direct connections
from clients and continue to be used by the same clients for weeks.
Indeed, we found that entry guards can identify the class of ap-
plication of a circuit with an accuracy that exceeds 90%. Second,
The Tor Project is researching techniques to understand more in-
formation about its users without compromising their privacy [27].
Classifying circuits ofﬂine is a novel approach to provide more in-
sight into how the network is used today from the view of entry
nodes unable to see plaintext trafﬁc.1

1Previous work used Deep Packet Inspection (DPI) to study the usage of the Tor net-
work from exit routers [9, 29]. It is important to avoid inspecting the clear trafﬁc for
legal and ethical reasons.

Next, we consider online classiﬁcation. Classifying Tor circuits
on the ﬂy allows us to deﬁne Quality of Service (QoS) require-
ments for different types of trafﬁc. Deﬁning QoS parameters can
be done either locally by the entry guard operator or globally by
the directory authorities depending on the state of the network. For
example, when the network is congested, entry guards can change
their QoS parameters so that interactive real-time applications such
as web browsing are prioritized, while bandwidth-consuming ap-
plications such as non-time-sensitive ﬁle sharing applications are
throttled. This can improve the performance of the network and the
experience of users, since different applications would get different
QoS parameters based on their requirements and on the congestion
state of the network.

In this work, we carry out the following approach. We ﬁrst start
by exploring how different applications use the Tor network. In par-
ticular, we seek to understand how the trafﬁc of some popular ap-
plications looks and behaves when travelling through Tor circuits.
The importance of this step is that it helps us derive useful attributes
that we can use for our online and ofﬂine classiﬁcation process.

Based on studying different applications, we ﬁrst start by de-
veloping a simple threshold classiﬁer that we can use to classify
connections between clients and entry guards to two applications,
BitTorrent and browsing. We recognize that this classiﬁer cannot be
used on middle and exit relays, and would not be useful if clients
disable using entry guards. For these reasons, we explore differ-
ent machine-learning classiﬁers and identify which algorithms are
suitable for our ofﬂine and online classiﬁcation, which unlike the
threshold classiﬁer, can also work at middle and exit routers in ad-
dition to entry guards. Finally, we implement an online classiﬁer
and we deﬁne simple QoS rules to show the performance beneﬁts
made possible using our online classiﬁer.
Contributions. This work contributes the following:

• We provide an important insight into how some popular ap-

plications behave and appear within Tor circuits.

• We propose a machine-learning approach to encrypted traf-
ﬁc classiﬁcation for Tor. Our evaluation on the live Tor net-
work indicates that our classiﬁers achieve over 95% accu-
racy. When combined with prioritization for interactive web-
browsing circuits, we see an improvement in responsiveness
of 75% and an improvement in download time of 86%.

• Our approach to prioritization is incrementally deployable,
as our changes are local to any router and do not affect its
operation with other routers.

• We discuss a variety of open issues related to the classiﬁca-

tion of encrypted Tor trafﬁc.

Roadmap. The remainder of this paper is organized as follows:
Section 2 presents a high-level description of Tor’s design and how
different applications use Tor. We present our threshold classiﬁer
and motivate for the need for machine-learning-based classiﬁers in
Section 3. Section 4 presents our three broad classes, our candidate
features and our machine learning classiﬁcation methods. We eval-
uate our proposal in Section 5. We also discuss a variety of open
issues related to the classiﬁcation of encrypted Tor trafﬁc in Sec-
tion 6. Finally, we compare our contributions with related work in
Section 7 and conclude in Section 8.

2. TOR BACKGROUND

Tor is a low-latency anonymity network which is based on a
client-server architecture model. Clients, known as Onion Prox-
ies (OPs), periodically connect to directory servers to download in-
formation about the currently available Onion Routers (ORs), and
information on how to contact them such as the OR IP and pub-
lic keys. Then, clients use ORs to form paths, known as circuits,

74circuit 1
circuit 2
circuit 3
circuit 4

)

B
M

l

(
 
d
e
d
a
o
n
w
o
D
 
a
t
a
D

 50

 40

 30

 20

 10

 0

 0

 100  200  300  400  500  600  700  800  900

Time (s)

(a) Streaming

 350

 300

 250

 200

 150

 100

 50

)

B
M

l

(
 
d
e
d
a
o
n
w
o
D
 
a
t
a
D

 0

 0

circuit 1
circuit 2
circuit 3
circuit 4

circuit 1
circuit 2
circuit 3
circuit 4

)

B
M

l

(
 
d
e
d
a
o
n
w
o
D
 
a
t
a
D

 12

 10

 8

 6

 4

 2

 0

 500

 1000

 1500

 2000

 2500

 0

 100

 200

 300

 400

 500

 600

 700

Time (s)

(b) BitTorrent

Figure 1: Downstream circuits

Time (s)

(c) Browsing

circuit 1
circuit 2
circuit 3
circuit 4

)

B
M

l

(
 
d
e
d
a
o
p
U
 
a
t
a
D

 2

 1.5

 1

 0.5

 0

 0

 100  200  300  400  500  600  700  800  900

Time (s)

(a) Streaming

 20

 15

 10

 5

)

B
M

l

(
 
d
e
d
a
o
p
U
 
a
t
a
D

 0

 0

circuit 1
circuit 2
circuit 3
circuit 4

circuit 1
circuit 2
circuit 3
circuit 4

)

B
M

l

(
 
d
e
d
a
o
p
U
 
a
t
a
D

 2

 1.5

 1

 0.5

 0

 500

 1000

 1500

 2000

 2500

 0

 100  200  300  400  500  600  700  800

Time (s)

(b) BitTorrent

Figure 2: Upstream circuits

Time (s)

(c) Browsing

through the network to Internet destinations. By default, circuits
are composed of three ORs, usually nicknamed the entry guard,
middle and exit OR, depending on their position on the circuit. Of
the three ORs, only the entry guard knows and communicates di-
rectly with the client, and only the exit knows the Internet desti-
nation that the client is communicating with, but no OR can link a
client to a destination; this is how a client’s privacy is maintained
in Tor.

A SOCKS proxy interfaces between user applications and the
OP. When the application sends data through Tor, the OP divides
the data to 512-byte ﬁxed-sized cells, and adds a layer of encryption
for every node on the forward path. Then, cells are source-routed
through the established circuits. Every hop, on receiving a relay
cell, looks up the corresponding circuit, decrypts the relay header
and payload with the session key for that circuit, replaces the circuit
ID of the header, and forwards the decrypted cell to the next OR.
Circuit scheduling. Tor uses a label-switching design that multi-
plexes several circuits across the same Tor routers. In order to en-
sure that each circuit is given a fair share of the routers’ bandwidth,
Tor employs a round-robin queuing mechanism. Each circuit is ser-
viced in a ﬁrst-come, ﬁrst-served manner, which ensures that each
circuit is given a fair share of the available bandwidth.

However, it is been shown that the distribution of application
trafﬁc on Tor is not uniform across all circuits: a relatively small
number of circuits (e.g., bulk ﬁle downloaders) consume a dispro-
portional amount of the network’s bandwidth [29]. To mitigate the
unfairness, a circuit scheduling prioritization scheme has been pro-
posed [36] so that interactive circuits tend to be serviced before
bulk-downloader circuits. This prioritized circuit scheduling is cur-
rently deployed on the live Tor network.
Rate limiting. To give Tor router operators control over the amount
of bandwidth that is consumed by the Tor process, a token bucket
rate limiting feature on the granularity of a router is available. In
addition, Tor also allows routers to rate limit individual connec-
tions (e.g., to certain clients or destinations). Such ﬁnely granular
rate limiting has recently been proposed as another mechanism to
quiet bulk downloaders in Tor. Tortoise [31] presents an argument

for explicitly reducing the bandwidth rate of the bulk download-
ers in order to conserve bandwidth and improve performance for
the vast majority of interactive Tor users; Jansen et al. [22] present
a similar argument and both proposals demonstrate an important
performance beneﬁt to the majority of Tor users. In our work, we
extend this intuition and propose additional methods that offer dif-
ferentiated services for different classes of applications that use Tor.

2.1 How Different Applications use Tor

We ﬁrst seek to explore how different applications affect how the
trafﬁc looks on circuits. This is important for us to understand in
order to be able to nominate some useful attributes for our classiﬁ-
cation process.

Figures 1 and 2 show data transferred upstream and downstream
on some sample active Tor circuits that we logged on the live Tor
network. The trafﬁc was generated by our own browsing, stream-
ing, and BitTorrent clients; for privacy reasons, we did not monitor
other users’ Tor trafﬁc. We provide a detailed description on how
we generate and log trafﬁc on the live network in Section 5.1. The
following differences can be observed from the ﬁgures.
Applications produce different circuit lifetimes. The circuit life-
time is different for different applications. Web browsing circuits
almost never exceed 600 seconds, which is the default circuit life-
time, while actively downloading BitTorrent circuits can stay alive
for as long as the client is actively downloading on the circuit. In
fact, it can be seen in Figure 1(b) that BitTorrent downloads can
cause the circuit to stay alive for more than 2500 seconds. Stream-
ing circuits can exceed the 600-second mark, but once the stream-
ing session is over, the circuit will be torn down.
In active BitTorrent circuits,
BitTorrent trafﬁc is bidirectional.
data is continuously travelling upstream and downstream. Web
browsing and streaming circuits on the other hand appear to have
bursts of data that are followed by gaps of inactivity. Those idle
periods may be a result of user think times. However, some web
browsing circuits also seem to be continuously active due to the
dynamic content of web pages.

75n
o

i
t

i

u
b
i
r
t
s
D
e
v
i
t

 

l

a
u
m
u
C

 1

 0.9

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

 0

BitTorrent
Streaming
Browsing

 0

 2

 4

 6

 8

 10

 12

 14

Data Downloaded (MB)

Figure 3: Comparison of the amounts of data downloaded by cir-
cuits of different applications

BitTorrent
Browsing

)

%

(
 
y
c
a
r
u
c
c
A

 100

 80

 60

 40

 20

 0

2

4

6

Threshold

Figure 4: Per-class accuracy of the threshold classiﬁer when t =
100
Interactive circuits transfer small amounts of data. More than
95% of circuits in each class download less than 14 MB, as shown
in Figure 3. However, while the maximum observed download for
any streaming circuit was less than 35 MB and for any browsing
circuit was less than 23 MB, some BitTorrent circuits downloaded
as much as 935 MB.
Finally, as
BitTorrent causes many idle circuits to be built.
shown in Figure 3, most circuits created for web browsing are in-
deed utilized, while only 30% of the BitTorrent circuits are actu-
ally used to download data. We observed that the BitTorrent client
creates many more circuits than a browsing client. The reason is
that the BitTorrent client attempts to contact several peers at the
same time using different ports. Those circuits attempt to connect
to peers that either are no longer participating in the ﬁle transfer,
or do not respond to connection requests due to the presence of a
ﬁrewall or network address translation (NAT). Interestingly, when
a remote host fails to respond to a connection request (and does not
respond with “connection refused”), Tor’s default behaviour is to
retry the same remote host again on a different circuit. This be-
haviour is rarely triggered by the browsing client since it usually
connects to a few publicly accessible servers.

Creating several idle circuits has performance and anonymity
implications. Clearly, circuit creation consumes OR memory and
CPU cycles. As for anonymity, creating several circuits simulta-
neously can degrade the anonymity of the user as it can leak some
information to the entry guard about the user. For example, we
observed that in a 10-hour experiment, our web browser created
around 100 circuits, while the BitTorrent client created more than
1000 circuits. If an entry guard observes that the user is using sev-
eral simultaneous circuits, then very likely, the client is using Bit-
Torrent over Tor.

3. STRAW MAN: CIRCUIT THRESHOLD

CLASSIFIER

Recall that BitTorrent causes the Tor client to build signiﬁcantly
more circuits compared to other interactive applications, which usu-
ally do not require more than one circuit at a time. In this section,
we show how an entry guard can use a simple threshold classiﬁer to
perform a connection-level classiﬁcation on its clients’ connections
to two broad classes, BitTorrent and web browsing. The classiﬁer’s
decisions are based only on the number of circuits created over a
connection.

Our simple classiﬁer monitors the clients’ connections, and per-
forms a classiﬁcation periodically every t seconds based on the
number of circuits T seen in the connection within the last t sec-
onds. Figure 4 shows the per-class accuracy as a function of the
threshold value when t = 100. If the threshold is T > 2, meaning
that if we only observed more than two circuits in the connection
within the 100-second interval, then the probability that the connec-
tion serves BitTorrent is 90%. Also, with 91% certainty, if the con-
nection carries two circuits or fewer, then the connection is serving
web browsing. As we increase the threshold value to T > 6, we get
perfect 100% classiﬁcation accuracy for web browsing connections
at the expense of misclassifying 36% of BitTorrent connections as
browsing connections.

Although this classiﬁer is very simple and requires no prior col-
lection of any training data, it has several limitations. First, this
classiﬁer works at the connection level, and therefore, we cannot
use it at intermediate ORs in a circuit since the OR-to-OR con-
nections multiplex circuits from several users. Second, a client
can easily game the classiﬁer by not using entry guards. That will
signiﬁcantly reduce the number of circuits observed by one guard
for a speciﬁc user.
In the next section, we show how we avoid
these problems by using machine learning approaches to classify
Tor trafﬁc at the circuit and cell levels.

4. CLASSIFICATION FOR TOR

In this section, we start by deﬁning the three trafﬁc classes we
are interested in. Then, we describe the attributes and the machine
learning algorithms that we use for the online and ofﬂine classiﬁ-
cation.

4.1 Class Deﬁnition

A previous Tor trafﬁc study [29] reported that web browsing
trafﬁc results in over 92% of the TCP connections in the Tor net-
work, yet it accounts for only 60% of the aggregate trafﬁc volume.
The other 40% of the aggregate trafﬁc volume is mainly accounted
for by BitTorrent. Based on these ﬁndings, we deﬁne three broad
classes of trafﬁc:
Bulk transfer. This class contains applications that upload or
download large volumes of data over the network. Such down-
loads have no time constraints, but are greedy and will try to utilize
as much available bandwidth as possible. BitTorrent is the main
application in this class2 since it accounts for a great portion of the
trafﬁc in Tor.
Interactive applications are real-time applications
Interactive.
which require interaction between a client and a server (or another
client in the case of instant messaging, for example). Those appli-
cations are time sensitive and require improved responsiveness. We
focus on web browsing as the main application of this class.
Streaming. Streaming applications are non-interactive bulk trans-
fers which require time and quality constraints. An example for
2Although BitTorrent is switching to UDP, recent studies in Tor suggest that there is
still a signiﬁcant amount of BitTorrent trafﬁc served by Tor [8].

76streaming applications is watching streaming videos online.3 The
reason we consider streaming applications is that recent Internet
measurement studies reported a signiﬁcant increase in the amount
of streaming trafﬁc online [28, 35].

4.2 Candidate Attributes

Attribute selection is a non-trivial problem in the area of net-
work trafﬁc classiﬁcation. It gets particularly more difﬁcult for an
anonymity network like Tor where we do not have access to tra-
ditional useful attributes such as the connection ports and the IP
packet sizes. We also take the challenge further as we try to re-
alize real-time classiﬁcation. In selecting candidate classiﬁcation
attributes for classifying Tor’s trafﬁc, we strived to identify high-
level protocol features that are not inﬂuenced by human interaction
variability. Below we present our attributes.
Circuit lifetime. By default, if a circuit has been used for 10
minutes and is currently idle, the Tor client tears down the circuit
and starts attaching new streams to different circuits. Recall that
we found in section 2.1 that bulk downloading applications such as
BitTorrent cause circuits to remain alive well beyond the 10 minute
mark.
Data transferred. The amount of data that a circuit transfers up-
stream and downstream can be very indicative of the type of appli-
cation that is being used by a circuit. For example, circuits which
serve bulk downloads are expected to transfer signiﬁcantly more
data than circuits that serve web browsing sessions. Moreover, the
data uploaded to destinations outside the network can indicate that
the circuit is serving a bulk transfer rather than an interactive appli-
cation.
Cell inter-arrival times. The time between two consecutive cells
in one circuit (and other related features such as the mean and vari-
ance of cell inter-arrival times (CIT)) can also indicate the type
of application that uses the circuit. For example, bulk downloading
applications such as BitTorrent almost never pause throughout their
downloads. Interactive applications, on the other hand, consist of
smaller bursts of data which are separated by gaps on inactivity.
CIT statistics are useful in quantifying the burstiness of the trafﬁc.
Burstiness is a key attribute in separating different classes of trafﬁc
because it is a high-level attribute that is not inﬂuenced by the be-
haviour of individual users, but rather by how different application
protocols work. Measuring the cell inter-arrival times can be done
by subtracting the arrival times of two consecutive cells. To calcu-
late some statistics of the inter-arrival times efﬁciently, we use the
following recursive estimators [23]:

µt =

t − 1

t

µt−1 +

1
t

xt

(1)

for the moving time average, where t starts at 1, xt is the current
measurement average, and µt−1 is the previous average. Likewise,
the variance can be computed as follows:

σ2

t =

t − 1

t

σ2

t−1 +

1

t − 1

(xt − µt)2

(2)

where t starts at 2, xt is the current measurement data, µt is the
current average, and σ2
t−1 is the previous variance. In addition to
µt and σ2
t , we also use the coefﬁcient of variation as an attribute,
which is given by σt
µt
The number of cells sent recently. Normally, it is expected
with bulk downloads that the average number of cells seen recently
would be consistently large, while interactive applications usually
have smaller bursts of data followed by a period of inactivity. To

.

3It is possible to stream videos over Tor using HTML5.

quantify this feature, we use the Exponential Weighted Moving Av-
erage (EWMA) of the cells sent on a circuit in an algorithm that was
proposed by Tang and Goldberg [36].

4.3 Classiﬁcation Algorithms

Machine learning techniques are categorized as supervised or
unsupervised. Supervised machine learning techniques are based
on two stages. The ﬁrst stage is known as the training stage where
a classiﬁcation model is built using a classiﬁcation algorithm and a
training dataset that contains labelled instances. The second stage
is known as the testing stage in which the classiﬁer model obtained
from training is used to classify unlabelled instances.

Unsupervised techniques, on the other hand, seek to group or
cluster data together based on some similarities, or common char-
acteristics, without knowing the classes beforehand.

In this section, we provide a brief description of the four super-
vised classiﬁcation algorithms we use in this work and we focus
on the Naïve Bayes classiﬁer since we implemented it for our live
experiments:
Naïve Bayes. Naïve Bayes is a probabilistic classiﬁcation algo-
rithm that is based on Bayes’ theorem.

p(C|A1, A2, .., An) =

p(C)P (A1, A2, .., An|C)

p(A1, A2, .., An)

(3)

Assume that a circuit X has attributes A1, A2, .., An. For ex-
ample, Ai might denote the circuit lifetime, or the number of cells
sent. We would like to ﬁnd the probability that X belongs to a class
C, which belongs to a ﬁnite set of classes. In our context, those
classes are bulk, interactive and streaming. If the attributes are de-
pendent, then computing the above conditional probability would
be difﬁcult. However, if we make the “naive” assumption that the
attributes are independent, then, our conditional probability can be
expressed as follows:

p(C|A1, A2, .., An) =

p(C) Q p(Ai|C)
p(A1, A2, .., An)

(4)

Note that p(A1, A2, .., An) can be ignored as it is constant for all
p(Ci|A1, A2, .., An). The rest of the right-hand side of the above
expression is determined from the training data. Since attributes
in our case are numerical, a preprocessing step of discretization is
needed to be able to compute p(Ai|C). We have made the sim-
plifying assumption that our data follows a normal distribution, so
p(Ai|C) can be computed using the normal density function. The
last remaining step for the classiﬁer is to make a decision rule based
on the p(Ci|A1, A2, .., An) values it computes for all classes. One
common decision rule is to choose the most probable class.

Although the Naïve Bayes classiﬁer is based on strong assump-
tions of feature independence, it is known to work well in practice,
even if this assumption is violated. Furthermore, we chose to eval-
uate Naïve Bayes due to its strong performance in several related
encrypted trafﬁc classiﬁcation tasks [19, 26].
Bayesian Networks. Bayesian Networks (or Bayes Nets) have
been found to be very successful at classifying Internet trafﬁc by
application [5]. Bayes Nets are graphical representations that are
used to model the dependency relationships between attributes and
classes; therefore, unlike Naïve Bayes, they do not make the strong
assumption that attributes are independent. They consist of a a di-
rected acyclic graph (DAG) where the vertices represent attributes
and classes. The edges between vertices represent the dependencies
between the attributes and classes. Also, the Bayes Net contains
conditional probability tables that allow for probabilistic inference.
Friedman et al. present Bayes Nets in more detail [14].

77Decision Trees. We also use two types of decision tree classi-
ﬁers. We apply functional tree (FT) classiﬁcation [15], which en-
able multivariate features in decision tree analysis. We also apply
logistic model tree (LMT) classiﬁcation [25]. We choose to evalu-
ate a representative set of decision tree classiﬁers due to the success
of similar classiﬁers in classifying multiple applications within IP
packets traces [13].

5. EXPERIMENTS AND RESULTS

Our experiments were carried out as follows. First, from the
live Tor network, we collected trafﬁc logs, from which we created
datasets that contained instances of the attributes we presented in
Section 4.2, along with their respective classes. Then, we evalu-
ated our online and ofﬂine classiﬁcation algorithms on the datasets
using the Waikato Environment for Knowledge Analysis (WEKA)
software suite [17]. The WEKA software4 supports a collection of
machine learning algorithms, together with preprocessing function-
alities that facilitate preparing our datasets for training and testing.
Next, we fed the training model we obtained from WEKA into the
simple Naïve Bayes classiﬁer that we implemented in Tor in order
to perform classiﬁcation on the ﬂy.
Experimental setup. To collect training data, we conﬁgured three
client types: a BitTorrent client, a web browsing client and a stream-
ing client. All our clients run from a single machine and are forced
to choose an OR under our control as an entry node for all their cir-
cuits, as we performed our measurements at our entry node.5 Next,
we describe how we set up our clients and we explain how we carry
out our measurements safely without endangering the privacy of
other users.
Automating the web browsing client. In order to generate realis-
tic browsing trafﬁc, we use the iMacros Firefox plugin [2] to auto-
mate the process of web browsing. The automated browser works
as follows: First, it picks a random URL from the list of the top
100 URLs reported by Alexa [1] and starts downloading the web
page. Then, after the page loads, the browser waits for a random
amount of time that is selected from the distribution of user think
times [18]. If the URL chosen is a search engine, then the browser
types a keyword, which is also randomly selected from the top 100
search terms reported by Alexa, in the search box. Finally, after the
results are loaded, the browser follows a random link from the top
5 search link results. This process is repeated in a loop of several
iterations.
BitTorrent client. In order to generate P2P ﬁle sharing trafﬁc, we
used the Vuze BitTorrent client [3], which allows us to conﬁgure
the proxy port on which our Tor client is listening. Note that Vuze
contains some explicit options to use the Tor network for tracker
and ﬁle transfer downloads and uploads. We used these options to
send all our Vuze client trafﬁc through Tor. We capped the maxi-
mum upload and download rates to 2000 KB/s. During our experi-
ments, we noticed that our BitTorrent client easily achieves around
1000 KB/s. We sampled our torrent ﬁles from popular legal torrent
websites. Our downloads included music, movies, and some Linux
distribution ﬁles.
Streaming client. Again, we use the iMacros Firefox plugin in
order to automate a streaming client. The client searches for videos
using a random keyword selected from the top 100 search keywords
reported by Alexa. Then the client selects a random video link
from the returned results and watches for a random time between

4We used version 3.6.6 for all our experiments.
5During the process of data collection, we capped our node’s bandwidth to 500 KB/s.

1 to 5 minutes.6 This wait time captures scenarios where the client
watches part of the video and then either browses away to another
page, or chooses to ﬁnish watching the whole video before search-
ing for another keyword. Note that the streaming activity includes
some browsing activity as well.
MeasureMe cell. Because we collect data and trafﬁc statistics
on the live Tor network using our entry OR, it is important to en-
sure that we do not log statistics of other users’ trafﬁc as this might
reveal their private information. To achieve this goal, we imple-
mented a new relay command cell type, which we call the “Mea-
sureMe” cell. This cell is sent from the client to any OR on the cir-
cuit to instruct it to start logging measurements on that particular
circuit. To help distinguish which application uses which circuit,
we conﬁgured each client with a different MeasureMe ID, which is
sent to the measuring OR in the MeasureMe cell.

In our experiments, when each client starts building circuits, it
will also send a MeasureMe cell to our entry node after a circuit is
fully constructed. On receiving the MeasureMe cell, our node starts
logging the classiﬁcation attributes we described in Section 4.2 for
the respective circuit.

5.1 Data Collection

Over a period of 6 weeks, from early March to mid-April 2012,
our BitTorrent, automated browsing and streaming clients down-
loaded approximately 24 hours worth of trafﬁc. Because we logged
the MeasureMe id along with circuit id and its attributes, we were
able to divide our trafﬁc logs into three different application logs
corresponding to each class we deﬁned. We then extracted the cir-
cuits and their attributes of each class, and eliminated outlier cir-
cuits which downloaded only a few cells. From the logs, we created
an ofﬂine data set and three online data sets and converted them to
the Attribute-Relation File Format (ARFF) format for the WEKA
processing. We next describe our ofﬂine and online datasets
Ofﬂine data set. We sampled approximately 200 circuits from the
three application traces. Of the 200 circuits, 122 were browsing
circuits,7 49 were BitTorrent circuits and the remaining 28 were
streaming circuits. We then extracted the circuit-level attributes we
used for ofﬂine classiﬁcation: the circuit lifetime, the amount of
data sent upstream and downstream, and the variance of the cell
inter-arrival times of a circuit.
Online data set. From our application traces, we also extracted
the cell attributes that were computed online for every cell that the
entry node transferred for our clients. Each instance of our online
data set is composed mainly of cell-level attributes such as the inter-
arrival time of the current cell, its mean and variance. Also, an
instance contains some circuit-level attributes such as the EWMA
of the count of the cells sent recently on a circuit. We created three
different ARFF ﬁles using the same data set, but for every ﬁle, we
used different classes:

• TBS: This ﬁle contained sampled attributes from BitTorrent,
browsing and streaming circuits. Each data instance was la-
belled with its respective class. Approximately 60% of the
instances were extracted from browsing circuits, 20% were
from BitTorrent, and the remaining 20% were from stream-
ing circuits.

• TN: This ﬁle contained the same data as TBS, except that
browsing and streaming instances were labelled in common
as “NotBulk”, while BitTorrent instances remained separate
as “Bulk”.

6User think times are known to be larger for YouTube sessions than for traditional
web workloads [16].
7Note that the Tor client uses on average 6 circuits per hour for browsing, so 122
circuits is approximately 20 hours’ worth of browsing.

78 100

 80

 60

 40

 20

)

%

(
 
y
c
a
r
u
c
c
A

 0

 0

)

%

(
 
y
c
a
r
u
c
c
A

 100

 80

 60

 40

 20

 0

LMT
FT
BayesNet

 20

 40

 60

 80

 100

BayesNet

FT

LMT

Percentage of Training Data

Classification Algorithms

Figure 5: Accuracy of different classiﬁcation algorithms used for
the ofﬂine dataset when varying the percentage split of training data
relative to the whole dataset

• BT: This ﬁle contained only the subset of browsing and Bit-

Torrent instances from TBS.

5.2 Evaluation Metrics

To evaluate our classiﬁcation algorithms, we utilized two widely
used machine-learning metrics, the accuracy of the classiﬁer, and
the F-measure. We use the accuracy to evaluate the overall classi-
ﬁcation accuracy, whereas the F-measure is used in our evaluation
as a per-class evaluation metric.

Accuracy reﬂects the percentage of the testing instances that have

been classiﬁed correctly out of all instances:

Accuracy =

T P + T N

N

(5)

where N is the total number of samples. The F-measure is deﬁned
as the harmonic mean of precision and recall, which are deﬁned as
follows:

P recision =

T P

T P + F P

Recall =

T P

T P + F N

(6)

(7)

where T P , F P and F N are the true positives, false positives and
false negatives of a test, respectively. Therefore, the F-measure is
given by:

F -measure =

2 ∗ P recision ∗ Recall

P recision + Recall

(8)

Intuitively, a score of 1 for the accuracy or the F-measure indicates
a perfect classiﬁer.

5.3 Ofﬂine Classiﬁcation

In this section, we present our results for the Bayes Nets, LMT
and FT classiﬁers, which we overviewed in section 4.3, on our of-
ﬂine dataset. Figure 5 shows how the accuracy of the classiﬁers
changes as we vary the percentage of the training data relative to
the whole dataset. The ﬁgure shows that the accuracy of Bayes
Nets seems to improve from 60% when training data is only 20%
of the ofﬂine dataset to above 85% when the training data is around
70% of the ofﬂine dataset. The Bayes Net classiﬁer starts to de-
grade to around 82% as the percentage of training data increases to
80%. This suggests that more data than 70% of the ofﬂine dataset
can add noise to the classiﬁer. FT and LMT provide better accu-
racy, and are very similar to each other. With around 60% training
data, each classiﬁers provides us with greater than 90% accuracy.

Figure 6: Accuracy of different classiﬁcation algorithms used when
10-fold cross-validation is used on the ofﬂine datasets

Streaming
Bulk
Interactive

e
r
u
s
a
e
m
-
F

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

BayesNet

FT

LMT

Classification Algorithms

Figure 7: F-measure of the different trafﬁc classes when using dif-
ferent classiﬁcation algorithms with 10-fold cross-validation on the
ofﬂine dataset

Figure 6 summarizes the accuracy of the classiﬁers when 10-fold
cross-validation is used on our ofﬂine dataset. In the n-fold cross-
validation, the training data is divided into n subsets. One subset is
used for testing and the other n − 1 subsets are used for training.
This process is repeated n times so that in every iteration, a new
subset is used for testing. The advantage of this method is that the
whole dataset is used for both training and testing, and the n results
can be averaged. As seen in the ﬁgure, the FT classiﬁer achieves
91% accuracy when 10-fold cross-validation is used.

Figure 7 depicts the F-measures of the different classes when
different classiﬁers are used in combination with 10-fold cross-
validation. Again, FT provides the highest F-measures for all of the
classes. It can also be seen that all three classiﬁers perform well in
identifying a browsing circuit, as their F-measure for the browsing
class ranges from 0.83 for Bayes Nets to 0.97 for FT. FT and LMT
classiﬁers also perform very well in identifying BitTorrent circuits.
However, they both achieve around 0.71 for the streaming class.

5.4 Online Classiﬁcation

We next present our classiﬁcation results for our three online
datasets. For the TBS dataset, we used both Bayes Nets and Naïve
Bayes. Figure 8 shows the classiﬁer accuracy as we vary the per-
centage of the training subset of TBS. With only 30% training per-
centage, Bayes Nets classiﬁes most cells with an accuracy of 95%.
Naïve Bayes on the other hand provides a very poor accuracy on
the TBS dataset which does not exceed 31% regardless of the per-
centage of the training data. Figure 9 shows the accuracy of Bayes
Nets and Naïve Bayes classiﬁers on the TBS dataset when 10-fold
cross-validation is performed. Bayes Nets provide a 97.8% accu-
racy while Naïve Bayes provides a 31% accuracy.

79 100

 80

 60

 40

 20

)

%

(
 
y
c
a
r
u
c
c
A

 0

 0

BayesNet
Naive Bayes TB
Naive Bayes TN 
Naive Bayes TBS

 20

 40

 60

 80

 100

Percentage of Training Data

Figure 8: Accuracy of different classiﬁcation algorithms on the on-
line datasets when varying the percentage split of the training data
relative to the whole dataset

)

%

(
 
y
c
a
r
u
c
c
A

 100

 80

 60

 40

 20

 0

BayesNet

NaiveBayes-TBS

NaiveBayes-TN

NaiveBayes-TB

Classification Algorithms

Figure 9: Accuracy of different classiﬁcation algorithms used when
10-fold cross-validation is used on the online datasets

However, the accuracy of Naïve Bayes jumps to 85% if used to
classify the TN dataset. This shows that the Naïve Bayes classiﬁer
is good in identifying the bulk class, and other non-bulk classes.
The Naïve Bayes classiﬁer further shows more accuracy on the TB
dataset which reaches 95%. It can be seen from these results that
the Naïve Bayes classiﬁer performs best when we eliminate the
streaming class training, as it is an excellent classiﬁer in detecting
the bulk and the interactive classes. This is evident from the F-
measures we obtained for the bulk and interactive classes shown in
Figure 10. Table 1 summarizes a high-level comparison between
our threshold, ofﬂine, and online classiﬁers.

5.5 Live Tor Experiment

In order to show the performance beneﬁts that are made pos-
sible using trafﬁc classiﬁcation, we implemented a Naïve Bayes
classiﬁer in the latest release of the Tor source code.8 We used
the training model we obtained from WEKA to train our classi-
ﬁer. In particular, we trained our classiﬁer to recognize two trafﬁc
classes, the interactive and the bulk transfer classes. The reason we
chose this classiﬁer is twofold. First, as previously discussed, the
largest application that is used on Tor is web browsing, and the sec-
ond largest is BitTorrent. Therefore, our classiﬁer should be able
to identify the largest two classes of trafﬁc that use the Tor net-
work. Secondly, online classiﬁcation requires classiﬁcation at the
cell level; therefore, it is important to ensure that our classiﬁer is
efﬁcient and does not add any extra load on the operation of an OR.
A simple Naïve Bayes classiﬁer ﬁts those two conditions, and its
running costs are minimal.

8We used tor-0.2.2.35 for our experiments.

e
r
u
s
a
e
m
-
F

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

Streaming
Bulk
Interactive

BayesNet

NaiveBayes-TBS

NaiveBayes-TB

Classification Algorithms

Figure 10: F-measure of the different trafﬁc classes when using
different classiﬁcation algorithms with 10-fold cross-validation on
the online dataset

We deployed a Tor entry node,9 which runs our classiﬁcation
implementation, on the live Tor network in April 2012. We also
implemented the following simple QoS rule.10 If our OR classiﬁes
at least three circuits in one client connection as bulk, then the OR
reacts by throttling the client connection to 50 KB/s. The OR de-
cides the class of the circuit after classifying the ﬁrst 3000 cells that
travel downstream in the circuit towards the client. The OR decides
that a circuit is bulk if the number of cells classiﬁed as bulk are at
least two times the number of cells classiﬁed as interactive.

Recall from Section 5 that we only monitor our own trafﬁc, so as

to not accidentally deanonymize real Tor users.

We found that our classiﬁer was able to classify a bulk and inter-
active circuits accurately after classifying approximately 2000 and
1000 cells, respectively; however, we chose the 3000 cell mark in
order to have more conﬁdence in our classiﬁcation decision. Fur-
thermore, although 3000 cells might sound like a large number of
cells, we argue that 3000 cells are transferred by bulk applications
in a matter of a few seconds.

We ran two Tor clients from the same machine. Our ﬁrst client
is the Vuze BitTorrent client, which acts as the bulk class trafﬁc
generator. Its setup remains similar the one described in Section 5.
The second client, the interactive class trafﬁc generator, runs a curl
script in a loop to download a 300 KB ﬁle from an external server
through Tor using our entry node as its ﬁrst hop. The client pauses
randomly for 3 to 30 seconds and then sends another download
request to the external server to start downloading. Note that the
behaviour of this interactive client is slightly different from the au-
tomated web browser we used to train our classiﬁer because of the
absence of the effects of dynamic contents, for example.

Figures 11 and 12 depict the performance of our interactive class
user when the OR runs stock Tor and when it runs DiffTor. As can
be seen in Figure 11, the download time — the time it takes the Tor
client to complete downloading a 300 KB ﬁle — is signiﬁcantly
improved. While the download time that the client experiences is
16 seconds at the median without QoS, the median download time
is substantially improved to 2.2 seconds when QoS is employed at
the OR. Likewise, the time-to-ﬁrst-byte, the time it takes the client
to receive the ﬁrst chunk of data11 after issuing a request, is also sig-
niﬁcantly reduced from 3.5 seconds at the median for the non QoS
case to 0.9 seconds when QoS is used. Table 2 shows the overall

9To induce congestion, we capped its bandwidth to 200 KB/s.
10Note that our live experiment is a proof-of-concept, rather than a precise throttling
rule that should be used in practice. Because we showed in previous sections the
possibility to classify Tor circuits accurately to three classes, one has the ﬂexibility to
deﬁne different QoS techniques to react to different classes.
11From a user perspective, this is an important metric because it shows how long the
user is expected to wait before he sees changes to the browser.

80Table 1: Comparison of threshold, online and ofﬂine classiﬁcation methods

Classiﬁcation type Classiﬁcation level
Connection-level

Threshold

Ofﬂine
Online

Circuit-level

Cell-level

Accuracy

90%
91%
97%

Attribute(s)

Number of circuits per connection

Data transferred, CIT variance, and circuit lifetime

CIT statistics and EWMA of cells sent

n
o

i
t

i

u
b
i
r
t
s
D
e
v
i
t

 

l

a
u
m
u
C

 1

 0.9

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

 0

DiffTor
Tor

 0

 5

 10

 15

 20

 25

 30

Download Time (s)

Figure 11: Comparison of the 300 KB download times that the web
client experiences with and without QoS

i

n
o
i
t
u
b
i
r
t
s
D
 
e
v
i
t
a
u
m
u
C

l

 1

 0.9

 0.8

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

 0

DiffTor
Tor

 0

 2

 4

 6

 8

 10

 12

 14

Time to First Byte (s)

Figure 12: Comparison of the time-to-ﬁrst-byte that the web client
experiences with and without QoS
and per-class accuracy of the live experiments. To summarize our
results, the download time is improved by 86% and the time-to-
ﬁrst-byte is improved by 75% at the median for the web browser.
As for the BitTorrent client, the download rate was successfully
throttled to 50 KB/s as intended by our example QoS rule.

6. DISCUSSION

Below we discuss a variety of issues such as the deployability of
our scheme on the deployed Tor network and the effects of human
variability on the performance of our techniques. We also express
our thoughts on the effects of gaming our classiﬁcation techniques
and on the security and privacy implications of trafﬁc classiﬁcation
in Tor. Finally, we talk about open issues that we plan to investigate
as future work.

6.1 Incremental Deployment

Our work is currently applicable to entry guards and is incre-
mentally deployable. Setting QoS parameters can be done locally
by OR operators or globally by directory authorities. Although we
have only demonstrated how we can implement a simple QoS rule
that throttles a client connection when it detects a bulk transfer at
an entry guard, our work extends naturally to middle and exit ORs.

Table 2: Overall and per-class accuracy of live experiments

Overall

Bulk class

Interactive class

77%

74%

95%

While it is infeasible for a middle or an exit OR to throttle connec-
tions for the sake of implementing QoS,12 we can still implement
QoS rules for middle or exit routers at the circuit scheduling level
(as opposed to the connection level) to reduce the effects of conges-
tion on interactive applications; this could be particularly useful to
counter bulk downloaders who run their own (non-throttling) en-
try nodes. Furthermore, we suspect that QoS can provide even
further improvements if combined with fair queuing on all cir-
cuits [38]. However, maintenance will be sometimes required: as
the behaviour of applications change, and with continuous changes
to the Internet, the classiﬁer will need to be retrained to maintain
its accuracy.

6.2 Human Variability

Because we used automated tools to generate web and stream-
ing trafﬁc in our data collection phase, one might wonder if our
techniques would generalize to a broad range of users who use ap-
plications differently. In our work, we are conﬁdent that we ad-
dressed this issue in our realistic trafﬁc generation and in our se-
lection of solid attributes. We strived to generate as much realistic
trafﬁc as possible by exploiting previous studies that estimate user
think times for both streaming and interactive applications, and by
using the most popular URLs and keywords. Second, we also chose
attributes that are strong enough to prevail even in face of user vari-
ability. Recall that our attributes identify burstiness, the variance
of burstiness, and the amount of data sent recently. Those are very
high-level application signatures that should not be different for dif-
ferent humans because they are inﬂuenced by how an application
protocol behaves.

For example, even if different users employ different BitTorrent
clients, our techniques will still identify the behaviour of the Bit-
Torrent protocol. The BitTorrent protocol will always attempt to
create several streams which would create many circuits and result
in what looks like a continuous downloading circuit. While there is
more variability in the interactive class since it involves human in-
teraction, such variability will only affect the think times observed,
but will not change the fact that interactive applications are bursty.

6.3 Gaming the Classiﬁer

Because we perform classiﬁcation at the circuit and cell levels,
some users may change the behaviour of their applications to avoid
certain QoS measures. For example, if an entry node throttles bulk
transfers, then BitTorrent users might shape their trafﬁc so that it
is not classiﬁed correctly as bulk. This attempt to disguise one
class of trafﬁc’s statistical features (e.g., packet sizes and timing)
as another trafﬁc class’s features, called trafﬁc morphing [39], has
been proposed as a way to defeat statistical trafﬁc classiﬁcation
techniques. We note that, even when armed with trafﬁc morphing
techniques that are informed with prior knowledge about the clas-

12Recall that an OR-to-OR connection multiplexes circuits from several users.

81siﬁcation features and the training model, it is often the case that
identifying features persist that reveal the true application [12].

With regard to our classiﬁcation approaches, there are two sce-
narios to consider. First, to game the ofﬂine classiﬁcation, in ad-
dition to shaping their trafﬁc to look more bursty, BitTorrent users
would have to send signiﬁcantly less trafﬁc upstream and down-
stream, and they would need to discontinue using the circuit within
10 minutes. We argue that shaping their trafﬁc in this way would
still be a win to the Tor network since that would signiﬁcantly re-
duce congestion. Second, to game the online classiﬁcation, if the
classiﬁer makes a classiﬁcation decision periodically, and changes
the QoS parameters accordingly, then BitTorrent clients would still
need to continuously shape their trafﬁc to look like interactive cir-
cuits, which again is a win to the network. However, BitTorrent
clients can still use several circuits over the Tor network to achieve
the desired aggregate bandwidth. Preventing such cheating users
from obtaining an unfair bandwidth share is an area for future work.

6.4 Security and Privacy Implications

There are two security implications that trafﬁc classiﬁcation raises
in Tor. First, an exit may be able to reduce the anonymity set of the
entry guard using the circuit if it observes changes in the service.
The extent of how much information is revealed depends on the
QoS parameter deﬁned. For example, if an entry guard throttles
only bulk downloads, then the anonymity of bulk download users
may be reduced. However, as more entry guards upgrade, it will be
more difﬁcult for an exit to guess who the entry guard is.

Second, since guards are directly connected to users, classifying
their circuits can reveal private information about the activities of
the users and how they use Tor. Since Tor mainly welcomes inter-
active real-time applications and since the majority of Tor circuits
carry browsing trafﬁc, then bulk download users actually deviate
from the behaviour of the majority of circuits and thereby endanger
their privacy. Actually, it is already well known that the anonymity
of BitTorrent users on Tor is questionable, so classiﬁcation does not
really add further damage to the anonymity of this class of users [8].
Our work is another disincentive for greedy users to deviate from
typical network usage.

6.5 Future Work

There are still some interesting areas for investigation in our
work. First, as the network grows and starts to attract more users,
we expect that more applications will emerge in the Tor network
and we will therefore need to deﬁne more classes of service and
investigate more attributes and algorithms. Second, it would be in-
teresting to compare how the different machine learning algorithms
trade off cost with accuracy. Another open research question that
we would like to answer is how to use the classiﬁcation techniques
we presented in this paper to infer more information on how users
currently use Tor, and the percentage of users of each trafﬁc class.
There are currently efforts and proposals to safely collect data on
the live network to estimate the number of users [27]. It would be
interesting to also log circuit information in a privacy-preserving
manner to be able to perform ofﬂine classiﬁcation and understand
the current usage of the Tor network. Finally, another area of future
work is to investigate different QoS techniques on different trafﬁc
classes and perform a whole-network performance evaluation on a
Tor network testbed such as ExperimenTor [6] or Shadow [20].

7. RELATED WORK

applications allocate ports dynamically. Moreover, in addition to
their legal and ethical concerns, techniques that are based on deep
packet inspection are also ineffective with the use of encryption.
Therefore, researchers propose different features extracted from the
transport level, packet level and connection level and apply differ-
ent machine learning techniques to be able to classify trafﬁc to dif-
ferent categories.

Applying the previous solutions to classify trafﬁc in the Tor net-
work is more challenging for two reasons. First, most of the useful
features that have been used previously are not available in the con-
text of Tor. Examples include the client and server connection ports
used and the packet sizes, which are ﬁxed in Tor. Second, unlike IP
network classiﬁcations, where packet inter-arrival times is a useful
feature, we found that timing features are sometimes fragile in Tor
because of the varying circuit and relay characteristics. The prob-
lem gets even more challenging as we try to realize real-time trafﬁc
classiﬁcation for Tor.

From the Tor literature, Panchenko et al. [33] describe an at-
tack where the adversary is a local eavesdropper that uses machine
learning to infer information from the encrypted trafﬁc sent by a
Tor client regarding the web sites that the client visits. The au-
thors ﬁrst assumed a closed-world model where an attacker trains
a classiﬁer with some URLs that the client is known to visit. Later,
the classiﬁer is used to ﬁgure out what URLs the client is request-
ing. They further assume an open-world model where the attacker
only wants to ﬁnd out if the client is visiting a restricted website.
For both models, the authors show a high true positives and low
false positives.13 In our work, we try to classify circuits to different
classes depending on the application using the circuit mainly for
performance improvement goals. Also, while the features used by
Panchenko et al. are very useful, we cannot beneﬁt from the packet
sizes for online classiﬁcation at the entry guards, for example, as
Tor uses ﬁxed-sized cells.

Other related work in the Tor literature was introduced by Moore
et al. [31] and Jansen et al. [22]. From a high level, both proposals
are similar in the sense that they both attempt to improve the perfor-
mance of interactive applications in Tor by throttling bulk transfers.
This is done by throttling all connections between the client and the
entry guard using Tor’s already-implemented token-bucket system.
The approach of Moore et al. is to apply a certain limit that would
slightly affect web browsing users, but would greatly slow down
bulk transfers. The only way for clients to avoid the throttling is
by donating bandwidth to the Tor network by running as relays.
This incentives-based approach and other similar approaches such
as BRAIDS [21], which also provides differentiated services, and
the gold star scheme [32] are impractical as it is difﬁcult to expect
that Tor clients would run relays, and applying it may result in dis-
couraging clients from using the network.

Jansen et al. propose and investigate three algorithms that ad-
just or throttle the connection between an entry guard and a client.
Their most effective algorithm, nicknamed the threshold algorithm,
maintains an EWMA value of the cells sent on a client connection.
This value is used to sort circuits from loudest to quietest, with the
goal of throttling a loudest threshold of all connections.

We note that the problem with this approach is that it would un-
necessarily throttle time-sensitive streaming applications and be-
cause the threshold is high,14 it may also throttle interactive cir-
cuits. Another problem with the threshold algorithm is that it is
based only on the EWMA of the cells sent recently. Our exper-
iments revealed that this value alone is sometimes unreliable as

Network trafﬁc classiﬁcation has been studied intensively in the
networking literature [7,24,30,34,40]. Traditional port-based tech-
niques of trafﬁc classiﬁcation are almost phased out because some

13In response to this attack, the Tor browser bundle enables HTTP pipelining and ran-
domizes the pipeline size and the size of requests.
14The authors report that a threshold of 90% yields the best results.

82interactive circuits sometimes have large values of EWMA while
they are downloading web pages.

The advantage of DiffTor over previous approaches is that apply-
ing QoS is more ﬂexible since we deﬁne different classes of service.
For instance, an entry guard can choose to give a deﬁned small per-
centage of its bandwidth to BitTorrent, and assign more bandwidth
to the other two classes. However, when the node is currently not
serving streaming or web browsing, it can offer more bandwidth to
the bulk transfer circuit, thereby not wasting bandwidth.

8. CONCLUSION

Motivated by the crucial need to improve the performance of
the Tor network, we propose a machine-learning-based approach to
provide differentiated services. We recognize that the current main
trafﬁc classes that use the Tor network have different constraints
that can be addressed by deﬁning appropriate QoS measures. Based
on our study of trafﬁc logs (of our own network usage) we obtained
from the live Tor network, we derive useful attributes and use them
in combination with well-known classiﬁcation algorithms to clas-
sify our trafﬁc logs with a very high accuracy. Furthermore, we
implement our classiﬁer in Tor and deﬁne a simple QoS rule to test
our approach on the live network. Our results show high classi-
ﬁcation accuracy that results in signiﬁcant improvements for the
experience of interactive Tor users.
Acknowledgements. We thank the anonymous reviewers for their
helpful comments and suggestions. We thank NSERC, ORF, Qatar
University, and The Tor Project, Inc. for funding this research.

9. REFERENCES
[1] Alexa: The Web Information Company.

http://www.alexa.com/topsites, 2012. Accessed
February 2012.

[2] iMacros for Firefox.

https://addons.mozilla.org/en-US/
firefox/addon/imacros-for-firefox/, 2012.
Accessed February 2012.

[3] Vuze: The Most Powerful BitTorrent App on Earth.

http://www.vuze.com, 2012. Accessed February 2012.

[4] ALSABAH, M., BAUER, K., GOLDBERG, I., GRUNWALD,

D., MCCOY, D., SAVAGE, S., AND VOELKER, G. M.
DefenestraTor: Throwing out Windows in Tor. In 11th
Privacy Enhancing Technologies Symposium (July 2011),
pp. 134–154.

[5] AULD, T., MOORE, A., AND GULL, S. Bayesian Neural

Networks for Internet Trafﬁc Classiﬁcation. IEEE
Transactions on Neural Networks 18, 1 (January 2007),
223–239.

[6] BAUER, K., SHERR, M., MCCOY, D., AND GRUNWALD,

D. ExperimenTor: A Testbed for Safe and Realistic Tor
Experimentation. In Proceedings of the 4th USENIX
Workshop on Cyber Security Experimentation and Test
(CSET) (August 2011), pp. 51–59.

[7] BERNAILLE, L., TEIXEIRA, R., AKODKENOU, I., SOULE,
A., AND SALAMATIAN, K. Trafﬁc Classiﬁcation on the Fly.
SIGCOMM Comput. Commun. Rev. 36, 2 (April 2006),
23–26.

[8] BLOND, S. L., MANILS, P., CHAABANE, A., KAAFAR,

M. A., CASTELLUCCIA, C., LEGOUT, A., AND DABBOUS,
W. One Bad Apple Spoils the Bunch: Exploiting P2P
Applications to Trace and Proﬁle Tor Users. In Proceedings
of the 4th USENIX Conference on Large-scale Exploits and
Emergent Threats (LEET) (March 2011).

[9] CHAABANE, A., MANILS, P., AND KAAFAR, M. A.

Digging into Anonymous Trafﬁc: A Deep Analysis of the
Tor Anonymizing Network. In Proceedings of the 4th
International Conference on Network and System Security
(NSS) (September 2010), pp. 167–174.

[10] DINGLEDINE, R. Tor and Circumvention: Lessons Learned.
In Proceedings of the 31st Annual Conference on Advances
in Cryptology (CRYPTO) (August 2011), pp. 485–486.

[11] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P.
Tor: The Second-Generation Onion Router. In Proceedings
of the 13th USENIX Security Symposium (August 2004),
pp. 303–320.

[12] DYER, K. P., COULL, S. E., RISTENPART, T., AND

SHRIMPTON, T. Peek-a-Boo, I Still See You: Why Efﬁcient
Trafﬁc Analysis Countermeasures Fail. In Proceedings of the
2012 IEEE Symposium on Security and Privacy (May 2012),
pp. 332–346.

[13] EARLY, J. P., BRODLEY, C. E., AND ROSENBERG, C.

Behavioral Authentication of Server Flows. In Proceedings
of the 19th Annual Computer Security Applications
Conference (ACSAC) (December 2003), pp. 46–56.

[14] FRIEDMAN, N., GEIGER, D., AND GOLDSZMIDT, M.

Bayesian Network Classiﬁers. Mach. Learn. 29, 2-3
(November/December 1997), 131–163.

[15] GAMA, J. Functional Trees for Classiﬁcation. In

Proceedings of the IEEE International Conference on Data
Mining (ICDM) (November 2001), pp. 147–154.

[16] GILL, P., ARLITT, M., LI, Z., AND MAHANTI, A.

Characterizing User Sessions on YouTube. In Proceedings of
the 15th IEEE Multimedia Computing and Networking
(MMCN) (January 2008).

[17] HALL, M., FRANK, E., HOLMES, G., PFAHRINGER, B.,
REUTEMANN, P., AND WITTEN, I. H. The WEKA Data
Mining Software: An Update. SIGKDD Explor. Newsl. 11, 1
(November 2009), 10–18.

[18] HERNÁNDEZ-CAMPOS, F., JEFFAY, K., AND SMITH, F. D.

Tracking the Evolution of Web Trafﬁc: 1995-2003. In
Proceedings of the 11th IEEE/ACM International Symposium
on Modeling, Analysis and Simulation of Computer
Telecommunication Systems (MASCOTS) (2003), pp. 16–25.
[19] HERRMANN, D., WENDOLSKY, R., AND FEDERRATH, H.

Website Fingerprinting: Attacking Popular Privacy
Enhancing Technologies with the Multinomial Naïve-Bayes
Classiﬁer. In Proceedings of the ACM Cloud Computing
Security Workshop (CCSW) (November 2009), pp. 31–42.
[20] JANSEN, R., AND HOPPER, N. Shadow: Running Tor in a

Box for Accurate and Efﬁcient Experimentation. In
Proceedings of the 19th Network and Distributed Security
Symposium (February 2012).

[21] JANSEN, R., HOPPER, N., AND KIM, Y. Recruiting New
Tor Relays with BRAIDS. In Proceedings of the 17th ACM
Conference on Computer and Communications Security
(New York, NY, USA, 2010), CCS ’10, ACM, pp. 319–328.
[22] JANSEN, R., SYVERSON, P., AND HOPPER, N. Throttling

Tor Bandwidth Parasites. In 21st USENIX Security
Symposium (August 2012).

[23] KARDI, T. Recursive Average and Variance.

http://people.revoledu.com/kardi/
tutorial/RecursiveStatistic/index.html,
2006. Accessed January, 2012.

[24] KIM, H., CLAFFY, K., FOMENKOV, M., BARMAN, D.,

FALOUTSOS, M., AND LEE, K. Internet Trafﬁc

83Classiﬁcation Demystiﬁed: Myths, Caveats, and the Best
Practices. In Proceedings of the ACM CoNEXT Conference
(December 2008), pp. 11:1–11:12.

[25] LANDWEHR, N., HALL, M., AND FRANK, E. Logistic

Model Trees. Mach. Learn. 59, 1-2 (May 2005), 161–205.

[26] LIBERATORE, M., AND LEVINE, B. N. Inferring the Source
of Encrypted HTTP Connections. In Proceedings of the 13th
ACM Conference on Computer and Communications
Security (CCS) (October 2006), pp. 255–263.

[27] LOESING, K. Safely collecting data to estimate the number

of Tor users.
https://lists.torproject.org/pipermail/
tor-dev/2010-August/000467.html, 2012.
Accessed April 2012.

[28] MAIER, G., FELDMANN, A., PAXSON, V., AND ALLMAN,
M. On Dominant Characteristics of Residential Broadband
Internet Trafﬁc. In Proceedings of the 9th ACM SIGCOMM
Conference on Internet Measurement (November 2009),
pp. 90–102.

[29] MCCOY, D., BAUER, K., GRUNWALD, D., KOHNO, T.,

AND SICKER, D. Shining Light in Dark Places:
Understanding the Tor Network. In Proceedings of the 8th
Privacy Enhancing Technologies Symposium (July 2008),
pp. 63–76.

[30] MOORE, A. W., AND ZUEV, D. Internet Trafﬁc

Classiﬁcation using Bayesian Analysis Techniques. In
Proceedings of the 2005 ACM SIGMETRICS International
Conference on Measurement and Modeling of Computer
Systems (June 2005), pp. 50–60.

[31] MOORE, W. B., WACEK, C., AND SHERR, M. Exploring

the Potential Beneﬁts of Expanded Rate Limiting in Tor:
Slow and Steady Wins the Race with Tortoise. In
Proceedings of the 27th Annual Computer Security
Applications Conference (ACSAC) (December 2011),
pp. 207–216.

[32] NGAN, T.-W. J., DINGLEDINE, R., AND WALLACH, D. S.

Building Incentives into Tor. In Proceedings of the 14th

International Conference on Financial Cryptography and
Data Security (FC) (January 2010), pp. 238–256.

[33] PANCHENKO, A., NIESSEN, L., ZINNEN, A., AND ENGEL,

T. Website Fingerprinting in Onion Routing Based
Anonymization Networks. In Proceedings of the ACM
Workshop on Privacy in the Electronic Society (WPES)
(October 2011), pp. 103–114.

[34] ROUGHAN, M., SEN, S., SPATSCHECK, O., AND

DUFFIELD, N. Class-of-service Mapping for QoS: A
Statistical Signature-based Approach to IP Trafﬁc
Classiﬁcation. In Proceedings of the 4th ACM SIGCOMM
Conference on Internet Measurement (October 2004),
pp. 135–148.

[35] SANDVINE. Sandvine Global Internet Phenomena Report —

Fall 2011.
http://www.sandvine.com/downloads/
documents/10-26-2011_phenomena/Sandvine%
20Global%20Internet%20Phenomena%
20Report%20-%20Fall%202011.pdf, October 2011.
[36] TANG, C., AND GOLDBERG, I. An Improved Algorithm for

Tor Circuit Scheduling. In Proceedings of the 17th ACM
Conference on Computer and Communications Security
(CCS) (October 2010), pp. 329–339.

[37] THE TOR PROJECT. Tor Metrics Portal: Data.

https://metrics.torproject.org/data.
html#performance. Accessed January 2012.

[38] TSCHORSCH, F., AND SCHEUERMANN, B. Tor is unfair —

And what to do about it. In Proceedings of the 36th IEEE
Conference on Local Computer Networks (LCN) (October
2011), pp. 432–440.

[39] WRIGHT, C., COULL, S., AND MONROSE, F. Trafﬁc

Morphing: An Efﬁcient Defense against Statistical Trafﬁc
Analysis. In Proceedings of the 16th Network and
Distributed Security Symposium (February 2009).

[40] ZUEV, D., AND MOORE, A. W. Trafﬁc Classiﬁcation using

a Statistical Approach. In Proceedings of the 6th
International Conference on Passive and Active Network
Measurement (2005), PAM’05, pp. 321–324.

84