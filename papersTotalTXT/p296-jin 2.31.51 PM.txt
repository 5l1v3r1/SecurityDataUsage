DPSense: Differentially Private Crowdsourced

Spectrum Sensing

Xiaocong Jin

Arizona State University

xcjin@asu.edu

Rui Zhang

University of Delaware
ruizhang@udel.edu

Yimin Chen

Arizona State University
ymchen@asu.edu

Tao Li

Arizona State University

tli@asu.edu

ABSTRACT
Dynamic spectrum access (DSA) has great potential to address
worldwide spectrum shortage by enhancing spectrum efﬁciency.
It allows unlicensed secondary users to access the underutilized
licensed spectrum when the licensed primary users are not trans-
mitting. As a key enabler for DSA systems, crowdsourced spec-
trum sensing (CSS) allows a spectrum sensing provider (SSP) to
outsource the sensing of spectrum occupancy to distributed mobile
users. In this paper, we propose DPSense, a novel framework that
allows the SSP to select mobile users for executing spatiotempo-
ral spectrum-sensing tasks without violating the location privacy of
mobile users. Detailed evaluations on real location traces conﬁr-
m that DPSense can provide differential location privacy to mobile
users while ensuring that the SSP can accomplish spectrum-sensing
tasks with overwhelming probability and also the minimal cost.

CCS Concepts
•Security and privacy → Privacy-preserving protocols; Mobile
and wireless security;

Keywords
Dynamic spectrum access; differential privacy; crowdsourced spec-
trum sensing; location privacy

1.

INTRODUCTION

Dynamic spectrum access (DSA) [28] is a key technique to ad-
dress worldwide spectrum shortage by enhancing spectrum efﬁ-
ciency.
It allows unlicensed secondary users (SUs) with cogni-
tive radio capabilities to access the underutilized licensed spec-
trum when the licensed primary users (PUs) are not transmitting.
Database-driven DSA [10,12] is the FCC-approved de facto paradig-
m. In such a system, a spectrum service provider (SSP) accepts
registrations from PUs and determines spectrum availability, and
SUs are all required to inquire the SSP about the availability of any
interested spectrum before using it. Current SSPs estimate spec-

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
© 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978426

Yaochao Zhang

Arizona State University
yczhang@asu.edu

trum availability based on PUs’ registered locations and transmis-
sion schedules in combination with radio propagation modeling.
Recent measurement studies such as [21], however, show that such
estimations are often inaccurate and tend to be overly conservative
due to ignoring local environmental factors, resulting in a consid-
erable waste of valuable spectrum resources.

Crowdsourced spectrum sensing (CSS) [8, 11] can effectively
improve the spectrum-estimation accuracy in database-driven D-
SA systems.
In this approach, the SSP deploys a small number
of dedicated spectrum sensors at strategic locations and outsources
the majority of spectrum-sensing tasks to ubiquitous mobile users.
The feasibility of CSS lies in three main aspects. First, 497 million
mobile devices were added in 2014, and global mobile devices will
grow to 11.5 billion by 2019 at a CAGR of 9% [1]. Such ubiquitous
penetration of mobile devices into everyday life implies sufﬁcient
geographic coverage especially in highly populated regions where
DSA systems are of high demand. Second, future mobile devices
are expected to be capable of spectrum sensing as DSA is mature
and widely deployed. Last, most mobile users in daily life take
routine or preplanned routes and may participate in CSS systems if
proper incentives are provided.

Privacy and efﬁciency are two conﬂicting concerns that impede
the wide deployment of CSS systems.
In particular, spectrum-
sensing tasks are spatiotemporal in nature and pertain to speciﬁc
time and physical locations. In addition, mobile users often need
travel to designated sensing locations, and they may desire rewards
commensurate with the travel distance. On the one hand, the SSP
seeks to maximize the system efﬁciency such that the spectrum-
sensing task can be successfully fulﬁlled with the minimum cost
which is equivalent to the minimum total travel distance for all par-
ticipating users. To achieve the maximum system efﬁciency, the
SSP needs to know the locations of candidate participants. On the
other hand, mobile users are increasingly wary of location privacy,
and disclosing their locations to the SSP may severely discourage
their participation.

This paper presents DPSense, a novel framework for striking a
good balance between location privacy and system efﬁciency in C-
SS systems. In DPSense, the SSP publishes spectrum-sensing tasks
for speciﬁc locations and time periods in the future. Each candidate
CSS participant responds to the SSP by submitting his/her predict-
ed (either routine or preplanned) mobility trace which is perturbed
to satisfy differential location privacy. We then present an optimiza-
tion formulation for the SSP to assign spectrum-sensing tasks based
on perturbed mobility traces and show that it is NP-hard. Finally,
we propose a heuristic solution and thoroughly evaluate it via de-
tailed trace-driven simulations based on real-world mobility traces.

296Our results conﬁrm that DPSense can simultaneously achieve the
following desirable objectives.

• Differential location privacy. DPSense offers differential lo-
cation privacy to mobile participants under a strong adver-
sary model by incorporating the mechanism in [27].

• Minimal cost or travel distance. DPSense assigns spectrum-
sensing tasks to mobile participants based on their perturbed
location traces while ensuring the minimal cost for the SSP
or equivalently minimum total travel distance for mobile par-
ticipants.

• High task-completion rate. DPSense guarantees that each
spectrum-sensing task can be successfully conducted with
overwhelming probability.

The rest of the paper is structured as follows. Section 2 intro-
duces the system and adversary models. Section 3 motivates the
requirement for location privacy in CSS. Section 4 reviews the d-
ifferential privacy mechanism in [27] underlying DPSense. Sec-
tion 5 presents the DPSense framework. Section 6 demonstrates
the experimental evaluations. Section 7 discusses the related work.
Section 8 concludes this paper.

2. SYSTEM AND ADVERSARY MODELS

In this section, we introduce the system model, the spectrum-

sensing model, and the adversary model.
2.1 System Model

We consider a crowdsourced spectrum sensing (CSS) system
consisting of a spectrum service provider (SSP) and N mobile par-
ticipants in CSS. In addition to having the similar functionalities to
traditional database-driven DSA system operators [10,12], the SSP
explores mobile crowdsourcing to estimate spectrum availability in
its service region and answers spectrum access requests from SUs.
Each mobile participant is a user who carries an advanced mo-
bile device with spectrum sensing capabilities and wishes to earn
rewards by participating in CSS. The participant registers with the
SSP and communicates with the SSP via an app installed on his1
mobile device. Developed by the SSP, the app is assumed to pass
the strict vetting process of the trusted app store and has no unau-
thorized access to the user’s locations.

The SSP generates a spectrum-sensing task either periodically or
on demand upon receiving a spectrum-access request from an SU.
Our system works in the same way for both cases. The SSP con-
verts each sensing task into a number of subtasks to ensure that the
sensing reports submitted by different mobile participants are inde-
pendent of each other. In particular, let Tj denote the j-th sensing
task, which includes Rj as the physical sensing region, ts
j as the
sensing time period, and divj as the targeted diversity order to be
further explained in Section 2.2. The SSP ﬁrst selects nj candidate
sensing locations in Rj, denoted by {ls
k=1, such that any two
locations are separated with a distance over d0, where d0 is a ﬁxed
system parameter. The SSP then generates nj subtasks {Sj,k}nj
k=1,
where Sj,k = (ls
j ). Finally, the SSP assigns subtasks to mo-
bile participants based on their mobility traces. A subtask can be
accepted or declined by the chosen mobile participant. Task Tj is
said to be completed if and only if at least divj subtasks are accept-
ed by mobile participants.

j,k}nj

j,k, ts

To enable spectrum-sensing task assignment, each participant i
periodically predicts his mobility trace for the upcoming time peri-
od and submits it to the SSP. This can be easily done in practice, as
1No gender implication.

most mobile users have target locations to go instead of wandering
around. Each mobility trace can be represented as a sequence of γ
location and time pairs, Li = (cid:3)(ti,1, li,1), . . . ,( ti,γ, li,γ)(cid:4), where
ti,u and li,u (∀u ∈ [1, γ]) denote the u-th time and location points,
respectively, and γ is a system parameter. To be more practical,
ti,u and li,u can be the indexes of a time slot and a physical cell,
as speciﬁed by the SSP. The mobility traces can be either automat-
ically obtained via popular location service APIs such as Google
Map API or manually fed to the mobile app by participants. Some
participants may opt to not provide their mobility traces, in which
case they are considered unavailable for the entire time period.
2.2 Spectrum Sensing Model

Each mobile participant performs spectrum sensing by detecting
PU transmissions on the speciﬁed channel in the time and loca-
tion designated by the SSP. We adopt the following conventional
spectrum-sensing model to facilitate the presentation, but our work
can be easily extended to support other sensing models.

We assume that the channels between PUs and mobile partici-

pants are Rayleigh fading with additive white Gaussian noise (AWGN).
The shadow fading is spatially correlated, and the correlation of
the received signals for two spectrum sensors separated by distance
d can be modeled as an exponential function e−ad [20], where a
refers to an environment parameter which is approximately 0.1204
and 0.002 in urban non-line-of sight and suburban environments,
respectively. The de-correlation distance d0 is deﬁned as the min-
imum distance for two spectrum sensors when the correlation is
under a desired threshold.

We assume that the SSP uses the Neyman-Pearson (NP) detector
to combine multiple sensing reports from mobile participants to
reliably determine spectrum occupancy. Speciﬁcally, for a target
average decision error probability P ∗
that accounts for both false
positives and false negatives, the number of independent spectrum-
sensing reports needs to be no less than the diversity order [6, 24],

div∗

= − lim

SNR→+∞

logP ∗
logSNR

,

(1)

where SNR is the average signal-to-noise ratio at the sensing partic-
ipants. We subsequently assume that the SSP can determine proper
div∗

for each spectrum sensing task.

Once the diversity order is concretely deﬁned, the following the-

orem can be similarly derived according to [6].

THEOREM 1. For multiuser sensing with soft information fu-
sion, when the sensing threshold is chosen to minimize the average
error probability, the diversity order of the NP detector equals the
number of cooperative users.
Similar conclusions can be drawn for hard decision fusion as well.
For details, please refer to [6].
2.3 Adversary Model

We assume that the SSP is honest but curious, which is common-
ly used to characterize a reasonable service provider. In particular,
the SSP is trusted to faithfully follow the protocol execution but is
also interested in learning mobile participants’ locations. We as-
sume that the SSP can have arbitrary prior knowledge for attempt-
ing to breach the participants’ location privacy. In particular, it may
infer target mobile participant’s location by exploiting the temporal
correlation among the submitted mobility traces.

3. LOCATION INFERENCE IN CSS

In the original CSS system, the SSP needs to know the locations
of mobile participants for assigning sensing tasks. This require-

297TA

TB

TC

Figure 1: An exemplary location-inference attack, where the par-
ticipant chooses TB over TA and TC.

TC

TB

TA

Cloaking 
region

TC

TA

TB

Figure 2: Another exemplary location-inference attack, where tri-
angulation is used to locate the possible region of the victim.

ment obviously violates the location privacy of mobile participants
in the desired sensing period. It is worth emphasizing that loca-
tion privacy here refers to the secrecy of each participant’s original
mobility trace when he is not involved in CSS. In this section, we il-
lustrate several location-inference attacks against several plausible
attempts to improve the location privacy in CSS.

One plausible solution to protecting location privacy in CSS is
to let the SSP broadcast spectrum-sensing tasks to all mobile par-
ticipants who then claim tasks without disclosing their locations
to the SSP. Unfortunately, since mobile participants tend to select
sensing tasks close to their locations, the SSP could still infer their
locations based on the tasks they choose. The reason is that mobile
participants generally are only willing to travel up to a certain dis-
tance (e.g., slightly deviating from their scheduled routes), which is
commonly referred to as the maximum travel distance (MTD) and
can be learned from publicly available data [14]. The sensing task
chosen by a mobile participant simply indicates that his location
is most likely within the circle centered at the chosen task’s cen-
ter location with a radius of MTD, and such information is what
the participants may not want to disclose. The SSP can go one
step further to shrink the area a participant resides from his sensing
preference. Consider Fig. 1 as an example. Assume that the SSP
broadcasted three tasks TA, TB, and TC, where three circles repre-
sent their corresponding maximum travel regions. Suppose that a
target participant chose task TB. Under the reasonable assumption
that the participant always chooses the closest task, the SSP can
easily conﬁne the participant’s location within the shaded area.

A more subtle attack against the above plausible solution is to
use trilateration. Assume that the SSP broadcasts one sensing task
in one round around the target area but with slight modiﬁcation of
the sensing region, as shown in Fig. 2. The three rounds can be
carefully scheduled so that during the three rounds, the participant
could be very likely located in the same location. For example,

Figure 3: Another exemplary location-inference attack that ex-
plores the temporal correlation of adjacent reported locations.

the three rounds can be scheduled simply at the same time of the
day. In the ﬁgure, the participant sequentially chooses the sensing
tasks TA, TB, and TC. The SSP could simply use triangulation
to ﬁnd out the intersection of the three regions so that the victim
is very likely in the highlighted region. As is shown, the area of
the intersection could be very small. Therefore, the participant’s
location privacy is further compromised.

Another possible solution is to let the participants submit per-
turbed locations to the SSP which in turn assigns sensing tasks
based on perturbed locations. Unfortunately, based on a recent s-
tudy [27], the SSP can still infer participant locations by exploiting
the temporal correlation among multiple perturbed locations sub-
mitted within a short time period. Consider Fig. 3 as an example.
Suppose that one participant moved from a restaurant in area 1 to
a supermarket in area 3 and submitted three circular cloaking ar-
eas generated from some spatial cloaking mechanism. Although
the individual locations were cloaked at each time, the order of the
three cloaking areas along with some side information such as road
constraints may reveal his exact location at the supermarket.

The three exemplary attacks discussed above highlight the risk
of location privacy breach in CSS and call for an advanced solution
to protect mobile participants’ location privacy.

4. DIFFERENTIAL PRIVACY WITH TEM-

PORAL CORRELATION CONSIDERATION

In this section, we brieﬂy review the differential privacy mecha-
nism in [27], which DPSense relies on for generating differentially
private mobility traces.
4.1

Inference Model

We ﬁrst discuss the Markov chain to model the temporal corre-
lations among the submitted locations of a particular CSS partici-
pant. From the SSP’s point of view, since it can only observe the
perturbed mobility trace instead of the original one, the inference
process is a Hidden Markov Model (HMM).

Assume that the sensing region is divided into disjoint cells, in-
dexed from 1 to m. Let pt = (pt[1], . . . , pt[m]) denote the prob-
ability distribution of a certain participant at time t. For example,
if a participant at time t is likely to reside in cell 1, 2, 3, and 4
with probability 0.15, 0.25, 0.35, and 0.25, respectively, we have
pt = {0.15, 0.25, 0.35, 0.25, 0, ..., 0}. Let M t = [mij] denote

298the transition matrix, where mij is the probability that the partic-
ipant moves form cell i to cell j for all 1 ≤ i, j ≤ m between
consecutive timestamps. Given a probability vector pt−1, the prob-
ability at time t can be computed as pt = pt−1M t. We assume that
the transition matrix M t is given as a priori knowledge, which can
be generated either from public transportation data or from person-
al transportation data2 using existing methods [22]. Since M t can
be constructed based on some public anonymized mobility datasets
that are totally unrelated to the participants in our system, it does
not negatively affect the location privacy of our system participants.
We further deﬁne the prior and posterior probabilities of a user’s
location before and after observing the perturbed location at time t
as p−
t , respectively. It is obvious that p−
4.2 Differential Location Privacy

t and p+

t = p+

t−1M t.

Differential location privacy is deﬁned over a δ-location set [27].
Deﬁnition 1. (δ-Location Set). Let p−

t be the prior probability
of a user’s location at time t. The δ-location set is a set containing
the minimum number of locations that have the prior probability
sum no less than 1 − δ:

(cid:2)

z

ΔXt = min{z|

t [z] ≥ 1 − δ}.
p−

(2)

Deﬁnition 2. At any time t, a randomized mechanism A satis-
ﬁes -differential privacy on the δ-location set ΔXt if, for any out-
put ˆut and any two locations u1 and u2 in ΔXt, the following
holds:

Pr(A(u1) = ˆut)
Pr(A(u2) = ˆut)

≤ e.

(3)

To satisfy the differential privacy requirement deﬁned above, a
location release algorithm that relies on Markov inference and the
planar isotropic mechanism is proposed in [27]. The output of the
algorithm is a differentially private version of the input mobility
trace. We defer the algorithm outline to Section 5.2 for clarity.

5. DPSENSE FRAMEWORK

In this section, we present the DPSense framework.

5.1 Overview

DPSense is intended to strike a balance between the spectrum-
sensing quality, the overall spectrum-sensing cost, and the location
privacy. The DPSense framework is illustrated in Fig. 4.
Assume that the SSP has M sensing tasks, denoted by T =
{Tj}M
j=1 , to fulﬁl in a future time period, e.g., starting one hour
later. Each mobile participant i submits his predicated mobility
trace either periodically or in response to the SSP’s request. Recall
that the mobility trace of participant i in the target sensing period
is deﬁned as Li = (cid:3)(ti,1, li,1), . . . ,( ti,γ, li,γ)(cid:4).
Instead of sub-
mitting Li to the SSP, participant i submits a perturbed version Lo
i
based on the algorithm in [27]. Subsequently, the SSP smooths the
perturbed traces according to the procedure in Section 5.3 and ﬁ-
nally runs our proposed algorithm in Section 5.6 on the smoothed
mobility traces to assign the M sensing tasks. As discussed, each
task can be divided into a number of subtasks at different locations
in the desired sensing region. Each mobile participant receives ei-
ther zero or one subtask assignment, and he may accept or decline
the assignment (e.g., when the subtask location is too far from his
2For example, Google Now continuously tracks users’ locations
and display relevant information to users in the form of “cards”
[26].

Center of the 
sensing region

A

B

Center of the 
sensing region

Original 
trace

Perturbed 

trace

Figure 4: The DPSense framework.

original route). A sensing task is completed if the number of mo-
bile participants accepting the subtask assignment is no less than
the predeﬁned diversity order. Each participant could be granted
some monetary rewards or reputation points that are proportional
to the distance he has to travel to perform the sensing task. How
the participants are actually rewarded is orthogonal to this paper.
5.2 Generating Differentially Private Mobili-

ty Traces

We use the location release algorithm in [27] which is based
on Markov inference and the planar isotropic mechanism (PIM).
The algorithm accepts a true mobility trace as input and outputs a
perturbed mobile trace that satisﬁes differential privacy on the δ-
location set. Speciﬁcally, the algorithm sequentially perturbs each
location in the mobility trace through the following steps.

• First, prior probabilities are derived using posterior probabil-

ities and the matrix M t based on the Markov model.

• Second, a δ-location set is generated to identify the set con-
taining the minimum number of locations that have prior
probability sum no less than 1 − δ.

• Third, the location at the current timestamp is perturbed by
adding a noise generated using PIM based on the K-norm
mechanism.

• Fourth, location inference is conducted based on the output
perturbed location to update the posterior probability of the
user in each location of the δ-location set.

It is proved in [27] that the algorithm guarantees differential priva-
cy. We subsequently call the perturbed mobility trace as the PIM
trace and refer interested readers to [27] for detailed illustrations.
5.3 Smoothing Perturbed Mobile Traces

Since the SSP can only use the perturbed mobility trace for task
assignment, it is intuitive that the closer the perturbed trace is to
the original location trace, the more accurate the SSP can estimate

299Table 1: Summary of Notation

Symbol Deﬁnition
N
M
Tj
ts
j
Rj
div∗
j
Sj,k
nj
Li
γ
li,κ
ti,κ
Lo
i
Lh
i
lo
i,κ
lh
i,κ
μ
α
β

Total number of participants
Total number of sensing tasks
The jth sensing task
Sensing timestamp for task Tj
Sensing region for task Tj
Desired sensing diversity order for Tj
Sensing sub-task set
Number of subtasks for task Tj
True mobility trace of participant i
Number of timestamps for each mobility trace
The κth location in Li
The κth timestamp in Li
PIM trace of participant i
Smoothed PIM trace of participant i
The κth location in Lo
i
The κth location in Lh
i
Size of the sliding window
Distance weight ratio
Diversity order multiplicator

i=1 and sliding window size μ.

i }N

i=1.

i ← ∅.
Lh
for all κ ∈ {(cid:11)μ/2(cid:12) + 1, . . . , γ − (cid:11)μ/2(cid:12)} do

Algorithm 1 PIM Traces Smoothing
Input: A set of PIM traces {Lo
i}N
Output: A set of smoothed traces {Lh
1: for all i ∈ {1, . . . , N} do
2:
3:
4:
5:
end for
6:
7: end for
8: return {Lh

(cid:3)κ+(cid:5)μ/2(cid:6)
(cid:4){(lh

x=κ−(cid:5)μ/2(cid:6) lo
i,κ, ti,κ)}

lh
i,κ = 1
μ
i ← Lh
Lh

i }N

i=1.

i,x

i

each participant’s travel cost, and the higher probability that the
sensing task can be completed while ensuring differential location
privacy to mobile participants. It is therefore essential to reduce the
negative impact the noise added to the mobility trace. Recall that
for the original location at each timestamp, noise is generated in the
isotropic space using the K-norm mechanism. The probability of
generating noise of a certain value and the probability of generating
noise of the exact inverse value are the same. By averaging multiple
consecutive locations, the deviation of the averaged location to the
original true location could be smaller in contrast to the difference
between the disturbed location to the original true location. When
the noise amplitude is large, the average could reduce the negative
impact introduced due to the noise.

Based on the above intuition, we propose to smooth each us-
er’s differentially private mobility trace using a sliding window and
assign tasks based on smoothed location traces. Speciﬁcally, we
deﬁne the size of the sliding window as μ, where μ is an odd in-
teger and system parameter. For each timestamp, we generate a s-
moothed location as the average of the previous consecutive (cid:11)μ/2(cid:12)
PIM locations, the current PIM location, and the next consecutive
(cid:11)μ/2(cid:12) PIM locations. The details of the smoothing algorithm are
summarized in Algorithm 1. We will show in our simulations the
effectiveness of the sliding window and the impact of μ.
5.4 Accepting/Declining Task Assignments

Participants may accept or decline an assigned sensing task for

various reasons. We now introduce a model to characterize the
probability that an assigned task is accepted, which takes into ac-
count of both the physical travel distance and potential wait time.
We ﬁrst consider the impact of physical travel distance. Accord-
ing to our system model in Section 2.2, each task Tj includes Rj as
j as the sensing time period, and div∗
the physical sensing region, ts
j
as the targeted diversity order. The SSP further divides Tj into nj
subtasks {Sj,k}nj
k=1, respectively. Consider
subtask Sj,k and participant i as an example. Let Li be participant
i’s true mobility trace and v be the average speed. For participant
i to travel from location li,κ at time ti,κ to perform subtask Sj,k at
sensing location ls
j,k, the time of arrival at the sensing location is
subject to the following condition,

k=1 at locations {ls

j,k}nj

j − ti,κ),
where dist(·,·) denotes the Euclidian distance.

j,k) ≤ v(ts

dist(li,κ, ls

(4)

We then consider the participant’s potential waiting time. In par-
ticular, participant i may arrive at the sensing location ls
j,k early. If
he needs to wait for a long time period to perform the task, he may
reject the task at the very beginning. We therefore deﬁne synthetic
distance to jointly consider the travel distance and the waiting time
for a given sensing task, which is computed as

dist∗

=

(li,κ, ls

⎧⎪⎪⎨⎪⎪⎩dist(li,κ, ls

αv(ts
αdist(li,κ, ls
∞

j,k)
j,k)+
j − ti,κ)−
j,k)

if dist(li,κ, ls

j,k) ≤ v(ts

j − ti,κ),

(5)

otherwise.

Synthetic distance deﬁned above essentially converts the waiting
time into additional travel distance. The system parameter α indi-
cates the weight of the waiting-time equivalent distance versus that
of the true travel distance. Since simply waiting generally involves
less effort in comparison with the actual travel, it is reasonable to
require that α ≤ 1.

We use a simple linear distribution model to characterize the
probability that participant i will accept subtask Sj,k. Let the MTD
be the maximal travel distance within which a participant is will-
ing to travel to perform a sensing task, which can be obtained from
historical data [14]. Similar to [23], we calculate the probability
that participant i will accept subtask Sj,k at sensing location ls
j,k
by departing from li,κ at time ti,κ as

Pr[Pi ← Sj,k|ti,κ]

1 − dist∗(li,κ,ls

MTD

j,k)

(cid:9)

=

0

(li,κ, ls

j,k) < MTD,

(6)

if dist∗
otherwise.

In other words, Pr[Pi ← Sj,k|ti,κ] is one when the correspond-
ing synthetic distance is zero and zero when the synthetic distance
exceeds MTD.
5.5 Spectrum-Sensing Task Assignment For-

mulation

We formulate the spectrum-sensing task assignment as an opti-

mization problem as follows.

We deﬁne the indicator variable bi,κ

j,k = 1 if par-
ticipant i is assigned to depart from his location li,κ at time ti,κ
to perform sensing subtask Sj,k at sensing location ls
j,k and 0 oth-
erwise. If bi,κ
j,k = 1, the expected diversity order contributed by
participant i can be computed as

j,k such that bi,κ

j,k = Pr[Pi ← Si,j|ti,j],
where Pr[Pi ← Si,j|ti,j] is given in Eq. (6).

divi,κ

(7)

300Given the set of N participants with smoothed PIM traces {Lh

i }N
and the set of sensing subtasks {Sj,k|1 ≤ j ≤ M, 1 ≤ k ≤ nj},
we formulate the task assignment as an integer programming prob-
lem as follows.

i=1

minimize

subject to

j,k · dist∗
bi,κ

(lh

i,κ, ls

j,k)

κ=1

j,k · divi,κ
bi,κ

j,k ≥ β · div∗

j ,∀1 ≤ j ≤ M,

γ(cid:2)

nj(cid:2)
γ(cid:2)

k=1

κ=1

i=1

N(cid:2)
N(cid:2)
N(cid:2)
M(cid:2)

i=1

i=1

j=1

M(cid:2)
nj(cid:2)
γ(cid:2)
nj(cid:2)

k=1

κ=1

j,k ≤ 1,∀1 ≤ j ≤ M, 1 ≤ k ≤ nj,
bi,κ
γ(cid:2)

j,k ≤ 1,∀1 ≤ i ≤ N,
bi,κ
j,k) ≤ v(ts
j − ti,κ),

κ=1

k=1

i,κ, ls

j=1
j,k · dist(lh
bi,κ
∀1 ≤ i ≤ N, 1 ≤ j ≤ M, 1 ≤ k ≤ nj, 1 ≤ κ ≤ γ,
j,k ∈ {0, 1},
bi,κ
∀1 ≤ i ≤ N, 1 ≤ j ≤ M, 1 ≤ k ≤ nj, 1 ≤ κ ≤ γ.
(8)
(·,·) denotes the synthetic travel distance. β is a ratio
where dist∗
equal to or larger than 1, indicating the importance that the SSP can
achieve the desired diversity order for every sensing task. A larger
β value generally guarantees that the desired diversity order can be
achieved, but some tasks can be over-fulﬁlled, leading to a higher
cost. In contrast, with a smaller β value such as 1, it is most likely
that only some sensing tasks can achieve the desired diversity order
while others are under-fulﬁlled. This may not be desired because
the lack of diversity in spectrum sensing can lead to false decisions
on spectrum availability, leading to potential interference with PU
transmissions. We will fully evaluate the impact of parameter β
in our paper. In the above formulation, the ﬁrst constraint means
that the sum of expected diversity order should be no less than the
the diversity order required for each sensing task. The second con-
straint indicates that every subtask can be assigned to at most one
participant. The third constraint means that every participant can
be assigned at most one subtask. The fourth constraint means that
if participant i is assigned to leave at time ti,κ from location li,κ at
speed v to fulﬁll subtask Sj,k, he must arrive no later than ts
j. Here
we assume that each participant can at most complete one sensing
subtask for the speciﬁed time period. How to assign multiple sens-
ing subtasks to the same participant for sequential completion is
left as our future work.

The above problem can be proved to be NP-hard by reducing it
to the k-partial set cover problem, which is a generalization of the
well studied set cover problem.

Deﬁnition 3. (k-partial Set Cover [9]) Given a set B = {b1, b2,
..., bn}, a collection S of subsets of B, S = {S1, S2, ..., Sm}, a
cost function c: S → Q+, and an integer k, ﬁnd a minimum cost
sub-collection of S that covers at least k elements of B.

THEOREM 2. The integer programming problem deﬁned in E-

q. 8 is NP-hard.

PROOF. We ﬁrst take a look at a special problem derived from
the formulation in Eq. 8, where β is 1, and divi,κ
j,k is 1 for all valid
i, κ, j, k values. The problem derived from Eq. 8 involves a series
of timestamps to consider. To simplify the analysis, we ﬁrst focus
on a single timestamp κ ∈ [1, γ]. For this single timestamp, par-
ticipants can only contribute a sensing diversity gain of value 1 if

i=1.

i}N

i }N

set P, PIM trace set {Lo

for all k ∈ {1, . . . , nj} do

j,k}1≤i≤N,1≤j≤M,1≤k≤nj ,(cid:5)μ/2(cid:6)+1≤κ≤γ−(cid:5)μ/2(cid:6).
i=1.

Algorithm 2 Sensing Task Assignment
Input: Task set T , subtask sets {Sj,k}1≤j≤M,1≤k≤nj , participant
Output: {bi,κ
i}N
i=1 using Algorithm 1 to obtain {Lh
1: Smooth {Lo
2: for all j ∈ T do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:

for all i ∈ P do
j,k ← 0;
bi,κ
Compute dist∗

for all κ ∈ {(cid:11)μ/2(cid:12) + 1, . . . , γ − (cid:11)μ/2(cid:12)} do

j,k) as in Eq. (5).

end for

(li,κ, ls

=

j,k)}γ−(cid:5)μ/2(cid:6)

κ=(cid:5)μ/2(cid:6)+1,i∈P,1≤k≤nj ;

∗
j

j,k∗ )
(li,κ, ls

end for
end for
divj ← β · div
while divj > 0 do
dist∗
(li∗,κ∗ , ls
min{dist∗
j,k∗ ← 1;.
bi∗,κ∗
Compute divi∗,κ∗
divj = divj − divi∗,κ∗
j,k∗ ;
P ← P \ {i∗};
Sj ← Sj \ {Sj,k∗};

14:
15:
16:
17:
18:
end while
19:
20: end for
21: return {bi,κ

j,k}1≤i≤N,1≤j≤M,1≤k≤nj ,(cid:5)μ/2(cid:6)+1≤κ≤γ−(cid:5)μ/2(cid:6).

j,k∗ as in Eq. (6).

, ls

(lh

i,κoi

i,κ, ls

i,κ, ls

i,κ, ls

i,κ, ls

j,k) equal dist∗

j,k). Otherwise,(cid:10)dist(lh

(cid:10)dist(lh
let(cid:10)dist(lh
is ∞. Then we set to obtain the minimum(cid:10)dist(lh
value by(cid:10)dist(lh

they meet the fourth constraint in sensing time. Hence, we can in-
corporate the time constraint into participant i’s new travel distance
j,k). When participants satisfy the fourth constraint, we
i,κ, ls
j,k)
j,k) for each
participant among all the timestamps in [1, γ], and we denote this
j,k), where κoi is the best timestamp for par-
ticipant i to leave for sensing location ls
j,k to achieve the lowest
travel cost. Hence, the optimization objective can be changed to
j,k).
the minimization of
So now if we focus on a single sensing task j ∈ [1, M ], the prob-
lem has already been reduced to the k-partial set cover problem
as deﬁned above. In the deﬁnition, B corresponds to the subtask
set {Sj,k|1 ≤ k ≤ nj}. The collection of S corresponds to the
task assignment: participant i to fulﬁll subtask Sj,k for all i and
k. The cost function c maps S to B by the cost we deﬁned using
j . So the op-
timization problem is now a k-partial set cover problem. We then
need to solve this problem for all j ∈ [1, M ].

j,k). k is the diversity order constraint div∗
, ls

·(cid:10)dist(lh

(cid:10)dist(lh

(cid:3)nj

(cid:3)M

(cid:3)N

k=1 bi,κoi

i,κoi

i,κoi

, ls

j=1

i=1

j,k

Since the special problem is NP-hard, we now conclude that the

original problem deﬁned in Eq. 8 is NP-hard.

Note that there are alternative ways to formulate the optimiza-
tion. For example, it is possible to minimize the expected total
synthetic travel distance or the maximum synthetic travel distance.
These alternatives are left as future work.
5.6 A Heuristic Solution

We now introduce a heuristic approach to assign subtasks to par-

ticipants based on their smoothed location traces.

The overall assignment process is summarized in Algorithm 2.

301i}N

The intuition is to sequentially assign every subtask of one sens-
ing task to each participant with the smallest synthetic travel dis-
tance until the total expected diversity order exceeds the required
threshold. Speciﬁcally, the algorithm takes the sensing tasks T ,
subtask set {Sj,k}1≤j≤N,1≤k≤nj , participant set P, and PIM trace
set {Lo
i=1 as input and outputs all subtask assignments. Line 1
smooths all the PIM traces using Algorithm 1. Lines 2 to 10 com-
pute the synthetic travel distance for every participant with ev-
ery possible departing location and every subtask {Sj,k}nj
k=1. The
WHILE loop in Lines 12 to 19 assigns one subtask to one partici-
pant, whose synthetic travel distance is the smallest among all. The
WHILE loop terminates when the accumulative expected diversity
order exceeds the diversity order required for the sensing task Tj.
5.7 Participant Response

The SSP informs every selected participant about the subtask he
is assigned to. On receiving the subtask assignment, each partici-
pant calculates the true physical and synthetic travel distance using
his true predicted locations and then informs the SSP whether he
accepts the assignment based on the task acceptance model in Sec-
tion 5.4. If the participant agrees to fulﬁll a certain task, he will
need to be at the sensing location in the speciﬁed time to perform
spectrum sensing. Since the participants win the opportunity to per-
form the task based on the expected mobility traces, the payments
or rewards made by the SSP to the participants should be propor-
tional to the travel distances calculated using the expected mobility
traces as well. It is possible that the expected mobility traces pro-
vided by the participants differ from the real mobility traces. In
such cases, participants still need to make sure that they can perfor-
m spectrum sensing in a timely manner. The SSP can set up various
types of mechanisms to handle the cases when participants fail to
fulﬁll the sensing tasks they previously agreed to fulﬁll. For exam-
ple, a reputation system can be constructed to model the reliability
of each participant. When participants fail to perform certain tasks,
their reputations in the system decrease, and so do their payments
received for performing the sensing tasks. In addition, since partic-
ipants’ failure to perform sensing tasks could possibly lead to un-
satisﬁed diversity requirement, the SSP could assign a discounted
diversity gain when certain participants with bad history are select-
ed. How to design a fully workable reputation system remains as
our future work.

6. SIMULATION RESULTS

In this section, we present the experimental evaluation results of
DPSense. We adopt the knowledge construction module in [22] to
build the Markov transition matrix, which is implemented in C++.
All other modules are implemented in MATLAB on a PC with 2.67
GHz Intel i7 CPU and 9 GB memory.
6.1 Mobility Trace Dataset

We use the CRAWDAD dataset roma/taxi [2, 3] for our simu-
lations. The dataset contains the mobility traces of approximately
320 taxis collected over 30 days in Rome, Italy. Each mobility
trace consists of a sequence of GPS coordinates collected roughly
every seven seconds along with corresponding timestamps. In addi-
tion, the taxis in the dataset are not always moving at a high speed.
Those idling at one location or moving within a small region can be
used to simulate the static participants or the participants with very
limited moving regions. In our simulations, the time difference be-
tween two consecutive timestamp is 20 seconds.
The mobility traces within the center of Rome city are extracted.
We consider an area of 11.66 × 11.66 [km × km] as illustrated in
Fig. 5. We divide the area into a 35 × 35 grids of equal size. We

Figure 5: The city area where the mobility traces are extracted.

Figure 6: Sampled taxi mobility traces from dataset [2, 3].

then extract 2700 mobility traces in total, each of which contain-
s 150 timestamps. The 2700 mobility traces are shown in Fig. 6.
We quantize each GPS coordinate by mapping them into one of the
35×35 cells. As we can see, most of the traces are clustered in
the center area, resulting in a very dynamic and diverse transition.
The density of mobility traces in the four corners is much lower
than that in the center area, making it challenging to correctly track
the true locations using the PIM scheme. Out of the 2700 mobility
traces, 2000 are used to build the Markov transition matrix, and the
remaining 700 are used to represent the participants’ input traces in
our system. The division of the mobility trace dataset is to emulate
the practical application scenarios where the SSP can only obtain
the historical mobility data based on some large-scale generic loca-
tion traces which can be totally unrelated to the participants of our
system. Therefore, the construction of the transition matrix does
not adversely affect participants’ location privacy.
6.2 Simulation Setting

We consider a time period of 50 minutes. The sensing tasks are
all scheduled at the later half of the 50 minutes because it takes time
for participants to arrive at the designated sensing locations. Since
the timestamps are in the granularity of 20 seconds, each sensing
task is scheduled at a random one of the last 75 timestamps.

302)

m
k
(
 
r
o
r
r
e
 
e
c
n
a
t
s
i
D

6

5

4

3

2

1

0

0

)

m
k
(
 
r
o
r
r
e
 
e
c
n
a
t
s
i
D

3.5
3
2.5
2
1.5
1
0.5
0

0

50
100
Timestamp index

150

50
100
Timestamp index

150

(a) Distance between the original trace and the
PIM trace ( = 1).

(b) Distance between the original trace and the
smoothed PIM trace using the sliding window
( = 1).

)

m
k
(
 
r
o
r
r
e
 
e
c
n
a
t
s
i
D

4

3

2

1

0

0

1.2

1

0.8

0.6

0.4

0.2

)

m
k
(
 
r
o
r
r
e
 
e
c
n
a
t
s
i
D

0

0

50
100
Timestamp index

150

50
100
Timestamp index

150

e
z
i
s
 
X
Δ

e
z
i
s
 
X
Δ

14

12

10

8

6

4

2

14

12

10

8

6

4

2

0

0

(d) Distance between the original trace and the
PIM trace ( = 2).

(e) Distance between the original trace and the
smoothed PIM trace using the sliding window
( = 2).

Figure 9: Performance comparison using a single trace.

50
100
Timestamp index

(c) ΔX size ( = 1).

150

50
100
Timestamp index

(f) ΔX size ( = 2).

150

)

m
k
(
 

y

10

8

6

4

2

0

0

2

4

6

x (km)

)

m
k
(
 
y

10

8

6

4

2

0

0

2

4

PIM trace
Original trace

8

10

PIM trace
Original trace

8

10

6

x (km)

Figure 7: The original trace and the PIM trace ( = 1).

Figure 8: The original trace and the PIM trace ( = 2).

We set the simulation parameters as follows. The numbers in
bold are the default values if not mentioned otherwise. For the
generation of PIM traces,  is chosen among [1,2,3,4], and δ is in
the range of [0.01,0.02,0.03,0.04]. The number of participants N
is [400,500,600,700]. For the spectrum-sensing task assignment,
the size of the sliding window μ is chosen from [1,3,5,7,9], where
μ = 1 corresponds to the case where no sliding window is used.
In addition, we assume that all the participants have the same trav-
eling speed v=30 km/h. We expect that higher moving speed will
deliver better results because participants can travel a longer dis-
tance. Other parameters are set as follows. The maximum travel
distance MTD is 15 km. The number of sensing tasks M is cho-
sen from [4,6,8,10] with the number of subtasks nj=10 for every
sensing tasks. The minimum separation distance between sensing
locations d0 is 20 m. The sensing region for every sensing task
is a circle with radius R=300 m. The sensing tasks are randomly
generated with the diversity order requirement div∗
chosen from

[4,5,6,7]. The system parameter α is in the range of [0.8, 0.9, 1],
and the parameter β is chosen from [1, 1.2, 1.4, 1.6].

In our results, each data point represents the average of 100 run-
s. We use ΔX to represent the δ-location set. We also compare
DPSense with the baseline scheme which does not consider loca-
tion privacy and use raw mobility traces.
6.3 Performance Metrics

For the generation of PIM traces, we compare the distance error
(i.e., the Euclidean distance between the original trace and the PIM
trace for every timestamp) and |ΔX| (the size of the δ-location set).
We also use the following metrics for performance evaluation.

• Total travel distance (TTD). This refers to the sum of the
expected synthetic distances of the participants who accept
assigned subtasks. Speciﬁcally, let ci
j,k be the indicator vari-
able such that ci
j,k = 1 if participant i accepts the assigned
subtask Sj,k and zero otherwise. To achieve the minimum
synthetic cost, participant i needs to leave at κ∗
th timestamp

3030

4

5

6

7
M

Original trace
PIM trace
Worst case
8

9

10

0

4

5

6

7
M

Original trace
PIM trace

8

9

10

(e) M vs. TTD.

(f) M vs. TCR

60

40

20

)

m
k
(
 

D
T
T

1

0.8

0.6

0.4

0.2

R
C
T

Original trace
PIM trace
Worst case

Original trace
PIM trace

)

m
k
(
 

D
T
T

60

50

40

30

20

10

0

1

60

50

40

30

20

10

)

m
k
(
 

D
T
T

R
C
T

1

0.8

0.6

0.4

0.2

0

1

1

0.8

0.6

0.4

0.2

R
C
T

Original trace
PIM trace
Worst case

3

3.5

4

1.5

2

2.5



(g)  vs. TTD.

Original trace
PIM trace

3

3.5

4

1.5

2

2.5



(h)  vs. TCR

Original trace
PIM trace
Worst case

2

4

6

μ

8

(a) μ vs. TTD.

60

50

40

30

20

10

)

m
k
(
 

D
T
T

0
400

450

500

550
N

Original trace
PIM trace
Worst case

600

650

700

1

0.8

0.6

0.4

0.2

R
C
T

0
400

450

500

550
N

Original trace
PIM trace

600

650

700

(c) N vs. TTD.

(d) N vs. TCR

Original trace
PIM trace

2

4

6

μ

8

(b) μ vs. TCR

)

m
k
(
 

D
T
T

80

60

40

20

0

100

80

60

40

20

)

m
k
(
 

D
T
T

1

0.8

0.6

0.4

0.2

0

1

0.8

0.6

0.4

0.2

C
C
T

R
C
T

0
0.01

0.015

0.02

0.025

0.03

0.035

0.04

δ

0
0.01

0.015

0.02

0.025

0.03

0.035

0.04

δ

0
0.8

0.85

0.9

α

Original trace
PIM trace
Worst case

0.95

1

0
0.8

0.85

0.9

α

Original trace
PIM trace

0.95

1

(i) δ vs. TTD.

(j) δ vs. TCR

(k) α vs. TTD.

(l) α vs. TCR

)

m
k
(
 

D
T
T

100

80

60

40

20

0

1

Original trace
PIM trace
Worst case

1.4

1.5

1.6

1.1

1.2

1.3

β

(m) β vs. TTD.

R
C
T

1

0.8

0.6

0.4

0.2

0

1

)

m
k
(
 

D
T
T

100

80

60

40

20

Original trace
PIM trace

1.1

1.2

1.3

β

1.4

1.5

1.6

0

4

4.5

5

(n) β vs. TCR

Figure 10: The impact of various parameters on TTD and TCR.

Original trace
PIM trace
Worst case
6

6.5

7

5.5
div*

(o) div∗

vs. TTD.

1

0.8

0.6

0.4

0.2

R
C
T

0

4

4.5

5

(p) div∗

Original trace
PIM trace

6

6.5

7

5.5
div*

vs. TCR

for the sensing location ls

j,k. TTD is then computed as

N(cid:2)

M(cid:2)

nj(cid:2)

TTD =

i=1

j=1

k=1

j,k · dist∗
ci,κ∗

(li,κ, ls

j,k).

(9)

TTD is commensurate with the total cost of the SSP for per-
forming all the sensing tasks.

• Task completion rate (TCR). TCR is the ratio between the
number of tasks that meets the speciﬁed diversity order re-
quirements and N (the total number of sensing tasks).

We consider the performance comparison of TTD for three cases:
the baseline scheme using the original trace Li,∀i ∈ [1, N ]; the
i , ∀i ∈ [1, N ]; the worst case. The worst
smoothed PIM trace Lh
case assumes that no chosen participant rejects the assigned sub-
nj(cid:2)
M(cid:2)
task. Mathematically, the worst-case TTD is deﬁned as

N(cid:2)

γ(cid:2)

j,k · dist∗
bi,κ

(li,κ∗

i

, ls

j,k),

(10)

TTDw =

i=1

j=1

k=1

κ=1

i is the timestamp when participant i leaves for subtask

where κ∗
Sj,k with minimum synthetic distance.
6.4 PIM Trace Generation

We evaluate the impact on PIM traces generation by adapting 
values. Since the scheme in [27] is adopted to generate the PIM
traces, we refer interested readers to [27] for detailed analysis and
evaluations. Per our simulations, we ﬁnd that δ cannot be too large
or too small. With a large δ, locations with small prior probabilities
are likely to be excluded in the δ-location set, ΔX. This is good in
keeping a reasonable size of ΔX. However, it might fail to track
location updates as well. On the other hand, with a small δ, more
locations with small prior probabilities are likely to be included in
ΔX. This might lead to a large ΔX (over 40 or more) and result
in failure of correctly tracking the true location. Here, we choose
δ = 0.02 to achieve a good trade-off. We will present the impact
of δ on our system performance later in Section 6.9.

We ﬁrst extract one random participant and visually examine the
PIM trace generated in Fig. 7 and Fig. 8 with different . It is ob-
vious that  = 2 generates a PIM trace closer to the original trace,

304e
z
i
s
X
Δ
e
g
a
r
e
v
A

7
6.5
6
5.5
5
4.5
4
3.5

1

1.5

2

2.5



3

3.5

4

Figure 11: ΔX size for different .

e
z
i
s
X
Δ
e
g
a
r
e
v
A

16
14
12
10
8
6
4
2
0.01

0.015

0.02

0.025

0.03

0.035

0.04

Figure 12: ΔX size for different δ.

δ

which indicates small location errors. This is further conﬁrmed in
Fig. 9a and Fig. 9d. In these two ﬁgures, we compare the distance
between the original trace and the PIM trace for every timestam-
p. It is clear that when  is 1, the distance sometimes can be very
high (e.g., over 5 km). When  increases to 2, the max distance
error is around 3.5 km, which is a huge improvement. We further
apply the sliding window in Fig. 9b and Fig. 9e. We can see that
the sliding window is very effective in reducing the distance errors.
For example, when  is 1, the max distance error is reduced from
5.1 km to 3.2 km. The average distance error is greatly reduced as
well. Reducing the distance error can greatly beneﬁt TCR because
the SSP has more accurate knowledge about the participants’ loca-
tions. Lastly, we compare the size of ΔX in Fig. 9c and Fig. 9f.
We can see that the ΔX size when  is 1 is larger than that when 
is 2. This is expected since with a larger , the mechanism is sup-
posed to track the true location better. We will further evaluate the
relationship between ΔX size and  later.
6.5 Effectiveness of Sliding Window

Fig. 10a shows the impact of μ on the total travel distance (TTD).
We can see that a larger μ generally results in a smaller TTD. We
note that when μ is 1, which corresponds to the case where no
smoothing is conducted, with the sliding window in place, TTD
has been reduced from 67 km to 48 km, a 28.3% reduction. On
the other hand, TTD slows down the reduction when μ is over 5.
However, there is still a gap between our scheme and the baseline
scheme. This is the expected utility trade-off when incorporating
privacy protection. We also show the worst case for comparison.
Recall that the worst case is deﬁned as the case that no participant
declines the assigned subtask. In other words, SSP simply assigns
the sensing task to participants who are the closest to the sensing
locations. We see that there is a gap between the worst case and the
PIM trace curve. Fig. 10b shows the TCR performance. Here, we
see that the TCR is dramatically improved from 0.7 to 0.9. Still,
TCR slows increasing when μ passes 5. Generally, the larger μ is,
the better performance we can achieve in both TTD and TCR. On
the other hand, larger μ means higher computation complexity.

6.6

Impact of Number of Participants

Fig. 10c shows the impact of N on TTD. Generally, the larger
N is, the smaller TTD is. This is true for both schemes. Fig. 10d
shows the TCR performance. Clearly, more participants can lead
to higher task-completion rates. We show the comparison with the
baseline scheme using the original trace as well. We see that even
without the noise added to the traces, TCR is close to 0.93. It means
that some tasks, though with very small probability, might still fail
to meet the diversity requirement because the sensing locations are
too remote to the majority of participants.
6.7

Impact of Number of Sensing Tasks

Fig. 10e shows the impact of M on TTD. As expected, the dis-
tance increases with the number of sensing tasks although the in-
crease is limited. Fig. 10f shows that TCR decreases with M. Since
more tasks are generated, SSP might have to select participants far
away to perform the tasks, which leads to a higher assignment de-
cline rate. In addition, since some tasks might be generated in areas
with low population of participants, these tasks might fail as well.
6.8

Impact of 

We change the value of  in our simulations and evaluate the
impact on the performance. Fig. 10g shows the results of TTD.
We see that with  increasing, TTD decreases. This indicates that a
larger  can generate more precise mobility traces that are close to
the original ones. We also observe from Fig. 10h that TCR in our
scheme is almost identical to that in the baseline approach when  is
4. In addition, we show the average ΔX size in Fig. 11. We can see
that the number of candidate locations drops from approximately
6.9 to approximately 3.9 with the increase of . This matches our
expectation well. When  is small, the scheme generates larger
noise to the participants’ mobility traces, hence a larger ΔX. This
indicates a better location privacy protection as well due to more
candidate locations. Correspondingly, it will be more difﬁcult for
the attacker to infer the participants’ true locations.
6.9

Impact of δ

δ also has a similar impact on the system performance to ,
though we ﬁnd the system is more sensitive to it. Fig. 10i shows
the TTD results with different δ values. We can see that there is a
relatively big decrement when δ increases from 0.01 to 0.02, and
the curve is becoming ﬂat when δ is over 0.02. So this could in-
dicate 0.02 is a good choice of δ for our system. Correspondingly,
TCR also generally increases when δ increases but the gain is most
observable when we increase δ from 0.01 to 0.02. Recall that a
larger δ means a smaller δ-location set and hence worse location
privacy. On the other hand, a larger δ can generate mobility traces
closer to the original traces, leading to smaller distance errors. We
then show the average ΔX size in Fig. 12. It can be observed that
the ΔX size is very sensitive to the δ value. The size drops dra-
matically from 15.3 to 4.4 when δ increases from 0.01 to 0.03. To
ensure sufﬁcient location privacy, we ﬁnd that δ = 0.02 can be a
good choice for our system.
6.10

Impact of α

We vary the value of α, the distance weight ratio between the
waiting-time equivalent distance and the true travel distance in our
proposed synthetic travel distance model as in Eq. 5. Fig. 10k and
Fig. 10l show the results of TTD and TCR, respectively. We can
observe that the increase in α only contributes to a small increase
in both TTD and TCR. This indicates that our system is consistent
with all the distance models that practical systems might have. In
addition, the value of α might directly relate to the payment to each

305participant. A smaller value of α could indicate smaller payments
because less weight is assigned to the waiting-time equivalent dis-
tance. Since we do not propose additional payment schemes in our
framework, we omit further analysis in this regard.
6.11

Impact of β

In some cases, it is strictly required that the desired sensing di-
versity be achieved to completely avoid any potential transmission
interference to PUs. β is such a system parameter that enables the
system to adjust the priority. Fig. 10m and Fig. 10n show the sim-
ulation results of TTD and TCR, respectively. Speciﬁcally, we see
that a larger β leads to an increased TTD value. This is intuitive
because a larger β value usually indicates that some sensing tasks
are over-fulﬁlled, i.e., more than a desired number of participants
are selected to perform the sensing tasks. The beneﬁt of a larger
β is also clearly shown in Fig. 10n where we can see that TCR is
almost 1 when β is 1.4 and 1 when β is 1.6.
In other words, a
larger β ensures that all sensing tasks can be fulﬁlled with enough
participants to guarantee sufﬁcient spatial sensing diversity. It is
also worth noting that when β is 1, those tasks that are not ful-
ﬁlled are usually located remotely to most participants. In practice,
the SSP can thus dynamically determine the value of β for each
sensing task based on the practical demographic properties of the
areas where the sensing tasks are located. This strategy ensures
that the majority of sensing tasks can be fulﬁlled and at the same
time manages to reduce the unnecessary TTD (or cost) that could
be incurred.
6.12

Impact of div

∗

Lastly, we evaluate the impact of the diversity requirement div

.
, more
Fig. 10o shows the results of TTD. Clearly, with a larger div
participants are likely to be selected to fulﬁll the sensing tasks, thus
resulting in a dramatic increase in TTD. Fig. 10p shows the change
of TCR. We see that a higher diversity order is very demanding,
generating a larger negative impact on TCR in contrast to the results
from varying M in Fig. 10e. Speciﬁcally, the decrease of TCR is
found in both the baseline scheme and our scheme.

∗

∗

7. RELATED WORK

In this section, we discuss some prior work that is most germane

to DPSense.

There is a rich literature on location privacy in general frame-
works, for which a nice review for location privacy-preserving mech-
anisms (LPPMs) can be found in [16]. In addition, a formal frame-
work for the analysis of LPPMs is proposed in [22].

Signiﬁcant efforts have also been made to protect location pri-
vacy in CSS systems [10, 15, 17, 25]. This line of work aims at
preventing location privacy leakage from sensing reports submitted
by crowdsourced sensing users. We proposed a privacy-preserving
crowdsourced spectrum sensing framework in [15] that can simul-
taneously achieve three design objectives: differential location pri-
vacy, approximate social cost minimization, and truthfulness. The
spectrum service provider is assumed to be fully trusted in [15]. In
contrast, here we assume that the SSP is honest-but-curious and we
address a very different problem in this paper.

Another line of work aims to address location privacy leakage
in general crowdsourced mobile sensing systems [19, 23]. To et
al. [23] proposed a framework to protect location privacy of work-
ers during the task assignment phase. Different from [23], DPSense
does not need the trusted service provider as in their work to perfor-
m the sanitized database release and geocast of spatial crowdsourc-
ing tasks. In addition, DPSense targets a totally different applica-
tion scenario in which spectrum-sensing tasks have strict sensing

time requirements. Pournajaf et al. [19] considerd spatial task as-
signment for crowd sensing with cloaked locations. Different from
this work, DPSense considers completely different system model-
s and involves the time constraint of the sensing tasks. The task
scheduling and the probabilistic model for participants to accep-
t/decline sensing tasks makes it challenging or impossible to adapt
the scheme [19] to our application scenario.

In addition, there is a surge of interest on task assignment in s-
patial crowdsourcing [4, 5, 13]. He et al. [13] seek to maximize the
rewards of the platform with consideration of geographic locations
and time budgets of mobile users. But they did not consider maxi-
mizing the task fulﬁllment ratio, which is a critical design objective
in the context of CSS. Cheng et al. [4] aim to maximize both the
spatial and temporal diversity of spatial crowdsourcing tasks but do
not consider the minimization of travel distances. Deng et al. are
the ﬁrst to study the combination of task assignment and scheduling
in spatial crowdsourcing [5], but their work differs from DPSense
in two main aspects. First, the task assignment in [5] is based on
known participants’ locations and does not provide any location
privacy guarantee. Second, the tasks in their model have deadlines
such that participants can perform the tasks any time before the
deadline. This is different in our scenario where spectrum-sensing
tasks have strict requirement on the sensing time. Hence, it is non-
trivial to directly extend these existing efforts to the context of CSS.
Differential privacy [7, 18] has emerged as a powerful tool to
provide statistical guarantee of the data privacy with the trade-off
of the data utility. Xiao et al. in [27] found that the well known
l1 norm sensitivity fails to capture the geometric sensitivity in the
two dimensional space and proposed a planar isotropic mechanism
for the location perturbation, which is the ﬁrst to achieve the lower
bound of differential privacy in the speciﬁc application scenario.

8. CONCLUSIONS

Dynamic spectrum access (DSA) has great potential to address
worldwide spectrum shortage by enhancing spectrum efﬁciency.
As a key enabler for DSA systems, crowdsourced spectrum sensing
(CSS) allows a spectrum sensing provider (SSP) to outsource the
sensing of spectrum occupancy to distributed mobile users. In this
paper, we proposed DPSense, a novel framework that allows the
SSP to select mobile users for executing spatiotemporal spectrum-
sensing tasks without violating the location privacy of mobile users.
Detailed evaluations on real location traces conﬁrmed that DPSense
can provide differential location privacy to mobile users while en-
suring that the SSP can accomplish spectrum-sensing tasks with
overwhelming probability and also the minimal cost.

9. ACKNOWLEDGMENTS

We thank our shepherd and anonymous reviewers for their com-
ments and help in preparing the ﬁnal version of the paper. This
work was partially supported by the US National Science Foun-
dation under grants CNS-1320906, CNS-1421999, CNS-1514381,
CNS-1422301, and CNS-1514014.

10. REFERENCES
[1] Cisco visual networking index global mobile data trafﬁc

forecast update 2014-2019.

[2] R. Amici, M. Bonola, L. Bracciale, A. Rabufﬁ, P. Loreti, and
G. Bianchi. Performance assessment of an epidemic protocol
in vanet using real traces. In MoWNeT’14, Rome, Italy, Sept.
2014.

[3] L. Bracciale, M. Bonola, P. Loreti, G. Bianchi, R. Amici, and

A. Rabufﬁ. CRAWDAD dataset roma/taxi (v. 2014-07-17).

306Downloaded from http://crawdad.org/roma/taxi/20140717,
Jul. 2014.

[4] P. Cheng, X. Lian, Z. Chen, R. Fu, L. Chen, J. Han, and

J. Zhao. Reliable diversity-based spatial crowdsourcing by
moving workers. In VLDB’15, Kohala Coast, HI, June 2015.

[5] D. Deng, C. Shahabi, and L. Zhu. Task matching and

scheduling for multiple workers in spatial crowdsourcing. In
SIGSPATIAL’15, Bellevue, WA, Nov. 2015.

[6] D. Duan, L. Yang, and J. Principe. Cooperative diversity of

spectrum sensing for cognitive radio systems. IEEE
Transactions on Signal Processing, 58(6):3218–3227, June
2010.

[7] C. Dwork. Differential privacy. In ICALP’06, Venice, Italy,

Jul. 2006.

[8] O. Fatemieh, R. Chandra, and C. Gunter. Secure

collaborative sensing for crowdsourcing spectrum data in
white space networks. In DySPAN’10, Singapore, Apr. 2010.

[9] R. Gandhi, S. Khuller, and A. Srinivasan. Approximation

algorithms for partial covering problems. Journal of
Algorithms, 53(1):55–84, 2004.

[10] Z. Gao, H. Zhu, S. Li, S. Du, and X. Li. Security and privacy

of collaborative spectrum sensing in cognitive radio
networks. IEEE Wireless Communications, 19(6):106–112,
Dec. 2012.

[11] A. Ghasemi and E. Sousa. Collaborative spectrum sensing

for opportunistic access in fading environments. In
DySPAN’05, Baltimore, MD, Nov. 2005.

[12] D. Gurney, G. Buchwald, L. Ecklund, S. Kuffner, and
J. Grosspietsch. Geo-location database techniques for
incumbent protection in the tv white space. In DySPAN’08,
Chicago, IL, Oct. 2008.

[13] S. He, D. Shin, J. Zhang, and J. Chen. Toward optimal

allocation of location dependent tasks in crowdsensing. In
INFOCOM’14, Toronto, Canada, Apr. 2014.

[14] B. Hecht and D. Gergle. On the “localness” of user-generated

content. In CSCW ’10, Savannah, GA, Feb. 2010.

[15] X. Jin and Y. Zhang. Privacy-preserving crowdsourced

spectrum sensing. In INFOCOM’16, San Francisco, CA,
Apr. 2016.

[16] J. Krumm. A survey of computational location privacy.

Personal Ubiquitous Comput., 13(6):391–399, Aug. 2009.

[17] S. Li, H. Zhu, Z. Gao, X. Guan, K. Xing, and X. Shen.
Location privacy preservation in collaborative spectrum
sensing. In INFOCOM’12, Orlando, FL, Apr. 2012.
[18] F. McSherry and K. Talwar. Mechanism design via

differential privacy. In FOCS’07, Providence, RI, Oct. 2007.

[19] L. Pournajaf, L. Xiong, V. Sunderam, and S. Goryczka.
Spatial task assignment for crowd sensing with cloaked
locations. In MDM’14, Brisbane, Australia, Jul. 2014.

[20] Y. Selen, H. Tullberg, and J. Kronander. Sensor selection for
cooperative spectrum sensing. In DySPAN’08, Chicago, IL,
Oct. 2008.

[21] S. Shellhammer, S. Shankar, R. Tandra, and J. Tomcik.

Performance of power detector sensors of dtv signals in ieee
802.22 wrans. In TAPAS’06, Boston, MA, Aug. 2006.

[22] R. Shokri, G. Theodorakopoulos, J. Boudec, and J. Hubaux.
Quantifying location privacy. In S&P’11, Oakland, CA, May
2011.

[23] H. To, G. Ghinita, and C. Shahabi. A framework for

protecting worker location privacy in spatial crowdsourcing.
In VLDB’14, Hangzhou, China, Sept. 2014.

[24] D. Tse and P. Viswanath. Fundamentals of Wireless

Communications. Cambridge University Press, 2004.

[25] W. Wang and Q. Zhang. Privacy-preserving collaborative
spectrum sensing with multiple service providers. IEEE
Transactions on Wireless Communications,
14(2):1011–1019, Feb. 2015.

[26] Wikipedia. https://en.wikipedia.org/wiki/Google_Now.
[27] Y. Xiao and L. Xiong. Protecting locations with differential

privacy under temporal correlations. In CCS’15, Denver, CO,
Oct. 2015.

[28] Q. Zhao and B. Sadler. A survey of dynamic spectrum

access. IEEE Signal Processing Magazine, 24(3):79–89,
May 2007.

307