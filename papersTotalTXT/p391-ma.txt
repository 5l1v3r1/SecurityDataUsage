Identiﬁability of Link Metrics Based on End-to-end Path

Measurements ∗

Liang Ma

Imperial College

Ting He

IBM T. J. Watson Research

Kin K. Leung
Imperial College

London, UK

l.ma10@imperial.ac.uk

Yorktown, NY, USA
the@us.ibm.com

London, UK

kin.leung@imperial.ac.uk

Ananthram Swami

Don Towsley

Army Research Laboratory

University of Massachusetts

Adelphi, MD, USA

a.swami@ieee.org

Amherst, MA, USA

towsley@cs.umass.edu

Abstract
We investigate the problem of identifying individual link
metrics in a communication network from end-to-end path
measurements, under the assumption that link metrics are
additive and constant. To uniquely identify the link metrics,
the number of linearly independent measurement paths must
equal the number of links. Our contribution is to character-
ize this condition in terms of the network topology and the
number/placement of monitors, under the constraint that
measurement paths must be cycle-free. Our main results
are: (i) it is generally impossible to identify all the link met-
rics by using two monitors; (ii) nevertheless, metrics of all
the interior links not incident to any monitor are identiﬁable
by two monitors if the topology satisﬁes a set of necessary
and suﬃcient connectivity conditions; (iii) these conditions
naturally extend to a necessary and suﬃcient condition for
identifying all the link metrics using three or more moni-
tors. We show that these conditions not only allow eﬃcient
identiﬁability tests, but also enable an eﬃcient algorithm to
place the minimum number of monitors in order to identify
all link metrics. Our evaluations on both random and real
topologies show that the proposed algorithm achieves iden-
tiﬁability using a much smaller number of monitors than a
baseline solution.

∗Research was partially sponsored by the U.S. Army Re-
search Laboratory and the U.K. Ministry of Defence and
was accomplished under Agreement Number W911NF-06-3-
0001. The views and conclusions contained in this document
are those of the authors and should not be interpreted as rep-
resenting the oﬃcial policies, either expressed or implied, of
the U.S. Army Research Laboratory, the U.S. Government,
the U.K. Ministry of Defence or the U.K. Government. The
U.S. and U.K. Governments are authorized to reproduce and
distribute reprints for Government purposes notwithstand-
ing any copyright notation hereon.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504738.

Categories and Subject Descriptors
C.2.3 [Computer-communication Networks]: Network
Operations—Network monitoring; G.2.2 [Discrete Math-
ematics]: Graph Theory—Network problems

General Terms
Algorithms, Measurement, Performance, Theory

Keywords
Network Tomography; Linear Algebraic Model; Identiﬁabil-
ity Condition; Monitor Placement

1.

INTRODUCTION

Accurate and timely knowledge of the internal state of
a network (e.g., delays on individual links) is essential for
various network operations such as route selection, resource
allocation, and fault diagnosis. Directly measuring the per-
formance of individual network elements (e.g., nodes/links)
is, however, not always feasible due to the traﬃc overhead of
the measurement process and the lack of support at internal
network elements for making such measurements [1]. These
limitations motivate the need for external approaches, where
we infer the states of internal network elements by measur-
ing the performance along selected paths from a subset of
nodes with monitoring capabilities, hereafter referred to as
monitors.

Depending on the granularity of observations, external ap-
proaches can be classiﬁed as hop-by-hop approaches or end-
to-end approaches. The former rely on special diagnostic
tools such as traceroute, pathchar [2], and Network Char-
acterization Service (NCS) [3] to reveal ﬁne-grained perfor-
mance metrics of individual links by sending active probes.
Traceroute reports delay for each hop on the probed path by
gradually increasing the time-to-live (TTL) ﬁeld of probing
packets.
Its reﬁnement, pathchar, returns hop-by-hop ca-
pacities, delays, and loss rates. A later advancement, NCS,
also returns available capacities on each link. While provid-
ing ﬁne-grained information, the above tools require that
Internet Control Message Protocol (ICMP) be supported
at each internal node. Even then, they suﬀer inaccuracies
caused by asymmetry in routes and diﬀerent priorities of
ICMP and data packets. Moreover, these tools can gener-
ate a large number of probing packets, causing extra load

391and, potentially, congestion. In risk-sensitive applications,
security policies may even block hop-by-hop measurements.
Alternatively, the end-to-end approach provides a solution
that does not rely on the cooperation of internal network el-
ements or the equal treatment of control/data packets. It
relies on end-to-end performance metrics (e.g., end-to-end
delays) experienced by data packets to solve for the cor-
responding hop-by-hop metrics using network tomography.
Network tomography [4] refers to the methodology of in-
ferring internal network characteristics through end-to-end
measurements. Without requiring special cooperation from
internal nodes, network tomography can utilize measure-
ments from data packets to obtain path-level information [5],
thus reducing the need for active probes.

In many cases, link metrics are additive, i.e., the combined
metric over multiple links is the sum of individual link met-
rics. For instance, delays are additive, while a multiplicative
metric (e.g., packet delivery ratio) can be expressed in an ad-
ditive form by using the log(·) function. For additive met-
rics, we can model the problem as that of solving a system of
linear equations, where the unknown variables are the link
metrics, and the known constants are the end-to-end path
measurements, each equal to the sum of the corresponding
link metrics along a path. Thus, network tomography es-
sentially solves this linear system of equations.

Existing work on network tomography emphasizes extract-
ing as much information about link metrics as possible from
available measurements. However, past experience shows
that it is frequently impossible to uniquely identify all link
metrics from path measurements [6–8]. For example, if two
links (not necessarily adjacent) always appear together in
measurement paths, then we can at most identify their sum
metric but not the individual metrics. Generally, many mea-
surement paths are linearly dependent in that some paths are
linear combinations of the rest, and hence their measure-
ments do not provide new information. From the perspec-
tive of linear algebra, link metrics are uniquely identiﬁable
if and only if the number of linearly independent measure-
ment paths equals the number of links. There is, however,
a lack of basic understanding of the topological conditions
that ensure identiﬁability, even in the simpliﬁed scenario of
constant link metrics.

In this paper, we consider two closely related fundamen-
tal problems: (i) Under what conditions can one uniquely
identify all link metrics from end-to-end measurements; (ii)
Given an arbitrary network topology, how can one place
monitors to satisfy the above conditions using the minimum
number of monitors? We study both problems in the con-
text of controllable, cycle-free measurements, i.e., monitors
can direct measurement packets to selected paths as long
as they do not contain cycles. Such routing is generally
supported for networks under common administration (e.g.,
single-ISP networks), or overlay networks formed by overlay
nodes and physical paths between these nodes (modeled as
overlay links), where network tomography can be applied to
accurately monitor performance experienced by data traf-
ﬁc while reducing measurement overhead. Moreover, these
assumptions capture capabilities of a new generation of net-
works performing Software-Deﬁned Networking (SDN) [9],
where monitors, in cooperation with SDN controller, can
dictate paths of measurement packets in the route setup
phase, while the cycle-free constraint precludes formation of
endless cycles in the data forwarding phase. We assume that

all link metrics are additive and constant. Our “constant”
link metric refers to one that either changes slowly relative
to the measurement process, or that is a statistical charac-
teristic (e.g., mean, variance) of the link that stays constant
over time1.

Although the answer to the ﬁrst question is straightfor-
ward in linear algebra (the number of linearly independent
paths equals the number of links), a useful answer should be
expressed in terms of externally veriﬁable network properties
such as the network topology and the number/placement of
monitors. To this end, we establish necessary and suﬃcient
conditions on network topology and monitor placement for
uniquely identifying link metrics from controllable, cycle-
free measurements between the monitors. We further de-
velop an eﬃcient algorithm that leverages the established
conditions to place monitors in a given network such that
all link metrics can be uniquely identiﬁed by using the min-
imum number of monitors.

1.1 Further Discussions on Related Work

Based on the model of link metrics, existing work can
be broadly classiﬁed as statistical and algebraic approaches.
Statistical approaches model link metrics as random vari-
ables with (partially) unknown probability distributions, and
apply various parametric/nonparametric techniques to esti-
mate the link metric distributions from realizations of path
metrics [1,10,11]. Algebraic approaches consider link metrics
as unknown constants, and use linear algebraic techniques
to compute link metrics from cumulative path metrics [6, 7].
With link metrics modeled as random variables, multicast,
if supported, can be exploited as a measurement method
with broad coverage and low overhead [12, 13]. Sub-trees
and unicast are employed in [5,14] as alternatives, due to the
inﬂexibility of multicasting to all receivers. Employing mul-
ticast, [5, 15] derive the necessary and suﬃcient conditions
on the multicast tree for identifying all link metric distribu-
tions. If most links do not exhibit severe losses or delays, [10]
proposes algorithms to identify the worst performing links.
A novel approach proposed in [8] employs the Fourier trans-
form of the observable path metric distributions to estimate
the unobservable link metric distributions. All the above
methods implicitly assume the links to be identiﬁable, and
the multicast-based methods require multiple monitors to
participate in the measurement process. In contrast, we as-
sume unicast measurements and focus on establishing topo-
logical conditions for identifying all link metrics by using the
minimum number of monitors.

For constant link metrics, [7] shows that it is challenging
to solve the inverse problem due to the presence of linearly
dependent paths. When all but k link metrics are zero,
compressive sensing techniques are used to identify the k
non-zero link metrics [16, 17].
If all link metrics are bi-
nary (normal/failed), [18] proves that the network must be
(k + 2)-edge-connected to identify up to k failed links by
using one monitor measuring cycles. For arbitrary valued
link metrics, few positive results are known. If the network
is directed (links have diﬀerent metrics in diﬀerent direc-
tions), [11] proves that not all link metrics are identiﬁable
unless every non-isolated node is a monitor. Even if every

1In this case, end-to-end measurements are also statistical
characteristics, e.g., path mean/variance. In the case of vari-
ance, we also need the independence between link qualities
to make the metric additive.

392node is a monitor, unique link identiﬁcation is still impos-
sible if measurement paths are constrained to cycles [6]. If
the network is undirected (links have equal metrics in both
directions), [19] derives the ﬁrst necessary and suﬃcient con-
ditions on the network topology for identifying all link met-
rics, given that monitors can measure cycles or paths possi-
bly containing cycles. A similar study in [20] characterizes
the minimum number of measurements needed to identify
a broader set of link metrics (including both additive and
nonadditive metrics), under the stronger assumption that
measurement paths can contain repeated links. Since rout-
ing along cycles is typically prohibited in real networks, it
remains open as to what the conditions become if only cycle-
free paths can be measured. In this regard, we investigate
the fundamental relationships between link identiﬁability,
network topology, and the number/placement of monitors.
Once identiﬁability is conﬁrmed, a follow-up problem is to
construct linearly independent paths between monitors to
perform measurements, for which we have developed an ef-
ﬁcient path construction algorithm in [21].

Little is known when it comes to placing monitors to en-
sure network identiﬁability. In [22, 23], the problem of plac-
ing the minimum number of monitors to identify all link
metrics under uncontrollable routing is proved to be NP-
hard, and the NP-hardness persists even if a subset of nodes
have control over their local routing policy [24]. In contrast,
we show in this paper that under controllable cycle-free rout-
ing, this problem can be solved optimally in linear time.

1.2 Summary of Contributions

We study here for the ﬁrst time the fundamental topolog-
ical conditions for identifying additive link metrics by using
end-to-end measurements on cycle-free paths. Our contri-
butions are four-fold:

1) We prove that it is generally impossible to identify all
link metrics by using only two monitors, irrespective of the
network topology and the placement of monitors.

2) We establish necessary and suﬃcient conditions for
identifying the metrics of all interior links (links not incident
to any monitor) by using two monitors: the network graph
is (i) 2-edge-connected after removing any interior link and
(ii) 3-vertex-connected after adding a direct link between the
two monitors. These conditions are shown to be veriﬁable
in O(|L|(|V | + |L|)) time, where |V | is the number of nodes
and |L| is the number of links.

3) We transform the above result into a necessary and suf-
ﬁcient condition for identifying all link metrics using κ (κ ≥
3) monitors by embedding the network graph in an extended
graph, with two virtual monitors connected to all the real
monitors. This condition can be veriﬁed in O(|V |+|L|) time.
4) We propose an algorithm to place monitors in an ar-
bitrary network in O(|V | + |L|) time, which guarantees the
identiﬁability of all link metrics by using the minimum num-
ber of monitors. Our evaluations on both randomly-generated
and real topologies show that the proposed algorithm re-
quires a substantially smaller number of monitors than a
baseline solution.

We note that our goal is to characterize identiﬁable sce-
narios for additive link metrics, and the identiﬁcation of
non-additive link metrics (e.g., bit error rates) is beyond
the scope of this paper.

The rest of the paper is organized as follows. Section 2
formulates the problem. Section 3 summarizes our main

Table 1: Notations in Graph Theory

Symbol Meaning

V (G), L(G)

set of nodes/links in graph G

|G|

||G||

degree of graph G:
nodes)

order of graph G:
links)

|G| = |V (G)| (number of

||G|| = |L(G)| (number of

H interior graph (see Deﬁnition 1)

L(v)

set of links incident to node v

G − l

G + l

G − v

Gs + v

′

′

′

G \ G

G ∩ G

G ∪ G

P(v0, vk)

C

delete a link: G − l = (V (G), L(G) \ {l}), where
l ∈ L(G) and “\” is setminus

add a link: G + l = (V (G), L(G) ∪ {l}), where
the end-points of link l are in V (G)

delete a node: G −v = (V (G)\{v}, L(G)\L(v)),
where v ∈ V (G)

add a node: Gs + v = (V (Gs) ∪{v}, L(Gs) ∪ Lv),
where Gs is a sub-graph of G, v ∈ V (G) \ V (Gs),
and Lv is the set of all links between v and
nodes in V (Gs)
From G, delete all common nodes with G′ and
their incident links

′

= (V (G) ∩ V (G′),

′

= (V (G)∪V (G′), L(G)∪

intersection of graphs: G ∩ G
L(G) ∩ L(G′))
union of graphs: G ∪G
L(G′))
simple path connecting nodes v0 and vk, de-
ﬁned as a special graph with V (P) = {v0, . . . ,
vk} and L(P) = {v0v1, v1v2, . . . , vk−1vk}
cycle:
if (v0, . . . , vk) (k ≥ 2) is a sequence of
nodes on a simple path P, then C = P + vkv0
is a cycle

F a non-separating cycle (see Deﬁnition 4)

mi mi ∈ V (G) is the i-th monitor in G

Wl, WP metric on link l and sum metric on path P

results. Sections 4–5 present identiﬁability conditions for
the case of two monitors, and Section 6 addresses the case
of three or more monitors. Algorithms for testing network
identiﬁability and deploying monitors are presented in Sec-
tion 7. Finally, Section 8 concludes the paper.

2. PROBLEM FORMULATION

2.1 Models and Assumptions

We assume that the network topology is known and model
it as an undirected graph2 G = (V, L), where V and L are
the sets of nodes and links, respectively. Note that graph
G can represent a logical topology where each link in G cor-
responds to a combination of physical links/nodes, e.g., in
an overlay network. Without loss of generality, we assume
G is connected, as diﬀerent connected components have to
be monitored separately. Denote the link incident to nodes
u and v by uv; links uv and vu are assumed to have the
same metric. Certain nodes in V are monitors and can ini-
tiate/collect measurements. We assume that each link in
G has two distinct end-points (i.e., no self-loop), and there
is at most one link connecting a pair of nodes. Last, no
link metrics in G are known prior to taking measurements.

2We use the terms network and graph interchangeably.

393l4

l5

l1

m1

l3

l2

l7

m3

l9

l10

m2

l6

l8

l11

Figure 1: Sample network with three monitors: m1,
m2, and m3.

a1

b1

H

m1

a2

.
.
.

m2

b2

.
.
.

G

a

k1

bk2

exterior   links
H: interior  graph

Figure 2: Reorganizing graph G into exterior links
and interior graph ({ai}k1
j=1 may have
overlap).

i=1 and {bj}k2

Table 1 summarizes all graph theory notations used in this
paper (following the convention of [25]).

Let n := |L| denote the number of links in G, {li}n

i=1 the
set of links in G, w = (Wl1 , . . . , Wln )T the column vector
of all link metrics, and c = (WP1 , . . . , WPγ )T the column
vector of all available path measurements, where γ is the
number of measurement paths and WPi is the sum of link
metrics along measurement path Pi. We assume that moni-
tors can control the routing of measurement packets as long
as the path starts and ends at distinct monitors and does
not contain repeated nodes. In the language of graph the-
ory, we limit measurements to simple paths (in contrast, a
non-simple path may contain repeated nodes). The path
measurements are expressed in terms of the unknown link
metrics through the following linear system:

Rw = c,

(1)

where R = (Rij) is a γ × n measurement matrix , with each
entry Rij ∈ {0, 1} denoting whether link lj is present on
path Pi. The network tomography problem is to invert this
linear system to solve for w given R and c.

A link is identiﬁable if the associated link metric can be
uniquely determined from path measurements; network G is
identiﬁable if all links in G are identiﬁable. Otherwise, the
link or the network is said to be unidentiﬁable. Given the
above linear system, G is identiﬁable if and only if R in (1)
has full column rank, i.e., rank(R) = n. In other words, to
uniquely determine w, there must be n linearly independent
simple paths between monitors.

2.2 Objective

Given a network topology G, the ﬁrst objective of this pa-
per is to derive necessary and suﬃcient conditions for identi-
fying all link metrics in G (or certain subgraphs of G) under
a given placement of κ (κ ≥ 2) monitors by solving the linear
system (1). Our second objective is to compute a placement
of the minimum number of monitors in G that enables the
identiﬁcation of all link metrics.

2.3 Illustrative Example

Fig. 1 displays a sample network with three monitors (m1–
m3) and eleven links (links l1–l11). To identify all eleven link
metrics, eleven end-to-end paths (one m1 → m2 path, seven

m1 → m3 paths and three m3 → m2 paths) are constructed
to form the measurement matrix R:

m1 → m2 :

l1 l4 l8 l11

m1 → m3 :

l1 l4 l7

l2 l6

l2 l3 l4 l7

l2 l5 l8 l10

l2 l5 l7

l1 l3 l6

l1 l4 l5 l6

m3 → m2 :

l9

l10 l11

l6 l5 l8 l11

⇛ R =

1
1
0
0
0
0
1
1
0
0
0





0
0
1
1
1
1
0
0
0
0
0

0
0
0
1
0
0
1
0
0
0
0

1
1
0
1
0
0
0
1
0
0
0

0
0
0
0
1
1
0
1
0
0
1

0
0
1
0
0
0
1
1
0
0
1

0
1
0
1
0
1
0
0
0
0
0

1
0
0
0
1
0
0
0
0
0
1

0
0
0
0
0
0
0
0
1
0
0

0
0
0
0
1
0
0
0
0
1
0

1
0
0
0
0
0
0
0
0
1
1

,





where Rij = 1 if and only if link lj is on path Pi. Then we
have Rw = c, where c is the vector of end-to-end measure-
ments taken at the destination monitors. In this example,
R is invertible, and thus w can be uniquely identiﬁed, i.e.,
w = R−1c. In Fig. 1, other simple paths can be measured as
well, although they do not provide further information since
the measurement matrix already reaches full rank. How-
ever, if we remove a monitor, say m3, then it can be veriﬁed
that the remaining paths can no longer form an invertible
measurement matrix. Note that a path such as l2l5l4l3l6l9
cannot be measured because it contains a cycle.

3. MAIN RESULTS

Our main contributions are a set of necessary and suﬃ-
cient conditions for network identiﬁcation that are explic-
itly expressed in terms of network topology and the num-
ber/placement of monitors (proofs of theorems can be found
in Sections 4–6). To begin, we ﬁrst establish a negative re-
sult that no matter where we place the monitors, we cannot
identify all link metrics using only two monitors.

Theorem 3.1. For any given network topology G with
n ≥ 2 (n is the number of links), G is unidentiﬁable with
two monitors, irrespective of their placement.

Second, we examine the two-monitor case in more detail
and discover that the unidentiﬁability issue only applies to
a small subset of links, and that the majority of links can be
identiﬁed under certain conditions. Speciﬁcally, given two
monitors m1 and m2, we can reorganize G into two parts3
as illustrated in Fig. 2.

Definition 1.

1) The interior graph H of G is the sub-graph obtained by re-
moving the monitors and their incident links, i.e., H := (V \
M, L \ LM ) for M = {m1, m2} and LM = L(m1) ∪ L(m2).
2) We refer to links incident to monitors, i.e., L(m1) ∪
L(m2), as exterior links, and the remaining links as inte-
rior links.

We show that the exterior links can never be identiﬁed
using two monitors (see Corollary 4.1), but the interior links
can be identiﬁed under the following conditions.
3An area with a dashed border denotes a sub-graph
(nodes/links on the dashed border are also part of the sub-
graph, e.g., {ai}k1
j=1 in Fig. 2 are part of H),
and a solid line denotes a link/path/cycle.

i=1 and {bj}k2

394m1 m2
’

’

mi

...
m1

Gex

...

mj
...
κmP

G

(b)

mi

...
m1

...

mj

...
κm

G

(a)

virtual link

Figure 3: (a) G with κ (κ ≥ 3) monitors; (b) Gex with
two virtual monitors.

Theorem 3.2. Assume that the interior graph H (with
||H|| ≥ 1) of G under a given placement of two monitors
(m1 and m2) is connected and direct link m1m2 (incident
to m1 and m2) does not exist in L(G). The necessary and
suﬃcient conditions for identifying all link metrics in H are:

1(cid:13) G − l is 2-edge-connected for every interior link l in H;

2(cid:13) G + m1m2 is 3-vertex-connected.

Third, we show that the above conditions can be naturally
extended to a necessary and suﬃcient condition for identify-
ing all link metrics in G using three or more monitors. This
condition is based on an extended graph Gex obtained from
G as follows. As illustrated in Fig. 3, given a graph G with κ
monitors, its extended graph Gex is obtained by adding two
virtual monitors m′
2, and 2κ virtual links between
each pair of virtual-actual monitors. The identiﬁability of G
is characterized by a simple condition on Gex as follows.

1 and m′

Theorem 3.3. Assume that κ (κ ≥ 3) monitors are used
to measure simple paths. The necessary and suﬃcient condi-
tion on the network topology G for identifying all link metrics
in G is that the associated extended graph Gex be 3-vertex-
connected.

Finally, we develop eﬃcient algorithms that can: (i) test
whether a given placement of monitors can identify all link
metrics, and (ii) compute a placement of the minimum num-
ber of monitors needed to identify all link metrics (see Sec-
tion 7). Both algorithms run in linear time w.r.t. network
size (i.e., O(|V (G)|+|L(G)|)) and hence are suitable for large
networks.

4. UNIDENTIFIABILITY WITH TWO

MONITORS

At least two monitors are required to identify link metrics
through monitoring simple paths. In this section, we inves-
tigate if two monitors suﬃce to identify all link metrics in
the network. Suppose that two distinct nodes are selected
to serve as monitors. Each measurement starts at one mon-
itor and terminates at the other via a controllable simple
path. The termination node then reports the end-to-end
metric, which becomes an entry in the measurement vector
c. From the perspective of graph theory, such a network can
be represented as G = ({m1, m2, v0, . . . , vk}, L), where m1
and m2 are the monitors, {v0, . . . , vk} are the non-monitors,
and |L| = n. Let m1m2 be a direct link between m1 and m2
(if it exists). Since m1m2 can be easily identiﬁed through a
one-hop measurement, we assume without loss of generality
that m1m2 /∈ L(G) (i.e., there is no direct link) in Sections
4 and 5, where only two monitors are used.

4.1 Proof of Theorem 3.1

Any G with ||G|| ≥ 2 can be reorganized as in4 Fig. 2.
Let N (v) denote the set of neighboring nodes of node v. We
deﬁne A := {a1, a2, . . . , ak1 } = N (m1) and B := {b1, b2,
. . . , bk2 } = N (m2) to be the sets of neighbors of m1 and
m2, respectively, where k1 := |A|, k2 := |B| and A, B can
overlap (m1, m2 /∈ A ∪ B).

Assuming that H is connected and all link metrics in H
are known, we can reduce any equation associated with a
simple path P between m1 and m2 to the form (see Table 1
for notations):

Wm1ai + Wbj m2 = φij

(2)

ij

for some ai ∈ A and bj ∈ B. This is obtained by rewriting
+ Wbj m2 = WPij (P ′
the original equation Wm1ai + WP ′
ij
is the segment of Pij in H) to place the unknowns on the
left-hand side, and setting φij := WPij − WP ′
. Thus, we
obtain k1 ×k2 equations from all of the simple paths between
m1 and m2, each corresponding to the sum of the metrics
of one link incident to m1 and one link incident to m2. The
corresponding reduced measurement matrix is (each column
corresponding to an unknown link metric):

ij

Wm1 a1
1
1
.
.
.
1

1
1
.
.
.
1





R =

· · · Wm1 ak1

Wb1m2
1

· · · Wbk2

m2

1

1

1

1

1

. . .

. . .

.
.
.

. . .

1

1

1

. . .

1
1
.
.
.
1





,

(3)

where the blank entries are zero. We apply the following
linear transformations to R. For each q = 1, . . . , k1 − 1 and
i = 2, . . . , k2, replace row(qk2 + i) by row(qk2 + i) − row(i) −
row(qk2 + 1) + row(1); it can be veriﬁed that the result is a
row of zeros. Ignoring rows of zeros, R transforms into

Wm1 a1
1
1
.
.
.
1

1





R

′ =

· · · Wm1 ak1

· · · Wbk2

m2

Wb1m2
1

1

. . .

1

1

. . .

1

1
1

1

k2
rows

,

k1 − 1
rows










(4)
where the rows are linearly independent, and the number of
rows equals k1 + k2 − 1. This transformation preserves the
rank of R because R can be reconstructed from R′ as fol-
lows: the ﬁrst k2 rows in R and R′ are identical; row(qk2+1)
in R equals row(k2 +q) in R′ (q = 1, . . . , k1 −1); row(qk2 +i)

4If certain links in G cannot be included in any possible
paths constructed from m1 to m2 in Fig. 2, then these links
are unidentiﬁable, resulting in a disconnected or one-edge-
connected interior graph H.

395in R equals row(i) + row(k2 + q) − row(1) in R′ (q = 1, . . . ,
k1 −1, i = 2, . . . , k2). Hence, the rank of R equals k1 +k2 −1.
When H is not connected, some rows in R may not exist be-
cause there is no simple path connecting the corresponding
nodes in A and B, and the rank of R may be even smaller.
Since there are k1 + k2 unknown variables (Wm1ai )k1
i=1 and
(Wbj m2 )k2
j=1, they cannot be uniquely determined even if all
link metrics in H are already known. Therefore, G with
||G|| ≥ 2 is unidentiﬁable by using two monitors. (cid:3)

In fact, we can show that none of the exterior links is iden-
tiﬁable because metric of any one exterior link will uniquely
determine metrics of the rest; see proof in [26].

Corollary 4.1. None of the exterior links (except m1m2)

can be identiﬁed with two monitors.

4.2 Discussions on Paths with Cycles

At the end of Section III-B in [19], the authors raise the
question whether or not monitoring non-simple paths (i.e.,
paths that may contain cycles) between two monitors suf-
ﬁces to identify all link metrics in the network5. According
to Corollary 4.1, the exterior links cannot be identiﬁed even
if all the interior link metrics are known; allowing cycles in
the interior graph H provides no additional information re-
garding the exterior links. Consequently, the answer to that
question in [19] is that monitoring (simple or non-simple)
paths between two monitors is not suﬃcient to identify all
link metrics.

5.

IDENTIFIABILITY OF INTERIOR LINKS
WITH TWO MONITORS

Network administrators are more interested in using end-
to-end measurements to infer the qualities of links that are
at least one-hop away. Therefore, in this section, we only
focus on the interior graph H and derive necessary and suf-
ﬁcient conditions on the network topology G for identifying
all links in H using two monitors (m1 and m2), under the
earlier assumption that no link metrics (including those of
links incident to m1 and m2) are known ahead of time.

Before going into details, we ﬁrst point out that it is suf-
ﬁcient to solve the case in which H is a connected graph.
This is because if H consists of KH (KH ≥ 2) connected
components Hi (i = 1, . . . , KH ), we can decompose the en-
tire graph G into sub-graphs Gi
:= Hi + m1 + m2, with
G = ∪KH
i=1 Gi (see the deﬁnition of graph union in Table 1).
Since none of the m1 → m2 simple paths in Gi can traverse
Gj (i 6= j), the identiﬁcation of links within diﬀerent Gi’s is
mutually independent. Therefore, in the rest of this section,
we assume H to be connected with ||H|| ≥ 1. Our result can
be applied to each Gi separately when H is disconnected.

5.1 Proof of Theorem 3.2: Necessary Part

Suppose all links in H are identiﬁable. We prove the ne-
cessity of Conditions 1(cid:13)– 2(cid:13) in Theorem 3.2 by contradiction.
a) Let l1 ∈ L(H) be an arbitrary interior link. If G − l1 is
disconnected, then l1 is a bridge6 in G (shown in Fig. 4(a)).
If G1 and G2 each contains a monitor, then l1 is unidentiﬁable
by Lemma A.1 (Appendix). If m1 and m2 are both in G1

5We restrict the paths from containing repeated monitors to
exclude measurement of cycles, as is already solved in [19].
6A link whose removal will disconnect the graph is a bridge
[25].

G1

l1

G2

a1

a2

r

l2

.
.
.

m2

m1

akr

(a)

(b)

G1

m2m1

l1

l2

G2

(c)

G1
a1
a2

m1

.
.
.

ak1

G2

b1

b2

.
.
.

m2

bk2

l1

l2

(d)

Figure 4: Illustration of Condition 1(cid:13), where {l1, l2}
is an edge cut in (c) and (d).

(or G2), then l1 cannot be included in any measurement
path (otherwise, l1 will be used more than once), and is
thus unidentiﬁable. Both cases contradict the assumption
that all interior links are identiﬁable.

b) Suppose there is a bridge l2 in G −l1. If l2 is an exterior
link, as shown in Fig. 4(b), then by Lemma A.1 (Appendix),
its adjacent interior links rai ∈ L(H) are unidentiﬁable, con-
tradicting the assumption that all interior links are identi-
ﬁable. Thus, l2 must be an interior link. Since by a), an
interior link cannot be a bridge in G, {l1, l2} must be an
edge cut as shown in Fig. 4(c) and 4(d). If both m1 and m2
are in G1 as in Fig. 4(c), then all m1 → m2 paths traversing
l1 must traverse l2 as well. Thus we can at most identify
Wl1 + Wl2 , but not Wl1 and Wl2 individually. If m1 is in
G1 and m2 is in G2 as in Fig. 4(d), then all m1 → m2 paths
must traverse either l1 or l2, but not both. Assuming that
G1 and G2 in Fig. 4(d) are connected and all link metrics
in them are known, then the resulting measurement matrix
R1 is similar to (3), except that each row in R1 has a new
entry associated with Wl1 or Wl2 :

Exterior
Links
R

R

R1 =

(cid:18)

Wl1 Wl2

e1

.

(cid:19)

e1

Here blank entries correspond to zeroes, R is given by (3),
and e1 is a (k1 × k2)-element column vector of all ones. Let
R2 and R3 denote the ﬁrst and last k1 × k2 rows in R1,
respectively. Then applying the same linear transformations
as applied to (3) to both R2 and R3, we can transform R1
into R′

1 (ignoring rows of zeros):

Exterior
Links
R′
R′

R

′

1 =

(cid:18)

Wl1 Wl2

e2

,

(cid:19)

e2

where R′ is given by (4) and e2 is a (k1 + k2 − 1)-element
column vector of all ones. In R′
1, for each q = k1 + k2, . . . ,
2k1 +2k2 −2, replace row(q) with row(q)-row(q −k1 −k2 +1).
Ignoring duplicate rows, R′

1 transforms into

Exterior
Links
R′

R

′′

1 =

(cid:18)

Wl1 Wl2

e2
−1

,

(cid:19)

1

where all rows are linearly independent. Since any subset of
k (k ≥ 1) equations in R′′
1 contains more than k unknown
variables, none of these variables can be identiﬁed. When
G1 and G2 are not connected, the rank of R′′
1 can be even
smaller. Thus, Wl1 and Wl2 are unidentiﬁable, contradicting
the assumption that all the interior links are identiﬁable.

396P1

P3

m1

v1

y

v2

P2

m2

P3

P4

m1

P1

yv1

v2

P2

(a) cross-link

y

(b) shortcut

y

Figure 5: Two types of identiﬁable links in H.

Based on a) and b), we see that G − l1 must be 2-edge-

connected for any l1 ∈ L(H) (i.e., Condition 1(cid:13) holds).

c) We can also prove Condition 2(cid:13) by contradiction; see

Proposition A.2 (Appendix). (cid:3)

5.2 Proof of Theorem 3.2: Sufﬁcient Part

Given Conditions 1(cid:13)– 2(cid:13), we need to show that all links
in H are identiﬁable. We ﬁrst introduce two types of iden-
tiﬁable links. The argument then consists of showing that
every interior link belongs to one of these two types.

5.2.1 Cross-link, Shortcut, and Non-separating

Cycle

We begin by introducing a few notions essential to our

proof.

The ﬁrst notion is a cross-link that connects nodes on two

simple paths between the monitors.

Definition 2. As illustrated in Fig. 5(a), link y is a
cross-link if ∃ four m1 → m2 paths PA, PB, PC , and PD
formed from simple paths P1, . . . , P4 by:

( PA = P1 ∪ P2

PB = P3 ∪ P4

, ( PC = P1 ∪ y ∪ P4

PD = P3 ∪ y ∪ P2

,

(5)

5.2.2 The Proof

such that

( |P1 ∩ P2| = 1

|P3 ∩ P4| = 1

,( |P2 ∩ P3| = 0

|P1 ∩ P4| = 0

.

(6)

See Table 1 for deﬁnitions of graph union/intersection and
| · |; note that paths are also graphs. The constraints in
(6) are used to ensure that PA–PD are simple paths, e.g.,
|P1 ∩ P2| = 1 (P1 and P2 have no common node other than
v1) ensures that no cycles exist in PA. However, this does
not require P1–P4 to be node disjoint, e.g., P1 and P3 can
have common nodes. A cross-link y can then be identiﬁed by

Wy =

1
2

(WPC + WPD − WPA − WPB ).

(7)

The second notion is a shortcut that connects the end-

points of a simple path whose metric is known.

Definition 3. As illustrated in Fig. 5(b), link y is a short-
cut if ∃ a simple path P3 whose metric has been identiﬁed
such that the following m1 → m2 simple paths can be formed:

v1

v2

m2

m1

v3

m2

v4

v5

Cross-links

Shortcuts

Figure 6: Sample network with identiﬁable interior
graph.

P1
P2
P3
P4

m1

F

C

v

w

m2
(a)

m2

m1

C

F

v

w

(b)

r

C

F

w

v

(c)

Figure 7: Possible cases of interior link vw: (a) Case
A, (b) Case B-1, (c) Case B-2.

Definition 4. A non-separating cycle in G, denoted by
F , is an induced sub-graph7 such that: (i) F is a cycle (see
deﬁnition in Table 1), and (ii) F does not separate any node
from monitors, i.e., each connected component in G \ F con-
tains at least one monitor.

For example, there are four non-separating cycles in Fig. 6:
v1v2v3v1, v4v3v2v5v4, m1v1v3v4m1, and v5v2m2v5. Cycle
v4v3v1v2v5v4 is not a non-separating cycle as it is not in-
duced (due to link v2v3), neither is v4m1v1v2v5v4 as it sep-
arates v3 from monitors.

The key to the suﬃciency proof is to show that each inte-
rior link can be categorized as either a cross-link or a short-
cut when the network satisﬁes Conditions 1(cid:13) and 2(cid:13). The
proof proceeds in three steps.

The ﬁrst step is to show that under Conditions 1(cid:13) and
2(cid:13), every interior link vw satisﬁes one of the three cases as
shown in Fig. 7. Speciﬁcally, we have the following lemma.

Lemma 5.1. If graph G satisﬁes Conditions 1(cid:13) and 2(cid:13),
then for any interior link vw, there exists a non-separating
cycle F with vw ∈ L(F ), a cycle C with vw ∈ L(C), a simple
path P1 connecting one monitor with a node on F − v − w,
and a simple path P2 connecting the other monitor with a
node on C − v − w such that

(a) F and C have at most one common node other than v, w

(i.e., |V (F ) ∩ V (C)| ≤ 3);

(b) P1 and P2 are disjoint, neither going through v nor w

(i.e., P1 ∩ P2 = ∅, v, w /∈ V (P1) and v, w /∈ V (P2));

(c) |V (P1) ∩ V (F )| = 1, |V (P2) ∩ V (C)| = 1.

PA = P1 ∪ y ∪ P2, PB = P1 ∪ P3 ∪ P2,

(8)

Proof. See [26].

satisfying |P1 ∩ P3| = 1, |P2 ∩ P3| = 1, and |P1 ∩ P2| = 0.

Again, the constraints are used to guarantee that PA and
PB are simple paths. A shortcut y can be identiﬁed by

Wy = WPA − WPB + WP3 .

(9)

The third notion is a special kind of cycle deﬁned as fol-

lows.

Lemma 5.1 states that there must exist two cycles sharing
link vw, a non-separating cycle F and a (not necessarily
non-separating) cycle C that satisfy conditions (a)–(c) in the
lemma. These conditions imply three possible cases:

7An induced sub-graph G′ of G is a sub-graph such that for
any pair of vertices v and w in G′, vw is an edge in G′ if and
only if vw is an edge in G.

397• Case A (Fig. 7(a)): C is also a non-separating cycle, F
and C have no common node other than v and w, and
F /C each connects to a diﬀerent monitor by a disjoint
simple path;

• Case B-1 (Fig. 7(b)): any path from any node in F −
v − w to monitors must have a common node with
C − v − w;

• Case B-2 (Fig. 7(c)): F and C must have at least one

common node (denoted by r) other than v and w.

These cases are guaranteed to be complete by Lemma 5.1.
We will show later that Case A links are cross-links and Case
B (including B-1 and B-2) links are shortcuts.

The second step is to recognize that in Case A (Fig. 7(a)),
we can construct four measurement paths PA–PD by (5), us-
ing P1–P4 marked in the ﬁgure. Thus, a Case A link vw is a
cross-link and thus can be identiﬁed as in (7). The challenge
is that it is impossible to construct measurement paths as
in (5) for the other two cases (Fig. 7(b) and 7(c)), since the
conditions in (6) cannot be satisﬁed. This motivates us to
explore the possibility of identifying Wvw in these two cases
by (9), i.e., to investigate whether vw in Fig. 7(b) and 7(c)
can be characterized as a shortcut.

The third step is to show that any link of Case B-1 or
B-2 is indeed a shortcut. We prove this by showing that
for any Case B link, we can ﬁnd a detour path connecting
its end-points such that all the links in this detour path are
cross-links, and thus can be identiﬁed by (7). To this end,
we show the following lemma.

Lemma 5.2. Let m∗

1, m∗

2 ∈ {m1, m2} with m∗

1 6= m∗

2. If G

satisﬁes Conditions 1(cid:13) and 2(cid:13), then

(a) for any non-separating cycle in G, there is at most one

Case B link in this non-separating cycle;

(b) for any Case B link vw in the interior graph of G, there
exists a non-separating cycle Fvw with vw ∈ L(Fvw) and
m1, m2 /∈ V (Fvw). For this non-separating cycle Fvw,
there exist disjoint simple paths P(m∗
2, w),
each intersecting with Fvw only at the end-point, i.e.,

1, v) and P(m∗

V(cid:0)P(m∗

{w}.

1, v) ∩ Fvw(cid:1) = {v} and V(cid:0)P(m∗

2, w) ∩ Fvw(cid:1) =

Proof. See [26].

Lemma 5.2-(b) implies that a Case B link y must reside on
a non-separating cycle F within the interior graph. Mean-
while, Lemma 5.2-(a) implies that all the other links on cycle
F are cross-links, as there is at most one Case B link on each
non-separating cycle. Furthermore, we show in Lemma 5.2-
(b) that there exist disjoint simple paths P1 and P2 con-
necting the end-points of link y to diﬀerent monitors, each
sharing only one common node with F at the end-points of
link y. Together, these allow us to construct two measure-
ment paths PA and PB as in (8), where P3 = F − y consists
of only cross-links whose metrics are known from (7). Thus,
a Case B link y is a shortcut and can be identiﬁed by (9).

Therefore, under Conditions 1(cid:13) and 2(cid:13), every interior link

is identiﬁable. (cid:3)

As an example, Fig. 6 displays a network satisfying Condi-
tions 1(cid:13) and 2(cid:13), where each interior link can be characterized
as either a cross-link or a shortcut.

6.

IDENTIFIABILITY WITH THREE OR
MORE MONITORS

Since two monitors are not suﬃcient to identify all link
metrics in G, we explore in this section the case where the
network contains three or more monitors.

6.1 Conversion into Two-Monitor Problem

Section 5 suggests that it is easier to identify links that
are one-hop away from the monitors. This observation moti-
vates us to construct an extended graph Gex of G (see Fig. 3),
so that all links of interest (actual links in G) are at least
one-hop away from virtual monitors m′
2. This con-
struction immediately converts the problem of identifying
G using κ monitors to a problem of identifying the interior
graph of Gex using two monitors (again we have no prior
knowledge of link metrics in G or Gex). Therefore, we can
apply Theorem 3.2 to obtain the following result.

1 and m′

Lemma 6.1. Employing κ (κ ≥ 3) monitors to measure
simple paths, the necessary and suﬃcient condition on the
network topology G for identifying all link metrics in G is
that the associated extended graph Gex has an identiﬁable
interior graph, i.e., Gex satisﬁes Conditions 1(cid:13) and 2(cid:13) in
Theorem 3.2.

1 and m′

Proof. Since G is the interior graph of Gex, it suﬃces to
show that the information attainable by the real monitors
m1, . . . , mκ is the same as the information attainable by the
virtual monitors m′
2, if the virtual monitors can
make end-to-end measurements along simple paths in Gex.
First, we show that any measurement between the real
monitors can be obtained from measurements between m′
and m′
2. To this end, consider a path miPmj (i, j ∈ {1, . . . ,
κ}, i 6= j) in G, as shown in Fig. 3(b). Four simple paths
between m′

2 can be constructed:

1 and m′

1

PA = m′
PB = m′
PC = m′
PD = m′

1mim′
2,
1mjm′
2,
1miPmjm′
2,
1mjPmim′
2.

(10)




Viewing miPmj as a “cross-link”, we can compute WmiPmj
from the measurements on these four paths via (7) (replacing
Wy by WmiPmj ).

Moreover, we show that measurements between m′
1 and
m′
2 in Gex do not provide extra information for identifying
links in G compared with measurements attainable by the
real monitors. This is proved by observing that for any
m′
2 (i, j ∈ {1, . . . , κ}, i 6=
j) containing at least one link in G, the information relevant
for identifying links in G can be obtained by measuring its
mi → mj sub-path miPmj, which must also be a simple
path.

2 simple path m′

1miPmjm′

1 → m′

6.2 Sketch of Proof for Theorem 3.3

The special structure of Gex allows us to consolidate the
two Conditions 1(cid:13) and 2(cid:13) into a single condition as stated
in Theorem 3.3, based on the following arguments.

From the structure of Gex (see Fig. 3), we can prove in
Propositions A.3 and A.4 (Appendix) that Gex satisﬁes Con-
ditions 1(cid:13) and 2(cid:13) in Theorem 3.2 if and only if Gex is both 3-
edge-connected and 3-vertex-connected. According to Propo-
sition 1.4.2 in [25], a 3-vertex-connected graph is also 3-edge-
connected. Thus, the necessary and suﬃcient conditions in

398Lemma 6.1 can be simpliﬁed to a single condition that Gex
be 3-vertex-connected. (cid:3)

7. TESTING AND ENSURING IDENTIFIA-

BILITY

The conditions we have derived have broader impact than
mere theoretical interest. A major beneﬁt of characteriz-
ing network identiﬁability in terms of network topology is
that we can leverage existing graph-processing algorithms
to eﬃciently test for or ensure the identiﬁability of a given
network. In this section, we present eﬃcient algorithms that
can (i) test for the identiﬁability of a given network with a
given monitor placement, and (ii) place the minimum num-
ber of monitors in a given network to identify all its link
metrics.

7.1 Efﬁcient Identiﬁability Test

The ﬁrst question we want to answer is: Given a net-
work topology G and a placement of κ ≥ 2 monitors, how
do we eﬃciently determine if G is identiﬁable or not? If
κ = 2, then we know from Theorem 3.1 that it is impos-
sible to identify the entire G. Nevertheless, we can test
whether the interior graph is identiﬁable using Conditions 1(cid:13)
and 2(cid:13) in Theorem 3.2, which transform into multiple tests
of edge/vertex connectivity. The problem of determining
whether a given graph is k-edge/vertex-connected has been
well studied. Speciﬁcally, fast algorithms have been pro-
posed to test if a graph is: (i) 2-edge-connected [27], or (ii)
3-vertex-connected [28], both in time O(|V |+|L|) (|V |: num-
ber of nodes; |L|: number of links). Using these algorithms,
we can test for the identiﬁability of the interior graph of G
as follows:

1. For each interior link l, apply the 2-edge-connectivity
test in [27] to G − l. G is unidentiﬁable if the test fails;

2. Apply the 3-vertex-connectivity test in [28] to G +

m1m2. G is unidentiﬁable if the test fails.

The interior graph of G is identiﬁable if all the tests succeed.
The overall complexity is O(|L(G)|(|V (G)| + |L(G)|)).

Similarly, if κ ≥ 3, then we can test for the identiﬁability

of the entire G using the condition in Theorem 3.3:

1. Construct the extended graph Gex as in Fig. 3;

2. Apply the 3-vertex-connectivity test in [28] to Gex. G
is identiﬁable if the test succeeds, and unidentiﬁable
otherwise.

The complexity of this algorithm is O(|V (Gex)| + |L(Gex)|),
which is the same as O(|V (G)| + |L(G)|).

7.2 Optimal Monitor Placement

The next question we want to answer is: Given an arbi-
trary topology G, what is the minimum number of monitors
needed and where should they be placed to identify all link
metrics in G? While one can enumerate all possible place-
ments for κ = 3, 4, . . . monitors and test for identiﬁability
until an identiﬁable placement is found, what we really want
is an eﬃcient algorithm to achieve the same. This requires
a deeper understanding of the structure of an identiﬁable
graph.

We illustrate our idea by an example in Fig. 8(a). We ﬁrst
consider the minimum deployment: Using fewer monitors

monitor

virtual link

G1

b

a

w

r

c
d

e

s

l

v

(a)

q

h

u

f

g

x
G2

b

p

i

j
k

a

w

w

s

q

G4

r
r

o

G3

t

d

e

s

h

l

v

f

c
d

d

j

i

j

k

o

t

b

w

q

g
x

k

p

r
r

d

i

i

d

x
j
d

k

c

j

l

f
f

g

k

p

o

t

a

d

w

w

e

s
h

v

u

s

v

u
(c)

u

(b)

Figure 8: (a) Original graph; (b) biconnected com-
ponents; (c) triconnected components.

certainly renders the network unidentiﬁable. This yields the
following rules:

(i) Dangling node (e.g., h) must be a monitor, as other-
wise its adjacent link cannot be measured using simple
paths;

(ii) A node on a tandem of links (e.g., j) must be a mon-
itor, as otherwise we can only identify the sum of its
adjacent link metrics (Wdj and Wjk) and not the indi-
vidual metrics;

(iii) For a sub-graph with two cut-vertices 8 (e.g., G1) or a
2-vertex cut 9 (e.g., G2), at least one node other than
those cuts must be a monitor, as otherwise even if all
links outside this sub-graph have been identiﬁed, the
vertices in the cuts (w and d for G1, f and i for G2)
are eﬀectively the two “monitors” for this sub-graph,
and Theorem 3.1 states that this sub-graph cannot be
identiﬁed;

(iv) Similarly, for a sub-graph with one cut-vertex (e.g.,
G3), at least two nodes other than the cut-vertex must
be monitors.

Our strategy is to use the above four rules to deploy the
necessary monitors.
If we can prove that these necessary
monitors are also suﬃcient to identify all links, then our
deployment is optimal. To formally present the algorithm,
we introduce the following deﬁnitions.

Definition 5. A k-connected component of G is a max-
imal sub-graph of G that is either (i) k-vertex-connected, or
(ii) a complete graph with up to k vertices. The case of
k = 2 is also called a biconnected component, and k = 3 a
triconnected component.

Intuitively, a biconnected component is a sub-graph con-
nected to the rest of the graph by cut-vertices, and a tri-
connected component (within a biconnected component) is
a sub-graph connected to the rest by 2-vertex cuts. For
instance, Fig. 8(b) shows the biconnected components of
Fig. 8(a), separated by cut-vertices d, j, k, w, s, and r.
Fig. 8(c) shows the triconnected components, separated by
the above cut-vertices and 2-vertex cuts {w, d}, {f, i}, and

8A cut-vertex is a vertex whose removal will disconnect the
graph.
9A 2-vertex cut is a set of two vertices {v1, v2} such that
removing v1 or v2 alone does not disconnect G, but removing
both disconnects G.

399Algorithm 1: Minimum Monitor Placement (MMP)
input : Connected graph G
output: A subset of nodes in G as monitors

1 choose all the nodes with degree less than 3 as monitors;
2 partition G into biconnected components B1, B2, . . .;
3 foreach biconnected component Bi with |Bi| ≥ 3 do
4

partition Bi into triconnected components T1, T2, . . .;
foreach triconnected component Tj of Bi with |Tj | ≥ 3
do

5

6

7

8

9

10

11

if 0 < sTj < 3 and sTj + MTj < 3 then

randomly choose 3 − sTj − MTj nodes in Tj that
are neither separation vertices nor monitors as
monitors;

end

end
if 0 < cBi < 3 and cBi + MBi < 3 then

randomly choose 3 − cBi − MBi nodes in Bi that are
neither cut-vertices nor monitors as monitors;

end

12
13 end
14 if the total number of monitors κ < 3 then
15
16 end

randomly choose 3 − κ non-monitor nodes as monitors;

{u, v}. To identify the triconnected components, we process
the graph by adding virtual links as follows: if ∃ a minimal
2-vertex cut10 whose vertices are not neighbors (e.g., {u, v}),
connect them by a virtual link; repeat this on the resulting
graph until no such cut exists.
In the sequel, nodes that
are cut-vertices or part of 2-vertex cuts are called separation
vertices (e.g., w, d, f , i, j, k, s, r, u, and v).

Monitor Placement Algorithm: There exist fast al-
gorithms to partition an arbitrary graph G into biconnected
components [29] and then into triconnected components [28].
Note that the output of [28] is the set of triconnected com-
ponents of G augmented with the virtual links11. Based on
these algorithms, we propose a master algorithm, Minimum
Monitor Placement (MMP), to place the minimum number
of monitors needed to identify G. As shown in Algorithm 1,
MMP ﬁrst applies rules (i) and (ii) to select all the dangling
vertices and vertices on tandems as monitors (line 1), and
then applies rules (iii) and (iv) to select additional moni-
tors in each12 triconnected/biconnected component. For a
component D, let sD denote the number of separation ver-
tices, cD the number of cut-vertices, and MD the number of
(already selected) monitors in D. MMP goes through each
triconnected and then biconnected component that contains
three or more nodes to ensure that: (i) each triconnected
component has at least three nodes that are either separa-
tion vertices or monitors (lines 6–8), and (ii) each bicon-
nected component has at least three nodes that are either
cut-vertices or monitors (lines 10–12). Finally, it selects ad-
ditional monitors as needed to ensure that the total number
of monitors is at least three (lines 14–16).

Optimality:

It is easy to see from rules (i)–(iv) that
MMP only deploys monitors when needed, and thus no al-
gorithm can achieve identiﬁability with fewer monitors; on
the other hand, we show that the monitor placement by
MMP is also suﬃcient, i.e., all link metrics can be iden-

10That is, neither of the vertices are cut-vertices.
11The algorithm in [28] does not require a separate step to
add virtual links; it adds virtual links as needed in the pro-
cess of graph partitioning.
12MMP does not depend on the order of biconnected/tricon-
nected components being considered for monitor selection.

tiﬁed from end-to-end measurements between the selected
monitors. Thus, MMP is optimal as it places the minimum
number of monitors to identify all link metrics in G, as stated
in the following theorem.

Theorem 7.1. For an arbitrary connected network G, Al-
gorithm 1 (MMP) generates the optimal monitor placement
in the sense that: (1) all link metrics in G are identiﬁable
under this placement, and (2) no placement can identify all
link metrics in G with a smaller number of monitors.

Proof. See [26].

Complexity:

In Algorithm 1,

lines 1 and 14–16 take
O(|V (G)|) time. Splitting G into biconnected (line 2) and
then triconnected components (line 4) takes O(V (G)+L(G))
time [28, 29]. Selecting monitors takes O(1) time per com-
ponent, and the counters (sTj , MTj , cBi , and MBi ) can be
computed during the splitting/selecting process. Therefore,
the entire algorithm has O(|V (G)|+|L(G)|) time complexity.
Example: Given the graph in Fig. 8(a) as input (totally
22 nodes), MMP selects 11 monitors, where nodes {h, u, v,
t, j, e} are selected by line 1, {b, g, o, p} by lines 6–8, and f
by lines 10–12. It can be veriﬁed that the resulting graph
satisﬁes the identiﬁability condition in Theorem 3.3.

7.3 Evaluation of MMP

We evaluate MMP through a set of simulations on both
randomly-generated and real network topologies. We use the
following algorithm, referred to as Random Monitor Place-
ment (RMP), as a benchmark for comparison13: Given net-
work G, randomly select κ (κ = 2, · · · , |V |) nodes as monitors
and test the identiﬁability of the resulting network using the
algorithm in Section 7.1. Generally, RMP cannot guarantee
network identiﬁability for arbitrary G and κ. Therefore, we
measure its performance by the fraction of random place-
ments achieving network identiﬁability over multiple Monte
Carlo runs.

7.3.1 Random Topologies

We ﬁrst consider synthetic topologies generated accord-
ing to four widely used random graph models: Erd¨os-R´enyi
(ER) graphs, Random Geometric (RG) graphs, Barab´asi-
Albert (BA) graphs, and Random Power Law (PL) graphs.
We randomly generate 100 graph realizations of each model14,
with each realization containing 150 nodes (i.e., |V | = 150).
The generated graphs are then input to the monitor place-
ment algorithms. We now explain the models and the cor-
responding results separately.

Erd¨os-R´enyi (ER) graph: The ER graph is a simple
random graph generated by independently connecting each
pair of nodes by a link with a ﬁxed probability p. The re-
sult is a purely random topology where all graphs with an
equal number of links are equally likely to be selected. It is
known [30] that p0 = log |V |/|V | is a sharp threshold for the
graph to be connected with high probability, which implies
a minimum value of p = 0.0334 for |V | = 150.

13To our knowledge, MMP is the ﬁrst monitor placement al-
gorithm for identifying additive link metrics by measuring
controllable, cycle-free paths. Thus, we use random place-
ment to represent the average performance of an arbitrary
monitor placement for comparison.
14All realizations are guaranteed to be connected, as we dis-
card disconnected realizations in the generation process.

400Random Geometric (RG) graph: The RG graph is fre-
quently used to model the topology of wireless ad hoc net-
works. It generates a random graph by ﬁrst randomly dis-
tributing nodes in a unit square, and then connecting each
pair of nodes by a link if their distance is no larger than
a threshold dc, which denotes node communication range.
The resulting topology contains well-connected sub-graphs
in densely populated areas and poorly-connected sub-graphs
It is known that dc ≥
in sparsely populated areas.

plog |V |/(π|V |) ensures a connected graph with high prob-

ability [31], which gives a minimum range of dc = 0.1031 for
|V | = 150.

Barab´asi-Albert (BA) graphs: The BA model [32] pro-
vides a random power-law graph generated by the following
preferential attachment mechanism. We begin with a small
connected graph G0 := ({v1, v2, v3, v4}, {v1v2, v1v3, v1v4})
and add nodes sequentially. For each new node v, we con-
nect v to nmin existing nodes, where nmin speciﬁes (a lower
bound on) the minimum node degree, such that the proba-
bility of connecting to node w is proportional to the degree
of w. If the number of existing nodes is smaller than nmin,
then v connects to all the existing nodes. The BA graph
has been used to model many naturally occurring networks,
e.g., Internet, citation networks, and social networks.

Random Power Law (PL) graphs: The BA model in-
troduces an artifact that all node degrees are lower bounded
by nmin. Alternatively, the PL graph [33] provides another
way of generating power-law graphs by directly specifying a
sequence of expected node degrees (d1, ..., d|V |) according to
the power law, i.e., di = iα (α > 0). The generation of a PL
graph is similar to that of an ER graph, except that instead
of connecting each pair of nodes with the same probability,
nodes i and j in a PL graph are connected by a link with

probability pij = didj/P|V |

k=1 dk.

We conduct simulations in two scenarios, densely-connected

graphs (Fig. 9 with parameter conﬁgurations: p = 0.039 for
ER, dc = 0.11943 for RG, nmin = 3 for BA and α = 0.42 for
PL) and sparsely-connected graphs (Fig. 10 with parameter
conﬁgurations: p = 0.0253 for ER, nmin = 2 for BA and
α = 0.32 for PL), to evaluate how graph density aﬀects the
performance of MMP and RMP. Since the number of links
n and the minimum number of monitors κMMP (computed
by MMP) vary across graph realizations, we present the av-
erage values denoted by n and κMMP for each graph model,
shown in the captions of Fig. 9 and 10. In each scenario, we
have tuned parameters of each model to generate roughly
the same average number of links. As RMP is a random-
ized algorithm, we repeat it for 2000 Monte Carlo runs to
obtain the average performance for each graph realization.
We then average the results over the 100 graph realizations
to obtain the ﬁnal results15, shown in Fig. 9 and 10.

For densely-connected graphs (Fig. 9), the probability that
RMP is able to identify all the links increases with the num-
ber of monitors κ. However, fewer than 20% of the ER,
RG, and PL graphs are identiﬁable when κ ≤ 120 (recall
|V | = 150), whereas a careful monitor deployment in the
same graphs by MMP ensures identiﬁability with signiﬁ-
cantly fewer monitors (κ < 25). Therefore, in most cases,

15For each graph realization, MMP achieves identiﬁability
with probability one for κ ≥ κMMP and zero for κ < κMMP.
Therefore, the overall probability for MMP to achieve iden-
tiﬁability using κ monitors is computed as the fraction of
graph realizations with κMMP ≤ κ.

/

P
M
R
P
M
M
y
b

 

 

y
t
i
l
i
b
a
i
f
i
t
n
e
d
i
 

g
n
i
v
e
i
h
c
a
 
.

b
o
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

 
0

 

MMP in BA
RMP in BA
MMP in ER
RMP in ER
MMP in RG
RMP in RG
MMP in PL
RMP in PL

50

100

150

Number of monitors κ

Figure 9: Comparison between RMP and MMP:
densely-connected graphs (n = 441, κMMP = 3 for BA,
n = 437, κMMP = 9.36 for ER, n = 437, κMMP = 19.42 for
PL and n = 451, κMMP = 14.52 for RG).

 

 

P
M
R
/
P
M
M
y
b
y
t
i
l
i
b
a
i
f
i
t
n
e
d
i
 
g
n
i
v
e
i
h
c
a
 
.

b
o
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

 
0

 

MMP in BA
RMP in BA
MMP in ER
RMP in ER
MMP in PL
RMP in PL

50

100

150

Number of monitors κ

Figure 10: Comparison between RMP and MMP:
sparsely-connected graphs (n = 295, κMMP = 73.51 for
BA, n = 293, κMMP = 36.76 for ER and n = 297, κMMP =
40.24 for PL).

the proposed algorithm (MMP) substantially outperforms a
randomized scheme (RMP) in the required number of moni-
tors. One exception is the BA graphs, where RMP achieves
similar performance as MMP. This can be explained as fol-
lows: When nmin = 3, further simulations show that 87.8%
of the generated BA graphs are 3-vertex-connected as each
node (except the initial nodes v2, v3, and v4) has at least
three neighbors; according to MMP, this implies that an
arbitrary placement of three monitors will achieve identi-
ﬁability, and there is no need for sophisticated placement
algorithms. Meanwhile, a comparison of the BA and the PL
models implies that the exceptional performance of RMP in
the BA model is due to the requirement that all node degrees
be lower bounded by three rather than the power law distri-
bution of node degrees, since it does not achieve the same
superior performance on PL graphs. For ER, RG, and PL

4011

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

P
M
R
y
b

 

 

y
t
i
l
i
b
a
i
f
i
t
n
e
d
i
 

g
n
i
v
e
i
h
c
a
 
.

b
o
r
P

 

0
0.95

Ebone (rM M P = 0.32)
Level3 (rM M P = 0.15)
Exodus (rM M P = 0.42)
Abovenet (rM M P = 0.64)
Tiscali (rMM P = 0.58)
Telstra (rMM P = 0.52)
Sprintlink (rM M P = 0.27)
AT&T (rM M P = 0.33)
Verio (rM M P = 0.43)

 

Table 2: Parameters of AS Topologies in Rocketfuel

AS

6461

1755

3257

3967

ISP Name

Abovenet (US)

Ebone (Europe)

Tiscali (Europe)

Exodus (US)

1221 Telstra (Australia)

7018

1239

2914

3356

AT&T (US)

Sprintlink (US)

Verio (US)

Level3 (US)

|L|

294

381

404

434

758

2078

2268

2821

5298

|V |

182

172

240

201

318

631

604

960

624

κMMP

rMMP

117

55

138

85

164

208

163

408

94

0.64

0.32

0.58

0.42

0.52

0.33

0.27

0.43

0.15

Table 3: Parameters of AS Topologies in CAIDA

0.96

0.97

0.98

0.99

1

Fraction of monitors κ/|V |

Figure 11: Comparison between RMP and MMP:
ISP topologies in Rocketfuel (15 · |V | Monte Carlo
runs, rMMP := κMMP/|V |).

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

P
M
R
y
b

 

 

y
t
i
l
i
b
a
i
f
i
t
n
e
d
i
 

g
n
i
v
e
i
h
c
a
 
.

b
o
r
P

 

0
0.95

 

AS20965 (rM M P = 0.11)
AS15706 (rM M P = 0.84)
AS9167 (rM M P = 0.62)
AS4761 (rM M P = 0.64)
AS8717 (rM M P = 0.71)

0.96

0.97

0.98

0.99

1

Fraction of monitors κ/|V |

Figure 12: Comparison between RMP and MMP:
AS topologies in CAIDA (3000 Monte Carlo runs,
rMMP := κMMP/|V |).

graphs, it is easy to form sparsely-connected subgraphs, thus
requiring more monitors to guarantee identiﬁability. Among
the four models, we observe that RMP exhibits worse per-
formance in the model with a larger κMMP. This is because
large κMMP implies poor connectivity within certain sub-
graphs, where a considerable number of nodes have to be
selected as monitors to achieve identiﬁability. Thus, RMP
will fail to achieve identiﬁability if it does not select suﬃcient
nodes in any of these subgraphs.

We perform similar simulations for sparsely-connected gra-
phs by adjusting the parameters16, shown in Fig. 10.
In
comparison with Fig. 9, both MMP and RMP perform worse
in sparsely-connected graphs, requiring a larger number of

16To generate roughly the same number of links as in the
other models, dc for the RG graph becomes much smaller

than plog |V |/(π|V |), making the probability of generating

a connected RG graph very small. Thus, the RG model is
omitted from Fig. 10.

AS

15706

9167

8717

4761

20965

|L|

874

1590

3755

3760

8283

κMMP

rMMP

|V |

325

769

276

483

0.84

0.62

0.71

0.64

0.11

1778

1266

969

968

624

110

monitors to achieve the same probability of identiﬁability.
This is because sparser graphs impose more constraints on
candidate measurement paths between a pair of monitors,
and thus more monitors are needed to identify all links. As
we compare the performance of the same graph model in
Fig. 9 and 10, we observe that all models exhibit smooth
transitions when we vary the average number of links n ex-
cept for the BA model, which has extremely good perfor-
mance for nmin = 3 but the worst performance (except for
RG) for nmin = 2. This can again be explained by exam-
ining the 3-vertex-connectivity of the generated graph real-
izations. We have veriﬁed that as we reduce nmin from 3 to
2, the probability for BA graphs to be 3-vertex-connected
suddenly drops from 87.8% to 0%, making it unlikely for an
arbitrary placement to achieve identiﬁability. In fact, when
nmin = 2, on average 49.2% of the nodes in BA graphs have
degrees less than 3, which have to be selected as monitors
by rules (i) and (ii) in MMP. Therefore, RMP will fail to
achieve identiﬁability even if it misses one of these nodes,
resulting in its poor performance.

7.3.2 Autonomous System Topologies

We now test MMP and RMP on real network topologies.
We use the Autonomous System (AS) topologies from both
the Rocketfuel [34] and the CAIDA [35] projects, which
represent IP-level connections between backbone/gateway
routers of several ASes from major Internet Service Providers
(ISPs) around the globe. The parameters of selected net-
works obtained from these two projects are listed in Tables 2
and 3, where we sort the networks according to their num-
bers of links, and rMMP := κMMP/|V | denotes the minimum
fraction of monitors computed by MMP in a network with
|V | nodes.

1) AS topologies from Rocketfuel: As shown in Ta-
ble 2, each AS in Rocketfuel corresponds to an ISP. To iden-
tify the entire network, we observe that most ISPs need a
signiﬁcant fraction of nodes to be monitors, ranging from
around 30% (Ebone, AT&T, Sprintlink) to more than 60%

402(Abovenet). This is because ISP networks contain a large
number of gateway17 routers to connect to customer net-
works or other ISPs, which appear as dangling nodes that
have to be selected as monitors (see rule (i) in Section 7.2).
We repeat RMP for 15 · |V | Monte Carlo runs for each ISP
to evaluate its average performance, measured by the frac-
tion of Monte Carlo runs achieving identiﬁability, as shown
in Fig. 11. To facilitate comparison, we mark the fraction of
monitors rMMP needed by MMP in the legends of the same
plot; note that MMP guarantees identiﬁability for each net-
work as long as κ/|V | ≥ rMMP. Here we normalize the num-
ber of monitors by the total number of nodes for the x-axis
to compare networks of various sizes. Moreover, we only
plot the results of RMP for κ/|V | ≥ 95% since RMP fails
to achieve identiﬁability in almost all the Monte Carlo runs
for all the ISPs when κ/|V | < 95%.

As in the case of synthetic graphs, we again observe a
signiﬁcant improvement of MMP over RMP. Speciﬁcally,
RMP has at most 50% probability of identifying all the links
even if 99% of the nodes are monitors, whereas MMP guar-
antees identiﬁability using at most 64% of nodes as mon-
itors. The poor performance of RMP is due to the het-
erogeneous connectivity within ISP networks, which contain
poorly-connected subnetworks that need a large fraction of
monitors, a requirement unlikely to be fulﬁlled by random
placement. We also observe that the relative performance
of MMP and RMP varies for diﬀerent networks, e.g., Level3
and Exodus experience similar performance under RMP,
whereas their minimum fractions of monitors computed by
MMP diﬀer signiﬁcantly (0.15 for Level3 and 0.42 for Exo-
dus). Intuitively, this is because RMP performance is deter-
mined by the relative number of valid placements, i.e., the

fraction of all the (cid:0)|V |

identiﬁability, whereas MMP performance is determined by
the smallest κ for which this fraction is non-zero.

κ (cid:1) candidate placements that achieve

2) AS topologies from CAIDA: Because ISP topolo-
gies have evolved since the Rocketfuel project, we repeat
the above evaluation on a recent data set obtained by the
CAIDA project; see results in Table 3 and Fig. 12. Com-
pared with the ASes in Rocketfuel data set, we notice that
ASes with similar average node degrees (i.e., 2|L|/|V |) in
CAIDA data set require a larger fraction of monitors for
complete identiﬁcation, e.g., rMMP = 0.71 for AS8717 with
average node degree 4.2 in Table 3, whereas rMMP = 0.32 for
AS1755 (Ebone) with average node degree 4.4 in Table 2.
This is because ASes in CAIDA data set tend to be more
skewed in connectivity, with more densely-connected cores
and a larger number of dangling nodes (likely the gateways
for peer/customer connections). As all dangling nodes have
to be selected as monitors, such skewed connectivity leads to
a higher ratio of monitors although the average node degree
is not necessarily lower. Meanwhile, comparison with RMP
(3000 Monte Carlo runs), presented in Fig. 12, shows that
the improvement of MMP over RMP remains signiﬁcant. As
in Fig. 11, RMP again exhibits poor performance for all the
ASes considered in Fig. 12, which has less than 35% proba-
bility of identifying all links even if the fraction of monitors
κ/|V | is as large as 0.99. In particular, for almost all the

17In real networks, monitor selection may be constrained to
a subset of nodes, e.g., gateways. Under such constraint, the
issue of achievable number of identiﬁable links (i.e., partial
network identiﬁability) is left for future work.

networks (except for AS20965) in Fig. 12, RMP fails to iden-
tify all the links in more than 60% of the Monte Carlo runs
even if all but one node are monitors. In contrast, carefully
selected monitors by MMP can guarantee complete identiﬁ-
cation while substantially reducing the required number of
monitors.

8. CONCLUSION

In this paper, we study the fundamental conditions on
network topology and placement of monitors for identifying
additive link metrics using end-to-end measurements along
simple paths between monitors. We show that with two
monitors, it is impossible to identify all the link metrics,
but is possible to identify the metrics of interior links that
are at least one hop away from the monitors, for which we
derive the necessary and suﬃcient conditions in terms of
edge/vertex connectivity of the network topology. We fur-
ther study the case of three or more monitors and derive the
corresponding necessary and suﬃcient conditions for iden-
tifying all the link metrics. We show that these conditions
are not only useful for testing network identiﬁability under a
given monitor placement, but also enable an eﬃcient moni-
tor placement algorithm that guarantees identiﬁability using
the minimum number of monitors. Our evaluations on both
random and real network topologies verify that the proposed
algorithm signiﬁcantly outperforms a baseline solution.

9. REFERENCES

[1] F. Lo Presti, N. Duﬃeld, J. Horowitz, and D. Towsley,

“Multicast-based inference of network-internal delay
distributions,” IEEE/ACM Transactions on
Networking, vol. 10, no. 6, pp. 761–775, Dec. 2002.
[2] A. B. Downey, “Using pathchar to estimate internet

link characteristics,” in IEEE SIGCOMM , 1999.

[3] G. Jin, G. Yang, B. Crowley, and D. Agarwal,

“Network characterization service (ncs),” in IEEE
HPDC , 2001.

[4] M. Coates, A. O. Hero, R. Nowak, and B. Yu,
“Internet tomography,” IEEE Signal Processing
Magzine, vol. 19, pp. 47–65, 2002.

[5] E. Lawrence and G. Michailidis, “Network

tomography: A review and recent developments,”
Frontiers in Statistics, vol. 54, 2006.

[6] O. Gurewitz and M. Sidi, “Estimating one-way delays

from cyclic-path delay measurements,” in IEEE
INFOCOM , 2001.

[7] Y. Chen, D. Bindel, and R. H. Katz, “An algebraic
approach to practical and scalable overlay network
monitoring,” in ACM SIGCOMM , 2004.

[8] A. Chen, J. Cao, and T. Bu, “Network Tomography:

Identiﬁability and Fourier domain estimation,” in
IEEE INFOCOM , 2007.

[9] “Open networking foundation.” [Online]. Available:

http://www.opennetworkingfoundation.org

[10] N. Duﬃeld and F. Lo Presti, “Multicast inference of

packet delay variance at interior network links,” in
IEEE INFOCOM , 2000.

[11] Y. Xia and D. Tse, “Inference of link delay in

communication networks,” IEEE Journal of Selected
Areas in Communications, 2006.

403[12] A. Adams, T. Bu, T. Friedman, J. Horowitz,

D. Towsley, R. Caceres, N. Duﬃeld, F. Presti, and
V. Paxson, “The use of end-to-end multicast
measurements for characterizing internal network
behavior,” IEEE Communications Magazine, vol. 38,
no. 5, pp. 152–159, May 2000.

the Hungarian Academy of Sciences, vol. 5, pp. 17–61,
1960.

[31] P. Gupta and P. Kumar, “Critical power for

asymptotic connectivity in wireless networks,”
Stochastic Analysis, Control, Optimization and
Applications, pp. 547–566, 1999.

[13] R. Castro, M. Coates, G. Liang, R. Nowak, and B. Yu,

[32] R. Albert and A.-L. Barab´asi, “Statistical mechanics

“Network tomography: recent developments,”
Statistical Science, 2004.

of complex networks,” Reviews of Modern Physics,
vol. 74, pp. 47–97, Jan. 2002.

[14] M.-F. Shih and A. Hero, “Unicast inference of network

[33] F. Chung and L. Lu, Complex Graphs and Networks.

link delay distributions from edge measurements,” in
IEEE ICASSP , 2001.

[15] T. Bu, N. Duﬃeld, and F. Lo Presti, “Network

tomography on general topologies,” in ACM
SIGMETRICS , 2002.

[16] M. Firooz and S. Roy, “Network tomography via

compressed sensing,” in IEEE GLOBECOM , 2010.

[17] W. Xu, E. Mallada, and A. Tang, “Compressive
sensing over graphs,” in IEEE INFOCOM , 2011.

[18] S. Ahuja, S. Ramasubramanian, and M. Krunz,

“SRLG failure localization in all-optical networks
using monitoring cycles and paths,” in IEEE
INFOCOM , 2008.

[19] A. Gopalan and S. Ramasubramanian, “On identifying
additive link metrics using linearly independent cycles
and paths,” IEEE/ACM Transactions on Networking,
vol. PP, no. 99, 2011.

[20] N. Alon, Y. Emek, M. Feldman, and M. Tennenholtz,

“Economical graph discovery,” in Symposium on
Innovations in Computer Science, 2011.

[21] L. Ma, T. He, K. Leung, D. Towsley, and A. Swami,

“Eﬃcient identiﬁcation of additive link metrics via
network tomography,” in ICDCS , 2013.

[22] Y. Bejerano and R. Rastogi, “Robust monitoring of

link delays and faults in IP networks,” in IEEE
INFOCOM , 2003.

[23] R. Kumar and J. Kaur, “Practical beacon placement

for link monitoring using network tomography,” IEEE
JSAC , vol. 24, no. 12, pp. 2196–2209, 2006.

[24] J. D. Horton and A. Lopez-Ortiz, “On the number of

distributed measurement points for network
tomography,” in ACM/USENIX IMC , 2003.

[25] R. Diestel, Graph theory. Springer-Verlag Heidelberg,

New York, 2005.

[26] L. Ma, T. He, K. K. Leung, A. Swami, and

D. Towsley, “Identiﬁcation of additive link metrics:
Proof of selected theorems,” Technical Report,
Imperial College, London, UK., July 2012. [Online].
Available: http://www.commsp.ee.ic.ac.uk/
%7elm110/pdf/MaTechreportJul12.pdf

[27] R. E. Tarjan, “A note on ﬁnding the bridges of a

graph,” Information Processing Letters, pp. 160–161,
1974.

[28] J. E. Hopcroft and R. E. Tarjan, “Dividing a graph

into triconnected components,” SIAM Journal on
Computing, vol. 2, pp. 135–158, 1973.

[29] R. Tarjan, “Depth-ﬁrst search and linear graph

algorithms,” SIAM Journal on Computing, vol. 1, pp.
146–160, 1972.

[30] P. Erd¨os and A. R´enyi, “On the evolution of random
graphs,” Publications of the Mathematical Institute of

American Mathematical Society, 2006.

[34] “Rocketfuel: An ISP topology mapping engine,”

University of Washington, 2002. [Online]. Available:
http://www.cs.washington.edu/research/networking/
rocketfuel/

[35] “Macroscopic Internet Topology Data Kit (ITDK),”

The Cooperative Association for Internet Data
Analysis (CAIDA), Apr. 2013. [Online]. Available:
http://www.caida.org/data/active/
internet-topology-data-kit/

APPENDIX

A. LEMMAS AND PROPOSITIONS

Lemma A.1. Suppose two monitors are deployed in G to
If link l is a bridge in G with one
measure simple paths.
monitor on each side, as illustrated in Fig. 13, then neither
l nor its adjacent links are identiﬁable.

Proof. See [26].

m1
…

ak1

a1

a2

l

r

s

b1

b2

bk2

…

m2

(a)

m1

l

r

…

a2

b2

…

a1
b1

k1a

bk2

m2

(b)

Figure 13: Two cases of bridge link l: (a) interior
bridge, (b) exterior bridge.

Proposition A.2. Using two monitors measuring simple
paths, if all link metrics in the interior graph of G are iden-
tiﬁable, then G + m1m2 is 3-vertex-connected.

Proof. See [26].

Proposition A.3. Given a graph G employing κ (κ ≥ 3)
monitors, the extended graph Gex of G satisﬁes Conditions
1(cid:13) (i.e., Gex − l is 2-edge-connected for each link l in G) if
and only if Gex is 3-edge-connected.

Proof. See [26].

Proposition A.4. Given a graph G employing κ (κ ≥ 3)
monitors, the extended graph Gex of G satisﬁes Conditions
2(cid:13) (i.e., Gex + m′
2 is 3-vertex-connected) if and only if
Gex is 3-vertex-connected.

1m′

Proof. See [26].

404