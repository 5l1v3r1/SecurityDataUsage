An Analysis of the Privacy and Security Risks of

Android VPN Permission-enabled Apps

Muhammad Ikram1,2, Narseo Vallina-Rodriguez3, Suranga Seneviratne1,

Mohamed Ali Kaafar1, Vern Paxson3,4

1Data61, CSIRO

2UNSW 3ICSI

4UC Berkeley

ABSTRACT
Millions of users worldwide resort to mobile VPN clients to
either circumvent censorship or to access geo-blocked con-
tent, and more generally for privacy and security purposes.
In practice, however, users have little if any guarantees about
the corresponding security and privacy settings, and perhaps
no practical knowledge about the entities accessing their mo-
bile trafﬁc.

In this paper we provide a ﬁrst comprehensive analysis
of 283 Android apps that use the Android VPN permission,
which we extracted from a corpus of more than 1.4 million
apps on the Google Play store. We perform a number of
passive and active measurements designed to investigate a
wide range of security and privacy features and to study the
behavior of each VPN-based app. Our analysis includes in-
vestigation of possible malware presence, third-party library
embedding, and trafﬁc manipulation, as well as gauging user
perception of the security and privacy of such apps. Our ex-
periments reveal several instances of VPN apps that expose
users to serious privacy and security vulnerabilities, such as
use of insecure VPN tunneling protocols, as well as IPv6 and
DNS trafﬁc leakage. We also report on a number of apps
actively performing TLS interception. Of particular con-
cern are instances of apps that inject JavaScript programs for
tracking, advertising, and for redirecting e-commerce trafﬁc
to external partners.

1.

INTRODUCTION

Since the release of Android version 4.0 in October 2011,
mobile app developers can use native support to create VPN
clients through the Android VPN Service class. As opposed
to the desktop context, where an app needs root access to
create virtual interfaces, Android app developers only have

Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14-16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987471

to request the BIND_VPN_SERVICE permission (for sim-
plicity, the “VPN permission”) to create such clients.

Android’s ofﬁcial documentation highlights the serious
security concerns that the VPN permission raises: it allows
an app to intercept and take full control over a user’s traf-
ﬁc [60]. Many apps may legitimately use the VPN permis-
sion to offer (some form of) online anonymity or to enable
access to censored content [87]. However, malicious app de-
velopers may abuse it to harvest users’ personal information.
In order to minimize possible misuse, Android alerts users
about the inherent risks of the VPN permission by display-
ing system dialogues and notiﬁcations [60]. A large fraction
of mobile users may however lack the necessary technical
background to fully understand the potential implications.

The use of the VPN permission by mobile apps, many of
which have been installed by millions of users worldwide,
remains opaque and undocumented. In this paper, we con-
duct in-depth analysis of 283 Android VPN apps extracted
from a population of 1.4M Google Play apps. In our efforts
to illuminate and characterize the behavior of VPN apps and
their impact on user’s privacy and security, we develop a
suite of tests that combines passive analysis of the source
code (cf. Section 4) with custom-built active network mea-
surements (cf. Section 5). The main ﬁndings of our analysis
are summarized as follows:
• Third-party user tracking and access to sensitive An-
droid permissions: Even though 67% of the identiﬁed
VPN Android apps offer services to enhance online pri-
vacy and security, 75% of them use third-party tracking
libraries and 82% request permissions to access sensitive
resources including user accounts and text messages.

• Malware presence: While 37% of the analyzed VPN
apps have more than 500K installs and 25% of them re-
ceive at least a 4-star rating, over 38% of them contain
some malware presence according to VirusTotal [57]. We
analyze the public user reviews available on Google Play
for all the VPN apps to sense whether their users are aware
of possible malicious activities in their apps. Our analysis
reveals that only a marginal number of VPN users have
publicly raised any security and privacy concerns in their
app reviews.

• Trafﬁc interception modes: The hosting infrastructure
of VPN apps, which is heavily concentrated in the USA,

349remains opaque for the end-user. 18% of the apps do not
mention the entity hosting the terminating VPN server.
Our network measurements also suggest that 16% of the
analyzed apps may forward trafﬁc through other partici-
pating users in a peer-forwarding fashion rather than us-
ing machines hosted in the cloud. This forwarding model
raises a number of trust, security and privacy concerns for
participating users. Finally, 4% of the analyzed VPN apps
use the VPN permission to implement localhost proxies
to intercept and inspect user trafﬁc locally, primarily for
antivirus and trafﬁc ﬁltering purposes.

• (Lack of) Encryption and trafﬁc leaks:

18% of the
VPN apps implement tunneling protocols without encryp-
tion despite promising online anonymity and security to
their users. In fact, approximately 84% and 66% of the
analyzed VPN apps do not tunnel IPv6 and DNS traf-
ﬁc through the tunnel interface respectively due to lack
of IPv6 support, misconﬁgurations or developer-induced
errors. Both the lack of strong encryption and trafﬁc leak-
ages can ease online tracking activities performed by in-
path middleboxes (e.g., commercial WiFi APs harvesting
user’s data) and by surveillance agencies.

• In-path proxies and trafﬁc manipulation: 16% of the
analyzed VPN apps deploy non-transparent proxies that
modify user’s HTTP trafﬁc by injecting and removing
headers or performing techniques such as image transcod-
ing. However, the artifacts implemented by VPN apps
go beyond the typical features present in HTTP proxies.
We identiﬁed two VPN apps actively injecting JavaScript
code on user’s trafﬁc for advertisement and tracking pur-
poses and one of them redirects e-commerce trafﬁc to ex-
ternal advertising partners.

• TLS interception: Four of the analyzed VPN apps com-
promise users’ root-store and actively perform TLS inter-
ception in the ﬂight. Three of these apps claim providing
trafﬁc acceleration services and selectively intercept traf-
ﬁc to speciﬁc online services like social networks, bank-
ing, e-commerce sites, email and IM services and analyt-
ics services.

Our results show that — in spite of the promises for pri-
vacy, security and anonymity given by the majority of VPN
apps — millions of users may be unawarely subject to poor
security guarantees and abusive practices inﬂicted by VPN
apps. However, this study has not answered several inter-
esting research questions such as trafﬁc discrimination [86]
and the detection of side-channels to extract additional pri-
vate information from user’s phones.
2. ANDROID’S VPN PERMISSION

Google introduced native platform support for VPN
clients through the VPN Service base class and its as-
sociated BIND_VPN_SERVICE permission in Android
version 4.0 [60]. For simplicity, we will reference the
BIND_VPN_SERVICE permission as the “VPN permis-
sion”.

Vendor
Cisco
Juniper
Samsung
KNOX

Custom Permission

com.cisco.anyconnect.vpn.android.MODIFY_VPN
com.juniper.permission.JUNIPER_VPN_ACCESS

android.permission.sec.MDM_VPN

android.permission.sec.MDM_ENTERPRISE_VPN

Table 1: Custom VPN permissions for MDM apps.

The BIND_VPN_SERVICE permission is a powerful
Android feature that app developers can misuse or abuse. It
allows the requesting app to intercept, manipulate and for-
ward all user’s trafﬁc to a remote proxy or VPN server of
their choice or to implement proxies in localhost [97].

Android’s VPN API exposes a virtual network interface
to the requesting app and — if the developer conﬁgures cor-
rectly the routing tables — routes all the device’s trafﬁc to
it. Likewise, each write operation to the virtual interface
injects a packet just like it was received from the external
interface. As for any other Android permission, app devel-
opers must explicitly declare access to the VPN permission
in the app’s AndroidManifest ﬁle [2] but Android lim-
its the creation and ownership of the virtual interface to only
one app at a given time.

Due to the exceptional security and privacy risks of al-
lowing third-party apps to intercept all user’s trafﬁc, An-
droid generates two warnings to notify users whenever an
app creates a virtual interface using the VPN permission: (i)
a system dialog seeking users approval to create a virtual
interface, and (ii) a system-generated notiﬁcation that in-
forms users as long as the VPN interface remains active [60].
However, average mobile users may not fully understand,
possibly due to the lack of technical background, the conse-
quences of allowing a third-party app to read, block and/or
modify their trafﬁc.
Custom VPN permissions: Android’s native VPN support
has enabled proprietary VPN solutions for enterprise clients
such as Cisco AnyConnect [5] and Juniper Junos [28] tech-
nologies. Enterprise solutions, also known as Mobile De-
vice Management solutions or MDM, implement their own
tunneling protocols on top on Android’s VPN permission to
secure and simplify remote access to enterprise or private
networks. Samsung’s KNOX SDK [101] is a different incar-
nation of proprietary MDM solutions. In that case, Samsung
takes advantage from its position as an Android OS vendor
to completely replace Android’s VPN implementation at the
ﬁrmware level with their own solution.

Android’s permission model allows MDM providers to
share their VPN technologies with other apps by deﬁning
custom permissions. These are listed in Table 1. The re-
questing app must declare the associated custom permission
on its manifest and the app providing the proprietary tech-
nology must be already installed on the device. In the case of
Samsung’s KNOX-enabled devices, the app developer wish-
ing to incorporate any KNOX feature in its app must ﬁrst
enroll on Samsung’s KNOX program and then request ac-
cess to the proprietary SDK [29, 45]. As a result, Android
VPN apps without KNOX support may operate incorrectly
on many Samsung devices. The security guarantees that ap-

350ply for the ofﬁcial VPN permission also apply for custom
VPN permissions as the MDM solution is responsible to re-
quest Android’s BIND_VPN_SERVICE permission.

3. DISCOVERING VPN APPS ON

GOOGLE PLAY

This section describes our method for identifying and
characterizing Android VPN-enabled apps on Google Play.
3.1 Detection Method

App pricing model

# of apps
(N = 283)

# of apps

analyzed in § 5

Free VPN apps with Free Services
Free VPN apps with Premium Services
Table 2: Number of VPN apps identiﬁed with our detection
method.

130
153

130
20

Identifying VPN-enabled apps on Google Play is not a
trivial task. The list of permissions available on a given app’s
Google Play proﬁle does not necessarily contain the use of
the VPN permission by the app.

App developers can request the Android VPN permissions
in their app AndroidManifest ﬁle in two different ways:
they can request the VPN permission within the scope of the
whole app or restrict its use to a speciﬁc activity or service1
using the <activity> and <service> tags respectively. This
subtle difference has an impact on any method aiming to de-
tect VPN-enabled apps: when a developer declares the per-
mission within the <service> tag, the VPN permission does
not show up in the list of Android permissions available on
Google Play. Consequently, in order to correctly identify
VPN-enabled apps at scale — either those using Android’s
ofﬁcial permission or any of the custom VPN permissions
listed in Table 1 —, we must crawl Google Play to down-
load each app’s executable and then decompile it to inspect
their AndroidManifest ﬁle in detail.

We rely on multiple tools to fetch each app’s metadata
(e.g., app description, installs, developer, user reviews and
app rating) and to download their executables. For free apps,
we use Google Play Unofﬁcial Python API [21] whereas for
paid apps, we use Raccoon APK Downloader to obtain the
binaries after paying their required fee [43]. Finally, after
having downloaded each app’s executable, we use ApkTool2
to decompile, extract and analyze each app’s source code
and their AndroidManifest ﬁle.

To increase our app coverage and maximize the num-
ber of detected VPN apps, we implemented a Google Play
crawler that uses two complementary seeds. First, we ob-
tain the app ID (or package name) from the top 100 apps
for four Google Play categories likely to contain VPN and
MDM apps: tools, communication, business and productiv-
ity. Second, we leverage Google Play’s search feature to ﬁnd
apps containing VPN-related keywords like “vpn”, “virtual
private network”, “security”, “censorship”, “anonymity” or
“privacy” in their app description. Afterwards, our crawler
fetches each app’s metadata and executables. Our crawler
follows a breadth-ﬁrst-search approach for any other app
considered as “similar” by Google Play and for other apps

1Android apps can be composed of multiple activities (i.e., app
components that run on the foreground on a single screen and re-
quire user interaction) and services (i.e., app components that per-
form long-running operations in the background) [3]. Permission
requests can be limited to speciﬁc app components.
2https://ibotpeaches.github.io/apktool

Figure 1: Evolution of VPN-enabled apps’ availability on
Google Play.

published by the same developer. In total, this method has
allowed us to survey 1,488,811 apps during a three week pe-
riod in September 2015.

Our method has allowed us to identify 283 free
Android apps requesting the VPN permission in their
AndroidManifest ﬁles. 153 of free VPN apps require
the user to perform in-app purchases in order to use their
online VPN services. We refer to such apps as “premium
VPN apps” and they typically offer weekly, monthly, quar-
terly and yearly subscriptions. In the case of paid apps, we
relied on information available on the app description as sig-
nals to identify potential paid VPN apps. This is the result of
our inability to pay the fee for downloading the executables
of each paid app listed on Google Play. This approach has
allowed us to ﬁnd 10 potential VPN paid apps. However, af-
ter paying their fee to download their executables, only one
of them actually requested the VPN permission. Therefore,
we decided to exclude paid VPN apps from this study.

Our dynamic network analysis (presented in Section 5)
covers the 130 free apps and 20 premium VPN apps. Un-
fortunately, we could not inspect the entirety of premium
VPN apps as most of them are full MDM solutions which
require dedicated IT and cloud support. Table 2 summarizes
the scope of our static and dynamic analysis.
3.2 The Rise of VPN Apps

This section studies the presence of VPN-enabled apps
available for download on Google Play over time. Given
that Google Play does not report the actual release date of
the apps but their last update, we use the date of their ﬁrst
comment as a proxy for their release date. For 9 apps with-
out any user reviews as of this writing, we determine the
approximate release date by their last update.

Figure 1 shows the steady increase of VPN apps’ listed
on Google Play since November 2011 (Android 4.0 release).
Note that our analysis only considers apps listed on Google
Play as of September 2015 so it excludes possible VPN apps
removed from Google Play. During the 2-year period that
spans between November 2011 and November 2013, the
number of VPN apps increased ten-fold.

0100200300Nov‘09May‘10Nov‘10May‘11Nov‘11May‘12Nov‘12May‘13Nov‘13May‘14Nov‘14May‘15Nov‘15Cummulative # of Apps  Free VPN AppsPremium VPN AppsAll VPN Apps351App Category
VPN Clients
Enterprise
Trafﬁc Optimizer
Communication Tools
Trafﬁc ﬁlters
Trafﬁc logger
Antivirus
Tor clients
Other

% of Apps (N = 283)

67
10
4
3
2
2
1
1
10

Table 3: Manual classiﬁcation of VPN apps by their purpose.

The analysis reveals that a small group of MDM apps like
Juniper’s Junos Pulse and Afaria [20] were already listed on
Google Play years before the release of Android v4.0 (rep-
resented in the graph with the vertical line). Unfortunately,
we cannot obtain the deprecated binaries of these apps for
further inspection to report how they implemented (or not)
their VPN solutions before Android provided native support.
We speculate that they have relied either on users to manu-
ally enter the VPN server on Android’s system settings or on
users with rooted phones.

During the preparations for the ﬁnal manuscript on Au-
gust 5, 2016, we noticed that 49 out of 283 analyzed VPN
apps were no longer listed on Google Play either as a re-
sult of Google’s vetting process, user complaints, or due to
developer decisions.

3.3 VPN App Classiﬁcation

VPN apps can provide a wide range of services to the
user. Unfortunately, Google Play’s categories (e.g., tools and
games) are too broad to capture the actual purpose of the app.
In order to identify their actual intended functionality, two
co-authors inspected and labeled each VPN app manually
according to their Google Play app description into 9 cate-
gories that we list in Table 3. In case that an app advertises
more than one functionality, we choose the most relevant
one. We found no disagreements in the labeling process.

67% of Android VPN apps claim to provide traditional
VPN services (labeled here as “VPN clients”) including en-
hanced security and privacy, anti-surveillance or tunnels to
access geo-ﬁltered or censored content. Note that we con-
sider Tor clients (e.g., Orbot [38], Globus VPN [62] and
TorGuard VPN client [56]) as a separate category. The sec-
ond most common category is enterprise MDM solutions
(10% of apps) followed by trafﬁc optimization tools (e.g.,
DashNet [9], 4% of apps) and communication tools (3%
of apps) for tethering or for creating mesh networks and
VLANs (typically for online gaming [33]).

Antivirus software apps (Qihoo 360 [42], Dr.Web Secu-
rity Space [13] and TrendMicro’s Mobile Security & An-
tivirus [30]) may also leverage the VPN permission to per-
form trafﬁc analysis (e.g., malware detection), to block ma-
licious trafﬁc and to securely forward user’s trafﬁc through
trusted servers when users connect through insecure or ques-
tionable WiFi networks. Other uses of the VPN permis-
sion are trafﬁc ﬁlters and trafﬁc loggers (e.g., NoRoot Fire-

wall [34]) and even apps for securing online payments (e.g.,
Fast Secure Payment [17]).

4. STATIC ANALYSIS

In this section, we analyze the source code for each VPN
Android app using static analysis. In particular, we report
on applications requesting sensitive permission analysis, the
presence of tracking libraries in app’s decompiled source
code and the presence of malware activity according to the
online antivirus aggregator, VirusTotal3.
4.1 Permission Analysis

We investigate how VPN-enabled apps request other An-
droid permissions to access sensitive system resources. We
exclude network-related permissions like Internet access
which are inherent to any VPN client.

Figure 2 compares the permissions requested by VPN-
enabled apps with those requested by the top-1,000 free
non-VPN Android apps4, which we included for reference.
We use the method-to-permission mapping provided by
Au et al. [69] to investigate the source code segments in-
voking the methods protected by each Android permission.
For instance, in the case of apps requesting the READ_SMS
permission, we investigate apps’ calls to associated meth-
ods such as preSendSmsWorker (a method used to send
SMS which informs the user about the intended or wanted
text) and handleSmsReceived (a method that handles
formatting-related aspects in received SMS) in order to de-
termine the actual use of the permission by the app.

There are Android permissions that are more common
on VPN apps than in other app categories. For instance,
antivirus and MDM solutions request READ_LOGS per-
mission to inspect other apps’ activities [2]. However,
we observe that standard VPN clients like DroidVPN [12]
and tigerVPN [54] also request permission to read sys-
tem logs. Android documentation [2] ﬂags this permis-
sion as highly sensitive as any app developer may care-
lessly misuse Android’s logging capabilities and (uninten-
tionally) expose personal information (including passwords)
to any other apps requesting it. Similarly, antivirus apps
request READ_EXTERNAL_STORAGE permission to check
the stored ﬁles for possible virus and malware activity.

Many other permissions listed in Figure 2 may appear un-
usual requirements for VPN apps. However, VPN apps may
provide additional and richer features to their users beyond a
typical VPN tunnel. For each case, we manually checked the
legitimacy of these requests by inspecting the API calls ex-
ecuted by the apps and checking the description for related
functionalities without ﬁnding any evidence for deliberate
abuse of granted permissions. For instance, we found that
antivirus apps as well as spyware VPN apps (which we fur-
ther investigate in Section 4.3) request the READ_SMS per-
mission to read text messages and, in the case of antivirus
apps, to scan them for possible malware presence. Similarly,
apps requesting READ_CONTACTS incorporate functions in
3https://www.virustotal.com
4According to Google Play’s ranking as of March 30, 2016.

352Figure 2: Detailed comparison of Android permissions (x-axis) requested by VPN apps and the top-1,000 non-VPN apps.

# Trackers
0
1
2
3
4
≥5

Premium

65%
13%
10%
12%
2%
5%

VPN Apps

Free
28%
10%
10%
25%
8%
18%

All
33%
8%
7%
13%
4%
8%

Free

non-VPN Apps

19%
11%
15%
23%
16%
17%

Table 4: Distribution of third party trackers embedded in
VPN apps.

the likes of blocking text and calls from speciﬁc phone num-
bers or sharing features through SMS or email.
4.2 Tracking Libraries in VPN Apps

With the help of ApkTool, we examine the presence of
embedded third-party libraries (in the form of external jar
ﬁles) for analytics, tracking or advertising purposes in the
source code of each VPN-enabled app. In order to identify
which libraries are associated with tracking services, we use
the manually curated list of 127 tracking and advertising li-
braries compiled by Seneviratne et al. [103]. Therefore, we
consider our results as a lower bound of third-party tracking
libraries presence in VPN apps.

Table 4 compares the number of trackers used by VPN-
enabled apps with the presence of trackers in the reference
set of 1,000 free non-VPN apps. 67% of the VPN apps em-
bed at least one third-party tracking library in their source
code. The use of tracking libraries in VPN apps is signif-
icantly lower than in the top 1,000 non-VPN apps with an
almost 81% of the latter having at least one embedded track-
ing library. The fact that 65% of the premium VPN apps do
not have any tracking library embedded (as opposed to only
28% of the free VPN apps) suggests that premium apps do
not rely as much as free apps on revenues from advertising
and analytics services.

Since most VPN apps intend to provide online anonymity
(Section 3.3), the lower presence of tracking libraries is ac-
tually meaningful. However, we identiﬁed the presence of at
least one tracking library in 75% of the free VPN apps claim-
ing to protect users’ privacy. 8% of all VPN apps have more
than ﬁve. In particular, two VPN apps (Flash Free VPN [18]
and Betternet [19]), which combined have more than 6M

Class Rating # Installs AV-rank
# App ID
Prem.
1 OkVpn [35]
24
Prem.
2 EasyVpn [15]
22
Free
3 SuperVPN [52]
13
Free
4 Betternet [19]
13
Free
5 CrossVpn [7]
11
Free
6 Archie VPN [4]
10
7 HatVPN [22]
Free
10
8 sFly Network Booster [48] Prem.
10
9 One Click VPN [36]
Free
6
10 Fast Secure Payment [17]
Prem.
5
Table 5: VPN Apps with a VirusTotal AV-rank ≥ 5.

1K
50K
10K
5M
100K
10K
5K
1K
1M
5K

4.2
4.0
3.9
4.3
4.2
4.3
4.0
4.3
4.3
4.1

installs, have the highest number of embedded tracking li-
braries: 11 and 14 respectively.

Figure 3 ranks the top-25 popular trackers in all analyzed
VPN apps. Google Ads and Google Analytics are the most
popular trackers among our corpus of VPN apps. A closer
examination at the long-tail of the distribution reveals how-
ever that the least popular third-party tracking libraries in
our reference set of 1000 apps are instead more common
in VPN apps. For instance, VPN apps like SurfEasy [53]
and Ip-Shield VPN [27] integrate libraries like NativeX5 and
Appﬂood6 for monetizing their apps with targeted ads.
4.3 Malware Analysis

Malware components may be designed to circumvent a
speciﬁc antivirus (AV) tool [113]. As a result, it is imperative
to rely upon multiple AV scanners and datasets to effectively
identify the presence of malware on mobile VPN apps. We
leverage the capabilities offered by VirusTotal’s public API
to automatize our malware detection process. VirusTotal is
an online solution which aggregates the scanning capabili-
ties provided by more than 100 AV tools, scanning engines
and datasets. It has been commonly used in the academic
literature to detect malicious apps, executables, software and
domains [84, 68, 85].

After completing the scanning process for a given app,
VirusTotal generates a report that indicates which of the par-
ticipating AV scanning tools detected any malware activity
in the app and the corresponding malware signature (if any).
Given that a single scanning tool may produce false posi-

5http://www.nativex.com
6http://www.appﬂood.com

020406080WRITE_EXTERNAL_STORAGERECEIVE_BOOT_COMPLETEDREAD_PHONE_STATEREAD_EXTERNAL_STORAGEGET_ACCOUNTSBILLINGGET_TASKSACCESS_COARSE_LOCATIONRECEIVECHANGE_WIFI_STATEWRITE_SETTINGSACCESS_FINE_LOCATIONSYSTEM_ALERT_WINDOWREAD_LOGSREAD_CONTACTSKILL_BACKGROUND_PROCESSESUSE_CREDENTIALSREAD_SETTINGSREAD_GSERVICESMANAGE_ACCOUNTSREAD_SMSWRITE_CONTACTSRECEIVE_SMSCALL_PHONEREAD_HISTORY_BOOKMARKSWRITE_SMSSEND_SMSWRITE_HISTORY_BOOKMARKSDISABLE_KEYGUARDMDM_SECURITYACCESS_SUPERUSERENTERPRISE_DEVICE_ADMINMDM_INVENTORYCHECK_LICENSE% of AppsAll VPN AppsFree non−VPN AppsFree VPN AppsPremium VPN Apps353Figure 3: Top 25 third-party tracking libraries (x-axis) in VPN and non-VPN apps.

tives [113, 57], we rely on the “AV-rank” metric (i.e., the
number of afﬁliated AV tools that identiﬁed any malware
activity) to reason about the maliciousness of an app. The
study by Arp et al. [68] considered an “AV-Rank" ≥ 2 as a
valid metric for malware presence on mobile apps. Instead,
we increase the ‘AV-rank” to a value ≥ 5 to set a more con-
servative threshold for malware detection.

38% of the analyzed VPN apps have at least one positive
malware report according to VirusTotal but only 4% of them
have an “AV-rank” higher than 5. Table 5 ranks the top-
10 VPN apps by their AV-rank. For each app, we include
their Google Play rating and the number of install for refer-
ence. The malware signatures for those apps correspond to
5 different type of malware: Adware (43%), Trojan (29%),
Malvertising (17%), Riskware (6%) and Spyware (5%).

OkVpn and EasyVpn, both implemented by the same app
developer, incorporate Adware on their source code and both
of them request the intrusive SYSTEM_ALERT_WINDOW
permission which allows the requesting app to draw win-
dow alerts (in various forms as in the case unwanted ads)
on top of any other active app. sFly Network Booster, traf-
ﬁc optimization VPN app, provides accelerated, worldwide
content access through its dynamic routing and cloud-based
accelerating system. It incorporates Spyware and requests
the privacy sensitive READ_SMS and SEND_SMS permis-
sions to read users’ text messages and, potentially, send text
messages to premium-rate numbers. OkVpn, EasyVPN, and
sFly Network Booster are three of the 49 VPN apps that were
not listed on Google Play as of August 2016 (Section 3.2).

According to the number of installations of these apps,
millions of users appear to trust VPN apps despite their po-
tential maliciousness. In fact, the high presence of malware
activity in VPN apps that our analysis has revealed is worri-
some given the ability that these apps already have to inspect
and analyze all user’s trafﬁc with the VPN permission.
4.4 User Awareness Analysis

The previous subsection identiﬁed instances of VPN apps
with malware presence. This section takes a user-centric per-
spective to understand if they publicly report on their Google
Play reviews any of the privacy and security issues which
could be present on VPN apps.

Our analysis reveals that VPN apps receive high user rat-
ings: 37% of the VPN apps have more than 500K installs
and 25% of them have at least a 4-star rating as shown in
Figure 4. We cannot distinguish whether Google Play’s pos-
itive installs and reviews are organic or if they were acquired
using paid services to promote app installs7.
7e.g., http://liftoff.io

Figure 4: Distribution of app rating vs. installs per VPN app.

% of negative reviews (N = 4, 593)

Complaint Category
Bugs & battery life
Abusive permissions
Privacy concerns
Security concerns
Malware/fraud reports
Table 6: Classiﬁcation of negative user reviews for the VPN
apps with more than 1M installs in in Google Play.

30%
0.5%
0.3%
0.4%
0.2%

To better understand whether real VPN users publicly re-
port any security or privacy concerns after installing and us-
ing a given VPN app, we analyze (with manual supervision)
4,593 app reviews with low ratings (i.e., one and two stars)
for the 49 VPN apps with more than 1 million installs. Our
reasoning to focus our analysis solely on negative app re-
views is that users reporting concerning security-related is-
sues will also provide a low app rating.

We classify app reviews into 5 categories (listed in Ta-
ble 6) that cover from performance concerns and bugs to
privacy and security concerns. We exclude from our anal-
ysis any reviews related with usability concerns. 30% of
user complaints report bugs, crashes and the app’s negative
impact on battery-life. Only less than 1% of the negative re-
views relate to security and privacy concerns, including the
use of abusive or dubious permission requests and fraudulent
activity, for the 9 apps listed in Table 7. Five of the apps re-
ported as potentially malicious by app users are also ﬂagged
as such by VirusTotal (summarized in Table 5) due to mal-
ware activity (e.g., EasyVPN) and trojans (e.g., CrossVpn).

Summary and takeaways.

The increasing number of popular VPN apps available on
Google Play and the apparent lack of user-awareness of the

0102030405060Google AdsGoogle AnalyticsSquareupCrashlyticsFlurryMopubStartappAppsflyerUnmengInmobiMillennialmediaTapjoyMixpanelTencentJirboChartboostIronsourceUnity3dSupersonicAdsHockyappThreatmetrixApplifierMobileapptrackerSponsorpayCrittercism% of AppsAll VPN AppsFree non−VPN AppsFree VPN AppsPremium VPN Apps354







4.2
4.0
4.1
4.0
4.3
4.2
4.3
4.0
4.0

5M
1M
1M
500K
1M
500K
500K
500K
500K

84,400
15,788
36,617
21,699
11,005
11,625
14,273
14,095
13,689

Class Rating # Reviews # Installs AV-positive
App
Free
EasyOvpn [14]
Prem.
VPN Free [58]
Free
Tigervpns [55]
DNSet [11]
Prem.
CM Data Manager [6] Prem.
Free
Rocket VPN [44]
Globus VPN [62]
Free
Free
Spotﬂux VPN [50]
CyberGhost [8]
Free
Table 7: List of VPN apps, with 500K or more number
of installs, considered as malicious or intrusive by users in
Google Play reviews and by VirusTotal (AV-positive column
with AV-Rank ≥ 1).
security and privacy risks associated with the VPN permis-
sion indicate the urge to analyze in depth this unexplored
type of mobile apps. The average mobile user rates VPN
apps positively even when they have malware presence. Ac-
cording to our study, only a handful of users has raised any
type of security and privacy concern in their reviews. In Sec-
tion 5 we will complement the insights provided by our static
analysis with a comprehensive set of active tests that aim to
reveal behavioral aspects of the VPN apps during runtime at
the network level.

5. NETWORK MEASUREMENTS

In this section, we investigate the runtime and network
behavior of 150 VPN apps. In particular we are interested in
understanding how VPN apps handle user’s trafﬁc.

We structure our analysis to illuminate the following as-
pects: (i) the trafﬁc interception mechanisms implemented
by each app (i.e., whether the app uses the VPN permis-
sion to implement localhost proxies or to forward the traf-
ﬁc through a terminating end-point or another peer); (ii)
the tunneling protocols implemented by each app as well as
developer-induced misconﬁgurations which may cause traf-
ﬁc leaks; (iii) the presence of proxies and trafﬁc manipula-
tion techniques such as ad-blocking, JavaScript injection and
trafﬁc-redirection; and (iv) identify any possible occurrence
of TLS interception.

We use a dedicated testbed, depicted in Figure 5, com-
posed of a smartphone that connects to the Internet via a
computer conﬁgured as a WiFi access point (AP) with dual-
stack support. The WiFi AP runs tcpdump to intercept all
the trafﬁc being transmitted between the mobile device and
the Internet. This allows us to observe the trafﬁc generated
by each VPN app as seen by an in-path observer.

We test individually each one of the 150 VPN apps under
consideration. We could not fully automate our measure-
ment efforts as one of the goals of our study is to understand
and test the options offered by each VPN app in their GUI
(e.g., egress point diversity and supported VPN protocols).
Prior to each test, we also ensure that the previous app we
experimented with has not modiﬁed the root certiﬁcate store
and we reboot the device to enforce the complete renewal of
the virtual interface.

We run a set of purpose-built scripts (not only between
the device and a server under our control but also to pop-

Figure 5: Our testbed and the 3 possible interception and
forwarding modes for VPN apps: (1) local interception as
a transparent proxy, (2) cloud-based forwarding through
a VPN server, and (3) trafﬁc forwarding through a partici-
pating node (peer forwarding) or other participating nodes.
Our instrumented WiFi access point (AP) has the ability to
observe all the trafﬁc generated by each VPN app.

ular websites) and the ICSI Netalyzr tool for Android [89]
to generate trafﬁc and to analyze the different network- and
trafﬁc-related aspects of VPN apps. All the tests were con-
ducted over a proxy-free link at Data61/CSIRO (Australia),
thus the observed trafﬁc manipulations and middleboxes can
only be attributed to the VPN apps and their online infras-
tructure. Each subsection will describe in detail the tests
used for each aforementioned analysis. The number of tests
that we run per app varies with the conﬁgurability of the app
(e.g., whether the user can select a server in a given country)
and the diversity of IP addresses that we observe. Two peo-
ple executed a total of 5,340 tests manually for three months
and connected to all end-points mentioned in the GUI of a
given VPN app.
5.1 Interception and Forwarding Mecha-

nisms

App developers can leverage the VPN permission to im-
plement localhost proxies (Case 1 in Figure 5) or to for-
ward user’s trafﬁc to an external machine. In the latter case,
the egress point could be either a remote server hosted in
the cloud (Case 2) or another participating node in a peer-
forwarding fashion (Case 3). In this analysis we investigate
the forwarding mechanism implemented by each VPN app
according to the possible scenarios.

Our detection method relies on the client opening TCP
connections to a remote dual-stack server under our control
after enabling the trafﬁc interception mode for each app. Our
server records the public IP address for each TCP connec-
tion (i.e., the egress point) and obtains its associated com-
plete domain name (FQDN). We leverage MaxMind’s GeoIP
services [92] to identify the geographical location of the
egress point. Our geo-location analysis is therefore limited
to MaxMind’s accuracy [72, 96]. We also use Spamhaus
Policy Block List (PBL) [49] records to identify which IP
addresses are associated with residential ISPs [65]. Note
that Spamhaus’ PBL records are populated directly by ISPs

355to improve spam detection so they can be considered as an
accurate proxy to identify IP addresses associated with resi-
dential end-users.

After introducing the different datasets that we will lever-
age to illuminate the forwarding mechanisms for each VPN
app, we now deﬁne each forwarding mechanism as depicted
in Figure 5. An app performs local interception if it operates
as a localhost proxy without forwarding user’s trafﬁc to a ter-
minating VPN server (i.e., if the observed public IP address
for all the TCP connections generated by our script matches
the public IP address of our experimental setup). Otherwise,
the VPN app implements external forwarding. For the latter
case, we deﬁne two sub-categories: cloud forwarding if the
VPN app uses a cloud provider to host their “terminating”
VPN servers; and peer forwarding if the app leverages other
participating users as egress points.
Local-Interception. Only 4% of the analyzed VPN apps use
the VPN permission to intercept user’s trafﬁc in localhost
or to implement transparent localhost proxies [97]. These
VPN apps include antivirus software (e.g., Dr.Web Security
Space), tcpdump-like tools that operate on user-space (e.g.,
tPacketCapture) and privacy and connection ﬁrewalls that al-
low users to generate connection logs or to block trafﬁc at
the ﬂow- or app-level (e.g., NoRoot Firewall). Given that
the trafﬁc is intercepted locally and not forwarded through a
VPN tunnel, our WiFi AP can identify side-connections gen-
erated by such apps. Notably, we observed that Dr. Web Se-
curity Space (an AV app) opens side-channel HTTPS ﬂows
to drweb.com and to 1lt.su.8 To determine whether
they are used to forward a copy of user’s trafﬁc, we correlate
the exogenous ﬂow sizes to the ﬂow size (9KB) to our local
web server. We observe that for 11KB and 4KB of trafﬁc
to 1lt.su and drweb.com, respectively. Unfortunately,
given that these ﬂows are encrypted, we could not investi-
gate their payload to identify whether they are legitimate or
not. For the remaining apps implementing local intercep-
tion, we only observe trafﬁc associated with their embedded
third-party libraries for analytics and advertisement services.
External forwarding. Figure 6 shows the cumulative distri-
bution of the number of countries hosting egress points for
the remaining 96% of VPN apps. We observe a signiﬁcant
difference in the geographical coverage between free VPN
apps and premium VPN apps. The distribution suggests
that VPN servers for premium VPN apps are more scattered
around the globe than for their entirely free counterparts:
80% of the free apps have their servers in less than 6 dif-
ferent countries, while 63% of the premium VPN apps have
egress points in more than 6 countries. In fact, at least 20%
of premium VPN apps have their servers located in more
than 50 different countries.

The US hosts egress points for 77% of free and 90% of
premium VPN apps respectively. France and the Nether-
lands are in second and third position for free VPN-apps
(31% and 27% respectively) whereas the U.K and Germany

8We have noticed that Dr. Web appends the public IP address of
our institution as a preﬁx to the domain 1lt.su.

Figure 6: Distribution of the number of countries per VPN
app.

# Recorded IPs

13%
6%
6%
6%
2%

Free Apps (N = 130)

Hosting Provider
Digital Ocean
Time Warner Cable Internet
Amazon AWS
JSC ER-Telecom Holding
Saudi Telecom Comp. JSC
Hosting Provider
Leaseweb
Reliablehosting
Astute Hosting
Digital Ocean
IP-Only Networks AB
Table 8: Top 5 VPN hosting infrastructures (by ASN) used
by free VPN apps and premium VPN apps.

Prem. Apps (N = 20)

20%
10%
10%
10%
5%

# Recorded IPs

74
8
10
8
3

10
505
5
2
3

are second and third for premium apps (85% and 80% re-
spectively)9. Notably, the top 3 countries contribute to 41%
and 52% of the total number of VPN end-points for free and
for premium VPN apps respectively.

A signiﬁcant fraction of VPN apps concentrate all of their
egress points in a single country: 16% of free VPN apps lo-
cate all of their end-points concentrated in the U.S., whereas
10% of the premium VPN apps have all their egress points
concentrated in The Netherlands.

The other extreme is the VPN app HideMyAss [23] which
provides terminating VPN servers virtually in almost every
country in the world (209 countries/governments according
to MaxMind’s geolocation). If we look at the rank of hosting
providers across VPN apps, we observe that Digital Ocean10
(an American company) and Leaseweb11 (a Dutch company)
are the most common providers for free and premium VPN
apps respectively. Table 8 shows the top 5 hosting providers
by the number of VPN apps actively using their services.

Peer forwarding enables VPN apps to increase the num-
ber of egress points per country while reducing the costs of
maintaining an online hosting infrastructure.12 We attempt
to identify apps implementing peer forwarding from the set
of VPN apps with public IP addresses labeled as residential
IPs by Spamhaus PBL. However, conducting this classiﬁca-
tion proves challenging (and prone to errors) as VPN ser-
vices can deploy VPN servers in residential ISPs. This, un-
9Since VPN apps can have end-points in multiple countries the per-
centages do not add up to 100%.
10https://www.digitalocean.com
11https://www.leaseweb.com
12For reference, the cost per month of the hosting providers can
range from 5 USD/month (Digital Ocean) to almost 200 USD/-
month (Astute Hosting).

05010015020000.20.40.60.81# of Countries per AppCummulative Apps Count  Premium VPN AppsFree VPN Apps356Class # ASs Residential AS(%) Exogenous Trafﬁc
App
54
Free
Open Gate [37]
40
Free
VPN Gate [59]
2
VyprVPN [63]
Free
57
OneClickVPN [36] Free
6
Free
Tigervpns [55]
59
Prem.
StrongVPN [51]
41
Hola [24]
Free
Prem. 134
HideMyAss [23]
30
Free
Private WiFi [41]
VPNSecure [61]
Prem.
44
Table 9: VPN apps with egress points in residential ISPs.
The last column indicates whether we have observed any
possible exogenous ﬂows for such apps.

70%
60%
50%
53%
16%
14%
5%
7%
7%
2%

fortunately, limits our ability to make a clear distinction be-
tween VPN apps implementing cloud- and peer-forwarding,
or even hybrid approaches.

6% of the free VPN apps and 15% of the premium VPN
apps relay trafﬁc through residential ISPs. However, due to
the aforementioned challenges, instead of attempting to clas-
sify each VPN app in these categories, we report in Table 9
the percentage of ASes for which we identiﬁed a residen-
tial egress point and the total number of ASes for each VPN
app for reference. Out of these apps, only Hola conﬁrms its
community-powered nature (P2P) on its website.

We inspect the packets captured by our WiFi AP to iden-
tify the presence of exogenous ﬂows which may have been
forwarded through our device in a peer-to-peer fashion by
the VPN engine for other participating users. While run-
ning HideMyAss we observed trafﬁc going to JP Morgan
and LinkedIn. None of these domains seem to be associ-
ated with any of the third-party libraries used by HideMyAss
app. Unfortunately, we cannot entirely conﬁrm the origin of
these ﬂows to assess whether or not they are endogenous
to the app as our VPN session may have not lasted long
enough13 to capture trafﬁc from other participating users.
In the case of Tigervpns, we also identiﬁed ﬂows to do-
mains that no longer exist (e.g., for maxhane.com and
qudosteam.com, DNS lookup returned NXDOMAIN and
SERFAIL, respectively.).

Nevertheless, the mere possibility of VPN apps following
a peer forwarding model raises up some intriguing questions
about their operational transparency and the security guaran-
tees when forwarding trafﬁc through (or on behalf of) other
participating devices, not necessarily trustworthy.
5.2 VPN Protocols and Trafﬁc Leaks

Ideally, the trafﬁc forwarded through the VPN tunnel
must be opaque to an in-path observer (e.g., Internet service
provider, commercial WiFi APs and surveillance agencies).
However, there is a wide range of tunneling protocols, each
with different security guarantees, that can be used by app
developers to forward trafﬁc out of the device: from secure
IPSec tunnels to basic TCP tunnels without any encryption.
In addition to insecure tunneling protocols, developer-
induced misconﬁgurations and errors may also undermine

13For each end-point, a session lasts 180 seconds.

Protocol
OpenVPN
L2TP/IPSec
SOCKS

Unidentiﬁed

Unencrypted

Free Apps

Premium Apps

14%
5%
4%
0%
15%
13%
30%
19%

20%
0%
0%
10%
10%
25%
25%
10%

UDP:80
TLS (TCP:443)
DTLS (UDP:443)
Other ports

Table 10: VPN tunneling protocols observed by our WiFi
AP for the analyzed VPN apps.

user’s privacy and security. VPN app developers must ex-
plicitly forward IPv6 trafﬁc and provide the DNS settings at
the time of creating the virtual interface programmatically.
If not done carefully, DNS and IPv6 trafﬁc may not be for-
warded through the virtual interface [95]. In particular, DNS
leakage can reveal user’s networking activity and interests.
The VPN API also allows app developers to overwrite user’s
DNS resolver with one of their choice.

All these artifacts can become a serious harm for users try-
ing to circumvent surveillance or seeking online anonymity
by using VPN apps. To investigate those crucial aspects of
VPN apps, we run a script that performs crafted HTTP re-
quests (both over IPv4 and IPv6) as well as DNS lookups
to our dual-stack server under our control. In this section,
we analyze the pcaps captured by our in-path WiFi AP
to investigate the presence of tunnels without encryption in
the wild (i.e., we consider a tunnel implementation as unen-
crypted if the payload of our custom HTTP requests is seen
in the clear by our WiFi AP) and to identify potential IPv6
and DNS leaks. We leverage the complementary features
provided by a pcap parser [40] and Bro’s comprehensive
protocol analyzers (which provide support to identify some
tunneling technologies) [94] to inspect in detail the trafﬁc
collected for each app.
VPN Tunnel Implementations. Table 10 shows the VPN
tunneling protocols that we identiﬁed in the pcap traces gath-
ered by our dual-stack WiFi AP. As mentioned earlier, we
rely on Bro’s suite of protocol parsers to identify the ac-
tual protocol used by each VPN apps. Unfortunately, Bro
only provides full support for OpenVPN, L2TP/IPSec and
SOCKS tunnels. For the remaining cases, we could not iden-
tify their application-layer protocol. Instead, we report the
transport-layer protocol and the destination port in use. Iden-
tifying the actual protocol would have required us to decrypt
the channel to inspect the payload.

Table 10 reports the different tunneling protocols that our
method allowed us to identify. We observe that OpenVPN
is the most popular tunneling technology both for free and
premium apps (14% and 20% respectively). However, many
VPN apps also use some tunneling technology over TLS and
DTLS [99]. Of particular concern are the 19% and 10% of
free and premium apps using basic TCP tunnels (also known
as “port forwarders”) and insecure HTTP tunnels [75]. As
our WiFi AP, any in-path middlebox could inspect the pay-
load for those apps in the clear. Therefore, the VPN apps us-
ing tunneling protocols without encryption are not protect-

357ing their user-base from online surveillance and WiFi APs
harvesting user’s data.
IPv6 and DNS leaks. We observe that 84% of the analyzed
VPN apps do not route IPv6 trafﬁc through the VPN tun-
nel. Moreover, 66% of the VPN apps do not forward DNS
trafﬁc through the VPN tunnel so any in-path observer can
monitor the DNS networking activity of the user. IPv6 and
DNS leaks can ease user monitoring and censorship. Conse-
quently, VPN apps like HideMyAss and VPNSecure which
claim to provide security and anonymity are not effective
against surveillance and malicious agents. Trafﬁc leaks can
be the result of intentional design decisions, lack of IPv6
support or even some developer-induced errors when conﬁg-
uring the routing parameters of the VPN app. Unfortunately,
we could not identify the root cause for the observed leaks.
DNS redirection. For each one of the DNS lookups that we
perform, we also check whether the IP address of the DNS
resolver matches the one of our conﬁgured resolver’s IP. No-
tably, 55% of the free apps (and 60% of premium apps) redi-
rect user’s DNS queries to Google DNS whereas 7% of free
and 10% of premium VPN apps forward DNS trafﬁc to their
own DNS resolvers. In the latter case, users may be vulner-
able to content ﬁlters and other DNS artifacts implemented
by the DNS resolver such as trafﬁc-redirection [111]. We
have not further investigated the presence of trafﬁc blockage
or redirection mechanisms at the DNS level.
5.3 Trafﬁc Manipulation

In-path proxies allow VPN services to gain control over
users trafﬁc and to manipulate trafﬁc on the ﬂy [109, 110,
98]. Moreover, many proxy features can provide an eco-
nomic beneﬁt for ISPs and network providers as in the case
of HTTP header injection [108] or trafﬁc redirection for ad-
vertising purposes [111].

We leverage the comprehensive network troubleshoot-
ing tool Netalyzr for Android to identify in-path ﬂow-
terminating proxies at the TCP level and, in the case of
HTTP proxies, how they interfere with user’s trafﬁc. In a
nutshell, Netalyzr controls both client and server side and
crafts packets and HTTP requests in a way that would allow
identifying non-transparent proxies along the path [110]. We
refer the reader to Netalyzr-related bibliography for further
implementation details [89, 110, 109].

We extend the insights provided by the Netalyzr tool with
custom-built tests that will allow us to identify VPN apps
implementing techniques such as ad-blocking, JavaScript-
injection for advertising and analytics purposes [98, 80], and
trafﬁc-redirection (i.e., redirecting users trafﬁc to third party
advertising partners). In particular, we use two techniques to
identify such proxy manipulations: First, we investigate do-
main mismatches between the DNS request and the service
ultimately delivering the content using reverse DNS [111].
Second, we investigate content modiﬁcations for a web-
site completely under our control,
seven e-commerce
websites (alibaba.com, ebay.com, target.com,
bestbuy.com,overstock.com, newegg.com, and
macys.com) and for the top-30 websites in the US, China,

Figure 7: Distribution of in-path TCP proxy deployment per
port.

and Europe according to Alexa’s rank [1]. As we demon-
strate in one of our previous research efforts, the JavaScript
code for two or more simultaneously accessed DOM trees’
elements (e.g., ads) belonging to the same website remain
identical despite noticeable differences in the DOM tree el-
ements [82]. This feature present in today’s websites allows
us to identify possible JavaScript injection by comparing the
DOM trees for all selected websites before and after testing
each VPN app. We use Selendroid [47] to fetch the rendered
HTML source and extract the JavaScript as well as the DOM
trees for each site.
In-path Proxies. The Netalyzr tests failed systematically
for 34% of the analyzed VPN apps. Unfortunately, we do
not have enough information to explain if such failures are
caused by VPN app behavior, app bugs or if they are the
result of trafﬁc policies implemented by the VPN provider as
Netalyzr generates trafﬁc resembling BitTorrent which may
be blocked by the VPN provider. We acknowledge it as a
limitation of our tests to determine proxies in 34% of the
analyzed VPN apps.

For the remaining 66% of VPN apps, Netalyzr results re-
vealed the presence of ﬂow-terminating proxies for multiple
TCP ports as shown in Figure 7. According to the ﬁgure,
for every port we study, in-path proxies are more common
on premium VPN apps than in their free counterpart. We in-
spect app descriptions on Google Play store and observe that
only 18% of the analyzed 66% apps provide such proxying
as part of their stated purpose. The rest of the apps imple-
ment proxying as additional functionality. Nevertheless, we
detected the presence of general-purpose proxies (i.e., prox-
ies listening in all the ports tested) in 8% and 15% of free
and premium VPN apps respectively. Given that free VPN
apps may implement peer forwarding to redirect user’s traf-
ﬁc and the lower number of free VPN apps with premium
services that we actively analyzed, in-path middleboxes and
proxies may be less common in such scenarios.

In-path proxies may have additional negative effects on
user’s trafﬁc which are beyond the scope of this study. Many
of them may have their own particular or incomplete inter-
pretation of transport-layer protocols [109]. In the case of
HTTP proxies, Netalyzr test revealed that 47% and 55% of
free and premium VPN apps actively modify HTTP trafﬁc
by default. Some proxy artifacts may have a negative impact
on data ﬁdelity and user’s browsing experience as in the case
of techniques like non-HTTP trafﬁc ﬁlters over port TCP:80
(15% of VPN apps), HTTP body or header manipulations

02550751002122258011013513914316144344546558558799399511941723506068819001TCP Port% of AppsApp Categoryfreepremium358Website

Input Point

Partner Network (click event)

Referral

NA

alibaba.com
ebay.com

anchorfree.us/rdr.php
anchorfree.us/rdr.php

http://www.dpbolvw.net/click-7772790-12173149-1427959067000

http://api.viglink.com/api/click?key=4372c7dabb08e4e38d97c4793cf6edb3

(or Conversant Media, an online advertising company16).
Table 11 contains two samples of such requests. Our tests
also identiﬁed a second partner: Viglink17. According
to AnchorFree’s website,
the app provides “shielded
connections, security, privacy enhancement for individ-
uals and small businesses” and an “ad-free browsing”
environment [25].
5.4 TLS Interception

anchorfree.us/contentdiscovery2
Table 11: HotspotShield redirects user trafﬁc to alibaba.com and ebay.com through its partner networks Conversant
Media and Viglink respectively. In the case of target.com, bestbuy.com, overstock.com, newegg.com and
macys.com we observed re-directions to Conversant Media.
(14% of VPN apps), and image transcoding (4% of VPN
apps).
Ad-Blocking and Tracker-Blocking. Two of the analyzed
VPN apps actively block ads and analytics trafﬁc by default
on our tested websites: Secure Wireless and F-Secure Free-
dome VPN. The apps did not explicitly mention ad-blocking
feature in the Google Play store listings14. An analysis of
the decompiled source code, using ApkTool, revealed that F-
Secure Freedome VPN app blocks any trafﬁc coming from
a pre-deﬁned list of domains associated with web and mo-
bile tracking [16] including Google Ads, DoubleClick, and
other popular tagging/analytics services such as Google Tag
and comScore. However, blacklist-based ad blocking may
affect the functionality of the Webpages and impairs user
experience [82, 93]. Speciﬁcally, F-Secure Freedome VPN
blocks JavaScript code associated with nytimes.com’s
event “TaggingServices” which, as a result, prevents user
access and interaction with embedded relevant video con-
tent [82].
JavaScript Injection. We identiﬁed two free VPN apps
(VPN Services HotspotShield [26] by AnchorFree and WiFi
Protector VPN [64]) actively injecting JavaScript codes us-
ing iframes for advertising and tracking purposes. Both
apps claim to safeguard user privacy and to provide security
and anonymization (cf Section 3.3). However, in the case
of AnchorFree, they also provide advertising services [25].
Our static analysis of both apps’ source code revealed that
the actively use more than 5 different third-party tracking
libraries. The developer team behind WiFi Protector VPN
corroborated our observations and stated that the free version
of its app injects JavaScript code for tracking and displaying
their own ads to the users.
Trafﬁc Redirection. AnchorFree’s VPN app Hotspot-
Shield performs redirection of e-commerce trafﬁc to
partnering domains. When a client connects through
the VPN to access speciﬁc web domains15,
the app
leverages a proxy that intercepts and redirects the HTTP
requests to partner websites with the following syntax:
http://anchorfree.us/rdr.php?q=http://www.dpbolvw.net/
As a re-
click-7772790-12173149-1427959067000.
sult, user’s
relayed through two organiza-
tions before reaching alibaba.com: AnchorFree and
dpbolvw.net, a domain owned by valueclick.com

VPN apps are in a privileged position to perform TLS in-
terception [107]. They can compromise the local root cer-
tiﬁcate store of the device by injecting their own self-signed
certiﬁcates using Android’s KeyChain API [66]. Once a cer-
tiﬁcate is installed on the device, the app can intercept the
TLS session establishment and generate “legit” certiﬁcates
— veriﬁable by the self-signed root certiﬁcate injected on
the trusted certiﬁcate root store — on the ﬂy [107]. To limit
potential new venues for abuse, Android requires user’s con-
sent to install root certiﬁcates and it shows an additional
system notiﬁcation that informs the user that a third-party
can monitor their secure trafﬁc. Only tech-savvy users may
be able to fully understand the security implications of in-
stalling a root certiﬁcate.

We validated each server certiﬁcate against the ICSI Cer-
tiﬁcate Notary to identify possible cases of TLS interception:
3% of the TLS sessions provided certiﬁcates for which the
ICSI notary could not establish a valid chain to a root cer-
tiﬁcate from the Mozilla root store. By inspecting manually
each certiﬁcate, we identify 4 free VPN apps (developed by
3 different app developers) that actively intercept TLS trafﬁc
by issuing self-signed certiﬁcates as shown in Table 12. Two
of the apps implementing TLS interception, DashVPN and
DashNet, are implemented by the company ActMobile

We instrumented our Android device with OpenSSL so
that we can capture a copy of the SSL/TLS server certiﬁ-
cate when accessing more than 60 popular services operat-
ing over SSL including HTTPS, SMTP over TLS, and POP3
over TLS. The services reached in our test include diverse
and popular services like Google, Gmail, Facebook, Twit-
ter, Skype, banking services, CDNs, analytics services and
e-commerce sites, many of which are associated with mobile
apps implementing security countermeasures such as certiﬁ-
cate pinning [77, 46].

trafﬁc is

14Contrary to Google Play listings, F-Secure Freedome VPN
mentioned its ad-blocking feature on its webiste, https://www.f-
secure.com/.
15During our
for websites
alibaba.com.

redirection happened exclusively
as
as

experiments
categorized

e-commerce

such

sites

A detailed inspection of the domains for which we
recorded self-signed certiﬁcates, revealed that only the app
Packet Capture performs TLS interception indiscriminately
for all domains even if the apps perform cert pinning. The
other apps, — Neopard, DashVPN and DashNet all of which

16http://www.conversantmedia.com
17http://www.viglink.com

359CA

# Installs

GUI

Packet Capture

User-warning

ActMobile
ActMobile

VPN app
Packet Capture [39]
DashVPN [10]
DashNet [9]
Exalinks Neopard [31]
Table 12: VPN apps performing TLS interception, the CA
signing the forged certiﬁcates and if the apps explicitly in-
form the user about TLS interception practices in their GUI
or in their privacy policy.

100K
100K
10K
10K

Exalinks Root

Privacy Policy

claim to provide trafﬁc acceleration — target speciﬁc ser-
vices as reported in Table 13, more inclined towards email
services, social networks search engines and IM. This be-
havior may be a consequence of the nature of the apps and
the intent of the online services that they aim to optimize.

Domain (PORT)

google-analytics.com
mail.google.com
mail.yahoo.com
maps.google.com
orcart.facebook.com (8883)
play.google.com
www.akamai.com
www.alcatel-lucent.com
www.amazon.com
www.avaya.com
www.bankofamerica.com
www.chase.com
www.cisco.com
www.ebay.com
www.facebook.com
www.fring.com
www.gmail.com
www.google.co.uk
www.google.com
www.hotwire.com
www.hsbc.com
www.ibm.com
www.icsi.berkeley.edu
www.linkedin.com
www.outlook.com
www.qq.com
www.seagate.com
www.simple.com
www.skype.com
www.taobao.com
www.tripadvisor.com
www.twitter.com
www.viber.com
www.yahoo.com
www.youtube.com

Neopard DashVPN DashNet Packet
Capture


























































Table 13: Intercepted domains per VPN app. The list only
prints the TCP port for those different than 443.

We manually inspected the app’s GUI to check if the apps
inform users about the purpose of performing TLS intercep-
tion and what TLS interception implies. Packet Capture sup-
ports TLS interception (as an opt-in feature in the app) in

order to expose TLS trafﬁc to its users. Likewise, Neopard,
a web acceleration app, also notiﬁes users about the purpose
of performing TLS interception in order to optimize trafﬁc.
Their privacy policy (April 2016) [32] informs users about
TLS interception and lists “perform mobile usage reviews
for market studies” as one of the purposed of their data col-
lection process. In the case of DashVPN and DashNet, none
of them inform users about the purpose of performing TLS
interception at all.

Summary and takeaways.

Our analysis of VPN apps at the network level has re-
vealed that the majority of VPN apps are not transparent
enough about how they handle user’s trafﬁc. Despite the
promises for security enhancement and online anonymity,
VPN apps may forward user’s trafﬁc through other partici-
pating nodes following a peer (e.g., Hola) thus opening in-
teresting questions about the trustworthiness of the egress
points and the security guarantees for users forwarding traf-
ﬁc for others.

Our analysis has also revealed an alarming 18% of VPN
apps that implement tunneling technologies without encryp-
tion as well as 84% and 66% of apps leaking IPv6 and DNS
trafﬁc. As a result, these apps do not protect user’s trafﬁc
against in-path agents performing online surveillance or user
tracking. We inspect app descriptions on Google Play store
and observe that 94% of the IPv6 and DNS leaking apps
claim to provide privacy protection. Such trafﬁc leaks may
be associated with developer-induced errors, lack of support
or even misconﬁgurations.

Finally, we have also identiﬁed abusive practices in our
corpus of VPN apps such as JavaScript injection for track-
ing and advertising purposes, as well as e-commerce trafﬁc
redirection to afﬁliated partners and TLS interception. Only
one of the apps implementing these practices (i.e., Packet
Capture performing TLS interception) actually inform the
users about the presence of such artifacts.
5.5 Developers’ responses

We contacted and shared our ﬁndings with the developers
of each of the apps we observed as involved in any of the fol-
lowing: JavaScript injection, trafﬁc redirection, ad-blocking
and tracker-blocking, exogenous ﬂow, peer-forwarding user
trafﬁc, and TLS interception. We also contacted app devel-
opers of apps requesting sensitive permissions, apps that are
negatively reviewed by users, and apps with embedded third-
party tracking libraries. We also contacted apps which our
tests revealed as possibly containing malware in their APKs.
Amongst the two apps (WiFi Protector and HotspotShield
VPN) that our tests identiﬁed as performing JavaScript injec-
tion, WiFi Protector conﬁrmed our ﬁndings and stated that
the free version of their app injects JavaScript code to track
users and to show their own ads. HotspotShield VPN, which
we identiﬁed as also performing trafﬁc redirection, has not
responded to our correspondence.

The developer behind F-Secure Freedome VPN, we found
that it blocks third-party ads and trackers, conﬁrmed our
ﬁndings and elaborated on how they construct their black-

360lists for third-party trackers- and ads-blocking. The devel-
oper did not respond yet to our inquiries about the crite-
ria used to build the blacklists. We have not received any
response from Secure WiFi that our tests also identiﬁed as
performing ad-blocking.

We received responses from only three developers of the
apps that we observed implementing peer-forwarding of user
trafﬁc. VyperVPN and VPNSecure conﬁrmed that they have
some of their end-points located in residential ISPs as they
may rely on third-party data-centers for hosting their ser-
vices. Hola’s developer conﬁrmed our ﬁndings and explic-
itly mentioned Hola’s peer-forwarding mechanism. Contacts
from other apps detailed in Table 9 have not yet, as of the
time of writing of this paper, responded to our requests for
comments or feedback.

Neopard conﬁrmed that they whitelist the domains for
which they can optimize trafﬁc and asked for feedback about
how to increase their operational transparency and usability.
ActMobile, initially, asked for further information about the
purpose of this study and who has commissioned and later
on, acknowledged our ﬁndings, conﬁrmed that they disable
the default TLS-interception functionality in both of the apps
(DashVPN and Dashnet). They also reported that, in the
new version of the apps, they ask for user consent, explic-
itly in the apps’ GUIs, to install and to enable the ActMo-
bile’s certiﬁcates for TLS-interception and trafﬁc accelera-
tion, respectively. We have not received any response from
the developer behind Packet Capture that our tests identiﬁed
as performing TLS-interception.

Only one of the apps’ developers, explicitly discussed
in Section 4.1, responded to our ﬁndings and conﬁrmed
that tigerVPN requests sensitive READ_LOG permission to
record and to use it for troubleshooting purposes. They
also conﬁrmed that,
in the connection log collected via
READ_LOG permission, they collect users’ information such
as end-points’ IPs, wireless (mobile data connectivity (3G,
4G, and LTE) or WiFi) connectivity, and error messages.

The developer behind Ip-shield VPN that we identiﬁed as
embedding less-popular tracking libraries such as Appﬂood
for targeted ads argued that the Appﬂood was the best choice
to monetize the app. The developer also revealed plans to
update ad-free version of Ip-shield VPN on Google Play.

The rest of the developers of the apps with possibly con-
taining malware (cf. Section 4.3), apps that are negatively
reviewed by users (cf. Section 4.4), apps that are embed-
ding third-party tracking libraries (cf. Section 4.2), and the
one with exogenous trafﬁc ﬂows (cf. Section 5.1) have not
yet, as of the time of writing of this paper, responded to our
ﬁndings.

6. LIMITATIONS

WORK

AND

FUTURE

Our method to identify and characterize VPN apps on
Google Play presents several limitations, many of which are
inherent to static and dynamic analysis [77]. The ﬁrst lim-
itation is app’s coverage: our study is limited to Android’s
free Google Play apps and excludes paid apps, iOS apps and

apps from alternative app stores. We also rely on a Google
Play crawler to extract our corpus of VPN-enabled apps that
might restrict the app coverage of our study which may miss
apps that intentionally (or inadvertently) hide their use of
the VPN permission. Although our apps crawler aims to
capture as many VPN-enabled apps as possible, we stress
that our goal is to provide an analysis of the security and
privacy issues of a representative sample of VPN-enabled
apps from the Google play store. Second, this paper does
not consider Android apps requesting root access on rooted
phones to intercept user trafﬁc via native commands such as
tcpdump or OpenVPN. Investigating apps falling in this cat-
egory would require conducting a computational- and time-
expensive static analysis. Third, we do consider runtime
analysis of third-party tracking libraries and all sensitive per-
missions of VPN apps. Determining what an app do with
sensitive permissions such as READ_LOG, READ_SMS, and
SEND_SMS and what type of information will third-party
tracking libraries collect would require ﬁne-grained system-
and network-level trace and trafﬁc analysis.

Moreover, we identify apps implementing peer forward-
ing from the set of VPN apps with public IP addresses la-
beled as residential IPs by Spamhaus PBL. Given that VPN
services can deploy VPN servers in residential ISPs and
Spamhaus classiﬁcation is prone to error, our analysis of
peer forwarding may not be accurate. We consider it as a
limitation and one possible extension of the work in this pa-
per would be to strengthen our analysis of peer forwarding
by (i) extending the tests duration to enable tracking of peers
(running suspected VPN apps); and (ii) analyzing the traf-
ﬁc ﬂows of an app simultaneously running on two or more
mobile phones to determine if they forward trafﬁc for each
other.

Likewise, our method falls short to analyze the presence
of session timeouts and apps’s ability to recover from a loss
of connectivity. These dynamics may cause user trafﬁc to
be exposed in the clear to any in-path middlebox for a short
period of time.

This paper provides a ﬁrst detailed analysis of VPN-
enabled apps but it also leaves many open questions beyond
the scope of our analysis. Aspects such as possible trafﬁc
or device-location discrimination practices [86] or the use
of VPN apps as honeypots to harvest personal information
have not been addressed in this study. In addition, reasons
behind inadequacy of app actual behavior and terms of use
or the the identiﬁcation of side-channels for the observed
data-exﬁltration have been left as pending questions.

7. RELATED WORK

Several studies highlighted the privacy risks associated
with Android apps over-requesting Android permissions for
third-party tracking, advertising and analytic services [105,
103, 91, 73, 74] using techniques like static analysis [114,
69, 78, 79], taint analysis [76, 112], and OS modiﬁca-
tions [83, 100, 105, 81]. Previous research also adapted
techniques for malware detection such as signature analy-
sis [71, 70, 88, 113] and anomaly detection [104, 102] to

361the mobile context in order to identify potential malicious
activity on mobile apps.

Several research efforts leverage Android’s VPN permis-
sion to accurately characterize Android’s trafﬁc and identify
private data leakage inﬂicted by mobile apps [90, 97, 106].
More related to studying VPN apps, the study conducted by
Perta et al. [95] is perhaps the closest one to our analysis.
The paper provides a manual analysis of 14 popular VPN
services and includes a study of their their mobile clients
identifying developer-induced bugs and mis-conﬁgurations
that lead to IPv6 and DNS leaks. Our paper provides a sys-
tematic and thorough security and privacy analysis of An-
droid mobile apps employing the VPN permission. The
study by Vallina-Rodriguez et al. characterized Android’s
root certiﬁcate store using data provided by Netalyzr for An-
droid tool [107]. The study revealed how VPN-enabled apps
could perform transparent TLS interception after compro-
mising the root certiﬁcate store.

Finally, Appelbaum et al. identiﬁed security vulnerabili-
ties on commercial and public online VPN services [67]. A
survey conducted by Khattack et al. on VPN usage across
Pakistani Internet users reported that 57% of the partici-
pants used SSL-based VPN software to access YouTube con-
tent [87]. Our paper in turn, presents a method to systemat-
ically identify and analyze security and privacy aspects of
VPN-enabled apps on Android-based app stores. The impli-
cations of our analysis span to other areas such as censorship
analysis and network measurements that leverage VPN ser-
vices to penetrate different countries and ISPs.

8. CONCLUSIONS

Android app developers beneﬁt from native support to im-
plement VPN clients via the VPN permission to provide cen-
sorship circumvention, support enterprise customers and en-
hanced online security and privacy. However, despite the
fact that Android VPN-enabled apps are being installed by
millions of mobile users worldwide, their operational trans-
parency and their possible impact on user’s privacy and se-
curity remains “terra incognita” even for tech-savvy users.

In this paper, we presented a number of static and dy-
namic methods that allowed us to conduct in-depth analy-
sis of VPN-enabled apps on Google Play. We investigate
from the presence of tracking services and malware on VPN
app binaries to artifacts implemented by these apps at the
network level. Our comprehensive tests allowed us to iden-
tify instances of VPN apps embed third-party tracking ser-
vices and implement abusive practices such as JavaScript-
injection, ad-redirections and even TLS interception.

The ability of the BIND_VPN_SERVICE permission to
break Android’s sandboxing and the naive perception that
most users have about third-party VPN apps suggest that it
is urging to re-consider Android’s VPN permission model to
increase the control over VPN clients. Our analysis of the
user reviews and the ratings for VPN apps suggested that the
vast majority of users remain unaware of such practices even
when considering relatively popular apps.

Acknowledgments
This work was partially supported by the Data61/CSIRO and
the National Science Foundation (NSF) under grant CNS-
1564329. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the au-
thors or originators and do not necessarily reﬂect the views
of the Data61/CSIRO or of the NSF. The authors would like
to thank our shepherd, Ben Zhao, and the anonymous re-
viewers for constructive feedback on preparation of the ﬁnal
version of this paper. We also thank Nick Kiourtis (Kryp-
towire) and Angelos Stavrou (Kryptowire) for valuable help.

9. REFERENCES

[1] Alexa Top 500 Websites. http://www.alexa.com/topsites.
[2] Android Permissions. http://developer.android.com/guide/

topics/security/permissions.html.

[3] Application Fundamentals. http://developer.android.com/

guide/components/fundamentals.html.

[4] Archie VPN. https://play.google.com/store/apps/details?id=

com.lausny.archievpnfree.go.

[5] Cisco AnyConnect.

https://play.google.com/store/apps/details?id=
com.cisco.anyconnect.vpn.android.avf.

[6] CM Data Manager - Speed Test.

https://play.google.com/store/apps/details?id=
com.cmcm.ﬂowmonitor.

[7] CrossVpn. https://play.google.com/store/apps/details?id=

com.goodyes.vpn.cn.

[8] Cyberghost - free vpn & proxy.

https://play.google.com/store/apps/details?id=
de.mobileconcepts.cyberghost.

[9] Dash Net Accelerated VPN .

https://play.google.com/store/apps/details?id=
com.actmobile.dashnet.

[10] Dash VPN | Dash Ofﬁce - Speed Test.

http://dashofﬁce.com/dash-vpn/.

[11] DNSet.

https://play.google.com/store/apps/details?id=com.dnset.

[12] DroidVPN - Android VPN. https:

//play.google.com/store/apps/details?id=com.aed.droidvpn.

[13] Dr.Web Security Space. https:

//play.google.com/store/apps/details?id=com.drweb.pro.

[14] EasyOvpn - Plugin for OpenVPN.

https://play.google.com/store/apps/details?id=
com.easyovpn.easyovpn.

[15] EasyVpn. https://play.google.com/store/apps/details?id=

yujia.easyvpn.

[16] F-Secure Freedome Anti-Tracking Feature Explained.
https://community.f-secure.com/t5/F-Secure/F-Secure-
Freedome-Anti-Tracking/ta-p/52153.

[17] Fast Secure Payment Service.

https://play.google.com/store/apps/details?id=
com.lausny.ocvpnaio.allpay.
[18] FlashVPN Free VPN Proxy.

https://play.google.com/store/apps/details?id=
net.ﬂashsoft.ﬂashvpn.activity.
[19] Free VPN Proxy by Betternet.

https://play.google.com/store/apps/details?id=
com.freevpnintouch.

[20] Good. Mobile Device Management (MDM).

https://www1.good.com/secure-mobility-solution/mobile-
device-management.html.

362[21] Google Play Unofﬁcial Python API.

https://github.com/egirault/googleplay-api.

[22] HatVPN.

https://play.google.com/store/apps/details?id=mobi.hatvpn.

[23] HideMyAss! Pro VPN for Android.

https://play.google.com/store/apps/details?id=
com.hidemyass.hidemyassprovpn.

[24] Hola Free VPN Proxy.

https://play.google.com/store/apps/details?id=org.hola.

[25] Hotspot Shield Advertising.

http://www.anchorfree.com/advertise.php.

[26] Hotspot Shield Free VPN Proxy.

https://play.google.com/store/apps/details?id=
hotspotshield.android.vpn.

[27] ip-shield VPN. https:

//play.google.com/store/apps/details?id=com.ipshield.app.
[28] Junos Pulse. https://play.google.com/store/apps/details?id=

net.juniper.junos.pulse.android&hl=en.

[29] Knox Standard SDK.

https://seap.samsung.com/sdk/knox-standard-android.

[30] Mobile Security & Antivirus.

https://play.google.com/store/apps/details?id=
com.trendmicro.tmmspersonal.

[31] NEOPARD.

http://https://play.google.com/store/apps/details?id=
com.exalinks.neopard/.
[32] Neopard Privacy Policy.

http://neopard-mobile.com/en/about/privacy/.

[33] NeoRouter VPN Mesh.

https://play.google.com/store/apps/details?id=
com.neorouter.androidmesh.

[34] NoRoot Firewall.

https://play.google.com/store/apps/details?id=
app.greyshirts.ﬁrewall.

[35] OkVpn.

https://play.google.com/store/apps/details?id=yujia.okvpn.

[36] One Click VPN. https:

//play.google.com/store/apps/details?id=com.lausny.ocvpn.
[37] Open Gate. https://play.google.com/store/apps/details?id=

com.btzsoft.vpnclient.
[38] Orbot: Proxy with Tor.

https://play.google.com/store/apps/details?id=
org.torproject.android.

[39] Packet Capture.

https://play.google.com/store/apps/details?id=
app.greyshirts.sslcapture.

[40] pcap-parser (0.5.8).

https://pypi.python.org/pypi/pcap-parser/0.5.8.

[41] Private WiFi.

https://play.google.com/store/apps/details?id=
com.privatewiﬁ.pwf.hybrid.

[42] Qihoo 360. https://play.google.com/store/apps/details?id=

com.qihoo360.mobilesafe.
[43] Raccon APK Downloader.

http://www.onyxbits.de/raccoon.
[44] Rocket VPN - Internet Freedom.

https://play.google.com/store/apps/details?id=
com.liquidum.rocketvpn.

[45] Samsung KNOX. Partnering with Samsung.
https://www.samsungknox.com/en/partners.

[46] Security with HTTPS and SSL. http:

//developer.android.com/training/articles/security-ssl.html.

[47] Selendroid: Selenium for Android.

http://www.selendroid.io.

[48] sFly Network Booster, Adblocker. https:

//play.google.com/store/apps/details?id=com.cdnren.sﬂy.

[49] Spamhaus PBL. http://www.spamhaus.org/pbl/.
[50] Spotﬂux VPN.

https://play.google.com/store/apps/details?id=
com.spotﬂux.android.

[51] StrongVPN OpenVPN Client. https:

//play.google.com/store/apps/details?id=com.strongvpn.

[52] SuperVPN. https://play.google.com/store/apps/details?id=

com.SuperVPN_Q0102_21.

[53] SurfEasy Secure Android VPN. https:

//play.google.com/store/apps/details?id=com.surfeasy.

[54] tigerVPN - Privacy Defender.

https://play.google.com/store/apps/details?id=
com.tigeratwork.tigervpn.

[55] Tigervpns Free VPN and Proxy.

https://play.google.com/store/apps/details?id=
com.tigervpns.android.

[56] TorGuard VPN.

https://play.google.com/store/apps/details?id=
net.torguard.openvpn.client.

[57] VirusTotal. https://www.virustotal.com.
[58] VPN Free. https://play.google.com/store/apps/details?id=

com.couxin.GroxNetwork.

[59] VPN Gate. https://play.google.com/store/apps/details?id=

com.lausny.vpngate.

[60] VPN Service Documentation.

http://developer.android.com/reference/android/net/
VpnService.html.

[61] VPNSecure OpenVPN VPN Proxy.

https://play.google.com/store/apps/details?id=
com.vpnsecure.pty.ltd.

[62] VPN+TOR+Cloud VPN Globus Pro! https:

//play.google.com/store/apps/details?id=com.globus.vpn.

[63] VyprVPN Free VPN for Privacy.

https://play.google.com/store/apps/details?id=
com.goldenfrog.vyprvpn.app.

[64] WiFi Protector VPN.

https://play.google.com/store/apps/details?id=
com.wiﬁprotector.android.

[65] M. Allman. Comments on bufferbloat. SIGCOMM CCR,

2013.

[66] Android developer documentation. KeyChain.

https://developer.android.com/reference/android/security/
KeyChain.html#createInstallIntent().

[67] J. Appelbaum, M. Ray, I. Finder, and K. Koscher. vpwns:

Virtual Pwned Networks. In USENIX FOCI, 2012.

[68] D. Arp, M. Spreitzenbarth, H. Gascon, and K. Rieck.

Drebin: Effective and Explainable Detection of Android
Malware in Your Pocket. In NDSS, 2014.

[69] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout:

Analyzing the Android Permission Speciﬁcation. In ACM
CCS, 2012.

[70] T. Bläsing, L. Batyuk, A.-D. Schmidt, S. A. Camtepe, and
S. Albayrak. An Android Application Sandbox System for
Suspicious Software Detection. In IEEE MALWARE, 2010.

[71] A. Bose, X. Hu, K. G. Shin, and T. Park. Behavioral
Detection of Malware on Mobile Handsets. In ACM
MobiSys, 2008.

[72] I. Castro, J. C. Cardona, S. Gorinsky, and P. Francois.

Remote Peering: More Peering Without Internet Flattening.
In ACM CoNEXT, 2014.

[73] T. Chen, I. Ullah, M. A. Kaafar, and R. Boreli. Information

363Leakage Through Mobile Analytics Services. In ACM
MobiSys, 2014.

[74] P. H. Chia, Y. Yamamoto, and N. Asokan. Is this App Safe?:

A Large Scale Study on Application Permissions and Risk
Signals. In ACM WWW, 2012.

[75] D. Crawford. PPTP vs L2TP vs OpenVPN vs SSTP vs

IKEv2. https://www.bestvpn.com/blog/4147/pptp-vs-l2tp-
vs-openvpn-vs-sstp-vs-ikev2/.

[76] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,

P. McDaniel, and A. N. Sheth. TaintDroid: An Information
Flow Tracking System for Real-Time Privacy Monitoring
on Smartphones. CACM, 2014.

[77] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner,

B. Freisleben, and M. Smith. Why Eve and Mallory love
Android: An analysis of Android SSL (in) security. In ACM
CCS, 2012.

[78] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android Permissions Demystiﬁed. In ACM CCS, 2011.

[79] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller. Checking
App Behavior Against App Descriptions. In ICSE, 2014.

[80] C. Haschek. Where are free proxies free?

https://blog.haschek.at/post/fd9bc.

[81] P. Hornyack, S. Han, J. Jung, S. Schechter, and

D. Wetherall. These Aren’t the Droids You’re Looking for:
Retroﬁtting Android to Protect Data from Imperious
Applications. In ACM CCS, 2011.

[82] M. Ikram, H. J. Asghar, M. A. Kaafar, B. Krishnamurthy,
and A. Mahanti. Towards Seamless Tracking-Free Web:
Improved Detection of Trackers via One-class Learning. In
PETs, 2017.

[83] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy,

J. S. Foster, and T. Millstein. Dr. Android and Mr. Hide:
Fine-grained Permissions in Android Applications. In ACM
SPSM, 2012.

[84] A. Kantchelian, M. C. Tschantz, S. Afroz, B. Miller,

V. Shankar, R. Bachwani, A. D. Joseph, and J. D. Tygar.
Better Malware Ground Truth: Techniques for Weighting
Anti-Virus Vendor Labels. In AISec, 2015.

[85] A. Kharraz, W. Robertson, D. Balzarotti, L. Bilge, and
E. Kirda. Cutting the Gordian Knot: A Look Under the
Hood of Ransomware Attacks. In DIMVA, 2015.

[86] S. Khattak, D. Fiﬁeld, S. Afroz, M. Javed, S. Sundaresan,

V. Paxson, S. J. Murdoch, and D. McCoy. Do You See
What I See? Differential Treatment of Anonymous Users.
In NDSS, 2016.

[87] S. Khattak, M. Javed, S. A. Khayam, Z. A. Uzmi, and

V. Paxson. A Look at the Consequences of Internet
Censorship Through an ISP Lens. In ACM IMC, 2014.

[88] H. Kim, J. Smith, and K. G. Shin. Detecting Energy-Greedy

Anomalies and Mobile Malware Variants. In ACM
MobiSys, 2008.

[89] C. Kreibich, N. Weaver, B. Nechaev, and V. Paxson.

Netalyzr: Illuminating the Edge Network. In ACM IMC,
2010.

[90] A. Le, J. Varmarken, S. Langhoff, A. Shuba, M. Gjoka, and

A. Markopoulou. AntMonitor: A System for Monitoring
from Mobile Devices. In ACM (C2B(I)D), 2015.

[91] I. Leontiadis, C. Efstratiou, M. Picone, and C. Mascolo.

Don’t Kill my Ads!: Balancing Privacy in an Ad-supported
Mobile Application Market. In ACM HotMobile, 2012.

[92] MaxMind. https://www.maxmind.com.
[93] R. Nithyanand, S. Khattak, M. Javed, N. Vallina-Rodriguez,

M. Falahrastegar, J. E. Powles, E. De Cristofaro,
H. Haddadi, and S. J. Murdoch. Ad-blocking and counter
blocking: A slice of the arms race. FOCI, 2016.

[94] V. Paxson. Bro: a System for Detecting Network Intruders

in Real-Time. Computer Networks, 1999.

[95] V. C. Perta, M. V. Barbera, G. Tyson, H. Haddadi, and

A. Mei. A Glance through the VPN Looking Glass: IPv6
Leakage and DNS Hijacking in Commercial VPN Clients.
PETS, 2015.

[96] I. Poese, S. Uhlig, M. A. Kaafar, B. Donnet, and B. Gueye.

IP geolocation databases: Unreliable? ACM SIGCOMM
CCR, 2011.

[97] A. Razaghpanah, N. Vallina-Rodriguez, S. Sundaresan,

C. Kreibich, P. Gill, M. Allman, and V. Paxson. Haystack:
In Situ Mobile Trafﬁc Analysis in User Space. arXiv
preprint arXiv:1510.01419, 2015.

[98] C. Reis, S. Gribble, T. Kohno, and N. Weaver. Detecting

In-Flight Page Changes with Web Tripwires. In NSDI,
2008.

[99] Rescorla, Eric and Modadugu, Nagendra. Datagram

Transport Layer Security (RFC4347).
https://tools.ietf.org/html/rfc4347.

[100] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang,

and C. Cowan. User-Driven Access Control: Rethinking
Permission Granting in Modern Operating Systems. In
IEEE S&P, 2012.

[101] Samsung KNOX. https://www.samsungknox.com/en.
[102] A.-D. Schmidt, F. Peters, F. Lamour, C. Scheel, S. A.

Çamtepe, and ¸S. Albayrak. Monitoring Smartphones for
Anomaly Detection. Mobile Networks and Applications,
2009.

[103] S. Seneviratne, H. Kolamunna, and A. Seneviratne. A

Measurement Study of Tracking in Paid Mobile
Applications. In ACM WiSec, 2015.

[104] A. Shabtai, U. Kanonov, Y. Elovici, C. Glezer, and

Y. Weiss. “Andromaly”: A Behavioral Malware Detection
Framework for Android Devices. JIIS, 2012.

[105] S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit:

Separating Smartphone Advertising from Applications. In
USENIX Sec, 2012.

[106] Y. Song and U. Hengartner. PrivacyGuard: A VPN-based

Platform to Detect Information Leakage on Android
Devices. In ACM SPSM, 2015.

[107] N. Vallina-Rodriguez, J. Amann, C. Kreibich, N. Weaver,

and V. Paxson. A Tangled Mass: The Android Root
Certiﬁcate Stores. In ACM CoNEXT, 2014.

[108] N. Vallina-Rodriguez, S. Sundaresan, C. Kreibich, and

V. Paxson. Header Enrichment or ISP Enrichment?
Emerging Privacy Threats in Mobile Networks. In ACM
HotMiddlebox, 2015.

[109] N. Vallina-Rodriguez, S. Sundaresan, C. Kreibich,

N. Weaver, and V. Paxson. Beyond the Radio: Illuminating
the Higher Layers of Mobile Networks. In ACM MobiSys,
2015.

[110] N. Weaver, C. Kreibich, M. Dam, and V. Paxson. Here Be

Web Proxies. In PAM, 2014.

[111] N. Weaver, C. Kreibich, and V. Paxson. Redirecting Dns for

Ads and Proﬁt, 2011.

[112] L.-K. Yan and H. Yin. DroidScope: Seamlessly

Reconstructing the OS and Dalvik Semantic Views for
Dynamic Android Malware Analysis. In USENIX Security,
2012.

[113] Y. Zhou and X. Jiang. Dissecting Android Malware:
Characterization and Evolution. In IEEE S&P, 2012.

[114] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh. Taming

Information-stealing Smartphone Applications (on
Android). In TRUST, 2011.

364