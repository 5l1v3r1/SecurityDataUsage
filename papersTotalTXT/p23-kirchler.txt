Tracked Without a Trace: Linking Sessions of Users by
Unsupervised Learning of Patterns in Their DNS Trafﬁc

Matthias Kirchler

Humboldt Universität Berlin
matt.kirchler@gmail.com

Dominik Herrmann

Fakultät III, Universität Siegen

dh@exomail.to

Jens Lindemann
Universität Hamburg

lindemann@informatik.uni-

hamburg.de

Marius Kloft

Humboldt Universität Berlin

kloft@hu-berlin.de

ABSTRACT
Behavior-based tracking is an unobtrusive technique that
allows observers to monitor user activities on the Internet
over long periods of time – in spite of changing IP addresses.
Previous work has employed supervised classiﬁers in order
to link the sessions of individual users. However, classiﬁers
need labeled training sessions, which are diﬃcult to obtain
for observers.
In this paper we show how this limitation
can be overcome with an unsupervised learning technique.
We present a modiﬁed k-means algorithm and evaluate it on
a realistic dataset that contains the Domain Name System
(DNS) queries of 3,862 users. For this purpose, we simu-
late an observer that tries to track all users, and an Internet
Service Provider that assigns a diﬀerent IP address to every
user on every day. The highest tracking accuracy is achieved
within the subgroup of highly active users. Almost all ses-
sions of 73 % of the users in this subgroup can be linked
over a period of 56 days. 19 % of the highly active users can
be traced completely, i. e., all their sessions are assigned to
a single cluster. This fraction increases to 40 % for shorter
periods of seven days. As service providers may engage in
behavior-based tracking to complement their existing pro-
ﬁling eﬀorts, it constitutes a severe privacy threat for users
of online services. Users can defend against behavior-based
tracking by changing their IP address frequently, but this is
cumbersome at the moment.

Keywords
attack; privacy; behavioral ﬁngerprints; k-means; clustering

1.

INTRODUCTION

Many citizens are losing track of their digital footprint
as service providers frequently ask for personal data. More
worrying, however, are eﬀorts to monitor users behind their
back without their consent. A well-known example is the

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
AISec’16 October 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4573-6/16/10.
DOI: http://dx.doi.org/10.1145/2996758.2996770

practice of online behavioral advertising, which allows busi-
nesses to target their ads to individual users [12]. To infer
user interests and demographics, ad networks keep track of
the websites a user visits by setting cookies and “supercook-
ies” [3] or by extracting unique device ﬁngerprints [44].

In this paper we study a more advanced tracking tech-
nique, behavior-based tracking, which does not rely on
cookies or client-side scripting. Behavior-based tracking ex-
ploits the fact that the online behavior of users exhibits
characteristic and recurrent patterns (cf. studies on revisita-
tion behavior [45, 53] and uniqueness of browsing behavior
[46, 47]), either resulting from habits and hobbies or due to
automated processes, e. g., browsers that retrieve recently
opened websites upon launch, or RSS readers that contact
the same set of blogs every day. As users have no means to
detect behavior-based tracking on servers, it constitutes a
considerable threat to privacy.

Previous work [18] considered behavior-based tracking in
the context of recursive name servers (resolvers) in the Do-
main Name System (DNS): Resolvers can search for char-
acteristic patterns in the stream of queries in order to re-
identify individual users in spite of changing IP addresses.
This threat is especially worrying for users of third-party re-
solvers, whose popularity has increased signiﬁcantly in the
last few years. Large operators like Google and OpenDNS
receive hundreds of billions of DNS queries per day [7, 48].
Measurements of the Regional Internet Registry administer-
ing IP addresses for the Asia Paciﬁc (APNIC) indicate that
Google’s 8.8.8.8 resolvers are currently (July 2016) serving
more than 12 % of all DNS queries worldwide [2]. Thus, they
have become an attractive vantage point for surveillance.

Behavior-based tracking does not only aﬀect users of pub-
It could also be adopted by high-reach
lic DNS services.
trackers, such as those of Google and Facebook [58], to resur-
rect deleted third-party cookies. In principle, the technique
can be employed by any passive observer on a network seg-
ment between users and their DNS resolvers.

Furthermore, the small size of DNS queries (0.05 % to
0.25 % of total network traﬃc [14, 49]) allows them to be
stored for later analysis. Thus, the technique may become
a useful tool for attribution of malicious activities during
forensic investigations [19]. Investigators could use behavior-
based tracking to trace the behavior of adversaries that
use multiple IP addresses over time to cover their tracks.
Behavior-based tracking may also be employed by intelli-
gence agencies such as NSA and GCHQ, which have already

23Figure 1: Scenario and objective of behavior-based tracking

leveraged tracking cookies and DNS traﬃc for surveillance
purposes [11, 16].

Most of existing work on user re-identiﬁcation employs
supervised learning techniques, which require many labeled
sessions of each user to achieve high accuracy: Yang [57] uses
300 sessions per user, Kumpoˇst and Maty´aˇs [37] the traﬃc
of a whole month. However, it is unrealistic to assume that
this amount of labeled data is available in a user tracking
scenario, because many Internet Service Providers (ISPs)
assign short-lived IP addresses (cf. Sect. 3). On the other
hand, limiting the assumed adversary to re-identifying users
solely from one day to the next in a stateless fashion (cf.
[18]) constrains the adversary artiﬁcially.

One obvious way to improve on existing work consists in
applying more sophisticated supervised learning techniques,
e. g., support vector machines. We approach the problem
from a diﬀerent angle in this paper and apply an unsuper-
vised learning technique, which does not depend on labeled
training data. We have evaluated our technique, which is
based on the k-means algorithm [39], on a realistic dataset
that contains the DNS queries of 3,862 users. According to
our results an observer can link almost all sessions of 73 %
of the more active users in our dataset over a period of 56
days. 52 % of the more active users are completely traceable
over periods of seven days. Our technique can be used on
its own in order to track users or it can be used as a labeling
machine for a subsequently executed supervised scheme. We
present two contributions in this paper:

1. To the best of our knowledge, we are the ﬁrst to apply
unsupervised machine learning techniques to the prob-
lem of tracking users in order to link multiple sessions
at once.
In contrast to previous work, our assumed
observer does not need (unrealistically) large amounts
of labeled training instances.

2. We present evaluation procedures and metrics that
are tailored to the user tracking scenario and gener-
ate meaningful results for both observers and users.

This paper is structured as follows. We review privacy is-
sues in the DNS in Sect. 2. After that we describe the prob-
lem setting in Sect. 3 and our unsupervised tracking tech-
nique in Sect. 4. Evaluation results are provided in Sect. 5,
before we discuss limitations and future work in Sect. 6. Fi-
nally, we review related work in Sect. 7 before we conclude
in Sect. 8.

2. PRIVACY ISSUES IN DNS

In the following, we brieﬂy review the architecture of the
DNS and the resulting privacy implications. The DNS (orig-
inally speciﬁed in RFCs 1034 and 1035 [42, 43]) is the most
important name resolution service on the Internet. It pro-
vides access to a distributed database that is organized as
a tree of domains. DNS is primarily used to look up the IP
address for a given domain name, i. e., almost all communi-
cation activities start with one or multiple DNS queries.

Clients oﬄoad name resolution to dedicated servers, so-
called resolvers. Resolvers forward queries to authoritative
name servers, which store the actual mapping information.
The vast majority of DNS queries is transmitted in the clear
via UDP. All queries issued by the same user can be linked
as long as the source IP address of the user stays the same
and is not shared among multiple users.

The privacy implications of this design have been recog-
nized only recently. As stated in RFC 7626 [6] it is straight-
forward for DNS resolvers (and any other observers on the
path between client and resolver) to monitor the browsing
behavior of their users. Furthermore, DNS queries issued by
automated processes (e. g., mail clients, software update dae-
mons, cloud-based services) may disclose information about
installed applications, operating system, and other network
services that are consumed by a client. Finally, some clients
are conﬁgured incorrectly and leak internal hostnames to the
resolver, either their own or hostnames of other devices in
their local area network.

3. PROBLEM SETTING & ASSUMPTIONS
The aim of behavior-based tracking is to link activities
of users in spite of changing IP addresses (cf. Fig. 1). We
assume a passive adversary (the observer ) that is able to ob-
tain the DNS queries of a group of users, either by operating
a DNS resolver and recording all queries or by monitoring
the communication lines between clients and resolver.

Many ISPs force the broadband routers of their customers
to reconnect periodically, assigning a diﬀerent dynamic IP
address each time. Empirical studies of large user groups
indicate that IP addresses are often used for a period of 24
hours [40, 56]. Therefore, we will present and evaluate our
behavior-based tracking scheme in a setting where all ses-
sions have a ﬁxed duration of one day. Further, we assume
that every user contributes at most one session per day, that
multiple users do not share a single IP address (i. e., all traf-
ﬁc that originates from the same source IP address during

May 7IP addressDatesessions of a specific user to be linked with each otherDNS Query Log of May 7, 2016May 3May 4May 2May 5May 1May 689.13.10.81133.21.1.4751.171.34.774.22.55.4789.171.34.788.21.45.9000:02:27.134 51.171.34.7 yahoo.com  A00:02:27.135 51.171.34.7 pclick.yahoo.com  A00:02:27.135 51.171.34.7 s.yimg.com  A...00:02:30.004 89.171.34.7 time.apple.com  A00:02:30.004 89.171.34.7 time.apple.com  AAAA...00:02:30.201 51.171.34.7 www.npr.org  A00:02:30.201 51.171.34.7 www.politico.com  A...23:38:18.915 133.21.1.47 ROBINS-PC.local  A...23:59:12.472 51.171.34.7 www.politico.com  A24Table 1: Structure of the data for behavior-based tracking

Session

Day

User

Data Matrix X

1
...

1
...

ti ∈ {1, . . . , D}

Session 1
...
Session i
...
Session n
n = #{sessions} D = #{days}

...
tn

ui ∈ {1, . . . , k}

...
un
k = #{users}

(0, 2, 0, 1, 0, 0, . . . , 0, 4)

xi ∈ Rd

...

...
xn

d = #{domains}

a day belongs to the same user), and that traﬃc from dif-
ferent source IP addresses belongs to diﬀerent users. These
assumptions allow us to formalize the tracking problem. We
defer the discussion of the ensuing limitations to Sect. 6.

An observer operates as follows. For a given time period
of D consecutive days, the Period under Consideration
(PuC), the observer tries to link the sessions of each user by
collecting them within a dedicated cluster. The ideal result
would consist of as many clusters as users, each one only
including all sessions of a single user. While many users will
have exactly D sessions within a PuC, there may be less
active users with fewer than D sessions.

vectors x1, . . . , xn with n =(cid:80)D

Formalization.
A PuC contains n sessions (t, u, x) from an unknown num-
ber of k ≤ n users (cf. Table 1). The sessions are stored in
a data matrix X with dimensions n × d, whose rows are the
t=1 #{active users on day t},
and d = #{domains}. Thus, Xi,j is the number of times
that domain j was queried in session i. Each user may be
responsible for 1 to D sessions. The aim is to ﬁnd a clus-
terer f : {sessions} ⊂ Rd → {clusters} ˆ={1, . . . , k} that cor-
rectly maps the single sessions into homogeneous clusters
each corresponding uniquely to a user (we use R instead
of N0 for reasons explained in Sect. 4). The cluster of a
user u who was active on all days should contain all sessions
(1, u,∗), . . . , (D, u,∗), but no sessions of other users.

4. TRACKING TECHNIQUE

We perform behavior-based tracking with a slightly modi-
ﬁed k-means algorithm [39], a well established unsupervised
learning technique for points in the Euclidean space Rd. We
use k-means for clustering, because of its eﬃciency and be-
cause we want to compare our unsupervised approach with
the supervised approach of [18], which is based on the con-
ceptually related 1NN classiﬁer [41]. We explain our changes
to the classic k-means algorithm in Sect. 4.1 and describe the
implementations which we have evaluated in Sect. 4.2.
4.1 Modiﬁed k-means Algorithm

The classic k-means method consists of three steps: ini-
tialization, assignment, and update. For sake of clarity, we
will start out with a description of the overall procedure and
defer the details of initialization to Sect. 4.1.2.
4.1.1 Clustering Procedure
The initialization step sets up k cluster centroids c1, . . . , ck
as an initial guess. Assignment and update steps are exe-
cuted in a loop until the resulting clustering does not change
any more, i. e., until it has converged. The assignment step

runs through all sessions x1, . . . , xn and assigns them to the
cluster centroid that is nearest to them with respect to a
{dist(xi, cj)}. Dur-
distance metric: c(xi) = argminc1,...,ck
ing the update step, every centroid cj is updated to cj;new
by computing the mean of all nj sessions that are currently
assigned to it:

(cid:88)

cj;new =

1
nj

xi

i: c(xi)=cj

(cid:26)

(cid:27)

Our ﬁrst modiﬁcation of k-means is to replace the com-
monly used Euclidean distance metric with the cosine dis-
tance that has also been applied in previous work [18, 37]:

,

distcos(xi, cj) = 1 − (cid:104)xi, cj(cid:105)
||xi|| ||cj||

ˆc(xi) = argminc1,...,ck
where (cid:104)·,·(cid:105) and || · || denote scalar product and norm in
Rd, respectively. Cosine distance is closely related to cosine
||x|| ||y|| = 1 − distcos(x, y), which
(cid:104)x,y(cid:105)
similarity, simcos(x, y) =
equates to the cosine of the angle of two vectors, i. e., their
magnitude is neglected [4]. Note that cosine distance is not
a metric (e. g., a distance of 0 between two points does not
necessarily imply equality), i. e., it is not guaranteed that
k-means will converge. This spherical k-means algorithm
[10] is known to work well with high-dimensional and sparse
data.

The second modiﬁcation is the introduction of a restric-
tion on the maximum number of sessions assigned to a clus-
ter. Given n sessions from D days, maximum cluster size
can be restricted to D (soft restriction), as we assume that
a user contributes at most one session per day (cf. Sect. 3).
The strict restriction additionally ensures that each cluster
holds at most one session from each day in the PuC. The
restriction is enforced after the assignment step by inserting
a reassignment step, in which we iterate over the clusters
that violate it (cf. Alg. 1). The most remote sessions in a
cluster are reassigned to the nearest possible other clusters
(ensuring that they do not introduce new violations there)
until all violations have been resolved. Note that the strict
restriction includes the soft restriction. However, we found
that in some situations the soft restriction performs better.

Initialization Strategies

4.1.2
After having described the overall procedure, we will now
explain how cluster centroids are initialized. We consider
two initialization strategies that correspond to the datasets
we consider during the evaluation, the clean dataset, in which
every user is active on every day, and the realistic dataset, in
which users may be active only on some days (cf. Sect. 5.2
for details about the diﬀerence).

25Algorithm 1 k-means clustering with strict restriction
1: procedure KMC-STRICT(X, index, iter)

(cid:46) X:
matrix with sessions x1, . . . , xn; index: index assigning
1, . . . , n to day1, . . . , dayD; iter: max. no. of iterations

initialize cluster centroids c1, . . . , ck
l = 0
while not converged and l < iter do

Assign: assign all sessions xi in X to the near-
est centroid
Reassign: move sessions from overfull clusters
(> 1 sessions per day) to closest non-full clusters
Update: recompute cluster centroids as mean
of assigned sessions
l = l + 1
end while

2:
3:
4:
5:

6:

7:

8:
9:
10: end procedure

As each cluster is meant to only contain sessions of a single
user and users only change their IP address once a day, it
makes sense to initialize the centroids with a single session
of every user. For the clean dataset, the initializing of the
centroids is straightforward: On every day there is exactly
one session for every user u ∈ {1, . . . , k}. Thus, we initialize
the clusters with the sessions from the last day: c1, . . . , ck =
xn−k+1, . . . , xn (in principle, any day can be used).

However, this approach cannot be applied to the realistic
dataset because the total number of active users in the PuC
is unknown to the observer. Therefore, we have to estimate
the number of clusters k. The estimate k is determined
by ﬁnding the maximum number of sessions per day within
the PuC, kmax, and reserving space for additional users by
computing k = (1 + p)kmax. The observer has to choose an
appropriate value for p, for instance, by consulting historic
data. In a pretest we experimented with diﬀerent values p ∈
{0, 0.05, 0.1, 0.25, 0.5, 1} and found that p does not have
a signiﬁcant inﬂuence on the resulting accuracy: The ARI
scores (deﬁned later, cf. Sect. 5.2) varied by only 0.03 points.
According to the results, larger values for p are better suited
for longer PuCs. We set p = 0.1 in our experiments.

Based on this estimate, we initialize a subset C of the
centroids by choosing all kmax sessions from the most active
day t = tmax. Then we determine the missing k − kmax cen-
troids by selecting those sessions from the remaining period
that are farthest away (in terms of cosine distance) from the
centroids in C as these sessions likely belong to other users.
4.2

Implementation

In order to explore the eﬀectiveness of our clustering tech-
nique and to compare it to previous work, we have imple-
mented and evaluated three clustering algorithms.

First, we have implemented our modiﬁed k-means clus-
tering technique (KMC), which operates on PuCs span-
ning multiple days. If the scenario in Fig. 1 corresponded to
a PuC (D = 7), KMC would predict clusters that hold all
sessions occurring from May 1 to May 7.

Second, we consider a technique based on the 1-nearest-
neighbor (1NN) classiﬁer that was proposed in [18], which
is, to the best of our knowledge, the state of the art in
behavior-based tracking using query behavior. In contrast
to our approach, this technique is stateless and limited to
linking sessions on two (typically adjacent) days. Therefore,
an observer that uses the 1NN classiﬁer is bound to lose

track of users that are inactive on a given day (e. g., the two
users who are inactive on May 3 in Fig. 1). In the exam-
ple in Fig. 1, an observer might train the classiﬁer with the
sessions from May 6 (using three arbitrarily generated class
labels) and use it to predict which of the sessions on May 7
belongs to which of the class labels generated on May 6.

In order to obtain comparable results, we extend the clas-
siﬁcation approach from [18] by implementing a 1-nearest-
neighbor clustering technique (1NNC) that chains to-
gether day-to-day predictions generated by a 1NN classiﬁer.
To this end, 1NN-like classiﬁcation is performed repeatedly
for all pairs of adjacent days within a PuC. The procedure
starts on the last day t = D of the PuC and iterates back-
wards day by day. The clusters are initialized with the ses-
sions of the last day. In each iteration, 1NNC loops over the
sessions of day t and adds the nearest session from day t− 1
to the respective clusters. If there are fewer sessions on day
t − 1 than on day t, the remaining clusters will be closed on
day t; if there are more sessions on day t − 1 than on day t,
new clusters will be initialized with the extraneous sessions.
Thus, the resulting number of clusters depends on the data
and does not have to be speciﬁed in advance.

Although this basic strategy subjects 1NNC to the same
limitations as the approach in [18], 1NNC turns out to be
quite eﬀective in some of our experiments. Obviously, much
more complex strategies for 1NNC are conceivable. For in-
stance, one could implement a stateful variant that keeps
clusters open when no additional sessions are added to them
on a given day due to intermittent inactivity of a user.

Third, we report results for a random clustering tech-
nique (RNDC) that assigns every session to a randomly
selected cluster to serve as a primitive baseline. It is initial-
ized with k = 1.1kmax clusters (like the KMC techniques)
and we apply the strict restriction to the clustering.

5. EVALUATION

We have evaluated our tracking technique with a realistic
dataset. We describe our data (Sect. 5.1) and methodology
(Sect. 5.2) before we report results in Sect. 5.3.
5.1 Dataset

We obtained the dataset used in [18] in order to evalu-
ate the three clustering techniques. This dataset is suitable
for this purpose, because it complies fairly well with the as-
sumptions described in Sect. 3. The dataset was collected at
University of Regensburg (Germany) by instructing the uni-
versity’s DNS resolvers to log all DNS queries that originated
from the student housing network (LAN only, no queries
from the WiFi network). Thus, the dataset captures a large
fraction of the surﬁng behavior of a relatively homogenous
group, i. e., students who access the Internet for studying
and leisure from their room. Note that we are not guar-
anteed to have the whole traﬃc of all users, because the
dataset does not contain the DNS queries that are issued
while accessing the network from other parts of the campus.
Every student signs up for one unique and static IP ad-
dress that allows to connect a single device in their room
to the broadband network. Further, students are prohibited
from sharing their address with others, i. e., by setting up
network address translating routers or WiFi access points.
As a result, the dataset contains the ground truth for the
mapping between users and queries, which allows us to eval-
uate the eﬀectiveness of our tracking technique.

26Figure 2: Time series of hourly query rate

Figure 3: Discriminativeness of domains (original dataset)

In total, 431,210,371 queries for 5,010,507 distinct do-
mains issued by 3,862 diﬀerent users have been recorded
between April 30, 2010 (0:00:00 am local time) and June
29, 2010 (11:59:59 pm local time). Each record consists of
query time, domain, query type, and the source IP address,
which has been replaced by a constant pseudonym by the
computing center of the university in order to protect the
identity of the students.
5.1.1 Preprocessing
We use the raw data from the DNS query log and trans-
form it into a data matrix as described in Sect. 3. In order
to obtain meaningful results, we perform a very conservative
form of feature selection during this process. We delete
all domains that have been queried in fewer than six ses-
sions. This feature selection technique reduces the size of
the data matrix considerably (but it does not have a signif-
icant impact on the results reported in this paper).

After feature selection we apply a commonly used sub-
linear transformation on the data matrix: To every cell
in the data matrix we apply f (x) = log(1 + x), which limits
the eﬀect of extremely large outliers [55]. In pretests we also
explored other directions, most notably diﬀerent forms of tf-
idf transformations from the text mining domain, where the
term frequency is multiplied with the inverse document fre-
quency [41]. However, these techniques did not prove eﬀec-
tive. Future work may look into adding additional features
such as the query type or leveraging temporal features like
the “time of day”. Another conceivable extension is to take
the order of queries into account by creating n-grams [5].
5.1.2 Dataset Characteristics
Figure 2 shows a time series plot of the hourly query rate
(before feature selection). The aggregated query behavior
follows a diurnal pattern. As most users are students, it is
not surprising that traﬃc peaks in the evening hours, mostly
on Mondays, Tuesdays, and Wednesdays, while the week-
ends are less busy. Furthermore, the logging infrastructure
seems to have malfunctioned between June 20 and June 22,
where no or abnormally few queries were recorded.

Table 2 presents essential characteristics of the dataset
before and after feature selection. While the number of dis-
tinct domains decreases considerably by 89.3 % to 534,269,
the number of users remains unchanged at 3,862 and the
number of queries decreases only marginally by 3.00 % to
418,288,004. The users vary considerably in terms of the
extent of their online activity. The numbers of queries per
user and distinct domains per user span several orders of
magnitude, ranging from 1 to more than 28 million and

from 1 to almost 100,000, respectively. For sessions with
an assumed ﬁxed duration of 24 hours, the median number
of queries is 1,352 (IQR: 2,326) and the median number of
distinct hostnames per session is 357 (IQR: 444). On the
one hand, the user-domain data matrix is very sparse, be-
cause the query behavior is governed by a power law, i. e.,
there are few extremely popular domains followed by a long
tail of domains that are queried very infrequently [26]. On
the other hand, most users are very active: 75 % of the con-
sidered users are online on more than half of the days. On
75 % of the days, more than 2,053 users are active. All in
all, our dataset exhibits characteristics that are in line with
the results of Schomp et al. who provide a more extensive
analysis of DNS client behavior [52].

5.1.3 Discriminativeness of Domains
Before applying learning techniques, we analyze the dis-
criminative potential of domains [21]. To this end, we con-
sider the relationship between domains and users. As shown
in Fig. 3, the original dataset contains > 3.7 million domains
that are only queried by a single user. Most of these domains
are not useful to re-identify a particular user, because they
are queried only once. However, some of them do survive
feature selection (cf. row “Users per domain” in Table 2).

Further analysis revealed 273 domains (queried by 103
users) that are particularly discriminative, because in addi-
tion to being accessed by a single user only, they also oc-
curred in every session of this user.
In the following we
present an instructive selection of such highly discrimi-
native domains (HDDs). The distinctiveness of some
domains is due to unique identiﬁers related to hardware
(MAC addresses, as in 00-02-∗∗-∗∗-∗∗-∗∗.uni-regensburg.de)
and software (e. g., 6af9cf181c5∗∗∗∗.users.storage.live.com)
or generated by the user (SRV queries to a user’s own chat
server at xmpp-client. tcp.∗∗∗∗.homeip.net). Other cases,
for instance SCH∗∗∗∗∗∗-PC.uni-regensburg.de, reveal the
hostname of a user’s machine, which happens to be unique in
our database. This behavior is not surprising, because many
common operating systems issue queries for their own host-
name and for hostnames found in their neighborhood. Fur-
thermore, queries for some domains are the result of peculiar
conﬁguration choices (ntp2.ptb.de for clock synchronization)
or forgotten settings (proxy.ucd.ie, the internal HTTP proxy
of another university). Finally, we observed many domains
for ordinary websites and weblogs, which might be periodi-
cally refreshed by RSS newsreaders or browsers in the back-
ground. Obviously, the HDDs in our dataset may not be
highly discriminative in other networks.

10010110210310410510610704/2905/0605/1305/2005/2706/0306/1006/1706/2407/01datequeries per hour100101102103104105106107 1 10 100 1000 10000number of users who issued queries for a domainumber of domainshighly discriminative domainsn27Table 2: Statistics before (left) and after (right) preprocessing, i. e., purging queries for domains occurring in less than six
sessions. Column pi contains the statistics of the ith percentile, i. e., the most active user issued 28,857,393 queries.

Descriptive Statistic

p0

p25

p50

p75

p100

p0

p25

p50

p75

p100

Queries per user
Domains per user
Active days per user

Queries per session
Domains per session

Queries per domain
Active days per domain
Sessions per domain
Users per domain

1
1
1

1
1

1
1
1
1

24,069
2,107
31

572
196

59,368
4,184
43

1,385
372

1
1
1
1

2
1
1
1

121,185
7,434
52

28,857,393
303,568
62

2,969
671

4
2
2
2

5,117,745
258,110

9,781,157
62
135046
3812

1
1
1

1
1

6
1
6
1

23,601
1,833
31

561
190

17
7
8
5

58,010
3,617
43

1,352
357

34
12
14
8

116,833
6,038
52

28,351,070
98,470
62

2,887
634

101
27
37
17

5,112,205
38,587

9,781,157
62
135046
3812

Active users per day

984

2,053

2,438

3,076

3,208

983

2,053

2,438

3,076

3,206

The presence of HDDs simpliﬁes the job of the observer.
If an observer was aware of the fact that a user issued queries
for a HDD in every session, the observer could trivially link
the aﬀected sessions with high conﬁdence. However, while
we can determine such domains by looking at the ground
truth, this is more diﬃcult in practice. The observer would
have to consider the possibility that a potentially HDD is
queried by diﬀerent users on diﬀerent days. Nevertheless, we
conjecture that classiﬁcation and clustering beneﬁt from the
presence of HDDs and will study their utility in Sect. 5.3.2.

5.2 Methods and Metrics
We analyze the tracking techniques for PuC lengths D ∈
{7, 14, 28, 56}. For each D, we partition the ﬁrst 56 days of
the dataset into adjacent D-sized PuCs (cf. Sect. 3) and re-
port the tracking accuracy for a simulated observer. Besides
the realistic dataset, which was characterized in Sect. 5.1,
we also consider a clean dataset. The clean dataset is de-
rived from the realistic dataset in such a manner that there
is no user ﬂuctuation. It solely contains the traﬃc of the
subset of the 134 users that are active on all of the ﬁrst 56
days, i. e., the number of users is the same in all experiments
(regardless of the value of D). This unrealistically simpliﬁed
scenario provides an upper bound for tracking accuracy.

Further, we report results from three perspectives: (1) on
the global level, (2) on the cluster level, and (3) on the user
level. For the global perspective we use an established
metric for external cluster evaluation. We calculate the ad-
justed Rand Index (ARI) [24], which is derived from the
Rand Index (RI) and accounts for chance. RI indicates how
similar two clusterings are. We use the ARI to compare a
perfect clustering (based on the ground truth) with the pre-

dicted clusters. RI is calculated by obtaining all(cid:0)n

(cid:1) possible

pairs of n sessions in a PuC and by determining the fraction
of consensually clustered pairs. A pair of sessions is consen-
sually clustered if both sessions are in the same cluster in
the two clusterings or if they are in two diﬀerent clusters in
the two clusterings:
A = {(xi, xj) : i < j, clustering1(xi) = clustering1(xj) and

2

clustering2(xi) = clustering2(xj)}, and

B = {(xi, xj) : i < j, clustering1(xi) (cid:54)= clustering1(xj) and

clustering2(xi) (cid:54)= clustering2(xj)}.

Given these two sets ARI is deﬁned as follows:

#{A ∪ B}

,

(cid:0)n
(cid:1)

2

ARI =

with RI =

RI−E[RI]
1 − E[RI]

where the expectation is taken over the uniform distribution
over all possible pairs of clusterings. An ARI score of 1 indi-
cates perfect agreement between the clusterings, a uniformly
random clustering achieves a score close to 0, and negative
scores indicate worse-than-random agreement.

The second perspective, the cluster-level evaluation,
provides additional insights by looking at two quality mea-
sures that may be of interest for an observer, namely homo-
geneity h and completeness c [50]. h indicates whether all
sessions assigned to a cluster belong to the same user, which
is important if the costs of erroneously linking sessions of
diﬀerent users are high. c indicates whether all sessions of a
user are assigned to the same cluster, which is important if
the costs of missing some sessions of a user are high.

These metrics, which are normalized to the range [0, 1]
(larger values being more desirable for an observer), are de-
ﬁned as

h = 1 − H(U|C)

and c = 1 − H(C|U )

,

H(U )

H(C)

where H(·) and H(·|·) denote the entropy and conditional
entropy, respectively, U is the set of users, and C is the set
of clusters. We will also refer to the v-measure, which is the
harmonic mean of h and c: v = 2hc
h+c . Note, however, that
these measures have to be interpreted with care: First, they
are not adjusted for chance, i. e., in certain situations ran-
dom cluster assignment may achieve high scores. Second,
considering only homogeneity or completeness can be mis-
leading: A clustering that assigns each session to a separate
cluster (i. e., there are as many clusters as sessions) achieves
maximum homogeneity, but scores poorly in terms of com-
pleteness. A clustering that assigns all sessions into a single
cluster achieves maximum completeness c = 1, but scores
poorly in terms of homogeneity.

Finally, we are also interested in the traceability of in-
dividual users. This kind of analysis is facilitated by the
user-level evaluation. For this purpose we calculate two
anonymity metrics, am and bm, that capture diﬀerent as-
pects of how good a user that is active on m days can be
tracked within a PuC.

28Both metrics are normalized to the range [0, 1]. An ob-
server strives to minimize am and to maximize bm. We deﬁne

am(u) =

and bm(u) =

Ncluster(u) − 1

m − 1

Cmax(u) − 1

m − 1

,

where Ncluster(u) equals the number of clusters a user’s ses-
sions are assigned to and Cmax(u) equals the maximum num-
ber of a user’s sessions that are assigned to the same cluster.
The informative value of the two metrics is illustrated with
the following example. Assume that users uAlice and uBob
are online on m = 6 days and the cluster-assignments are
assignAlice = {1, 1, 2, 2, 3, 3} and assignBob = {4, 4, 4, 4, 5, 6},
respectively. The sessions of both users are spread over three
clusters. Intuitively, uBob can be traced better, because a
larger number of his sessions are in one big cluster (clus-
ter 4). The value of bm reﬂects this: bm(uAlice) = 2−1
6−1 =
0.2 < 0.6 = 4−1
6−1 = bm(uBob). Note that am(uAlice) =
0.5 = am(uBob) for both users. Now let’s consider a dif-
ferent assignment for uAlice and uBob (again with m = 6):
assignAlice = {1, 1, 2, 3, 4, 5} and assignBob = {6, 6, 7, 7, 8, 8}.
In this case we obtain bm(uAlice) = 0.2 = bm(uBob), but
am(uAlice) = 0.8 > 0.4 = am(uBob). This result reﬂects the
intuition that it is more diﬃcult to track uAlice, because her
sessions are spread over more clusters.

More formally, we refer to a user that is active in m ses-
sions as perfectly untraceable, if his sessions get assigned to
m diﬀerent clusters, i. e., Ncluster(u) = m and Cmax(u) = 1)
and thus am(u) = 1 and bm(u) = 0 (because a = 1 ⇔
b = 0). Furthermore, we say a user is completely trace-
able, if all his sessions are assigned to a single cluster, i. e.,
Ncluster(u) = 1 and Cmax(user) = m) and thus am(u) = 0
and bm(u) = 1 (because a = 0 ⇔ b = 1).

Note that completely traceable users do not necessarily
have pure clusters, i. e., their clusters may hold additional
sessions that belong to other users (that are not completely
traceable).
Impure clusters are undesirable for observers
that are interested to learn the behavioral proﬁles of par-
ticular users. Therefore, we will also report which fraction
of users are perfectly traceable, which accounts for com-
pletely traceable users whose cluster is pure.
5.3 Results

We begin with results for the clean dataset, i. e., the traﬃc
of 134 users that are active on every day, and proceed with
results for the realistic dataset that contains the traﬃc of all
3,862 users. Note that the accuracy values published in [18]
cannot be compared to our results for 1NNC.
5.3.1 Clean Dataset
We begin with results on the global level. Both tech-
niques come up with clusters that are very similar to the
ground truth clustering. While the ARI values of 1NNC
ﬂuctuate between 0.961 and 0.996, KMC-STRICT achieves
values between 0.963 and 1 (KMC-SOFT: 0.937–0.991).

In order to determine the inﬂuence of D we averaged the
ARI scores over all PuCs with the same length D. The
results show that increasing D improves the quality of the
clustering. The ARI scores increase from 0.981 (D = 7)
to 0.997 (D = 56) for 1NNC and from 0.984 to 0.994 for
KMC-STRICT, respectively. As expected, the ARI values
of RNDC are close to zero for all values of D.

According to the cluster-level evaluation almost all clus-
ters are homogenous and complete. In all cases, complete-

Figure 4: Averaged ARI for varying PuC length D

ness and homogeneity scores were almost identical. h and c
range between 0.989 and 0.999 (mean: 0.994) for 1NNC and
between 0.990 and 1.000 (mean: 0.996) for KMC-STRICT
(D = 7). For higher values of D, both scores are always
higher than 0.995. The mean v-scores for RNDC are not 0,
but decrease from 0.598 (D = 7) to 0.231 (D = 56).

On the user level we ﬁnd that most users can be tracked
perfectly for all values of D. For D = 7, 93 % of all users are
perfectly traceable with 1NNC. The sessions of the remaining
users are spread over two clusters (a7 = 0.167). For D = 14,
28, and 56 the fraction of perfectly traceable users decreases
to 92 %, 91 %, and 91 %. The sessions of the remaining users
are still spread over two clusters. KMC-STRICT performs
similarly: 96 % of the users are perfectly traceable for D = 7.
Again, the sessions of the remaining users are spread over
two clusters, with the exception of three users, whose ses-
sions are spread over 3–4 clusters in some of the PuCs. For
longer PuCs, 97 %, 93 %, and 84 % of the users are perfectly
traceable. The bm values average at 0.99 or higher for all
values of D for both 1NNC and KMC-STRICT.
5.3.2 Realistic Dataset
As before we begin with an evaluation on a global level
for individual PuCs (D = 7). Due to the considerably larger
number of users, the complexity of the clustering task is
now much higher and the quality of the predicted cluster-
ings is considerably lower. As expected, 1NNC performs
worse than KMC on the realistic dataset, because it can-
not deal with intermittent periods of inactivity resulting
from user ﬂuctuation (ARI scores for 1NNC: 0.236–0.412;
for KMC-STRICT: 0.425–0.706). This time KMC-STRICT
is outperformed by KMC-SOFT (0.561–0.762).

Again, we analyze the inﬂuence of D (cf. Fig. 4). In con-
trast to the clean dataset, the average number of active users
is quite stable for all considered values of D in the realistic
dataset. As expected, averaged ARI scores of 1NNC de-
crease when D is increased (from 0.371 for D = 7 to 0.153
for D = 56), because it becomes more likely that individual
users are inactive on at least one day. The performance of
KMC depends on the type of restriction in use. While the
average ARI scores of KMC-SOFT remain stable (0.708–
0.726), the scores of KMC-STRICT improve when D is in-
creased and it eventually outperforms KMC-SOFT (from
0.642 for D = 7 up to 0.760 for D = 56), despite the num-
ber of concurrently active users increasing slightly. Again,
the ARI scores of RNDC are close to zero in all cases.

The v-scores obtained in the cluster-level evaluation
are in line with the global view. The v-score of 1NNC de-
creases from 0.89 (D = 7) to 0.77 (D = 56), while KMC-
STRICT achieves v-scores between 0.94 (D = 7) and 0.92

29Table 3: User-level evaluation of realistic dataset: Anonymity scores am and bm for KMC-STRICT, broken down for user
subgroups with diﬀerent level of activity (low: users that are active on ≤ 40 % of days in D; medium: 40–70 %; high: > 70 %)

User subgroup

PuC length D

Users in subgroup
am ≤ 0.1
am ≤ 0.25
bm ≥ 0.9
bm ≥ 0.75
Completely traceable
Perfectly traceable

high activity

medium activity

low activity

7

14

28

56

7

14

28

56

7

14

28

56

67 % 60 % 55 % 53 % 27 % 30 % 32 % 35 %

6 % 11 % 12 % 12 %

52 % 62 % 68 % 73 % 47 % 34 % 43 % 46 % 46 % 32 % 21 % 16 %
75 % 82 % 89 % 91 % 47 % 63 % 69 % 70 % 46 % 39 % 35 % 27 %

52 % 60 % 64 % 68 % 47 % 34 % 41 % 44 % 46 % 32 % 21 % 16 %
73 % 78 % 83 % 86 % 47 % 60 % 64 % 66 % 46 % 38 % 32 % 25 %

52 % 42 % 29 % 19 % 47 % 34 % 22 % 13 % 46 % 32 % 18 % 11 %
1 %
40 % 32 % 21 % 13 % 29 % 21 % 12 %

5 % 21 % 11 %

3 %

(a) am for 1NNC

(b) bm for 1NNC

(c) am for KMC-STRICT

(d) bm for KMC-STRICT

Figure 5: Distribution of am and bm of highly active users (estimated with kernel density estimator)

(D = 56). The v-score of the RNDC baseline decreases from
0.79 to 0.55 when D is increased. While the homogeneity
score remains relatively stable, the completeness score (es-
pecially of 1NNC) decreases when D is increased. In partic-
ular, for 1NNC, homogeneity only drops from 0.89 to 0.83,
whereas completeness drops from 0.89 to 0.72.

Finally, we report results on the user level. For KMC-
STRICT, the mean value of am (averaged over all users
within a PuC and over all PuCs) decreases when D is in-
creased (0.247, 0.210, 0.184, and 0.191), i. e., the sessions of
individual users are spread over few clusters even for large
values of D. The mean bm scores remain quite stable when D
is increased (0.741, 0.764, 0.778, and 0.765), i. e., sessions of
individual users are mostly assigned to a single large cluster.
1NNC performs signiﬁcantly worse.
In contrast to KMC-
STRICT the am values do not beneﬁt from larger PuCs
(0.492, 0.504, 0.513, and 0.514) and the bm-values decrease
with increasing D (0.456, 0.349, 0.242, and 0.161).

The quality of the clustering depends on the level of activ-
ity of a user. Therefore, we break down the results for users
that are active on less than 40 % (low ), between 40 % and
70 % (medium), and on more than 70 % (high) of the days
of a PuC. We describe the main trends with the ﬁgures for
highly active users, which make up between 53 % (D = 56)
and 67 % (D = 7) of the users (cf. Table 3 for results of the
other groups). Figure 5 shows the distribution of am and bm
for the highly active users with 1NNC and KMC-STRICT.
For D = 7, 1NNC’s predictions make 14 % of the users
completely traceable – much less than the 52 % achieved
by KMC-STRICT (KMC-SOFT: 52 %). 11 % and 40 % of
the users are perfectly traceable with 1NNC and KMC-
STRICT, respectively (KMC-SOFT: 42 %). A score of am ≤
0.25, which corresponds to two or fewer diﬀerent clusters for
m = 5, 6, or 7, is achieved for 33 % and 75 % of the users
for 1NNC and KMC-STRICT (KMC-SOFT: 75 %). Also,

KMC-STRICT achieves a score of bm ≥ 0.75 for 73 % of the
users, i. e., most sessions of a user are contained within a
single large cluster (1NNC: 25 %; KMC-SOFT: 73 %)

For larger values of D, the fraction of perfectly and com-
pletely traceable users decreases, because the additional ses-
sions increase the likelihood of at least one wrong assign-
ment. For D = 14, KMC-STRICT results in perfect trace-
ability of 32 % of users (1NNC: 5 %; KMC-SOFT: 32 %) and
in complete traceability of 42 % of users (1NNC: 6 %; KMC-
SOFT: 41 %). In contrast, the fraction of users that is al-
most completely traceable increases for longer PuCs: 62 %
of users have am ≤ 0.1 (1NNC: 12 %; KMC-SOFT: 62 %).
This trend stays intact up to D = 56, where only 13 % of the
users are perfectly traceable and only 19 % are completely
traceable with KMC-STRICT, but 73 % are almost com-
pletely traceable with am ≤ 0.1 (1NNC: 1 %, 1 %, and 8 %;
KMC-SOFT: 8 %, 14 %, and 68 %). Further, the fraction of
users with bm ≥ 0.9 increases to 68 %. Finally, as expected,
RNDC performs very poorly: More than 99 % of the users
have am > 0.9 and bm < 0.1 for all values of D.

Highly Discriminative Domains.

Now we analyze to what extent traceability is improved by
HDDs (cf. Sect. 5.1.3). To this end, we consider the average
fraction of users that is traceable within the PuCs. We com-
pare the fraction fHDD obtained on the subset UHDD, the 101
users that issue queries for HDDs in the ﬁrst 56 days, with
the fraction fnone obtained for the remaining users Unone.
The users in UHDD are not signiﬁcantly more or less ac-
tive than the whole user group (cf. “Number of active days
within PuC” in Table 4), which is why Unone contains all
users regardless of their level of activity.

We found that both 1NNC and KMC (cf. Table 4) beneﬁt
considerably from the presence of HDDs regardless of the
value of D. For 7-day PuCs and complete traceability, we

30Table 4: Fraction of completely and perfectly traceable users for the subset of users with HDDs (UHDD) and the subset of all
remaining users (Unone) obtained with KMC-STRICT

D

Subgroup

7

14

28

56

UHDD Unone UHDD Unone UHDD Unone UHDD Unone

Number of active days in PuC

5.6

5.2

10.4

10.0

19.5

19.5

36.0

38.2

Completely traceable
Perfectly traceable

72 % 50 %
59 % 35 %

65 % 38 %
52 % 26 %

55 % 25 %
43 % 16 %

45 % 15 %
8 %
30 %

ﬁxed time-frame of a PuC, the simulated observer has to
link considerably more sessions than in the previous exper-
iments, namely 14, 42, or 168 sessions for D = 7 days and
L = 12, 4, and 1, respectively. Figure 6 summarizes the re-
sults. As expected, the average ARI of KMC-STRICT drops
from 0.642 for L = 24 to 0.134 for L = 1. This sharp de-
crease is also observed when D is increased. For instance, for
D = 28, the average ARI value drops from 0.704 (L = 24)
to 0.142 (L = 1). 1NNC performs even worse: Average ARI
values decay from 0.371 (L = 24) to 0.032 (L = 1) for D = 7
and the loss of quality is even higher for longer PuCs.

5.3.4 Computational Effort for Clustering
Our experiments were executed on an Intel Xeon E5-2695
v2 48-core (2.40 GHz) machine with a total of 377 GiB of
RAM. The reported runtimes are for individual PuCs, i. e.,
the runtime of an experiment can be obtained by multiply-
ing these runtimes with 8, 4, 2, and 1 for D = 7, 14, 28, and
56, respectively. The runtime of KMC mainly depends on
D and the number of iterations. KMC never needed more
than 40 iterations, most of the time much fewer. The aver-
age runtime of KMC per PuC is 16, 44, 147, and 592 minutes
for D = 7, 14, 28, and 56, respectively. Memory consump-
tion ranges from less than 500 MiB for D = 7 to 2 GiB
for D = 56. 1NNC is considerably faster, with 0.4, 1, 3,
and 5 minutes per PuC for increasing values of D and a
corresponding memory usage of 300 to 800 MiB. The run-
times of our non-optimized Python code demonstrate that
behavior-based tracking does not require much eﬀort.

6. DISCUSSION AND FUTURE WORK

We now summarize our results, discuss the limitations of

our study, and present possible extensions.

Generally, the results indicate that unsupervised learn-
ing techniques can be employed to build comprehensive be-
havioral proﬁles even when no labeled training sessions are
available. Apparently, the clustering problem is not very
challenging on the clean dataset. Thus, an observer that is
faced with a relatively small number of users that are known
to be active every day can use either 1NNC or KMC for
behavior-based tracking with high accuracy. The limitations
of the 1NNC approach, which corresponds to day-to-day
classiﬁcation of sessions, become apparent on the realistic
dataset. KMC outperforms 1NNC by a considerable margin
because it maintains a global view over all days within a
PuC. KMC turns out to be most eﬀective for users that are
active on most of the days. While the best results for com-
plete and perfect traceability are clearly obtained on short
PuCs, closely matching clusterings (am ≤ 0.1) can also be
achieved for the longest periods we considered.

Figure 6: Averaged ARI for varying session length L

observe an improvement from fnone = 17.5 % to fHDD =
36.8 % (1NNC) and from fnone = 50.1 % to fHDD = 71.8 %
(KMC-STRICT), respectively; for D = 56, the fractions
are fnone = 0.9 % and fHDD = 7.9 % for 1NNC and fnone =
14.8 % and fHDD = 44.6 % for KMC-STRICT. Moreover, we
found that users with HDDs are more likely to be perfectly
traceable. For D = 56, the corresponding fraction improves
from fnone = 7.9 % to fHDD = 29.7 % for KMC-STRICT.

Continuously Traceable Users.

So far, we evaluated every PuC separately and reported
averaged results, i. e., the reported fraction of 40 % perfectly
traceable highly active users (D = 7) means that on average
40 % of these users were perfectly traceable within each of
the eight 7-day PuCs. Based on these results we determined
what fraction of users is continuously perfectly traceable,
i. e., in every PuC in which they are active.

This is the case for 7.6 % of the 658 users that were highly
active in all of their 7-day PuCs, i. e., all their sessions are as-
signed to (up to eight) pure clusters. The fraction increases
with D as follows: 8.0 % of 1,170 users for D = 14, 9.5 % of
1,592 users for D = 28, and 13 % of 1,950 users for D = 56.
Smaller fractions are observed, if we consider all users
(regardless of their level of activity). For D = 7, we found
that 3.3 % of the users are continuously perfectly traceable.
Again, the fraction increases with D. We observed fractions
of 4.2 %, 5.8 %, and 8.5 % for D = 14, 28, and 56. The
fractions of continuously completely traceable users are con-
sistently higher: For D = 7, 9.1 % of the users get assigned
into a single (not necessarily pure) cluster, which increases
to 10.5 %, 11.7 %, and 15.6 % for larger values of D.

5.3.3 Results for Shorter Sessions
Up to this point we assumed that every user changes their
IP address exactly once a day. In the following we provide se-
lected results for smaller session lengths than L = 24 hours,
in particular for 12-, 4-, and 1-hour sessions. Within the

316.1 Limitations

We believe that our tracking technique can be applied
in other settings. However, given our dataset we can only
discuss the implications of behavior-based tracking for DNS
users. While the dataset has been recorded with care, it does
not capture the DNS traﬃc of all users perfectly (cf. Sect. 5.1
and Fig. 2). Further, multiple users may have shared a single
IP address (cf. the user with 28,857,393 queries, Table 2),
which may have degraded the results.

While we strive for a realistic evaluation, our results should
not be used to draw conclusions about the eﬀectiveness of
our technique under diﬀerent conditions. First, the cluster-
ing problem becomes more diﬃcult if our assumptions (cf.
Sect. 3) are relaxed. For instance, an observer that only has
access to DNS traﬃc may ﬁnd it diﬃcult to separate the
traﬃc of users that share the same IP address. This applies
to households where multiple users are behind a router that
performs network address translation. However, determined
observers may still be able to separate the traﬃc of multi-
ple users, either by leveraging context knowledge (such as
the time of day) or by leveraging peculiarities of the query
behavior to distinguish diﬀerent devices or browsers. Ob-
servers that have access to the TCP traﬃc of users can also
exploit the fact that machines can be re-identiﬁed due to
their diﬀerent clock skews [36].

Second, the clustering problem becomes more diﬃcult for
large user groups with millions of users. However, DNS
resolvers that are accessed by users around the globe can
partition their large user group according to the diurnal ac-
cess patterns into smaller subgroups for diﬀerent time zones.
Observers can also exploit the fact that most users are spa-
tially constrained. They could use the source IP addresses
and their approximate geolocations to create even smaller
partitions (losing track of users that travel large distances).
6.2 Protection Against Tracking

The results for shorter session lengths in Sect. 5.3.3 indi-
cate that behavior-based tracking eﬀorts can be defeated by
changing one’s IP address frequently. While this measure
is eﬀective in theory, implementing it in practice is cum-
bersome due to the “always online” paradigm. In order to
obtain a new IP address more often than once a day, users
will typically have to manually force their broadband router
to disconnect and re-connect to their ISP, which terminates
all established connections, potentially interrupting pending
work. Moreover, this approach is not guaranteed to work as
some ISPs re-assign the same IP address upon reconnect.
The introduction of IPv6 is a chance to overcome these lim-
itations, because ISPs could hand out a large number of
IPv6 address preﬁxes to each of their customers [17].

Decreasing session lengths is only one of many conceivable
protection techniques. For instance, multiple users could
choose to share a single source IP address, for instance by
using a VPN or a proxy that forwards the DNS queries to
the resolver [20]. This move would prevent observers from
tracking individual users. Furthermore, users could submit
dummy queries to the DNS resolver in order to obfuscate
their actually desired queries. However, it has been shown
that using randomly selected domains for this purpose is
not eﬀective [13, 22], i. e., eﬀective dummy traﬃc schemes
require information about the traﬃc to be obscured.

As none of these techniques are in widespread use, most
Internet users are vulnerable to behavior-based tracking at

the moment. Note that techniques that protect against on-
path eavesdroppers, e. g., DNSCrypt (https://dnscrypt.org),
DNSCurve [9], or DNS over TLS [23], cannot protect against
tracking by curious DNS resolvers.
6.3 Improving the Clustering

Finally, we remark that there are numerous ways to im-
prove our technique. Deriving more features from the data
(such as timing of queries), applying more sophisticated pre-
processing (such as n-grams), and employing other distance
metrics (such as (distcos)p with p > 1) and clustering tech-
niques (e. g., OPTICS [1], which infers the number of clus-
ters from the data) are promising avenues for future work.
Multiple approaches can also be combined to improve the
clustering result (consensus clustering [15]). Future work
could also analyze the security of the framework proposed
in [32, 33, 34, 38] and extend the methodology to capture
non-euclidean geometries [51] and multiple data types [8, 28,
29, 30, 31, 35] as well as diﬀerent clustering objectives [54].

7. RELATED WORK

Most of related work assumes that an observer has access
to multiple labeled sessions or that the IP address of users
remains constant for a long time. Kumpoˇst and Maty´aˇs [37]
study NetFlow logs and re-identify users by comparing the
cosine similarity of vectors that contain the number of con-
nections to HTTP(S) and SSH hosts. While they use the
same similarity measure, their approach diﬀers from ours:
Their features are derived from actual connections (which
is more accurate than using DNS queries that are subject
to caching), however they correspond to destination IP ad-
dresses (which are more ambiguous than domain names).
Even with a full month of labeled training data, they report
high false-positive rates of 21 % (SSH) and 68 % (HTTP).

Yang [57] proposes to authenticate users based on the vis-
ited websites. She considers decision trees, support vector
machines, and association rule mining in her study and as-
sumes an e-commerce provider that stores behavioral proﬁles
of every of its customers in a database. When customers sign
up, they upload the browsing history of multiple sessions to
the provider. When they log in at a later time, they upload
their most recent browsing history so that the provider can
conﬁrm their identity. Given 300 labeled sessions per user
Yang achieves an accuracy of up to 87 % for 100 concurrent
users, but reports she was unable to scale up her experiment.
More closely related is the work by Kim and Zhang [27],
who derive behavioral ﬁngerprints from DNS queries. They
consider the DNS queries issued by approximately 55,000
users within two consecutive weeks. They build patterns for
users that are active on at least four of the seven days within
the ﬁrst week, assuming that the DNS traﬃc of users can
be attributed over a full week. They ﬁnd ﬁngerprints for a
subset of 11,921 users and report that 98.74 % of these can
be re-identiﬁed in the second week.

The work closest to ours is [18] by Herrmann et al. They
demonstrate how sessions of users can be linked based on
their DNS queries. They report an accuracy of 85.4 % using
a supervised learning approach on the dataset that is also
used in this paper. However, they are limited to linking ses-
sions of two adjacent days. Further, their accuracy measure
is deﬁned in a peculiar way, because they include correct
predictions about inactive users. The actual fraction of cor-
rectly linked sessions is considerably lower at about 70 %.

32The analysis by Jain et al. [25] is related to our highly
discriminative domains (cf. Sect. 5.1.3). They show that nu-
merous identiﬁers are being transmitted in the clear, which
can be used to link sessions of users by adversaries able to
observe network traﬃc.
8. CONCLUSION

We have presented an unsupervised behavior-based track-
ing technique that outperforms the state of the art by a
considerable margin. In contrast to previous work our tech-
nique is able to link a large number of sessions of individual
users at once. In our experiments with the DNS queries of
3,862 users, we are able to link almost all sessions of 73 %
of the 2,047 highly active users that have issued queries on
at least 40 days within a period of 56 days. 13 % of these
2,047 users can be traced perfectly, i. e., all their sessions
are assigned to a single pure cluster. Tracking is even more
eﬀective for shorter periods. An observer that considers pe-
riods of seven days can on average almost completely track
75 % of the 2,588 users that are active on at least ﬁve days,
40 % of these 2,588 users can be traced perfectly.

On the one hand, behavior-based tracking can be adopted
by forensic investigators or law enforcement agencies that
want to link the activities of roaming adversaries. On the
other hand, we are concerned that ad networks and ana-
lytics providers will make use of behavior-based tracking to
complement their existing tracking eﬀorts, which are (sup-
posedly) limited to explicit identiﬁers such as cookies and
browser or device ﬁngerprints so far. This is worrying, as
behavior-based tracking takes place purely on the server side
and thus cannot be detected on the client. Therefore, we
hope that ISPs and manufacturers of broadband routers will
cooperate to come up with usable solutions to protect cus-
tomers against this threat.
Acknowledgments
We are grateful to M. Maaß, H. Prid¨ohl, and to the develop-
ers of scikit-learn. Marius Kloft acknowledges support from
the German Research Foundation (DFG) award KL 2698/2-
1 and from the Federal Ministry of Science and Education
(BMBF) awards 031L0023A and 031B0187B.
9. REFERENCES
[1] M. Ankerst, M. M. Breunig, H. Kriegel, and

J. Sander. OPTICS: Ordering Points To Identify the
Clustering Structure. In ACM SIGMOD Int’l Conf. on
Management of Data, pages 49–60. ACM, 1999.

[2] APNIC Labs. DNSSEC Validation, 2016.

http://stats.labs.apnic.net/dnssec, accessed:
2016-09-19.

[3] M. Ayenson, D. J. Wambach, A. Soltani, N. Good,
and C. J. Hoofnagle. Flash Cookies and Privacy II:
Now with HTML5 and ETag Respawning. Available
at SSRN: http://ssrn.com/abstract=1898390, 2011.
[4] R. A. Baeza-Yates and B. A. Ribeiro-Neto. Modern

Information Retrieval. ACM Press, 1999.

[5] C. Banse, D. Herrmann, and H. Federrath. Tracking

Users on the Internet with Behavioral Patterns:
Evaluation of Its Practical Feasibility. In IFIP SEC,
volume 376 of AICT, pages 235–248. Springer, 2012.

[6] S. Bortzmeyer. DNS Privacy Considerations. RFC

7626, 2015.

[7] CircleID. Google Improving Location-Sensitive DNS

Responses for Its 400B Responses-Per-Day Public
DNS Service, 2014. http://www.circleid.com/posts/
google improving location sensitive dns responses/,
accessed: 2016-09-19.

[8] C. Cortes, M. Kloft, and M. Mohri. Learning kernels

using local rademacher complexity. In NIPS, pages
2760–2768, 2013.

[9] M. Dempsky. DNSCurve: Link-Level Security for the

Domain Name System. Draft, RFC Editor, 2010.

[10] I. S. Dhillon and D. S. Modha. Concept

Decompositions for Large Sparse Text Data Using
Clustering. Machine Learning, 42(1/2):143–175, 2001.

[11] S. Englehardt, D. Reisman, C. Eubank,

P. Zimmerman, J. Mayer, A. Narayanan, and E. W.
Felten. Cookies That Give You Away: The
Surveillance Implications of Web Tracking. In WWW,
pages 289–299. ACM, 2015.

[12] Federal Trade Commission. Self-Regulatory Principles

For Online Behavioral Advertising, 2009. https://
www.ftc.gov/reports/federal-trade-commission-staﬀ-
report-self-regulatory-principles-online-behavioral,
accessed: 2016-09-19.

[13] H. Federrath, K.-P. Fuchs, D. Herrmann, and

C. Piosecny. Privacy-Preserving DNS: Analysis of
Broadcast, Range Queries and Mix-Based Protection
Methods. In ESORICS, volume 6879 of LNCS, pages
665–683. Springer, 2011.

[14] S. Gebert, R. Pries, D. Schlosser, and K. Heck.

Internet Access Traﬃc Measurement and Analysis. In
Proc. Traﬃc Monitoring and Analysis (TMA 2012),
volume 7189 of LNCS, pages 29–42. Springer, 2012.

[15] A. Goder and V. Filkov. Consensus Clustering

Algorithms: Comparison and Reﬁnement. In Proc.
10th Workshop on Algorithm Engineering and
Experiments, pages 109–117. SIAM, 2008.

[16] C. Grothoﬀ, M. Wachs, M. Ermert, and

J. Appelbaum. NSA’s MORECOWBELL, 2015.
https://gnunet.org/morecowbell, accessed: 2016-09-19.

[17] D. Herrmann, C. Arndt, and H. Federrath. IPv6

Preﬁx Alteration: An Opportunity to Improve Online
Privacy. CoRR, abs/1211.4704, 2012. Available at
http://arxiv.org/abs/1211.4704.

[18] D. Herrmann, C. Banse, and H. Federrath.

Behavior-based Tracking: Exploiting Characteristic
Patterns in DNS Traﬃc. Computers & Security,
39A:17–33, Nov. 2013.

[19] D. Herrmann, K. Fuchs, and H. Federrath.

Fingerprinting Techniques for Target-oriented
Investigations in Network Forensics. In Sicherheit,
volume 228 of LNI, pages 375–390. GI, 2014.

[20] D. Herrmann, K. Fuchs, J. Lindemann, and

H. Federrath. EncDNS: A Lightweight
Privacy-Preserving Name Resolution Service. In
ESORICS, volume 8712 of LNCS, pages 37–55.
Springer, 2014.

[21] D. Herrmann, C. Gerber, C. Banse, and H. Federrath.

Analyzing Characteristic Host Access Patterns for
Re-identiﬁcation of Web User Sessions. In NordSec,
volume 7127 of LNCS, pages 136–154. Springer, 2010.
[22] D. Herrmann, M. Maaß, and H. Federrath. Evaluating
the Security of a DNS Query Obfuscation Scheme for

33Private Web Surﬁng. In IFIP SEC, volume 428 of
AICT, pages 205–219. Springer, 2014.

[23] Z. Hu, L. Zhu, J. Heidemann, A. Mankin, D. Wessels,
and P. Hoﬀman. Speciﬁcation for DNS over Transport
Layer Security (TLS). RFC 7858, 2016.

[24] L. Hubert and P. Arabie. Comparing partitions.

Journal of classiﬁcation, 2(1):193–218, 1985.

internet traﬃc. In IMC, pages 90–102. ACM, 2009.

[41] C. D. Manning, P. Raghavan, and H. Sch¨utze.

Introduction to Information Retrieval. Cambridge
University Press, Cambridge, UK, 2008.

[42] P. Mockapetris. Domain Names: Concepts and

Facilities. RFC 1034, 1987.

[43] P. Mockapetris. Domain Names: Implementation and

[25] S. Jain, M. Javed, and V. Paxson. Towards mining

Speciﬁcation. RFC 1035, 1987.

latent client identiﬁers from network traﬃc. PoPETs,
2016(2):100–114, 2016.

[26] J. Jung, E. Sit, H. Balakrishnan, and R. Morris. DNS

Performance and the Eﬀectiveness of Caching.
IEEE/ACM Trans. Netw., 10(5):589–603, 2002.

[27] D. W. Kim and J. Zhang. You are how you query:

Deriving behavioral ﬁngerprints from DNS traﬃc. In
SecureComm, volume 164 of LNICST, pages 348–366.
Springer, 2015.

[28] M. Kloft, U. Brefeld, P. D¨uessel, C. Gehl, and

P. Laskov. Automatic feature selection for anomaly
detection. In AISec, pages 71–76. ACM, 2008.

[29] M. Kloft, U. Brefeld, P. Laskov, K.-R. M¨uller, A. Zien,

and S. Sonnenburg. Eﬃcient and accurate lp-norm
multiple kernel learning. In NIPS, pages 997–1005,
2009.

[30] M. Kloft, U. Brefeld, P. Laskov, and S. Sonnenburg.

Non-sparse multiple kernel learning. In NIPS
Workshop on Kernel Learning: Automatic Selection of
Optimal Kernels, volume 4, 2008.

[31] M. Kloft, U. Brefeld, S. Sonnenburg, and A. Zien.

Lp-norm multiple kernel learning. JMLR,
12(Mar):953–997, 2011.

[32] M. Kloft and P. Laskov. A poisoning attack against

online anomaly detection. In NIPS Workshop on
Machine Learning in Adversarial Environments for
Computer Security, 2007.

[33] M. Kloft and P. Laskov. Online anomaly detection

under adversarial impact. In AISTATS, pages
405–412, 2010.

[34] M. Kloft and P. Laskov. Security analysis of online

centroid anomaly detection. JMLR,
13(Dec):3681–3724, 2012.

[44] K. Mowery and H. Shacham. Pixel perfect:

Fingerprinting canvas in HTML5. In Proc. of Web 2.0
Security and Privacy (W2SP 2012). IEEE, 2012.

[45] H. Obendorf, H. Weinreich, E. Herder, and M. Mayer.

Web Page Revisitation Revisited: Implications of a
Long-Term Click-Stream Study of Browser Usage. In
CHI, pages 597–606. ACM, 2007.

[46] L. Olejnik and C. Castelluccia. Towards Web-based

Biometric Systems Using Personal Browsing Interests.
In ARES, pages 274–280. IEEE, 2013.

[47] L. Olejnik, C. Castelluccia, and A. Janc. Why Johnny

Can’t Browse in Peace: On the Uniqueness of Web
Browsing History Patterns. In HotPETs, 2012.

[48] OpenDNS System, 2016.

https://system.opendns.com/, accessed: 2016-09-19.

[49] P. Richter, N. Chatzis, G. Smaragdakis, A. Feldmann,
and W. Willinger. Distilling the Internet’s Application
Mix from Packet-Sampled Traﬃc. In PAM, volume
8995 of LNCS, pages 179–192. Springer, 2015.

[50] A. Rosenberg and J. Hirschberg. V-measure: A

conditional entropy-based external cluster evaluation
measure. In EMNLP-CoNLL, volume 7, pages
410–420, 2007.

[51] B. Sch¨olkopf and A. J. Smola. Learning with kernels:
support vector machines, regularization, optimization,
and beyond. MIT press, 2002.

[52] K. Schomp, M. Rabinovich, and M. Allman. Towards

a model of DNS client behavior. In PAM, volume 9631
of LNCS, pages 263–275. Springer, 2016.

[53] L. Tauscher and S. Greenberg. How people revisit web

pages: empirical ﬁndings and implications for the
design of history systems. Int. J. Hum.-Comput. Stud.,
47(1):97–137, 1997.

[35] M. Kloft, U. R¨uckert, and P. L. Bartlett. A unifying

[54] J. E. Vogt, M. Kloft, S. Stark, S. S. Raman,

view of multiple kernel learning. In ECML-PKDD,
pages 66–81. Springer, 2010.

[36] T. Kohno, A. Broido, and K. C. Claﬀy. Remote

physical device ﬁngerprinting. IEEE Trans.
Dependable Sec. Comput., 2(2):93–108, 2005.

[37] M. Kumpoˇst and V. Maty´aˇs. User Proﬁling and

Re-identiﬁcation: Case of University-Wide Network
Analysis. In TrustBus, volume 5695 of LNCS, pages
1–10. Springer, 2009.

[38] P. Laskov and M. Kloft. A framework for quantitative
security analysis of machine learning. In AISec, pages
1–4. ACM, 2009.

[39] J. MacQueen. Some methods for classiﬁcation and
analysis of multivariate observations. In Proc. 5th
Berkeley Symposium on Mathematical Statistics and
Probability, Volume 1: Statistics, pages 281–297.
University of California Press, 1967.

[40] G. Maier, A. Feldmann, V. Paxson, and M. Allman.
On dominant characteristics of residential broadband

S. Prabhakaran, V. Roth, and G. R¨atsch. Probabilistic
clustering of time-evolving distance data. Machine
Learning, 100(2-3):635–654, 2015.

[55] I. H. Witten and E. Frank. Data Mining. Practical

Machine Learning Tools and Techniques. Elsevier, San
Francisco, 2005.

[56] Y. Xie, F. Yu, K. Achan, E. Gillum, M. Goldszmidt,
and T. Wobber. How dynamic are IP addresses? In
SIGCOMM Conf. on Applications, Technologies,
Architectures, and Protocols for Computer
Communications, pages 301–312. ACM, 2007.

[57] Y. Yang. Web user behavioral proﬁling for user

identiﬁcation. Decis. Support Syst., 49:261–271, 2010.

[58] Z. Yu, S. Macbeth, K. Modi, and J. M. Pujol.

Tracking the Trackers. In WWW, pages 121–132, 2016.

34