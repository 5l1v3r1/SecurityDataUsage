Ofﬂine Downloading in China: A Comparative Study

Zhenhua Li

Tsinghua University

Tencent Co. Ltd, China

lizhenhua1983@tsinghua.edu.cn

Yao Liu

State University of New York

Binghamton University
yaoliu@binghamton.edu

Christo Wilson

Northeastern University

Boston, MA, US
cbw@ccs.neu.edu

Zhen Lu

Tsinghua University

Beijing, China

luzhen02@gmail.com

Tianyin Xu

University of California

San Diego, CA, US
tixu@cs.ucsd.edu
Yinlong Wang
Tsinghua University

Tencent Co. Ltd, China

wangyinlong239@gmail.com

ABSTRACT
Although Internet access has become more ubiquitous in recent
years, most users in China still suffer from low-quality connection-
s, especially when downloading large ﬁles. To address this issue,
hundreds of millions of China’s users have resorted to technologies
that allow for “ofﬂine downloading”, where a proxy is employed to
pre-download the user’s requested ﬁle and then deliver the ﬁle at
her convenience.

In this paper, we examine two typical implementations of ofﬂine
downloading: the cloud-based approach and the smart AP (access
point) based approach. Using a large-scale dataset collected from a
major cloud-based system and comprehensive benchmarks of pop-
ular smart APs, we ﬁnd that the two approaches are complementary
while also being subject to distinct performance bottlenecks. Driv-
en by these results, we design and implement a proof-of-concept
middleware called ODR (Ofﬂine Downloading Redirector) to help
users get rid of performance bottlenecks.

We feel that ofﬂine downloading has broad applicability to other
areas of the world that lack broadband penetration. By deploying
ofﬂine downloading technologies, coupled with our proposed ODR
middleware, the Internet experiences for users in many parts of the
world can be improved.

Categories and Subject Descriptors
C.2.1 [COMPUTER-COMMUNICATION NETWORKS]: Net-
work Architecture and Design—Store and forward networks; C.2.5
[COMPUTER-COMMUNICATION NETWORKS]: Local and
Wide-Area Networks—Internet; C.4 [PERFORMANCE OF SYS-
TEMS]: Design studies

General Terms
Design, Experimentation, Measurement, Performance

Keywords
Internet; ofﬂine downloading; DTN; cloud storage; smart AP

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
IMC’15, October 28–30, 2015, Tokyo, Japan.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3848-6/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2815675.2815688.

1.

INTRODUCTION

Although Internet access has become more ubiquitous in recent
years, many users still suffer from low-quality (i.e., low-bandwidth,
intermittent, or restricted) network connections [54, 48, 71, 61, 51,
70]. In particular, there is a huge gap of high-speed, ﬁxed broad-
band penetration between developed and developing countries. By
the end of 2014, the penetration rate of ﬁxed broadband access in
the developed world has reached 27.5% with as high as 25 Mbps of
download bandwidth [18]. On the other hand, the broadband pene-
tration rate is merely 6.1% in the developing world with relatively
limited, unstable download bandwidth [25].

This digital divide prevents many Internet users in developing
countries from accessing the full wealth of data and services avail-
able online, especially those large ﬁles (e.g., HD videos and large
software) which require high-quality connections to download [45].
Researchers have studied various approaches to making the Internet
more accessible, performant, and affordable, such as delay-tolerant
networking (DTN) [17, 60]. Nevertheless, to date these technolo-
gies have not been widely deployed or evaluated in practice.

Modern China exempliﬁes both the promise and challenges of
increasing Internet penetration [16].
In the last ten years, 46%
of China’s population has come online [36], and China is now
home to world-class Internet companies like Tencent, Baidu, Al-
ibaba, and Sina Weibo. However, the majority (over 72%) of Chi-
na’s Internet users have low-quality connections [38], due to low
access bandwidth, unreliable/unstable data connection, and poor
inter-connectivity between ISPs (a well-known problem in China
known as the ISP barrier). The disparity between those who have
access to high-speed, ﬁxed broadband and those who do not is like-
ly to increase over the next few years as more of China’s rural pop-
ulation comes online.

To deal with the problems caused by low-quality Internet con-
nections, hundreds of millions of China’s users have resorted to
technologies that allow for “ofﬂine downloading” of large ﬁles [44,
59, 42, 41, 10, 22, 1]. Ofﬂine downloading implements ideas from
DTNs by outsourcing long downloads to a proxy, as demonstrated
in Figure 1. Speciﬁcally, when a user wants to acquire a ﬁle, the
user ﬁrst requests a proxy to pre-download the ﬁle on her behalf
(typically using an HTTP/FTP/P2P link via a low-quality network
connection). The proxy may have access to faster, cheaper, or more
reliable connectivity than the user, so it is better suited to download-
ing the ﬁle from the Internet. The user can then fetch the ﬁle from
the proxy at a later point in time, when local network conditions
are conducive to the task.
loading that are extremely popular in China [31, 33] (§ 2):

In this paper, we examine two implementations of ofﬂine down-

4731. The users’ fetching processes are often impeded. The cloud-
based approach can usually accelerate downloading by 7∼11
times, but performs poorly (i.e., the user’s fetching speed
falls below 1 Mbps, or 125 KBps, and is thus unﬁt for HD-
video streaming) once there is a bandwidth bottleneck in the
network path between the cloud and the user. Speciﬁcally, a
high portion (28%) of Xuanfeng users suffer from this bot-
tleneck, which is mainly caused by cross-ISP data delivery,
low user-side access bandwidth, or lack of cloud-side upload
bandwidth. These users should utilize an additional smart
AP to mitigate these impediments.

2. The cloud’s upload bandwidth is being overused. The cloud-
based approach is threatened by running out of its upload
bandwidth due to unnecessarily sending highly popular ﬁles.
A small percentage (0.84%) of highly popular ﬁles accoun-
t for a large part (39%) of all downloads. As the user base
grows, the cloud of Xuanfeng will have to reject more (>1.5%)
users’ fetching requests. Because the majority (87%) of re-
quested ﬁles are hosted in peer-to-peer data swarms [47],
many highly popular ﬁles can be directly downloaded by
users with as good or greater performance than what is pro-
vided by cloud-based ofﬂine downloading services.

3. Smart APs frequently fail during pre-downloading. Although
smart APs are immune to the above performance bottleneck-
s of the cloud-based approach, they frequently (42%) fail
while pre-downloading unpopular ﬁles. This is mainly caused
by insufﬁcient seeds in a P2P data swarm and poor HTTP/FTP
connections. Note that 36% of ofﬂine downloading request-
s are issued for unpopular ﬁles. Therefore, users who need
to download unpopular ﬁles should choose the cloud-based
approach, which is better at downloading unpopular ﬁles —
the failure ratio (13%) is much lower owing to collaborative
caching (refer to § 2.1) in the massive cloud storage pool.

4. Smart APs can be slower due to hardware/ﬁlesystem restric-
tions. Surprisingly, a smart AP’s pre-downloading speed can
be restricted by its hardware and ﬁlesystem. This is be-
cause some types of storage devices (e.g., USB ﬂash drive)
and ﬁlesystems (e.g., NTFS) do not ﬁt the pattern of fre-
quent, small data writes during the pre-downloading process.
These smart APs would beneﬁt from upgraded storage de-
vices and/or alternate ﬁlesystems, so as to release the full
potential of ofﬂine downloading.

Driven by these results, we design and implement a proof-of-
concept middleware called ODR (Ofﬂine Downloading Redirector,
available at http://odr.thucloud.com) to help users get rid of perfor-
mance bottlenecks (§ 6). As illustrated in Figure 2, the basic idea
of ODR is to adaptively redirect the user’s ﬁle request to where the
best performance is expected to be achieved, including the cloud
(we use the Xuanfeng cloud in our implementation), the smart AP,
the user’s local device, or a combination. ODR’s primary goal is
to minimize the downloading time and failure ratio; its secondary
goal is to minimize the upload bandwidth burden on the cloud.

ODR makes redirection decisions based on two types of infor-
mation. First, after receiving an ofﬂine downloading request, ODR
queries the content database of Xuanfeng to obtain the popularity
information of the requested ﬁle. Then, ODR examines whether
there is a potential bandwidth bottleneck by analyzing the user’s IP
address, access bandwidth, storage device, and so forth. Note that
ODR requires no modiﬁcation to existing cloud-based systems or
smart AP devices. As a result, it is easy to deploy in practice.

Figure 1: Basic working principle of ofﬂine downloading, as
well as the corresponding timing diagram.

• The cloud-based approach leverages a geo-distributed, mas-
sive cloud storage pool as the proxy [59, 44, 72], which usu-
ally caches petabytes of ﬁles in a datacenter that is within or
directly peered with the requesting user’s ISP. This approach
is adopted by Tencent Xuanfeng [41], Baidu CloudDisk [10],
and Xunlei [42]. As it requires expensive cloud infrastruc-
ture for data storage and delivery, it is mostly operated by
big Internet companies like Tencent and Baidu.

• The smart AP based approach relies on a local smart WiFi
AP (access point, also known as home router) as the proxy.
It is adopted by HiWiFi [21], MiWiFi [28], Newiﬁ [30], etc.
A traditional AP only forwards data for its connected end de-
vices like laptops and smartphones. In contrast, a smart AP,
if requested, also pre-downloads and caches data on an em-
bedded/connected storage device (e.g., an SD card, a USB
ﬂash drive, or a hard disk drive). The user can then fetch
the requested ﬁle at her convenience once it is successfully
pre-downloaded. This approach incurs almost zero infras-
tructure cost, but requires smart AP devices with redesigned
hardware, OS, and application software.

Currently, there is a dispute over which approach better suit-
s the best-effort Internet [3, 24]. This selection dilemma confus-
es the users of ofﬂine downloading services, especially those who
have little expertise in Internet content delivery. The key argument
lies in the performance of the two approaches, in terms of (pre-
)downloading speed, delay, and failure ratio. Both approaches
have advocates that express complaints in news media and mar-
keting reports. However, all these disputes are either limited to one
particular ofﬂine downloading service/product [59, 44, 6, 7, 8], or
rely on oversimpliﬁed workloads and network environments [72,
39, 23, 4]. The former make it hard to form a general and uni-
ﬁed view of the factors that may affect ofﬂine downloading perfor-
mance, while the latter do not present comprehensive or objective
results.

In this paper, we address the issue in a quantitative and com-
parative manner. First, we measure the workload characteristics of
ofﬂine downloading (§ 3), based on a large-scale dataset collect-
ed from a major cloud-based system called Xuanfeng [41]. Our
analysis of this dataset provides useful insights on the optimization
of ofﬂine downloading services. Second, we identify the key per-
formance bottlenecks of both approaches, based on the complete
running logs of Xuanfeng (§ 4) and comprehensive benchmarks of
three popular smart APs (§ 5). Some of our key results include:

InternetUser2. pre-downloadProxy3. fetch1. requestfile requeststart pre-downloading finish pre-downloading Data flowTimestart fetchingfinish fetchingfreeto beoffline474Figure 2: Basic working principle of ODR.

To validate the efﬁcacy of ODR, we replay an unbiased sample
of Xuanfeng users’ ofﬂine downloading requests using a prototype
ODR system. The evaluation results indicate that ODR is able to
effectively overcome the performance bottlenecks. First, the per-
centage of impeded fetching processes is reduced from 28% to 9%.
Second, the cloud’s upload bandwidth burden is reduced by 35%
and thus no fetching request will need to be rejected. Third, the per-
centage of smart APs’ failures in pre-downloading unpopular ﬁles
is reduced from 42% to 13%. Last, the hardware/ﬁlesystem restric-
tions on smart APs’ pre-downloading speeds are almost completely
avoided.

Finally, we feel that ofﬂine downloading has broad applicabili-
ty to other areas of the world that lack broadband penetration. By
deploying ofﬂine downloading technologies, coupled with our pro-
posed ODR middleware, the Internet experiences for users in many
parts of the world can be signiﬁcantly improved.

2. SYSTEM OVERVIEW

This section provides an overview of the systems studied in this
paper, including the cloud-based ofﬂine downloading system (Xu-
anfeng) and three popular smart AP systems.
2.1 Overview of Xuanfeng

Xuanfeng is a major provider of cloud-based ofﬂine download-
ing service in China, possessing over 30 million users at the mo-
ment (including a small portion of overseas users). Its service can
be accessed via either a PC client (available from http://xf.qq.com)
or a web-based portal (available at http://lixian.qq.com/main.html).
The former access method is dominant due to its full-ﬂedged func-
tionality (supporting almost all the common ﬁle transfer protocols
like HTTP/FTP and BitTorrent/eMule). In terms of business model,
Xuanfeng exists as a value-added service of the Tencent company,
i.e., any registered Tencent user can access it freely. Baidu Cloud-
Disk [10] and Xunlei [42] are the main competitors of Xuanfeng 1.
The former is also a free service, while the latter charges its users
around $1.50 per month.

As depicted in Figure 3, the system architecture of the Xuan-
feng cloud mainly consists of three clusters of servers: 1) pre-
downloading servers, 2) storage servers, and 3) uploading servers,
as well as a database (DB) for maintaining the metadata informa-
tion of users and cached ﬁles. The total cloud storage space (spread
across nearly 500 commodity servers) is nearly 2 PB at the momen-
t, caching around 5 million ﬁles. The cached ﬁles are replaced in
an LRU (least recently used) manner.

1Note that the conﬁguration and engineering of Xunlei and Baidu
CloudDisk may differ from those of Xuanfeng. Hence, their per-
formance bottlenecks may also be different.

Figure 3: System architecture of the Xuanfeng cloud.

Collaborative caching.
In the Xuanfeng cloud, all users’ request-
ed ﬁles are cached in a collaborative way. Speciﬁcally, every ﬁle is
identiﬁed using the MD5 hash code of its content, which facilitates
ﬁle-level deduplication across different users. Consequently, the
vast majority (89%) of ofﬂine downloading requests can be instant-
ly satisﬁed with cached ﬁles and then no pre-downloading band-
width cost is incurred. Xuanfeng does not utilize chunk-level dedu-
plication to avoid trading high chunking complexity for low (<1%)
storage space savings. The low storage savings come from the fact
that there do exist a few videos sharing a portion of frames/chunks.
When a user-requested ﬁle cannot be found in the cloud cache,
Xuanfeng assigns a virtual machine (named a pre-downloader) to
pre-download the ﬁle from the Internet. The Internet access band-
width of a pre-downloader is around 20 Mbps (= 2.5 MBps), equiv-
alent to the high-end, ﬁxed broadband bandwidth in China.
Privileged network path. China has a different Internet topology
from Europe and the US. Particularly, China has a simple AS topol-
ogy with a small number of major ISPs; each ISP has a giant AS
built on top of a nationwide backbone network [68]. As a conse-
quence, the performance of cross-ISP data delivery is signiﬁcantly
degraded, a problem which is known as the ISP barrier [69, 49].
To accelerate users’ fetching processes, Xuanfeng tries to construct
privileged network paths between the cloud and users by deploy-
ing uploading servers within the four major ISPs: Unicom [15],
Telecom [14], Mobile [13], and CERNET [12].

To construct a privileged network path, Xuanfeng always at-
tempts to select an uploading server that resides in the same ISP
as the fetching user, so that the ISP barrier is avoided. However,
privileged path construction may fail in two cases: 1) The fetching
user is not within any of the four major ISPs; 2) The fetching user is
within one of the four major ISPs (say CERNET) but the uploading
servers in CERNET have exhausted their upload bandwidth at that
time. In either case, Xuanfeng would select an alternative upload-
ing server that has the shortest network latency from the user.

Once a privileged network path is set up, Xuanfeng sets no lim-
itation on the user’s fetching speed, with maximum speeds reach-
ing 50 Mbps (= 6.25 MBps). However, at some “peak” point, all
the uploading servers may have exhausted their upload bandwidth.
In this case, Xuanfeng temporarily rejects new fetching requests
rather than degrade the speeds of active downloads.

User device1. RequestODR(Offline Downloading Redirector)DBSmart APXuanfengCloud3. Redirect2. QueryStorage deviceISPsDBPre-downloading serversfilesStorage serversUploading serversrequestsInternet475Table 1: Hardware conﬁgurations of the three popular smart APs studied in this paper.
CPU

Smart AP
HiWiFi (1S) MT7620A @580 MHz
MiWiFi

Broadcom4709 @1 GHz

RAM
128 MB
256 MB

Newiﬁ

MT7620A @580 MHz

128 MB

Storage Interface (and Device)
an SD card interface
a USB 2.0 interface and
an internal 1-TB SATA hard disk drive
a USB 2.0 interface

WiFi Protocol and Channel
IEEE 802.11 b/g/n @2.4 GHz
IEEE 802.11 b/g/n/ac @2.4/5.0 GHz

IEEE 802.11 b/g/n/ac @2.4/5.0 GHz

are not familiar with the technical details and cannot differentiate
these services. The large-scale dataset contains the complete run-
ning logs of Xuanfeng during a whole week (Feb. 22–28, 2015),
involving 4,084,417 ofﬂine downloading tasks, 783,944 users, and
563,517 unique ﬁles. Corresponding to the three stages of ofﬂine
downloading (refer to Figure 1), the dataset is composed of the fol-
lowing three parts:

1. The trace of user requests (workload trace) records all the of-
ﬂine downloading requests issued by users. For each request,
the logs record the user ID, IP address, access bandwidth (if
available), request time, ﬁle type, ﬁle size, link to the original
data source, and ﬁle transfer protocol;

2. The pre-downloading trace records the performance data of
the proxy’s pre-downloading user-requested ﬁles. It includes
the start time, ﬁnish time, acquired ﬁle size, network traf-
ﬁc consumed, cloud cache hit status, average downloading
speed, peak downloading speed, and success or failure for
each pre-downloading process;

3. The fetching trace records the performance data of users’
fetching processes from the proxy. It contains the user ID,
IP address, access bandwidth (if available), start time, ﬁn-
ish/pause time, acquired ﬁle size, network trafﬁc consumed,
average fetching speed, and peak fetching speed for each
fetching process.

This section studies the ﬁrst part of the dataset (i.e., users’ ofﬂine
downloading requests). The second and third parts of the dataset
will be examined in § 4 and § 5.
File type.
In the workload trace, the majority (75%) of ofﬂine
downloading requests are issued for videos; the other 15% are for
software packages. The reason is intuitive: among all the requested
ﬁles, videos are the largest in size, i.e., the most time and trafﬁc
consuming to download, so users are more inclined to issue ofﬂine
downloading requests for videos. This suggests that ofﬂine down-
loading systems should be mainly optimized for videos.
File size. As shown in Figure 5, the average size of requested
ﬁles is 390 MB and the maximum size is 4 GB, which is consis-
tent with our observation that most requested ﬁles are large videos.
Nevertheless, we also ﬁnd that up to 25% of requested ﬁles are s-
maller than 8 MB in size, most of which are demo videos, pictures,
documents, and small software packages.
File transfer protocol. The majority (87%) of requested ﬁles are
hosted in P2P data swarms, including BitTorrent (68%) and eMule
(19%) swarms. The remaining 13% are hosted on HTTP or FTP
servers. Thus, designers of ofﬂine downloading systems should
pay special attention to P2P-based ﬁle transfer protocols.

Since P2P suffers from several technical shortcomings (e.g., high
dynamics and heterogeneities among end-user devices and network
connections), it is often difﬁcult for users to ﬁnd peers (including
both seeds and leechers) sharing the target ﬁles. As a result, the
downloading efﬁcacy of P2P can be poor and unpredictable. For

Figure 4: System architecture of a commerical smart AP. Note
that a given smart AP device may not contain all potential stor-
age device interfaces.

2.2 Overview of the Smart AP Systems

Though smart APs have only been on the market for around t-
wo years, they have quickly gained enormous popularity in China.
HiWiFi, the ﬁrst widely available smart AP device released in Mar.
2013 [20], is now striving towards 5 million sales [22]. Despite the
late entry into the market (in May 2014), 100,000 MiWiFi devices
were sold out in just 59 seconds [1].

As depicted in Figure 4, the system architecture of popular s-
mart APs is essentially made up of three parts: 1) Basic hardware,
including CPU, RAM, NIC (network interface card) for xDSL, NIC
for WiFi, and the storage device interface(s); 2) The operating sys-
tem (typically OpenWrt [34]); 3) Shell and the other applications.
Table 1 lists the hardware conﬁgurations of the three popular
smart APs we examine in this study. Among them, MiWiFi has
the best conﬁguration in terms of CPU, RAM, storage device, and
WiFi data transfer. Accordingly, MiWiFi costs more than $100,
while HiWiFi and Newiﬁ each costs around $20.

All the three popular smart APs utilize OpenWrt, a Linux-based
embedded operating system. OpenWrt provides a fully writable
ﬁlesystem and supports the lightweight Opkg package management
system [35], which allows users to install any Opkg application. For
instance, the three APs make use of wget and aria2 [9] to support
HTTP/FTP and BitTorrent/eMule protocols. Also, a web interface
is provided for users to specify ofﬂine downloading requests. In our
benchmark experiments, we measure and record detailed perfor-
mance of smart APs with Opkg tools/apps such as BASH, tcpdump,
top, iostats, and scp.

3. WORKLOAD CHARACTERISTICS

To understand the workload characteristics of ofﬂine download-
ing, we study a large-scale dataset collected from Xuanfeng. We
assume that the smart AP based ofﬂine downloading systems have
similar workload characteristics to Xuanfeng, since most end users

OpenWrt operating systemCPURAMNIC(xDSL)NIC(WiFi)SATAInterfaceUSBInterfaceSDInterfaceOpkg applicationsUserDeviceInternetShell476Figure 5: CDF of requested ﬁle size.
Min size: 4 B, Median size: 115 MB, Av-
erage size: 390 MB, and Max size: 4 GB.

Figure 6: Popularity distribution of re-
quested ﬁles — Zipf ﬁtting. The average
relative error of ﬁtness is 15.3%.

Figure 7: Popularity distribution of re-
quested ﬁles — SE ﬁtting. The average
relative error of ﬁtness is 13.7%.

this reason, users resort to ofﬂine downloading to obtain P2P ﬁles
over the long run. On the contrary, HTTP and FTP servers are
usually stable with more predictable performance, so online down-
loading is preferred. This explains the dominance of P2P in terms
of ﬁle transfer protocol.
File popularity. As mentioned in § 2.1, Xuanfeng actively main-
tains a content database where every ﬁle is associated with a u-
nique identiﬁer (ID). The ID is the MD5 hash code of the complete
ﬁle content. Hence, ﬁles are considered identical as long as they
have the same ID. Figure 6 (in log(x) vs. log(y) style) and Fig-
ure 7 (in log(x) vs. yc style) indicate that the popularity distribu-
tion of requested ﬁles is highly skewed, approximately following
the well known Zipf model [46] or the SE (stretched exponential)
model [56].

Let x denote the popularity ranking of a ﬁle, and y denote its
popularity (according to the workload trace). Then, we have the
following ﬁtting equations:

Zipf:

log(y) = −a1 × log(x) + b1,

SE: yc = −a2 × log(x) + b2,

where a1 = 1.034, b1 = 14.444, a2 = 0.010, b2 = 1.134, and
c = 0.01.

With regard to the average relative error of ﬁtness, SE (13.7%)
seems to be a better ﬁt than Zipf (15.3%), especially for those
small-ranking (i.e., most popular) ﬁles. The reason why SE ﬁts
the measurement data better than Zipf can be mainly attributed to
the fetch-at-most-once effect of P2P video ﬁles [55]. It is known
that 75% of ofﬂine downloading requests are issued for videos and
87% of requested ﬁles are hosted in P2P data swarms. That is to
say, P2P video ﬁles dominate the workload of Xuanfeng. Speciﬁ-
cally, a given Xuanfeng user generally fetches a P2P video ﬁle for
at most once, whereas web pages and other small documents are
often fetched repeatedly [46]. Therefore, the access pattern of of-
ﬂine downloaded ﬁles deviates from the Zipf access pattern of web
objects. The above ﬁnding complements the analysis of ﬁle pop-
ularity in previous studies of ofﬂine downloading [59, 72], which
simply used the Zipf model to characterize the workload.

4. PERFORMANCE OF THE CLOUD-BASED

SYSTEM

This section presents the performance of our representative cloud-
based ofﬂine downloading system Xuanfeng, including both the
pre-downloading and fetching phases. In addition, we analyze the
end-to-end performance by combining the two phases.

4.1 Pre-downloading Performance
Pre-downloading speed.
Figure 8 (the upper curve) plots the
distribution of pre-downloading speeds in Xuanfeng. The medi-
an speed is merely 25 KBps, which indicates that half of the pre-
downloading processes are quite slow. The average speed (69 KBp-
s) is higher than the median speed, but is still far from satisfactory
— keep in mind that, as mentioned in § 2.1, the access bandwidth
of a pre-downloader is around 20 Mbps (= 2.5 MBps). 21% of
the pre-downloading processes even have a speed close to 0 KBps,
which is mostly caused by pre-downloading failures.
Pre-downloading delay. Figure 9 (the lower curve) plots the dis-
tribution of the pre-downloading delay in Xuanfeng (excluding the
cache-hit cases where the pre-downloading delay is zero). The av-
erage delay is as high as 370 minutes, which is much longer than
the length of a common movie (100∼120 minutes). Obviously,
such long delay is unﬁt for continuous video streaming [63, 53].
Also, the average delay is much longer than the median delay (82
minutes), indicating that the pre-downloading delay of many re-
quested ﬁles is extremely long.
Failure ratio. A pre-downloading failure occurs when the ser-
vice gives up the pre-downloading attempt and notiﬁes the request-
ing user of the failure. It is hard to theoretically deﬁne a failure if
we allow the pre-downloading process to take inﬁnite time. How-
ever, practical systems have to timeout the pre-downloading pro-
cess if the expected completion time is not reasonable.
In prac-
tice, Xuanfeng raises a pre-downloading failure for a requested ﬁle
when the corresponding pre-downloading progress stagnates for
an hour. This timeout rule is supported by our following observa-
tion in Xuanfeng: if the pre-downloading progress of a requested
ﬁle stagnates for an hour, then this ﬁle can hardly be successfully
pre-downloaded even if the timeout threshold is set to be one week.
The overall pre-downloading failure ratio of Xuanfeng is 8.7%.
Note that if a user-requested ﬁle is already cached in the cloud stor-
age pool, the pre-downloading is immediately successful. On the
other hand, if we do not take the cache hit cases into account (i.e.,
we assume that the cloud storage pool does not exist), the overall
pre-downloading failure ratio will increase to 16.4%. This con-
ﬁrms the importance of the massive cloud storage pool as well as
the collaborative caching mechanism (refer to § 2.1) in mitigating
pre-downloading failures.

More importantly, we discover that the pre-downloading failure
ratio correlates with the popularity of requested ﬁles, as shown in
the scatter plot of Figure 10. For the purposes of this discussion,
we deﬁne a ﬁle to be unpopular if it was downloaded less than
7 times per week. Popular ﬁles are downloaded 7–84 times per

010002000300000.20.40.60.81File Size (MB)CDF100105100105RankingPopularity  log(y) = −a*log(x)+bMeasurementZipf fitting10010511.051.11.15RankingPopularity: yc  yc = −a*log(x)+b, c = 0.01MeasurementSE fitting477Figure 8: CDF of pre-downloading and fetching speeds in Xu-
anfeng. As for the pre-downloading speed (excluding the cache-
hit cases), Min: 0 KBps, Median: 25 KBps, Average: 69 KBps,
and Max: 2.37 MBps (≈ 20 Mbps). As for the fetching speed,
Min: 0 KBps, Median: 287 KBps, Average: 504 KBps, and
Max: 6.1 MBps (≈ 50 Mbps). As for the end-to-end speed,
Min: 0 KBps, Median: 233 KBps, Average: 380 KBps, and
Max: 6.1 MBps (≈ 50 Mbps).

Figure 9: CDF of pre-downloading, fetching, and end-to-end
delay in Xuanfeng. As for the pre-downloading delay (exclud-
ing the cache-hit cases), Min: 0 minute, Median: 82 minutes,
Average: 370 minutes, and Max: 10071 minutes. As for the
fetching delay, Min: 0 minute, Median: 7 minutes, Average: 27
minutes, and Max: 9724 minutes. As for the end-to-end delay,
Min: 0 minute, Median: 10 minutes, Average: 68 minutes, and
Max: 19553 minutes.

week, while highly popular ﬁles are downloaded greater than 84
times per week. Given these deﬁnitions, we ﬁnd that 93.2% of
ﬁles are unpopular while only 0.84% of ﬁles are highly popular.
However, only 36% of ofﬂine downloading requests are issued for
the 93.2% unpopular ﬁles, while 39% of requests are issued for the
0.84% highly popular ﬁles.
Network trafﬁc cost. As discussed in § 3, only 13% of requested
ﬁles are hosted in HTTP or FTP servers, while 87% are hosted in
P2P data swarms. For HTTP and FTP, the pre-downloading trafﬁc
is slightly (typically 7%–10%) larger than the ﬁle size; the overhead
mainly comes from HTTP, FTP, TCP, and IP packet headers. For
P2P, its “tit-for-tat” policy [50] (i.e., a peer that downloads data
from others must upload data to others at the same time) causes
the pre-downloading trafﬁc to be considerably (50%–150%) larger
than the ﬁle size.
In the Xuanfeng system, we observe that the
overall pre-downloading trafﬁc is 196% of the total ﬁle size. That
is to say, the overhead trafﬁc is comparable to the ﬁle size.

4.2 Fetching Performance
Fetching speed. Figure 8 (the lower curve) shows the distribution
of users’ fetching speeds from the cloud. Owing to the privileged
network paths constructed by Xuanfeng (refer to § 2.1), the median
and average fetching speeds are as high as 287 KBps and 504 KBp-
s. Given that the median and average pre-downloading speeds are
merely 25 KBps and 69 KBps, Xuanfeng greatly improves per-
ceived downloading speeds (by 7∼11 times in terms of median and
average speeds) for China’s Internet users.

When videos are fetched from the proxy, Xuanfeng supports two
different modes: a) view-as-download and b) view-after-download.
According to Xuanfeng users’ behaviors, most users tend to choose
the former mode over the latter. Therefore, to facilitate users’ real-
time video playback in a continuous manner, a bandwidth bottle-
neck is recognized when the fetching speed falls below 125 KBps.
The 125 KBps threshold corresponds with the typical 1 Mbps play-
back rate of large (HD) videos [57, 62].

Speciﬁcally, a high portion (28%) of fetching speeds are below
125 KBps. To explore why Xuanfeng exhibits poor performance

Figure 10: Request popularity vs. Pre-downloading failure ra-
tio. Request popularity: [0, 7) → unpopular ﬁles, [7, 84] →
popular ﬁles, and (84, MAX] → highly popular ﬁles.

during these fetching processes, we carefully examine the corre-
sponding logs in the fetching trace, and ﬁnd that the bandwidth bot-
tleneck is mainly caused by three issues: 1) cross-ISP data delivery,
2) low user-side access bandwidth, and 3) lack of cloud-side upload
bandwidth.

In detail, 9.6% of fetching processes are limited by the ISP bar-
rier. For these fetching processes, the users’ IP addresses do not
belong to any of the four ISPs supported by Xuanfeng. Besides,
around 10.8% of fetching processes are limited by low user-side
access bandwidth 2 (< 125 KBps). Additionally, there are 1.5% of
fetching requests rejected by the cloud due to lack of upload band-
width (refer to § 2.1). These rejected requests explain why the min-
imum observed fetching speed is 0 KBps. Finally, the remaining
unmentioned portion (= 28% − 9.6% − 10.8% − 1.5% = 6.1%)
are owing to unknown reasons we have not ﬁgured out yet, possibly
because of the network dynamics or system bugs.

2Some users of Xuanfeng did not report their access bandwidth.
For these users, we use the peak fetching speed recorded in the
fetching trace to approximate their access bandwidth.

0100020003000400000.20.40.60.81Speed (KBps)CDF  Pre−downloadingEnd−to−EndFetching0100020003000400000.20.40.60.81Delay (minutes)CDF  FetchingEnd−to−EndPre−downloading501001502000102030Request Popularity (in one week)Average Failure Ratio (%)UnpopularPopularHighly Popular478Fetching delay.
Figure 9 (the upper curve) shows the distribu-
tion of users’ fetching delay. As a consequence of most users’ high
fetching speeds, the median fetching delay is as low as 7 minutes
and the average fetching delay is merely 27 minutes. Given that the
median and average pre-downloading delay is as high as 82 min-
utes and 370 minutes, Xuanfeng has signiﬁcantly shortened per-
ceived downloading delay (by 12∼14 times in terms of median and
average fetching delay) for China’s Internet users.

In summary, we ﬁnd the ﬁrst key performance bottleneck of of-

ﬂine downloading:

• The cloud-based approach performs poorly once there is a
bandwidth bottleneck in the privileged network path between
the cloud and the user. This bottleneck is mainly caused by
cross-ISP data delivery, low user-side access bandwidth, or
lack of cloud-side upload bandwidth.

Shortage of cloud bandwidth.
In order to support high-speed
fetching from the cloud to users’ devices, Xuanfeng has purchased
a total of 30 Gbps of upload bandwidth from the four major ISPs
in China. In the 7th day of the measurement week, the peak cloud-
side upload bandwidth burden exceeded 30 Gbps, as demonstrated
in Figure 11. Consequently, a small portion (1.5%) of fetching
requests were rejected by Xuanfeng. As the user base continues to
grow, Xuanfeng will have to reject more fetching requests, which
unfortunately harms the user experience.

On the other hand, if we look deeply into the usage of cloud
bandwidth, we ﬁnd that the current cloud-side upload bandwidth
burden is not all necessary. We calculate the cloud-side bandwidth
used for delivering (uploading) highly popular ﬁles based on the
fetching trace, plotted as the lower, blue curve in Figure 11. We
can see that, on average, nearly 40% of the cloud bandwidth is
spent delivering highly popular ﬁles. The reason is that a small
percentage (0.84%) of highly popular ﬁles account for a large part
(39%) of all downloads, as discussed in § 4.1.

In fact, because the majority (87%) of requested ﬁles are host-
ed in P2P data swarms, many highly popular ﬁles can be direct-
ly downloaded by users with as good or greater performance than
what the cloud provides [66, 64]. This is because P2P data sharing
among end users can achieve the so-called “bandwidth multiplier
effect” [66]. Speciﬁcally, by appropriately allocating a certain por-
tion of cloud bandwidth (Si) to a P2P data swarm i to seed the
content, the Xuanfeng system can attain a higher aggregate content
distribution bandwidth (Di) by letting P2P users exchange data and
distribute content among themselves. The ratio Di
is referred to as
Si
the bandwidth multiplier for P2P data swarm i. The above obser-
vation and analysis lead to the second key performance bottleneck
of ofﬂine downloading:

• The cloud-based approach is threatened by running out of
upload bandwidth due to unnecessarily sending highly pop-
ular ﬁles. As the user base continues to grow, the cloud will
have to reject more (>1.5%) fetching requests.

User-side network overhead. Xuanfeng minimizes the user-side
network overhead, as its users only download requested ﬁles from
the cloud and do not upload data to others. On average, a user’s
downloading trafﬁc usage is slightly (7% – 10%) larger than the
ﬁle size. This is especially useful for mobile P2P users with limit-
ed data plans or trafﬁc caps. As mentioned in § 4.1, for an average
P2P user to download a ﬁle from the corresponding data swarm,
the total trafﬁc usage is 196% of the total ﬁle size. Therefore, by
resorting to Xuanfeng rather than the original data swarm, an aver-
age P2P user could achieve considerable trafﬁc usage saving which
is comparable to 86% – 89% of the total ﬁle size.

Figure 11: Cloud-side upload bandwidth burden of Xuanfeng
in the measurement week (including those rejected fetching re-
quests). The time interval is 5 minutes. Note that for the 1.5%
of fetching requests rejected by Xuanfeng in the 7th day, their
incurred cloud-side upload bandwidth burden (which did not
really happen) is estimated by approximately taking their aver-
age fetching speed as 504 KBps (i.e., , the average speed of all
the real fetching processes in Xuanfeng, refer to Figure 8).

4.3 End-to-End Performance

Finally, we analyze the end-to-end speed and delay of ofﬂine
downloading in Xuanfeng. For a complete ofﬂine downloading
process, the end-to-end delay is the sum of pre-downloading de-
lay and fetching delay, and the end-to-end speed is the size of the
requested ﬁle divided by the end-to-end delay.

As illustrated in Figure 9, the CDF curve of end-to-end delay
falls between the CDF curves of pre-downloading delay and fetch-
ing delay, which is within our expectation. More importantly, the
distribution of end-to-end delay looks much closer to the distribu-
tion of fetching delay. This is because the vast majority (89%) of
ofﬂine downloading requests can be instantly satisﬁed by the cloud
cache and thus the corresponding pre-downloading delay is almost
zero (refer to § 2.1). Similarly, Figure 8 indicates that the CDF
curve of end-to-end speed falls between the CDF curves of pre-
downloading speed and fetching speed, and the distribution of end-
to-end speed is much closer to the distribution of fetching speed.

From the above observations, we conclude that even from an
end-to-end perspective, the ofﬂine downloading service provided
by Xuanfeng can effectively improve the perceived experiences for
its users.

5. PERFORMANCE OF THE SMART APS
Now that we understand the dynamics and performance charac-
teristics of Xuanfeng, we move on to examining smart AP based
ofﬂine downloading.
In this section, we report our benchmark
methodology and the performance of the three most popular smart
APs in China: HiWiFi, MiWiFi, and Newiﬁ.
5.1 Methodology

To comprehensively measure the performance of the three pop-
ular smart APs (during Mar. 1–22, 2015), we randomly sample
1000 real ofﬂine downloading requests 3 issued by Unicom users

3Each selected request record should contain the user’s access
bandwidth information so that we can approximate the user’s re-
al network connection characteristics during our benchmarks.

02460102030DayBandwidth Burden (Gbps)  30 GbpsAll FilesHighly Popular479Figure 12: Our benchmark environment. For each smart AP,
its embedded/connected storage device is not plotted to make
the ﬁgure tidy.

in the workload trace of Xuanfeng (refer to § 3). These sampled
requests (which we refer to as the sampled workload) are restricted
to Unicom users because our benchmark experiments are conduct-
ed by replaying the sampled workload with smart APs on Unicom
network connections. On the other hand, the data sources of these
sampled requests are located across various ISPs in China. For ev-
ery request record, we ignore its user ID, IP address, and request
time (since these factors cannot be reproduced in our benchmarks),
but reuse the user’s access bandwidth, as well as the ﬁle type, ﬁle
size, link to the original data source, and ﬁle transfer protocol.

To replay the sampled workload using the three smart APs, we
utilize three independent residential ADSL links provided by the
Unicom ISP, each of which was used exclusively by one smart AP,
as depicted in Figure 12. Each link has 20 Mbps (= 2.5 MBps) of
Internet access bandwidth. When replaying an individual ofﬂine
downloading request, we restrict the smart AP’s pre-downloading
speed within the recorded user access bandwidth, so as to approx-
imate the real network connection status. We sequentially replay
around 333 requests (request i + 1 is replayed after request i com-
pletes or fails) on each smart AP and record the performance data.

HiWiFi uses an embedded 8-GB SD card (Max Write/Read Speed:
15 MBps/30 MBps) as the storage device. The SD card can only
be formatted as FAT (otherwise, HiWiFi does not work). Newiﬁ
uses an external 8-GB USB ﬂash drive (Max Write/Read Speed:
10 MBps/20 MBps) via a USB 2.0 interface. The USB ﬂash drive
is formatted as NTFS. Since both HiWiFi and Newiﬁ have a small
storage capacity, we remove requested ﬁles from the storage device
after they are completely downloaded or the corresponding pre-
downloading task failures (refer to § 4.1). At the same time, the per-
formance data is aggregated into a storage server. MiWiFi uses its
internal 1-TB SATA hard disk drive (5400 RPM, Max Write/Read
Speed: 30 MBps/70 MBps). This hard disk drive has been format-
ted as EXT4 by the manufacturer, and it cannot be re-formatted to
any other ﬁlesystem.
5.2 Benchmark Results

Since smart APs are located in the same LAN (local area net-
work) as users, the performance of the fetching phase is seldom an
issue except when multiple user devices are fetching from a smart
AP at the same time. Speciﬁcally, a user can fetch from a smart
AP by directly dumping from the AP’s storage device or through a
wired/WiFi LAN connection. Even the lowest WiFi fetching speed
lies in 8∼12 MBps, which is higher than the maximum fetching

Figure 13: CDF of smart APs’ pre-downloading speeds. Min:
0 KBps; Median: 27 KBps; Average: 64 KBps; Max: 2.37
MBps (≈ 20 Mbps) for HiWiFi and MiWiFi, and 0.93 MBp-
s for Newiﬁ. As a comparison, the CDF of cloud-based pre-
downloading speeds is also plotted.

speed (i.e., 6.1 MBps) of Xuanfeng users. As a consequence, be-
low we focus on the performance of the pre-downloading phase.
Pre-downloading failure ratio.
The overall pre-downloading
failure ratio of smart APs is 16.8%, which is higher than that of
Xuanfeng (8.7%). More importantly, for unpopular ﬁles the pre-
downloading failure ratio of smart APs is as high as 42%, signif-
icantly higher than that of Xuanfeng (13%). Note that according
to the workload trace of Xuanfeng, 36% of ofﬂine downloading re-
quests are issued for unpopular ﬁles. With these results, we discov-
er the third key performance bottleneck of ofﬂine downloading:

• Although smart APs are immune to the two bottlenecks of
the cloud-based approach described in § 4, they frequent-
ly fail in pre-downloading unpopular ﬁles. In contrast, the
cloud-based approach performs much better at download-
ing unpopular ﬁles since it beneﬁts from the massive geo-
distributed cloud storage pool.

Further, we delve into the details of the pre-downloading failures
of smart APs. Among the 168 (= 1000 × 16.8%) failures, the vast
majority (145, 86%) were caused by insufﬁcient seeds in a P2P
data swarm. This explains why the pre-downloading failure ratio
of unpopular ﬁles is especially high. Besides, a non-negligible part
(17, 10%) were ascribed to poor HTTP/FTP connections, i.e., the
server at the other end failed to maintain a persistent/resumable
download. The remainder (6, 4%) might be the result of system
bugs in HiWiFi, MiWiFi and Newiﬁ.
Pre-downloading speed and delay. As shown in Figure 13 and
Figure 14, the pre-downloading speeds of smart APs are just a bit
lower than those of Xuanfeng’s pre-downloaders, and thus the pre-
downloading delay of smart APs seems a bit longer than that of
Xuanfeng. This is because smart APs work in a similar way as the
pre-downloaders (i.e., they also download ﬁles using HTTP, FT-
P and P2P protocols; refer to § 2.1), although their access band-
widths are generally lower than 20 Mbps (or 2.5 MBps, i.e., a pre-
downloader’s access bandwidth).

However, one detail in Figure 13 and Figure 14 is worth dis-
cussing: the median pre-downloading speed of smart APs (27 KBp-
s) is higher than that of Xuanfeng (25 KBps), but the average pre-
downloading speed of smart APs (64 KBps) is lower than that of
Xuanfeng (69 KBps). Accordingly, the median pre-downloading

ADSLLinkHiWiFiMiWiFiNewifiStorage serverSampled workloadPerformancedataInternet0500100000.20.40.60.81Pre−downloading Speed (KBps)CDF  Cloud−basedSmart APs480Table 2: Max pre-downloading speeds and the corresponding
iowait ratios for HiWiFi, MiWiFi, and Newiﬁ, with different
storage devices and ﬁlesystems.

Max pre-downloading speed (MBps)

HiWiFi + SD card

MiWiFi + SATA hard disk drive

Newiﬁ + USB ﬂash drive

Newiﬁ + USB hard disk drive

iowait ratio

HiWiFi + SD card

MiWiFi + SATA hard disk drive

Newiﬁ + USB ﬂash drive

Newiﬁ + USB hard disk drive

FAT
2.37

–
2.12
2.37
FAT
42.1%

NTFS

–
–
0.93
1.13
NTFS

–
–

EXT4

–

2.37
2.13
2.37
EXT4

–

–

29.7%
66.3% 15.1% 55%
42%
9.8% 17.4%

Figure 14: CDF of smart APs’ pre-downloading delay. Min:
0 minutes; Median: 77 minutes; Average: 402 minutes; Max:
8297 minutes. As a comparison, the CDF of cloud-based pre-
downloading delay is also plotted.

delay of smart APs (77 minutes) is shorter than that of Xuanfeng
(82 minutes), but the average pre-downloading delay of smart APs
(402 minutes) is longer than that of Xuanfeng (370 minutes). To
demystify this counter-intuitive phenomenon, we examine the pre-
downloading performance data of every task in the sampled work-
load and its original performance data in the pre-downloading trace.
Surprisingly, we uncover the fourth key performance bottleneck of
ofﬂine downloading:

• A smart AP’s pre-downloading speed can be restricted by its
hardware and/or ﬁlesystem, since some types of storage de-
vices and ﬁlesystems do not ﬁt the pattern of frequent, small
data writes during the pre-downloading process.

In particular, among all the experimented storage devices, USB
ﬂash drive is the slowest. When Newiﬁ uses the USB ﬂash drive (in
the NTFS format) as its storage device, the max pre-downloading
speed is merely 0.93 MBps, much lower than that of HiWiFi and
MiWiFi (2.37 MBps). This ﬁnding is basically consistent with Sun-
daresan et al. ’s study results on broadband Internet performance in
2011, which also indicate that a user’s home network equipment
(including the home router of course, though smart APs did not ex-
ist in 2011) can signiﬁcantly affect downloading performance [67].
To comprehensively understand the inﬂuence of hardware and
ﬁlesystem on Newiﬁ’s pre-downloading speed, we replay the top-
10 popular requests in the sampled workload on Newiﬁ while set-
ting no restriction on its pre-downloading speed (so the maximum
speed should be nearly 2.37 MBps). We conducted replays with
the USB ﬂash drive formatted as FAT, NTFS, and EXT4, respec-
tively, as well as with the USB ﬂash drive replaced by a USB hard
disk drive (5400 RPM, Max Write/Read Speed: 10 MBps/25 MBp-
s). The resulting maximum pre-downloading speeds, as well as the
corresponding iowait ratios, are listed in Table 2. We make three
observations as follows:

• The NTFS ﬁlesystem severely harms Newiﬁ’s maximum pre-
downloading speed, no matter whether the storage device is
a USB ﬂash drive or a USB hard disk drive. This is mainly
attributed to the incompatibility between NTFS and Newiﬁ’s
OpenWrt operating system (refer to § 2.2) which utilizes the
EXT4 ﬁlesystem.

• When Newiﬁ uses a USB ﬂash drive as its storage device,
FAT and EXT4 ﬁlesystems also appear to have degraded its

maximum pre-downloading speed. The major reason should
be the unsuitability of the USB ﬂash drive on handling fre-
quent, small data writes during pre-downloading. This is re-
ﬂected by the high iowait ratios (66.3% and 55%) as shown
in Table 2. Besides, we observe that the receiver-side TCP s-
liding window (the typical size is 14608 bytes) is almost full
in most of the time during the pre-downloading process.

• When Newiﬁ uses a USB hard disk drive, its maximum pre-
downloading speed is considerably enhanced (compared with
using a USB ﬂash drive) even when the hard disk drive is
formatted as NTFS. No matter which ﬁlesystem is used, the
iowait ratio is relatively low.

Based on the above observations, we suggest that Newiﬁ-like
smart APs upgrade their storage devices and/or change their default
ﬁlesystems to more performant variants, so as to release the full
potential of ofﬂine downloading. Currently, because Newiﬁ only
has a USB 2.0 interface (refer to Table 1), using a USB hard disk
drive coupled with the EXT4 ﬁlesystem seems to be the best ﬁt.
On the other hand, if Newiﬁ upgrades its storage interface to USB
3.0 in the future, using a USB 3.0 ﬂash drive formatted as EXT4
might be a more cost-effective choice, given that a USB ﬂash drive
is usually much smaller and cheaper than a USB hard disk drive.

6. THE ODR MIDDLEWARE

Motivated by the study in § 4 and § 5, we design and implement
a proof-of-concept middleware called ODR (Ofﬂine Downloading
Redirector) to help users get rid of performance bottlenecks. We
evaluate the performance of ODR using real-world workloads.
6.1 Design and Implementation

ODR is presented as a public web service to users available at
http://odr.thucloud.com. It is implemented as a middleware inde-
pendent of any speciﬁc cloud-based ofﬂine downloading system or
smart AP, and thus can be deployed on any dedicated servers or
virtual machines. ODR takes users’ ofﬂine downloading requests,
and adaptively decides in which way the requested ﬁles should be
downloaded to achieve the best expected downloading experience.
Speciﬁcally, when a user wants to download a ﬁle from the In-
ternet, she ﬁrst accesses the web service of ODR (by opening the
front web page) and inputs the HTTP/FTP/P2P link to the original
data source. In addition, ODR asks for other auxiliary information
including the user’s IP address, access bandwidth, smart AP type,
storage device and ﬁlesystem type 4. All the aforementioned in-
formation is straightforward for common users, except the access
4ODR maintains a web cookie at the user side (if her web brows-
er permits), so that the user does not need to repeatedly input the
auxiliary information every time.

0100020003000400000.20.40.60.81Pre−downloading Delay (minutes)CDF  Cloud−basedSmart APs481Figure 15: Workﬂow state transition diagram of ODR. “Y”: Yes; “N”: No. Bottleneck 1, Bottleneck 2, Bottleneck 3 and Bottleneck
4 denote the four performance bottlenecks of ofﬂine downloading mentioned in our key results (refer to § 1).

bandwidth. Fortunately, as the majority of China’s Internet users
have installed PC-assistant software such as Tencent PC Manag-
er [37], Baidu Guard [11], and 360 Security Guard [2]. With simple
instructions, ODR is able to guide users how to obtain the approxi-
mate value of access bandwidth with the PC-assistant software.

On receiving an ofﬂine downloading request, ODR ﬁrstly queries
the content database to obtain the latest popularity statistics of the
requested ﬁle. We use the Xuanfeng database in our implementa-
tion, while keep in mind that the performance of ODR would be
further enhanced if it is able to use multiple cloud services (e.g.,
Xuanfeng + Xunlei + Baidu CloudDisk) at once. ODR calculates
the decisions based on the popularity of the ﬁle and the auxiliary
information provided by the user. The decision is then returned to
users via the front web page of the ODR service.

Figure 15 plots the state transition diagram of ODR’s decision
making process, which involves a series of conditions and branches
as follows.
Handling highly popular ﬁles. First and foremost, users are con-
cerned with the downloading success of a requested ﬁle. As the
downloading failure ratio is tightly related with the popularity (re-
fer to § 4.1 and § 5.2), ODR needs to examine whether the requested
ﬁle is highly popular. If yes, the ODR is likely to be successful at
downloading the ﬁle, and therefore we can make efforts to mitigate
the cloud-side upload bandwidth burden (addressing Bottleneck 2
in Figure 15).

To deal with Bottleneck 2, if the highly popular ﬁle is hosted in
a P2P data swarm, ODR suggests the user to directly download the
ﬁle from its original data source (i.e., the abundant peers sharing
the ﬁle). On the contrary, if the highly popular ﬁle is hosted in an
HTTP/FTP server, ODR would suggest the user to fall back on the
cloud, so as to avoid making the HTTP/FTP server a bottleneck.

Further, to minimize the expected (pre-)downloading time, O-
DR considers the user-side access bandwidth, as well as the smart
AP’s storage device and ﬁlesystem type (addressing Bottleneck 4
in Figure 15). For example, when the user-side access bandwidth
reaches 20 Mbps (= 2.5 MBps), if the smart AP uses a USB ﬂash
drive as its storage device or its storage device is formatted as NTF-
S, ODR would suggest the user to directly download the ﬁle using
her local device (given that it is usually inconvenient for the user
to change the storage device and ﬁlesystem of a smart AP during

pre-downloading). On the other hand, when the user-side access
bandwidth is below 0.93 MBps (refer to Table 2), ODR would sug-
gest the user to utilize their smart AP.
Handling less popular ﬁles. When a requested ﬁle is not highly
popular, the success of downloading is our primary concern (ad-
dressing Bottleneck 3 in Figure 15). To this end, ODR leverages the
cloud storage pool to minimize the failure ratio of (pre-)downloading.
Speciﬁcally, the downloading falls into the following two cases:

• Case 1: If the requested ﬁle is already cached in the cloud,
ODR should further detect whether there is a bandwidth bot-
tleneck between the cloud and the user by analyzing the user-
side access bandwidth and ISP information 5 (addressing Bot-
tleneck 1 in Figure 15). If the user-side access bandwidth is
low (< 1 Mbps = 125 KBps) or the user is located in a dif-
ferent ISP other than the four ISPs supported by the cloud,
ODR would suggest the user to leverage both the cloud and
their smart AP to mitigate the impediments of Bottleneck 1
(“Cloud + Smart AP” in Figure 15, i.e., the ﬁle should be
ﬁrst pre-downloaded by the smart AP from the cloud, and
then fetched by the user from the smart AP). Otherwise, O-
DR suggests the user to fetch from the cloud.

• Case 2: If the requested ﬁle is not cached in the cloud, ODR
suggests the user to ﬁrst use the cloud for pre-downloading.
After the ﬁle is successfully pre-downlo- aded by the cloud,
the user will be notiﬁed, and then she can ask ODR again for
further suggestions (either directly fetching from the cloud,
or from the cloud to a smart AP and then to her local device).
If the cloud fails to download the ﬁle, the user will be notiﬁed
of a pre-downloading failure.

Note that ODR never delivers ﬁle contents by itself, which makes
its operation lightweight in terms of bandwidth and trafﬁc con-
sumption. For our implementation, we rent a low-end virtual ma-
chine from Aliyun.com (a major cloud service provider in China)
to host the entire ODR service. This virtual machine has a public

5The user’s ISP information is obtained based on her IP address
with the help of the APNIC service (http://www.apnic.net), a major
service provider for IP address collecting/resolving in Asia Paciﬁc.

Highly popular file ?YNCloud cache hit ?YNCloud pre-download succeed ?YNBottleneck 4 ?YNBottleneck 1 ?YNCloudUser deviceSmart APfailData source: CloudData source: OriginalBottleneck 2Bottleneck 3Cloud pre-downloadP2P file ?YNHTTP/FTP fileCloud + Smart AP482Figure 16: Benchmark performance of ODR, compared with
Cloud (i.e., the cloud-based approach) or Smart APs (i.e., the
smart AP based approach). Note that the Y-label of Bottleneck
2 is deﬁned as

Purchased cloud bandwidth (30 Gbps) .

Peak cloud bandwidth burden

Figure 17: CDF of fetching speeds using ODR. Min: 0 KBps;
Median: 368 KBps; Average: 509 KBps; Max: 2.37 MBps (≈
20 Mbps). As a comparison, the CDF of cloud-based fetching
speeds is also plotted.

IP address and 1 Mbps (= 125 KBps) of Internet access bandwidth.
The monthly operation cost of ODR is merely $20.
Limitation. By proposing the ODR middleware, our major goal is
to demonstrate the potential beneﬁts for a hybrid approach that can
effectively address the limitations of the two existing conventional
approaches while inheriting their respective advantages. Therefore,
the above design and implementation of ODR is basically a coarse-
grained solution to optimize the ofﬂine downloading performance
and overhead, where the optimization granularity is a whole ofﬂine
downloading request/task.

ODR can further beneﬁt from more ﬁne-grained alternative opti-
mization solutions at the chunk, TCP data ﬂow, or sub-stream lev-
els. For instance, a more dynamic solution proposed by Huang et
al.
[58] (i.e., a buffer-based adaptive bit rate selection algorithm
for video streaming) can be used instead of the current hard cod-
ed decision procedure of ODR. Moreover, a simple solution (called
“mobile phone content pre-staging” [52]) that has been proposed
in the past is to simply defer downloads to later times when the
download bandwidth is better if the users are not particularly time
sensitive. In addition, there are even standards efforts like Low Ex-
tra Delay Background Transport (LEDBAT, IETF RFC 6817 [27])
that seeks to utilize the available bandwidth on an end-to-end path
while limiting the resulting penalty of delay increase on that path.
ODR can learn from LEDBAT to further mitigate the cloud-side
upload bandwidth burden.
6.2 Performance Evaluation

To evaluate the performance of ODR, we replay the sampled
workload (refer to § 5.1) using the deployed ODR middleware dur-
ing Mar. 23–Apr. 13, 2015. The environment is similar to that in
Figure 12. For each smart AP, we use a common laptop (with Quad-
core Intel i5 CPU @1.70 GHz, 4-GB RAM, and 7200-RPM 500-
GB hard disk drive) as the user device. Figure 16 shows the overall
performance results of ODR, compared with the performances of
Xuanfeng and the three popular smart APs.

First, the percentage of impeded fetching processes (Bottleneck
1) is reduced from 28% to 9%. The remainder (9%) is mostly due to
the intrinsic dynamics of the Internet. In detail, Figure 17 shows the
fetching speed distribution using ODR. Compared with the fetch-
ing speed distribution of Xuanfeng, the median fetching speed is
enhanced from 287 KBps to 368 KBps. Limited by our benchmark
environment, the max fetching speed using ODR is 20 Mbps (= 2.5

MBps), which is lower than that in Xuanfeng (i.e., 50 Mbps = 6.25
MBps). This is why the average fetching speed using ODR (509
KBps) is comparable to that of Xuanfeng (504 KBps).

With regard to Bottleneck 2, the cloud-side upload bandwidth
burden under the sampled workload is reduced by 35%, which is
attributable to the fact that the cloud no longer needs to deliver
highly popular P2P ﬁles. If Xuanfeng had integrated ODR, its peak
upload bandwidth burden could decrease from 34 Gbps (refer to
Figure 11) to around 22 Gbps, and thus Xuanfeng would not need
to reject any fetching request, given their current workload.

Further, the percentage of smart APs’ failures in pre-downloading
unpopular ﬁles (Bottleneck 3) is reduced from 42% to 13%.
In
addition, Bottleneck 4 (caused by unsuitable storage devices or
ﬁlesystems) is almost completely avoided with the use of ODR.

In a nutshell, the integration of ODR into ofﬂine downloading
services results in a marked reduction of performance bottlenecks,
as well as considerable improvement on the quality of service.
Limitation. We acknowledge that ODR occasionally makes in-
correct redirection decisions due to the inherent dynamics of In-
ternet that may degrade performance. Fortunately, the percentage
of such decisions is negligible (<1%) in our evaluation. Thus, we
believe that the performance of ODR is acceptable in practice, es-
pecially given the signiﬁcant advantages of the system.

7. RELATED WORK

This section reviews previous studies of ofﬂine downloading, in-
cluding both the cloud and smart AP based approaches. We also
discuss the hybrid approach which directly connects the smart AP
to the cloud and compare it with our ODR. In addition, we describe
a few ofﬂine downloading (based) services outside China. Finally,
we brieﬂy survey the state-of-the-art downloading techniques and
compare them with ofﬂine downloading.
Cloud-based approach. With the proliferation of cloud-based
services, a number of studies have investigated the design and im-
plementation of cloud-based ofﬂine downloading systems and their
performance measurements.

Huang et al. [59] presented the early-stage system design of X-
uanfeng in 2011, which focuses on guaranteeing data health and
accelerating the downloading speed of unpopular videos. Howev-
er, perhaps due to the startup stage of the system at that time (with

123400.20.40.60.81PercentagePerformance Bottleneck  Cloud or Smart APsODR0100020003000400000.20.40.60.81Fetching Speed (KBps)CDF  ODR middlewareXuanfeng users483a relatively small user base), their study did not notice the two crit-
ical performance bottlenecks, i.e., Bottleneck 1 and Bottleneck 2
uncovered in this paper.

Ao et al. [44] conducted a long-term measurement study of X-
uanfeng in 2012, and predicted that the system would be short of
cloud-side upload bandwidth in the near future. Complementary to
their study, our work provides in-depth insights into the cloud-side
upload bandwidth burden, and recognizes Bottleneck 2 — the root
cause of cloud bandwidth shortage. Furthermore, our proposed O-
DR middleware can signiﬁcantly reduce cloud-side bandwidth con-
sumption by asking users to download highly popular P2P ﬁles di-
rectly from their data swarms.

Zhou et al. [72] made a theoretical analysis of ofﬂine download-
ing service models, including the cloud-based model and the peer-
assisted model. They argue that the former can help scale with ﬁle
population and the latter should be used to deal with popular ﬁles.
An adaptive algorithm called AMS (Automatic Mode Selection) is
proposed for selecting an appropriate model. Compared with AM-
S, ODR is more general and applicable: it requires no modiﬁcation
on the cloud side. Additionally, ODR is a deployed system rather
than a theoretical algorithm.
Smart AP based approach.
Since the history of smart APs is
extremely short (just two years), we are not aware of any systematic
study on their downloading performances. Most of the existing
evaluations [6, 7, 8, 39, 23, 4] are based on simpliﬁed network
environments and unrealistic workloads (e.g., a few popular ﬁles).
This is probably the reason why Bottleneck 3 in our study had not
been discovered yet. Furthermore, Bottleneck 4 had never been
identiﬁed in existing evaluations of smart APs.
Hybrid approach. HiWiFi, MiWiFi, and Newiﬁ all provide hy-
brid solutions for ofﬂine downloading [19, 29, 32]. In these hybrid
solutions, user-requested ﬁles are ﬁrst downloaded by the cloud,
and then the smart AP fetches the ﬁles from the cloud. That is to
say, the downloading process always goes through the longest data
ﬂow: ﬁrst from the Internet to the cloud, and then to the smart AP
of the user.

In contrast, our ODR middleware adaptively selects the most ef-
ﬁcient data ﬂow for users to avoid performance bottlenecks. There-
fore, ODR signiﬁcantly outperforms the current hybrid approach
by addressing the bottlenecks of both (cloud and smart AP based)
approaches while also inheriting their advantages.
Ofﬂine downloading outside China. Besides those developing
countries (as mentioned in § 1), developed countries can also ben-
eﬁt from ofﬂine downloading (based) services. For example, URL
Droplet [40] and the Amazon Silk web browser [5] take advantage
of the cloud to speed-up ﬁle transfers. The former employs the
Dropbox cloud storage service to download and host ﬁles for its
users; the latter utilizes Amazon’s cloud servers to improve web
page loading performance for Kindle Fire tablets and smartphones.
On the other side, the smart AP based approach is adopted by the
Linksys Smart WiFi Router [26] which is sold in the US.
State-of-the-art downloading techniques. Existing techniques
for Internet ﬁle downloading mainly include the centralized Web-
based (or client-server), the hierarchical CDN (i.e., content delivery
network like Akamai, L-3, and ChinaCache), the decentralized P2P,
and the latest ICN (i.e., information centric networking).

The Web-based technique is obviously subject to the intrinsic dy-
namics and heterogeneities of the Internet, particularly the single-
point bottleneck of the Web server. By strategically deploying edge
servers in numerous locations that are closer to users, the CDN

technique effectively optimizes ﬁle downloading performance. N-
evertheless, being a commercial service, CDN vendors typically
only help to deliver ﬁles for content providers who pay for the ser-
vice. On the contrary, the business model of ofﬂine downloading
is the opposite of CDN, because it charges (or sometimes frees) its
users, i.e., content receivers, for better downloading experiences.
As mentioned in § 3, the P2P technique is good at distributing
popular ﬁles that are each shared by a number of users, but can-
not guarantee the data availability or maintain a high speed for the
downloads of unpopular ﬁles. This is why so many users have re-
sorted to ofﬂine downloading for acquiring ﬁles that are originally
hosted in P2P data swarms. In a word, ofﬂine downloading address-
es the unstability and uncertainty of P2P under certain scenarios.

ICN, also known as CCN (content centric networking) or NDN
(named data networking), is motivated by content receivers’ inter-
est in the network to achieve efﬁcient and reliable data distribu-
tion [43], regardless of the properties of the original data sources.
Speciﬁcally, ICN is featured by a number of desired functions, such
as 1) in-network storage for caching, 2) decoupling content senders
and receivers, 3) disruption tolerance, 4) multi-party communica-
tion through replication, 5) mobility and multi-homing, etc. It is
easy to ﬁnd that ofﬂine downloading fulﬁlls at least the ﬁrst three
desired functions of ICN in a real-world setting without breaking
the current Internet architecture. Further, we would like to explore
whether and how ofﬂine downloading can enable the other func-
tions of ICN.

8. CONCLUSION

In recent years, the Internet has gained enormous penetration all
over the world. However, basic Internet services, like downloading
(large) ﬁles, remains an issue in most developing countries as a con-
sequence of low-quality network connections. To improve users’
downloading experiences, ofﬂine downloading services have been
proposed and widely deployed in China.

The idea of ofﬂine downloading is mainly embodied in two dif-
ferent types of approaches: (1) the cloud-based approach and (2)
the smart AP based approach. Unfortunately, the two approach-
es are confusing to end users since they offer different strengths
and weaknesses (the so-called “selection dilemma”). Our study ad-
dresses this dilemma with in-depth analysis of a large-scale cloud-
based ofﬂine-downloading system, as well as comprehensive bench-
mark experiments of three popular smart APs. Our study shows that
the two approaches are subject to distinct performance bottlenecks,
while also being complementary to each other. Driven by the s-
tudy, we build an ODR middleware to help users achieve the best
expected performance.

In the future, we envision that ofﬂine downloading will become
a widely used technology for enhancing the Internet experiences of
users across both the developing world and the developed world.
For example, people start to build a variety of useful Internet ser-
vices on top of cloud-based ofﬂine downloading systems, such as
cloud-based media converters (e.g., Cloud Transcoder [65]) and
cloud-accelerated web browsers (e.g., QQ mobile web browser,
UCWeb browser, and Amazon Silk web browser). Our study of of-
ﬂine downloading provides solid experiences and valuable heuris-
tics for the developers of similar and relevant services.

9. ACKNOWLEDGEMENTS

This work is supported by the High-Tech Research and Develop-
ment Program of China (“863 – China Cloud” Major Program) un-
der grant 2015AA01A201, the China NSF under grant 61471217,
the US NSF under grant CNS-1319019, the China Postdoctoral Sci-

484ence Fund under grant 2014M550735, and the CCF-Tencent Open
Fund under grant AGR20150201.

We would like to thank our shepherd Vyas Sekar and the Tencent

Xuanfeng team for their valuable help.
10. REFERENCES
[1] 100,000 MiWiFi smart AP devices are sold out in just 59

seconds. http://bbs.xiaomi.cn/thread-
9658495-1-1.html.

[2] 360 Security Guard. http://www.360.cn/weishi.
[3] A Collection of the Best Ofﬂine Downloading Tools.

http://jingyan.baidu.com/article/
636f38bb295e9bd6b84610e9.html.

[4] A Comparison of Nine Smart APs.

http://net.zol.com.cn/478/4788494.html.

[5] Amazon Silk web browser.

http://amazonsilk.wordpress.com.

[6] An Evaluation Report of HiWiFi. http://news.
mydrivers.com/1/279/279305_all.htm.

[7] An Evaluation Report of MiWiFi.

http://www.geekpark.net/read/view/195133.

[8] An Evaluation Report of NewiFi.

http://www.itbear.com.cn/n112446c93.aspx.

[9] aria2: The next generation download utility.
http://aria2.sourceforge.net.

[10] Baidu CloudDisk ofﬂine downloading system.

http://pan.baidu.com.

[11] Baidu Guard. http://anquan.baidu.com/weishi.
[12] CERNET (China Education and Research Network) ISP.

http://www.cernet.edu.cn.

[13] China-Mobile ISP. http://www.10086.cn.
[14] China-Telecom ISP.

http://www.chinatelecom.com.cn.

[15] China-Unicom ISP.

http://www.chinaunicom.com.cn.

[16] China’s Broadband Penetration Is Increasingly Lagging
Behind Developed Nations, Says MIIT’s Research Head.
http://techcrunch.com/2013/03/21/china-
broadband-laggin.

[17] Delay-tolerant networking (DTN) Wiki page.

http://en.wikipedia.org/wiki/Delay-
tolerant_networking.

[18] FCC raises broadband deﬁnition to 25Mbps, Chairman

mocks ISPs.
http://www.extremetech.com/mobile/
198583-fcc-raises-broadband-definition-
to-25mbps-chairman-mocks-isps.

[19] HiWiFi APPs. http://bbs.hiwifi.com/thread-

22663-1-1.html.

[20] HiWiFi Introduction and History.

http://www.hiwifi.com/about.

[21] HiWiFi smart AP. http://www.hiwifi.com.
[22] HiWiFi smart AP is striving towards 5,000,000 sales. http:
//www.pcpop.com/doc/1/1002/1002782.shtml.

[23] HiWiFi vs. Newiﬁ: A Benchmark Test.

http://test.smzdm.com/pingce/p/20574.
[24] How to Ofﬂine Download? Which is the Best Ofﬂine

Downloading Tool? http://jingyan.baidu.com/
article/a65957f4fe63c424e67f9b92.html.

[25] Key ICT indicators for developed and developing countries

and the world (totals and penetration rates).

http://www.itu.int/en/ITU-D/Statistics/
Documents/statistics/2014/ITU_Key_2005-
2014_ICT_data.xls.

[26] Linksys Smart WiFi Router.

http://www.linksys.com/en-us/smartwifi.
[27] Low Extra Delay Background Transport (LEDBAT), IETF

RFC 6817.
http://datatracker.ietf.org/doc/rfc6817.

[28] MiWiFi smart AP. http://www.miwifi.com.
[29] MiWiFi: System Options.

http://www.mi.com/miwifi#op.

[30] Newiﬁ smart AP. http://www.newifi.com.
[31] Ofﬂine Downloading: the Baidu Wikipedia page.

http://baike.baidu.com/view/2718066.htm.

[32] Ofﬂine Downloading with Newiﬁ and Xunlei.

http://jingyan.baidu.com/article/
3d69c5517049e1f0cf02d7a4.html.

[33] Ofﬂine (movie) Downloading for MiWiFi.

http://www.mi.com/miwifi/movie-download.

[34] OpenWrt operating system. http://openwrt.org.
[35] Opkg (Open PacKaGe Management) web site.
https://code.google.com/p/opkg.

[36] Statistics of China Internet Users.

http://www.internetlivestats.com/
internet-users/china.

[37] Tencent PC Manager. http://guanjia.qq.com.
[38] The State of Broadband 2014 – A Report by the Broadband
Commission. http://www.broadbandcommission.
org/documents/reports/bb-
annualreport2014.pdf.

[39] Three Faults of HiWiFi. http:

//digi.tech.qq.com/a/20131112/002037.htm.

[40] URL Droplet ofﬂine downloading system.

http://www.urldroplet.com.
[41] Xuanfeng ofﬂine downloading system.

http://xf.qq.com.

[42] Xunlei ofﬂine downloading system.
http://lixian.xunlei.com.

[43] Bengt Ahlgren, Christian Dannewitz, Claudio Imbrenda,

Dirk Kutscher, and Börje Ohlman. A Survey of
Information-Centric Networking. IEEE Communications
Magazine, 50(7):26–36, 2012.

[44] Naixiang Ao, Yingying Xu, Changjia Chen, and Yuchun

Guo. Ofﬂine Downloading: A Non-Traditional
Cloud-Accelerated and Peer-Assisted Content Distribution
Service. In Proc. of the International Conference on
Cyber-Enabled Distributed Computing and Knowledge
Discovery (CyberC), pages 81–88. IEEE, 2012.

[45] Zachary S Bischof, Fabián E Bustamante, and Rade

Stanojevic. Need, Want, Can Afford ´lC Broadband Markets
and the Behavior of Users. In Proc. of the 14th ACM Internet
Measurement Conference (IMC), pages 73–86. ACM, 2014.

[46] Lee Breslau, Pei Cao, Li Fan, Graham Phillips, and Scott

Shenker. Web Caching and Zipf-like Distributions: Evidence
and Implications. In Proc. of the 18th Annual Joint
Conference of the IEEE Computer and Communications
Societies (INFOCOM), pages 126–134. IEEE, 1999.
[47] Guihai Chen and Zhenhua Li. Peer-to-Peer Network:

Structure, Application and Design. Tsinghua University
Press, 2007.

485[48] Marshini Chetty, Srikanth Sundaresan, Sachit Muckaden,

Nick Feamster, and Enrico Calandro. Measuring Broadband
Performance in South Africa. In Proc. of the 4th Annual
Symposium on Computing for Development (DEV),
Rondebosch Cape Town, South Africa. ACM, 2013.

[49] David Choffnes and Fabián E Bustamante. Taming the

Torrent: A Practical Approach to Reducing Cross-ISP Trafﬁc
in Peer-to-Peer Systems. ACM SIGCOMM Computer
Communication Review (CCR), 38(4):363–374, 2008.

[50] Bram Cohen. Incentives Build Robustness in BitTorrent. In

Proc. of the 1st Workshop on Economics of Peer-to-Peer
Systems, pages 68–72, 2003.

[51] Amal Fahad, Zhuan Chen, Kai Shen, Jeffrey Bigham, and

Assmaa Fahad. An Evaluation of Web Acceleration
Techniques for the Developing World. In Proc. of the 6th
USENIX/ACM Workshop on Networked Systems for
Developing Regions (NSDR), Boston, MA, 2012.

[52] Alessandro Finamore, Marco Mellia, Zafar Gilani,
Konstantina Papagiannaki, Vijay Erramilli, and Yan
Grunenberger. Is There a Case for Mobile Phone Content
Pre-staging? In Proc. of the 9th ACM Conference on
emerging Networking EXperiments and Technologies
(CoNEXT), pages 321–326. ACM, 2013.

[53] Aditya Ganjam, Junchen Jiang, Xi Liu, Vyas Sekar, Faisal

Siddiqi, Ion Stoica, Jibin Zhan, and Hui Zhang. C3:
Internet-Scale Control Plane for Video Quality Optimization.
In Proc. of the 12th USENIX Symposium on Networked
Systems Design and Implementation (NSDI), 2015.

[54] Sarthak Grover, Mi Seon Park, Srikanth Sundaresan, Sam
Burnett, Hyojoon Kim, Bharath Ravi, and Nick Feamster.
Peeking Behind the NAT: An Empirical Study of Home
Networks. In Proc. of the 13th ACM Internet Measurement
Conference (IMC), pages 377–390. ACM, 2013.

[55] Krishna P Gummadi, Richard J Dunn, Stefan Saroiu,
Steven D Gribble, Henry M Levy, and John Zahorjan.
Measurement, Modeling, and Analysis of a Peer-to-Peer
File-sharing Workload. ACM SIGOPS Operating Systems
Review (OSR), 37(5):314–329, 2003.

[56] Lei Guo, Enhua Tan, Songqing Chen, Zhen Xiao, and

Xiaodong Zhang. The Stretched Exponential Distribution of
Internet Media Access Patterns. In Proc. of the 27th ACM
Symposium on Principles of Distributed Computing
(PODC), pages 283–294. ACM, 2008.

[57] Te-Yuan Huang, Nikhil Handigol, Brandon Heller, Nick

McKeown, and Ramesh Johari. Confused, Timid, and
Unstable: Picking a Video Streaming Rate is Hard. In Proc.
of the 12th ACM Internet Measurement Conference (IMC),
pages 225–238. ACM, 2012.

[58] Te-Yuan Huang, Ramesh Johari, Nick McKeown, Matthew
Trunnell, and Mark Watson. A Buffer-Based Approach to
Rate Adaptation: Evidence from a Large Video Streaming
Service. In Proc. of the 2014 ACM Conference on
Communication Architectures, Protocols and Applications
(SIGCOMM), pages 187–198. ACM, 2014.

[59] Yan Huang, Zhenhua Li, Gang Liu, and Yafei Dai. Cloud
Download: Using Cloud Utilities to Achieve High-quality
Content Distribution for Unpopular Videos. In Proc. of the
19th ACM International Conference on Multimedia (MM),
pages 213–222. ACM, 2011.

[60] Sibren Isaacman and Margaret Martonosi.

Low-Infrastructure Methods to Improve Internet Access for
Mobile Users in Emerging Regions. In Proc. of the 20th
International Conference on World Wide Web (WWW), pages
473–482. ACM, 2011.

[61] David Johnson, Elizabeth Belding, and Consider Mudenda.
Kwaabana: File Sharing for Rural Networks. In Proc. of the
4th Annual Symposium on Computing for Development
(DEV), Rondebosch Cape Town, South Africa. ACM, 2013.
[62] Shunmuga Krishnan and Ramesh Sitaraman. Video Stream
Quality Impacts Viewer Behavior: Inferring Causality Using
Quasi-Experimental Designs. IEEE/ACM Transactions on
Networking (TON), 21(6):2001–2014, 2013.
[63] Zhenhua Li, Jiannong Cao, and Guihai Chen.

ContinuStreaming: Achieving High Playback Continuity of
Gossip-based Peer-to-Peer Streaming. In Proc. of the 22nd
IEEE International Parallel and Distributed Processing
Symposium (IPDPS), pages 1–12. IEEE, 2008.

[64] Zhenhua Li, Yan Huang, Gang Liu, Fuchen Wang, Yunhao
Liu, Zhi-Li Zhang, and Yafei Dai. Challenges, Designs, and
Performances of Large-Scale Open-P2SP Content
Distribution. IEEE Transactions on Parallel and Distributed
Systems (TPDS), 24(11):2181–2191, 2013.

[65] Zhenhua Li, Yan Huang, Gang Liu, Fuchen Wang, Zhi-Li

Zhang, and Yafei Dai. Cloud Transcoder: Bridging the
Format and Resolution Gap between Internet Videos and
Mobile Devices. In Proc. of the 22nd SIGMM Workshop on
Network and Operating System Support for Digital Audio
and Video (NOSSDAV), pages 33–38. ACM, 2012.

[66] Zhenhua Li, Tieying Zhang, Yan Huang, Zhi-Li Zhang, and
Yafei Dai. Maximizing the Bandwidth Multiplier Effect for
Hybrid Cloud-P2P Content Distribution. In Proc. of the 20th
IEEE/ACM International Workshop on Quality of Service
(IWQoS), pages 1–9. IEEE, 2012.

[67] Srikanth Sundaresan, Walter De Donato, Nick Feamster,

Renata Teixeira, Sam Crawford, and Antonio Pescapè.
Broadband Internet Performance: A View From the
Gateway. ACM SIGCOMM Computer Communication
Review (CCR), 41(4):134–145, 2011.

[68] Ye Tian, Ratan Dey, Yong Liu, and Keith Ross. Topology

Mapping and Geolocating for China’s Internet. IEEE
Transactions on Parallel and Distributed Systems (TPDS),
24(9):1908–1917, 2013.

[69] Haiyong Xie, Richard Yang, Arvind Krishnamurthy,

Yanbin Grace Liu, and Abraham Silberschatz. P4P: Provider
Portal for Applications. ACM SIGCOMM Computer
Communication Review (CCR), 38(4):351–362, 2008.

[70] Yasir Zaki, Jay Chen, Thomas Pötsch, Talal Ahmad, and

Lakshminarayanan Subramanian. Dissecting Web Latency in
Ghana. In Proc. of the 14th ACM Internet Measurement
Conference (IMC), pages 241–248. ACM, 2014.

[71] Mariya Zheleva, Paul Schmitt, Morgan Vigil, and Elizabeth

Belding. The Increased Bandwidth Fallacy: Performance and
Usage in Rural Zambia. In Proc. of the 4th Annual
Symposium on Computing for Development (DEV),
Rondebosch Cape Town, South Africa. ACM, 2013.

[72] Yipeng Zhou, Zhengjia Fu, Dah-Ming Chiu, and Yan Huang.

An Adaptive Cloud Downloading Service. IEEE Trans. on
Multimedia (TMM), 15(4):802–810, 2013.

486