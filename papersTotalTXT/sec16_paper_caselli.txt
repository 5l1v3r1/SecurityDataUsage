Specification Mining for Intrusion Detection  

in Networked Control Systems

Marco Caselli, University of Twente; Emmanuele Zambon, University of Twente and 
SecurityMatters B.V.; Johanna Amann, International Computer Science Institute;  

Robin Sommer, International Computer Science Institute and Lawrence Berkeley National 

Laboratory; Frank Kargl, Ulm University

 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/caselli

This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Speciﬁcation Mining for Intrusion Detection

in Networked Control Systems

Marco Caselli

University of Twente
m.caselli@utwente.nl

Emmanuele Zambon

University of Twente & SecurityMatters B.V.

emmanuele.zambon@secmatters.com

Johanna Amann

ICSI

johanna@icir.org

Robin Sommer
ICSI & LBNL
robin@icir.org

Abstract
This paper discusses a novel approach to speciﬁcation-
based intrusion detection in the ﬁeld of networked con-
trol systems. Our approach reduces the substantial hu-
man effort required to deploy a speciﬁcation-based in-
trusion detection system by automating the development
of its speciﬁcation rules. We observe that networked
control systems often include comprehensive documen-
tation used by operators to manage their infrastructures.
Our approach leverages the same documentation to auto-
matically derive the speciﬁcation rules and continuously
monitor network trafﬁc. In this paper, we implement this
approach for BACnet-based building automation systems
and test its effectiveness against two real infrastructures
deployed at the University of Twente and the Lawrence
Berkeley National Laboratory (LBNL). Our implementa-
tion successfully identiﬁes process control mistakes and
potentially dangerous misconﬁgurations. This conﬁrms
the need for an improved monitoring of networked con-
trol system infrastructures.

1

Introduction

A speciﬁcation-based

Starting from Denning’s seminal work in 1986 [9], in-
trusion detection has evolved into a number of different
approaches. Among them, anomaly-based intrusion de-
tection and, most recently, speciﬁcation-based intrusion
detection have gained attention for their potential to de-
tect previously unknown attacks (e.g., zero-day attacks).
sys-
tem (IDS)
leverages functional speciﬁcations of a
system to model its properties, or features, creating a
reference of correct behavior. Differently from anomaly-
based IDSs, behavior of features is not derived by a
learning phase (prone to false positives) but directly
extracted from documentation. This ensures the quality
of the generated models and improves detection. Several
research efforts in the literature conﬁrm the accuracy of

intrusion

detection

Frank Kargl

Ulm University

frank.kargl@uni-ulm.de

speciﬁcation-based intrusion detection [62]. However,
these approaches assume manual (human) analyses,
often focused just on network protocol documentations.
Scaling a speciﬁcation-based approach to an entire in-
frastructure faces three key challenges. First, targeted
systems do not always have consistent features, and thus
constraints, that allow to describe functional rules (e.g.,
common networks do not usually guarantee stable com-
munication patterns or message timing). Second, even
when such constraints are present, bridging the semantic
gap between infrastructure properties and the low-level
features actually observable by an IDS remains hard [22].
Third, deploying a speciﬁcation-based intrusion detec-
tion requires an explicit and unambiguous description of
the features’ behaviors, as well as substantial human ef-
fort in crafting the related speciﬁcation rules.

This work aims to ﬁll this last challenge by automating
speciﬁcation-based intrusion detection to a fairly high
degree. We propose an approach to automatically mine
IDSs’ speciﬁcation rules from available documentation.
Our approach works under the following assumptions:

• Documentation about monitored systems must be
available. No speciﬁcation-based intrusion detec-
tion would be possible without relying on correct
information that describes an infrastructure’s com-
ponents, mechanisms and constraints. Documenta-
tion should be provided in an electronic form to al-
low automated knowledge extraction.

• Information retrieved from the documentation must
be linkable to what an IDS can observe. On a net-
work, information about components, mechanisms
and constraints need to map to features monitored
by the IDS (e.g., information on a whitelist of net-
work services should link to the correct IP address).

We do not claim that these principles can be gener-
ically applied to any system. However, we observe
that environments such as Networked Control Systems

USENIX Association  

25th USENIX Security Symposium  791

(NCSs) [20] suit this approach. NCSs are “systems
whose constituents such as sensors, actuators, and con-
trollers are distributed over a network, and their corre-
sponding control-loops are formed through a network
layer” [30]. Examples of NCSs include: industrial con-
trol systems [65], building automation systems [42] and
in-vehicle networks [31]. NCSs generally have the prop-
erties discussed above. Communications over these net-
works are quite stable [22] (e.g., neither the number of
devices nor the way data is shared change regularly).
Moreover, automation guarantees the presence of control
algorithms and consequently the existence of consistent
features that will eventually become the core of the spec-
iﬁcation rules. These features and their constraints also
represent the most attractive target for an attacker who
wants to manipulate the controlled processes [14].

The two assumptions deﬁned above hold for NCSs.
Information related to system features are often docu-
mented in conﬁguration ﬁles, reference books and man-
uals (e.g., “Substation Conﬁguration Language” ﬁles
for industrial control systems, “Protocol Implementation
Conformance Statement” for building automation sys-
tems, CAN matrixes and corresponding documentation
for in-vehicle networks). Linkability is generally guar-
anteed by the absence of encryption and by the verbosity
of the adopted protocols.

In this paper, we design and discuss a speciﬁcation-
based network intrusion detection system (NIDS) for
BACnet-based building automation systems to demon-
strate and investigate our concept. First, we present
speciﬁcation-based intrusion detection in §2. Then, we
introduce building automation and BACnet in §3. We
outline our approach in §4. Details of the approach in
the context of building automation systems are discussed
in §5 to §7. Finally, we examine the general applicability
of our work in §8.
2 State of the Art

Ko et al. introduce speciﬁcation-based intrusion detec-
tion in [34]. The authors describe their approach towards
automated detection of Unix privileged program misuses
and suggest to “specify programs’ intended behavior” by
modeling their normal execution beforehand. The pro-
posed solution works through the deﬁnition of a Program
Policy Speciﬁcation Language aiming to formally deﬁne
programs’ operations by simple predicate logic and reg-
ular expressions. Later works such as [13] resume and
improve the proposed ideas. Ko et al. improve their in-
troductory research in [35] by deﬁning a formal frame-
work used to deﬁne and detail security-relevant behav-
ior of Unix programs. In [33], the framework gets in-
tegrated into a comprehensive speciﬁcation-based IDS,
called SHIM. SHIM merges several different detection

approaches that apply to both network communications
and operating system activities.
Its use, together with
machine learning techniques, was shown to be an effec-
tive solution towards the development of automated in-
trusion response strategies [3]. From the previous works,
Sekar et al. continue developing the research ﬁeld by
proposing complementary approaches in [52] (based on
the use of the Auditing Speciﬁcation Language) and [54]
(based on a custom language called “Regular Expres-
sions for Events” or REE). The same authors, present
in [53] a hybrid approach aiming to increase the in-
formation of a speciﬁcation-based IDS with the use of
anomaly-based intrusion detection techniques. The au-
thors use Extended Finite State Automata (EFSA) to
model and detail network protocol behavior. Then they
reﬁne the set of monitored features via a learning phase
exploiting statistical analyses on the trafﬁc traces.

Over the years, researchers customized speciﬁcation-
based intrusion detection to ﬁt different infrastructures
such as mobile ad hoc networks [60, 44, 23, 56, 61, 19]
and WLANs [16].
Furthermore, speciﬁcation-based
IDSs were developed for speciﬁc use cases both for
network-based (e.g., VoIP technologies [59], carrier Eth-
ernet [26]) and host-based security (e.g., kernel dynamic
data structures [48], mobile operating systems [7]).

Speciﬁcation-based intrusion detection has gained
a main role in NCSs. Works such as [8], [27],
and [37] present speciﬁcation-based IDSs for Mod-
bus, Zigbee and DNP3 respectively. Hadeli et al. no-
tably apply a semi-automated speciﬁcation approach
to substation automation systems employing MMS and
GOOSE [21]. The authors leverage operator input to
parse infrastructure-related documentation and derive se-
curity checks. Ultimately, Berthier et al. take this ap-
proach a step forward by modeling not just employed
protocols (in this case C12.22) but smart-meter security
constraints and policies as well [4]. This research shows
the feasibility and effectiveness of modeling high-level
infrastructure properties.

State-of-the-art research on speciﬁcation-based intru-
sion detection assumes that protocol and system docu-
mentation is readily available when designing and con-
ﬁguring the IDS. Few thoughts are spent on where and
how to retrieve this information, especially not in an au-
tomated way. Moreover, all the aforementioned works
do not explore the possibility of autonomously extracting
the information needed to build the related IDSs from
documentation, instead relying on human evaluation and
translation to rules. This possibility would allow to ef-
ﬁciently apply speciﬁcation-based approaches to entire
infrastructures. As discussed in the introduction, our re-
search focuses on this key aspect of speciﬁcation-based
intrusion detection with the aim of making its develop-
ment more time-effective and accurate.

792  25th USENIX Security Symposium 

USENIX Association

2

Figure 1: Building automation network layout

3 Case Study: Building Automation

Building automation systems (BASs) or building man-
agement systems (BMSs) are networked infrastructures
controlling operations and services within a building (or
a group of buildings). Among other uses, building au-
tomation systems can monitor and control HVAC (heat-
ing, ventilation, and air conditioning), lighting, energy
consumption, and physical security and safety [42].

A building automation network usually follows a hier-
archical layout [28] (Figure 1). At the bottom, sensors
and actuators directly connect to the monitored phys-
ical processes and send information back and forth to
building automation controllers. Controllers communi-
cate with servers and distributed control systems (DCSs)
to coordinate high-level control procedures and policies.
Finally, operators can access and manage building au-
tomation components connecting through their worksta-
tions and human-machine interfaces (HMIs).

In the last decade, the employment of building au-
tomation solutions has constantly increased (both for
commercial and residential buildings) and its market
share is expected to grow in the following years [39]. De-
spite numerous beneﬁts (e.g., energy efﬁciency, “smart
homes”, etc.) building automation makes several new
threat scenarios not just feasible but realistic [24, 17,
18, 47]. Nevertheless, only few solutions have been
proposed to improve building automation system secu-
rity [18, 6, 45].

3.1 BACnet
The “Building Automation and Control Network” (BAC-
net) protocol [1] facilitates building automation system
communication for a wide array of different devices and
different settings. While exact statistics of the prolifera-
tion of BACnet are difﬁcult to come by, already back in
2003 there were more than 28,000 BACnet installations
in 82 countries [28].

Figure 2: BACnet interaction example

BACnet has a layered protocol architecture, similar to
the ISO/OSI model. The BACnet protocol has an appli-
cation layer, containing the actual application data pay-
load as well as a network layer that abstracts the differ-
ences of the network architectures supported by BACnet
and implements its own routing protocol. Underneath the
network layer, BACnet also speciﬁes how it can be used
with different types of data links.

The BACnet application layer rests on two important
core concepts: objects and services (Figure 2). A Build-
ing Automation and Control System (BACS)1 includes
one or more BACnet objects that are used to represent
its functions. Objects are of a speciﬁc type, like An-
alog Input or Analog Output. BACnet supports a
wide range of high-level object types like Calendars,
Date Value objects, or Credential Data Input ob-
jects. BACnet users and vendors can deﬁne “proprietary”
objects as well to serve speciﬁc functionalities. Ob-
ject types have different attributes that are called prop-
erties, which are extensible for speciﬁc purposes. The
second core concept of the BACnet application layer
are services. While objects describe the different func-
tions that are implemented by a BACS, services deﬁne
how to communicate with the BACS, offering function-
ality such as reading object information from a device.
Their names reﬂect the semantics of the operation (e.g.,
ReadProperty).

Individual BACSs typically only support a small se-
lection of possible objects and services. Manufactur-
ers use a “Protocol Implementation Conformance State-
ment” (PICS) to describe which objects and services are
implemented by a speciﬁc device. The BACnet standard
implies that all BACSs shall have a PICS identifying “all
of the portions of BACnet that are implemented” [1]. In-
formation in PICS includes: a brief description of the de-

1In the remainder of this paper, we will refer to any controller im-

plementing BACnet as BACS.

USENIX Association  

25th USENIX Security Symposium  793

3

vice; a list of supported BACnet Interoperability Build-
ing Blocks (BIBBs) that deﬁne classes of BACnet ser-
vices supported by a device; and a list of supported stan-
dard and proprietary BACnet objects and properties with
their characteristics.

To complete device descriptions, operators may take
advantage of conﬁguration ﬁles such as “Engineering
Data Exchange” (EDE) ﬁles [2]. Generally, operators
compile these documents to represent internal character-
istics of a deployed BACS. EDE ﬁles include detail infor-
mation on devices’ BACnet implementations (e.g., which
BACnet objects a device is currently using) and value
constraints (e.g., in Figure 2, Present Value of Analog
Value 7 must be less than 5.0).

3.2 Attacks on BACnet
BACnet deﬁnes a limited security architecture providing
peer and operator authentication along with data conﬁ-
dentiality and integrity (“Clause 24 — Network Secu-
rity” [1]). However, none of this is implemented in avail-
able products [43]. This leaves BACnet infrastructures
vulnerable to numerous cyber-threats [24, 63, 58, 29].

We categorize attacks on BACnet into three main
groups: snooping, denial of service (DoS), and process
control subverting. This categorization derives from the
list of BACnet protocol threats described in [24].

Snooping attacks concern stealing information about
a speciﬁc building automation system. To achieve this
goal, these attacks require access to the building automa-
tion system network. Once inside, attackers can take
advantage of BACnet services such as ReadProperty
and ReadPropertyMultiple to gain knowledge of the
BACS. This includes device models, locations, status,
and information on their BACnet support (e.g., which
BACnet services and objects they implement). Attackers
may need this information to understand the infrastruc-
ture and pave the way to further intrusions. However,
snooping attacks do not disrupt any process of the build-
ing automation system.

Differently, DoS attacks try to interfere with control
processes by making controllers unreachable for opera-
tors. This category only considers DoS attacks that are
performed through the use of BACnet routing features
(e.g., malicious modiﬁcations to the BACnet routing ta-
bles) and leaves other kinds of DoS out of its scope.
As for the snooping attacks, DoS attacks need malicious
users to have access to the network. Moreover, this kind
of attacks requires information about the network layout.
Attackers can achieve their goal by sending BACnet mes-
sages, such as Initialize-Routing-Table, to modify
a BACS’ routing tables. In this way, operators lose vis-
ibility on single devices or even entire sections of the
building automation system.

Finally, process control subverting includes those at-
tacks that directly modify control processes and, con-
sequently, interfere with physical operation. This kind
of attacks requires more skilled attackers with sufﬁcient
knowledge about the building automation system func-
tioning. In this scenario, attackers exploit speciﬁc con-
trollers by using several different BACnet services, such
as WriteProperty or DeleteObject, to change the
BACSs’ structures and operations. This leads to a loss
of control by the operators and, consequently, leads to
risks for components and people.

3.3 Evaluation Environments
For this work, we analyzed two different building au-
tomation installations over more than two months of con-
stant operation. The ﬁrst building automation system
belongs to the University of Twente in the Netherlands
and is in charge of supervising utilities and services pro-
vided to the university campus. Its duties encompass en-
ergy consumption control, HVAC, and room monitoring
and management (e.g., pressure and temperature control,
shading, etc.). The second building automation system
belongs to the Lawrence Berkeley National Laboratory
(LBNL) and supervises several services on its premises.
The LBNL process control focuses mostly on room mon-
itoring and energy consumption for the Lab facilities.
Both infrastructures deal with hundreds of BACSs from
several different vendors.

The IDS we deployed at the University of Twente
linked to a SPAN port on a switch directly connected
with the SCADA servers monitoring the whole building
automation system. The same switch is responsible for
routing most of the trafﬁc of the building automation net-
work. This allowed us to capture and analyze most of the
BACnet messages exchanged by BACSs. Differently, at
LBNL we could monitor only a subset of the building au-
tomation system by linking to a switch in charge of con-
necting BACSs inside one building. However, this was
sufﬁcient to automatically gather the information needed
for our approach to craft the speciﬁcation rules.

The two infrastructures generally showed similar traf-
ﬁc patterns. Several BACSs shared the same sets of ob-
jects and used the same kind of messages to exchange
information. Furthermore, both UT’s and LBNL’s traf-
ﬁc samples included numerous BACnet routing mes-
sages (e.g., Who-Is, I-Am, Who-Has, and I-Have) or-
ganizing communication paths within the two networks.
However, the two infrastructures presented some dif-
ferences related to communication and control strate-
gies (e.g., all BACSs deployed at UT used conﬁrmed
services thus requiring acknowledgments from mes-
sage recipients while some devices at LBNL used just
unconﬁrmed ones). Particularly,
the employment of

794  25th USENIX Security Symposium 

USENIX Association

4

BACSs from different vendors led operators to employ
individual procedures implemented through the use of
ConfirmedPrivateTransfer BACnet services. Such
services are used to invoke proprietary or non-standard
routines in remote BACSs.

3.4 Setting and Threat Model
The reason to develop a network-based IDS is twofold.
First, a network-based solution is easier to deploy than
host-based ones. Secondly, this setup allows us to have
minimum impact on NCS processes. Once deployed,
we assume that our system is able to capture real-time
trafﬁc of the monitored building automation system in
a completely passive fashion and to retrieve documen-
tation publicly available on the Internet. This allows
to gather the information we need to build speciﬁcation
rules and implement effective detection.

On the other side, we assume attackers can gain full
access to the network as well. We consider this hap-
pening in a way that is similar to standard IT environ-
ments (e.g., phishing, software vulnerability exploita-
tion). Tools such as Shodan [40] show how easy it is
to ﬁnd building automation networks exposing their de-
vices to the Internet. Once inside, attackers can obtain
a convenient viewpoint on the building automation con-
trol processes. Two key factors support this assumption.
First, most building automation protocols take advan-
tage of broadcast communications to exchange informa-
tion among devices (e.g., routing notiﬁcations). This al-
ready allows attackers to easily observe a large part of
the trafﬁc. Secondly, the hierarchical structure of com-
mon building automation networks steers valuable infor-
mation messages towards servers and DCSs. By gaining
access to one of these servers, attackers can observe most
of the trafﬁc within the building automation system.

Within a building automation network, attackers may
use attacks outlined in §3.2 to gain knowledge on, or
subvert, the correct functioning of the building automa-
tion system. In this last scenario, any safety feedback in
place can usually be overridden [49]. Therefore, attack-
ers can put infrastructure components under stress, pos-
sibly threatening human safety when it comes to devices
such as electrical equipment.

4 Speciﬁcation Mining Approach

Our approach works towards automated development of
speciﬁcation rules for network security monitoring. Set-
ting up and customizing a speciﬁcation-based IDS for a
particular infrastructure requires a large amount of infor-
mation about the monitored system, implying a substan-
tial manual effort in gathering and reﬁning the speciﬁ-
cation rules. As details of the infrastructures are often

Figure 3: Speciﬁcation-mining approach

described within specs and conﬁguration ﬁles, especially
in many NCS environments, the process of collecting this
information—and, consequently, the development of the
actual IDS—can be automated to a fairly high degree
through the following steps (see also Figure 3):

(1) System Discovery gathers information about the
monitored NCS. In this step, our system analyzes the net-
work trafﬁc in order to: 1) identify devices communicat-
ing on the network (e.g., models, brands); and 2) deter-
mine role and purpose of each identiﬁed device (e.g., a
device is a controller, an HMI, etc.). Every time the sys-
tem collects enough information about a speciﬁc device
it proceeds with the next step.

(2) Feature Lookup implements a set of information
retrieval techniques to gather knowledge about devices
identiﬁed during System Discovery. The purpose of this
step is to: 1) ﬁnd veriﬁed information (e.g., specs, con-
ﬁguration ﬁles) about the infrastructure’s devices; and
2) select features and constraints from the retrieved doc-
uments and arrange results in a structured form.

A successful Feature Lookup relies on the assump-
tions of availability and linkability outlined in the in-
troduction. The assumption of availability implies the
existince of documents about infrastructures and compo-
nents that are automatically retrievable. This requires the
information to be provided in electronic form and being
suitable for parsing. Also, this assumption includes an
assurance on the authenticity of the retrieved informa-
tion (e.g., by the use of reliable sources, by the employ-
ment of secure retrieval techniques). The assumption of
linkability guarantees that the information derived by the
retrieved documentation can be checked by the system
against observations within the trafﬁc (e.g., messages,
variables, etc.). Particularly, after the identiﬁcation of
network devices and the successful retrieval of their re-
lated constraints from the documentation, the assump-
tion of linkability enables assigning effective speciﬁca-
tion rules to the right targets.

(3) Rule Deﬁnition uses the knowledge obtained in
the Feature Lookup to craft the speciﬁcation rules. To
achieve this goal, the system needs to: 1) select identi-
ﬁed information from Feature Lookup; 2) translate this
information to speciﬁcation rules.

USENIX Association  

25th USENIX Security Symposium  795

5

We focus our speciﬁcation-based intrusion detection on
controllers (e.g., BACSs for building automation sys-
tems, Programmable Logic Controllers or PLCs for
ICSs, Electronic Control Units or ECUs for in-vehicular
networks). This decision comes from the key role these
components have within NCSs: Controllers are involved
in any monitoring and control operation of the infrastruc-
ture either autonomously or accessed by operators. Fur-
thermore, controllers are likely targets for attackers (as
illustrated in §3.2).
We observe that NCS controllers share a number of
properties. First, every controller employs a limited set
of variables to fulﬁll its function. These variables can
go from simple memory addresses to complex objects
but often have predetermined types. Moreover, all con-
trollers use a limited set of methods (or services) to ac-
cess and manipulate variables of other controllers. Fi-
nally, each variable can assume a limited range of val-
ues according to its type or the physical characteristic it
represents. We leverage these shared properties to deﬁne
a set of general constraints, or abstract rules, checking
NCS variables’ types, values and access methods. These
abstract rules are the seeds we use to automatically gen-
erate specialized speciﬁcation rules. To achieve this, we
deﬁne a mechanism that maps information retrieved in
the Feature Lookup step to the abstract rules. This pro-
cess automatically completes the abstract rules and, as a
result, customizes detection for the monitored NCS.

Once a rule is deﬁned, it becomes active and, thus,
part of the detection mechanism. During detection, an
active rule veriﬁes if its related constraint is fulﬁlled or
not. When this last condition becomes true, the system
triggers an alert for the user.

Having presented the phases in a generic way, we now
describe our experimental setup and, then, how we have
instantiated them to build a speciﬁcation-based IDS for
BACnet-based building automation systems.

Implementation background We implement our ap-
proach using the Python programming language [51]
and Bro [46]. Bro is a network trafﬁc analyzer em-
ployed in different domains such as network security
monitoring and performance measurement. The sys-
tem comes with comprehensive built-in functionalitiy
for trafﬁc analysis and supports several network proto-
cols ranging from standard (e.g., HTTP, FTP) to domain-
speciﬁc (e.g., Modbus [41], DNP3 [10]). Bro provides a
Turing-complete scripting language that allows users to
select and analyze network events (e.g., connection es-
tablishments). We choose to describe speciﬁcation rules
through the “Bro scripting language” because of its ef-
ﬁciency and expressiveness. We developed a BACnet
parser for Bro using Spicy [55], a parser generator whose
speciﬁcation language allows users to deﬁne a protocol’s

syntax and semantics at a high level. We publish the
BACnet parsing code for Spicy, as well as the Python
scripts , as open source software.2 However, we cannot
open-source the Bro code containing the rule checks due
to privacy agreements with the two building automation
system sites.

5 System Discovery

To identify BACSs we implement three different tech-
niques that we term: “BACnet Device Object anal-
ysis”, “BACnet Address linking”, “BACnet Property
set ﬁngerprinting”. The ﬁrst technique directly fol-
lows from the protocol standard and relies on the
mandatory presence of a Device object in every BACS
device. The Device object deﬁnes “a standardized
object whose properties represent the externally vis-
ible characteristics of a BACnet device”.
Among
these properties there are: Object Name, Vendor Name,
Vendor Identifier, Model Name, Firmware Re-
vision, Application Software Version, Loca-
tion, and Description.
these prop-
erties are set by vendors and provide informa-
tion on a device’s identity (e.g., Model Name) and
role (e.g., Description). BACnet services such as
ReadProperty and ReadPropertyMultiple can ac-
cess those properties. As these services are widely em-
ployed by user interfaces and logging servers to automat-
ically update data related to infrastructure’s components,
information on Device objects regularly passes through
the network and, thus, is available to System Discovery.
As the Object Identifier property of a Device ob-
ject is a parameter that uniquely identiﬁes a device in a
BACnet network, a message such as the one in Figure 4
allows us to identify a BACS and understand its purpose.
In the Wireshark screenshot example, BACS with identi-
ﬁer “17001” is a “Blue ID S10 Controller”.

Most of

For BACnet objects of other types, since no infor-
mation can be extracted from the IP address (multiple
BACnet devices may share the same IP address), a fur-
ther parameter allows to identify message sources and
destinations:
the BACnet address. As for the Device
object’s Object Identifier, the BACnet address (to-
gether with the Network Identifier) is unique within
a BACnet network.
In the “BACnet Address linking”
technique, the BACnet address bridges the gap between
a known Device object and any BACnet object included
in the same BACS. Figure 5 shows an example of this
analysis. When “device 4001” is known (as a result of
the previous technique), any message carrying both the
related Device object’s Object Identifier and the

2https://github.com/specification-mining-paper-

usenix-2016/specification-mining

796  25th USENIX Security Symposium 

USENIX Association

6

Table 1: University of Twente - BACS device list

# of devices
5
15
7
25
36
12
85
2
16
2
3
3
3
3
3
1

# of devices
23
14
11
159
1
9
1
4
4
4
1
2
7

Vendor
Kieback&Peter
Priva
Priva
Priva
Priva
Priva
Priva
Priva
Priva
Delta Controls
Siemens
Siemens
Siemens
Siemens
Siemens
Unknown

Model
DDC4000
HX 80E
Compri HX
Compri HX 3
Compri HX 4
Compri HX 6E
Compri HX 8E
Blue ID S10
Comforte CX
eBCON
PXG80-N
PXC64-U
PXC128-U
PXR11
PXC00-U + PXA30-RS
Unknown

Role
DCS
Router
Controller
Controller
Controller
Controller
Controller
Controller
HMI
Controller
Controller
Controller
Controller
Controller
Controller
-

Table 2: LBNL - BACS device list

Vendor
Automated Logic
Automated Logic
Automated Logic
Automated Logic
Automated Logic
Johnson
Johnson
Paragon Controls Inc.
Sierra
Sierra
Tracer
Niagara
Unknown

Model
LGR
ME
SE
ZN
WebCTRL
NAE
NIE
EQ
BTU Meter
FFP
UC400
AX Station
Unknown

Role
Router/Gateway
Controller
Controller
Controller
HMI
Controller
Controller
Controller
Energy meter
Controller
Controller
SCADA server
-

extensible. Every object of a BACS has a set of stan-
dard and proprietary properties that form a “ﬁngerprint”
of that object and device. The third technique assumes
that two objects sharing the same ﬁngerprint are likely to
be of the same kind. During System Discovery, it is pos-
sible to create a database of identiﬁed ﬁngerprints each
one pointing to the corresponding BACS (identiﬁed with
the previous two techniques). Whenever an unknown ob-
ject presents a property set already in the database, the
system infers the most likely related device.

Experiments Previous work by us shows that tradi-
tional ﬁngerprinting techniques are usually ineffective on
most NCSs [5]. In our tests, tools such as Nmap [38] and
P0f [64] were able to identify just a limited number of
Windows and Linux workstations. The techniques pre-
sented above proved more effective. Thanks to frequent
ReadPropertyMultiple, our system was able to gather
information on most BACSs. Moreover, BACnet address
linking and BACnet property set ﬁngerprinting allowed
the system to link most of the observed BACnet objects
to identiﬁed devices. At the end of System Discovery,
we gathered information on ∼15k BACnet objects be-
longing to the 445 devices shown in Tables 1 and 2.
Thanks to the information from the operators, we

Figure 4: “BACnet Device Object analysis” example

(a) I-Am message

(b) ReadProperty message

Figure 5: “BACnet Address linking” example

BACnet Address allows us to link the two parameters
(Figure 5a). Any later message then carrying the BACnet
address along with a further object (e.g., “Analog Value
171”) enables linking to the corresponding device (Fig-
ure 5b). This technique works well because I-Am mes-
sages pass the network frequently to ensure visibility of
all BACnet objects.3

Finally,

if no information can be extracted from
Device objects or BACnet addresses, System Discov-
ery can beneﬁt from observations of the BACnet prop-
erties. As discussed in §3.1, the BACnet property set is
3The technique can also directly use messages carrying Device ob-
ject information if the source BACnet address is present in the header.
However, for this kind of messages, having the BACnet Address ﬁelds
is not mandatory.

USENIX Association  

25th USENIX Security Symposium  797

7

know that we correctly identiﬁed 98.2% of the BACSs
actually deployed (445 out of 453 devices). Eight devices
did not link to any useful BACnet message or identiﬁ-
able property set. However, these devices convey almost
no information over the network (a few hundreds BAC-
net messages over two months of capturing compared to
an average of tens of thousands) and did not involve any
notable equipment. Identifying the aforementioned 445
devices took just a few hours of monitoring.

6 Feature Lookup

Searching for documentation on identiﬁed BACSs is pos-
sible because the two assumptions of availability and
linkability hold for BACnet-based building automation
systems. Veriﬁed information about BACSs is avail-
able within PICSs and EDE ﬁles. This information in-
cludes BACSs’ vendors, models and even refers to spe-
ciﬁc BACnet objects, thus is linkable to what we ob-
served over System Discovery.

Feature Lookup targets both online and ofﬂine doc-
umentation. On the one hand, we use Google APIs to
search and retrieve publicly available documents such as
PICSs on the Internet. On the other hand, we retrieve
EDE ﬁles from private repositories in the installations.
Both cases allow for document authenticity. In the for-
mer case, we narrow the search to a subset of reliable
sources such as vendors’ websites and reputable third
parties (e.g., BACnet International Laboratories4). In the
latter case, we assume a secure connection to a trusted
dataset managed by the operators.

Once a BACS links to one or more of these documents,
our system parses the documents looking for useful in-
formation. According to BACnet speciﬁcations, a PICS
has a standard template and we observe that most PICSs
are closely modeled to it. Figure 6 shows three extracts
from the PICS of the “Blue ID S10 Controller” men-
tioned in the previous section.

As outlined in §3.1, each PICS provides a description
of the related BACS and the BIBBs it implements (Fig-
ure 6a). Moreover, PICSs include information about sup-
ported BACnet objects and properties, as well as their
characteristics (Figures 6b and 6c).

EDE ﬁles also follow a standard template but they
use a simpler “comma-separated values” (CSV) format.
Each EDE ﬁle presents details of a speciﬁc BACS (Fig-
ure 7 shows an extract of Device 4001 EDE ﬁle). Data
includes all implemented BACnet objects (e.g., “device
4001” owns “Analog Value 171”, “Multi-state Value 15”,
etc.) and their descriptions. Furthermore, EDE ﬁles in-
clude information about Present Value properties with

4http://www.bacnetinternational.org/

(a) PICS excerpt 1

(b) PICS excerpt 2

(c) PICS excerpt 3

Figure 6: PICS example

Figure 7: EDE ﬁle example

value ranges (e.g., “Analog Value 171” can vary from
min-present-value 0 to max-present-value 100).

Experiments The program we implemented to search
for online documentation uses the outputs of System
Discovery (vendors and models) and further keywords
such as “PICS” to retrieve information about identiﬁed
BACSs. The system ranks Google results coming from
public repositories (e.g., www.bacnetinternational.net)
and the web by quantifying the presence of the key-
words in document titles. For example, the “Blue ID
S10 Controller” links to a PDF document titled “BAC-
net PICS Blue ID S10 Controller.pdf” (Figure 6). With
this technique we identiﬁed a PICS for 99.3% of the de-

798  25th USENIX Security Symposium 

USENIX Association

8

vices deployed in the two building automation systems
(442 out of 445 among the devices identiﬁed in the Sys-
tem Discovery step). Two ‘Siemens PXR11’ and one
‘Paragon Controls Inc. EQ’ were the only devices that
did not link to any PICS. However, we could not ﬁnd the
related PICSs even by a manual search either.

Ofﬂine research targeted speciﬁc devices directly.
While online documentation always provides general in-
formation about BACSs of a certain kind (e.g., all “Blue
ID S10 Controller”), ofﬂine repositories provide detailed
information related only to devices deployed in the mon-
itored building automation system. For this reason, in-
stead of vendors and models we searched through the
available documents using device Object Instances.
For example, starting from “Device object 4001” from
System Discovery, we found an EDE ﬁle titled “Con-
troller 4001 EDE.csv”. While LBNL did not provide
any conﬁguration ﬁle, operators from the University of
Twente shared with us 10 ﬁles of this kind. While they
conﬁrmed that there was indeed an EDE ﬁle for every de-
ployed device, they could not grant us unlimited access
to all of them due to information sensitivity. For this rea-
son, the operators chose the 10 ﬁles based on roles and
purposes of the related devices. Each ﬁle we obtained
described a BACS identiﬁed over System Discovery.

The aforementioned privacy concerns refer to the ini-
tial manual analysis we had to perform over the EDE
ﬁles and would not hamper the applicability of our ap-
proach. In an ideal deployment, one would have a se-
cure connection between the IDS and the machine stor-
ing the EDE ﬁles, without any human activity involved
for retrieval operations and processing. However, both
University of Twente and LBNL operators store infras-
tructure documentation on computers also used for other
purposes than building automation, and direct connec-
tions to those resources were infeasible.

Finally, we implemented two programs to parse PICSs
and EDE ﬁles respectively. In the ﬁrst case, the program
goes from document’s top to bottom guided by the dia-
gram shown in Figure 8. For every available PICS, the
program ﬁrst selects all implemented BIBBs and BAC-
net objects (Figures 6a and 6b). Each object can be cre-
atable/deletable and this information follows the object
as a “yes/no” or equivalent symbols (Figure 6b). Finally,
for every object, the script selects a list of properties that
can be writable or not (Figure 6c). Figure 9 shows pars-
ing results of the “Blue ID S10 Controller” coming from
the PICS showed in Figure 6.

Most of the retrieved PICS did not have any infor-
mation about property values. Instead, this information
was included in the EDE ﬁles. A further program went
through all EDE ﬁles selecting Present Value mini-
mum and maximum values for every listed object. This
new information was structured as shown in Figure 10.

Figure 8: PICS parsing diagram

Figure 9: Parsing PICS example results

Figure 10: Parsing EDE example results

7 Rule Deﬁnition and Detection

Next we describe how the information gathered in previ-
ous steps is used to deﬁne speciﬁcation rules. In §4, we
motivated our focus on variables’ types, values and re-
lated access methods as basis for our speciﬁcation rules.
From this, we derive three abstract rules: 1) a “Type”
rule checks if a variable of a speciﬁc type is allowed;
2) a “Value” rule checks which values a variable may
assume; and 3) a “Method” rule checks which methods
can be used to access a speciﬁc variable. All rules have
the same structure: each element (type, value, method)
is evaluated against a set of allowed possibilities. For ex-
ample, in the “Type” rule, a variable’s type is evaluated
against all the allowed types of variable a controller may
implement (Algorithm 1).

We use a Python program to automate the process of
mapping information retrieved over Feature Lookup to
the abstract rules. In the following, we discuss how we
map these abstract rules into speciﬁcation rules for mon-
itoring for each type.

Type Rule: The “Type” rule checks which BACnet ob-
jects and properties each BACS can use. This informa-
tion comes from the PICSs (Figures 6b and 6c) and, thus,
is included in the results of Feature Lookup (Figure 9).
Therefore, a script selects allowed objects and properties
of each identiﬁed BACS and transforms the “Type” rule
into the two speciﬁcation rules shown in Algorithm 2.

In the case of the “Blue ID S10 Controller”,

the

USENIX Association  

25th USENIX Security Symposium  799

9

Algorithm 1 Abstract “Type” rule
1:
2:
3: end if

if Variabletype /∈ ControllerAllowedVariableTypes then

Alert(“Variable type not permitted”)

Algorithm 2 BACnet “Type” rules
1:
2:
3: end if

if BACnet Object /∈ ControllerAllowedObjectTypes then

Alert(“Forbidden Object”)

if BACnet Property /∈ ControllerObjectAllowedPropertyTypes then

Alert(“Forbidden Property”)

1:
2:
3: end if

In the same way,

ControllerAllowedObjectTypes set contains objects Accumu-
lator, Analog Input, etc.
the
ControllerAccumulatorAllowedPropertyTypes set of a “Blue ID S10
Controller” contains properties Object Identifier,
Object Name, etc. Whenever the system captures a
BACnet message including an object and some prop-
erty, the two rules check object and property types re-
spectively and alert if these types are not included in the
deﬁned sets. This allows the system to detect snooping
attacks and any other attack dealing with unexpected ob-
jects and properties.

Value Rule: The “Value” rule checks which values
BACnet properties may assume. This information comes
from the EDE ﬁles (Figures 7 and 10) and, thus, is auto-
matically mapped to the concrete rule as shown in Algo-
rithm 3.

Algorithm 3 BACnet “Value” rule
1:
2:
3: end if

Alert(“Forbidden Value”)

if BACnet Property value /∈ Controller(Object,Property)AllowedPropertyValues then

For example, when it comes to “Device 4001”, the sys-
tem alerts if “Analog Value 171” is below 0 or above 100.
This rule protects the infrastructure against process con-
trol subverting scenarios, and thus attacks attempting to
modify parameters of the physical and control processes.

Method Rule: The “Method” rule validates the BAC-
net services each BACS can use. This information comes
from the PICSs in the form of a list of BIBBs (Figures 6a)
and is included in the results of Feature Lookup (Fig-
ure 9). BIBBs can be replaced with corresponding ser-
vices by a simple lookup operation. Therefore, Algo-
rithm 4 checks if a BACnet service belongs to the set of
allowed services.

In the case of the “Blue ID S10 Controller”,

the
includes services from BIBBs
DS RP B

(ReadProperty Request),

ControllerAllowedServices
DS RP A

Algorithm 4 BACnet “Method” rule
1:
2:
3: end if

if BACnet Service /∈ ControllerAllowedServices then

Alert(“Forbidden Service”)

(ReadProperty Response), etc. This rule allows the
system to detect attackers misusing BACnet services to
fulﬁll their goals.

Furthermore, we use the “Method” rule to check
which BACnet object is creatable/deletable and which
BACnet property is writable. Following the standard,
we compile three sets of BACnet services with services
that create objects, that delete objects, and that write
properties respectively. Then, the system uses the infor-
mation from Feature Lookup to deﬁne checks on non-
creatable/deletable objects and non-writable properties
by using Algorithm 5.

Algorithm 5 BACnet additional “Method” rules
1:
2:
3: end if

if BACnet Service ∈ CreateObjectServices then

Alert(“Forbidden object creation”)

if BACnet Service ∈ DeleteObjectServices then

Alert(“Forbidden object deletion”)

1:
2:
3: end if

if BACnet Service ∈ WritePropertyServices then

Alert(“Forbidden property writing”)

1:
2:
3: end if

For example, the ﬁrst two rules alert the presence
of services attempting to create or delete Accumulator
objects belonging to a “Blue ID S10 Controller”.
The third rule reports any service attempting to write
to a non-writable property, such as Accumulator’s
Object Identifier.

Experiments Our system ﬁlled the abstract rules with
the information coming from Feature Lookup crafting
hundreds of speciﬁcation rules. To improve efﬁciency
we arrange the speciﬁcation rules in an order that avoids
meaningless checks (e.g., we do not want to check a
BACnet property if we already know that the BACnet
object it belongs to is not allowed). For every captured
BACnet message, the system checks if the BACnet ser-
vice is allowed; then, if involved BACnet objects can be
used, created or deleted; then, if involved BACnet prop-
erties are allowed and writable. Finally, the system ex-
amines properties’ actual values. Only a small set of
speciﬁcation rules are of this last type due to the limited
number of EDE ﬁles that operators provided us with.

As outlined in §3.3, we tested our approach against
more than two months of real trafﬁc. Over the two
months of capturing, our system triggered 237 unique
alerts; 226 at the University of Twente and 11 at LBNL.

800  25th USENIX Security Symposium 

USENIX Association

10

Table 3: Detection results

Abstract Rule

Type Rule

Speciﬁcation Rule
Forbidden object
Forbidden property

Value Rule

Forbidden value

Method Rule

Forbidden service
Forbidden object creation
Forbidden object deletion
Forbidden property writing

# Alerts

2
234

0

0
0
0
1

(a) Unexpected property ReadProperty Request

Figure 11: Unexpected object ReadProperty Request

Figure 12: Unexpected property read operation

(b) ReadProperty Response conﬁrmation of the alert

The two results differ because of the different views
we achieved over the two infrastructures (as already de-
scribed, at LBNL we could monitor only a subset of the
building automation system and thus a subset of the traf-
ﬁc). Table 3 shows the three abstract rules, the corre-
sponding speciﬁcation rules and whether or not a rule
raised an alert.

We did not ﬁnd any evidence of malicious activities
over the time span of the captures. However, our ap-
proach still provided interesting insights. At the Univer-
sity of Twente, the system raised alerts on two BACSs
using forbidden objects. Both cases involved a “pro-
prietary” object never described within the PICS. Ac-
cording to the available documentation, the two devices
(two Siemens controllers PXC128-U) should not include
anything that was not deﬁned within the BACnet stan-
dard. Nevertheless, a device probed the two controllers
(Figure 11) and received back correct BACnet responses
about an unknown object. A meeting with the operators
revealed that this object is vendor-deﬁned and gathers in-
formation on parameters of the BACSs recognizable and
understandable by vendors only. Operators conﬁrmed
that vendors have access to the building automation sys-
tem to monitor their devices, and use of an unknown
BACnet object happens even though the documentation
does not mention this possibility because of its internal
nature. However, operators did not know that involved
BACSs provide speciﬁc functionalities and attackers can
potentially exploit such circumstances.

Detection on BACnet properties provided the highest
number of alerts (all alerts at LBNL were of this kind).
Our system generated several alerts on ReadProperty
and ReadPropertyMultiple messages attempting to
retrieve non-existing properties.
As a matter of
fact, these properties were not deﬁned by the PICSs
and, for most cases, we could eventually conﬁrm the

non-existence of these properties by observing some
BACnet errors carried in the responses to those read re-
quests (Figure 12).

A BACS asking for unimplemented properties is not
necessarily a violation of the specs. In fact, all PICSs
deﬁne what a BACS implements without deﬁning what
other BACSs may ask for. A situation in which a BACS
sends back a BACnet-error response to warn about a
non-existing property (Figure 12b) is in line with the
specs and should be of no harm for the system. However,
the reason to alert on situations of this kind is twofold.
First, this situation may be of interest from a security per-
spective. Despite being handled by the BACnet protocol,
these circumstances may hide a “network discovery” sce-
nario where an attacker tries to gain knowledge of the in-
frastructure by randomly probing BACSs. As described
in §3.2, snooping is one plausible attack in building au-
tomation systems. Secondly, the same situation shows a
common side-effect of the joint use of different BACnet
software solutions. As servers and workstations do not
usually know in advance which BACSs they will con-
nect to, predeﬁned BACnet discovery messages exist in
order to gather general information of building automa-
tion components. These messages do not consider which
BACnet properties are deﬁned for each device and sim-
ply use large sets of them. This consequently generates
several error responses on the network.

To dig deeper into property-related issues, we ex-
tended the “unknown property” speciﬁcation rule to also
check if properties enforced by PICSs were always im-
plemented. Therefore, we created a further instance of
“Type” rule checking all BACnet error messages to de-
tect missing properties that were supposed to be used by
the BACSs. The system revealed several messages re-
porting “unknown-property” errors about properties de-
clared to be part of devices’ BACnet implementations.

USENIX Association  

25th USENIX Security Symposium  801

11

identiﬁed either an actual mismatch between device
documentation and implementation (e.g., unimple-
mented BACnet Properties) or an operator mistake
(e.g., the unexpected writing operation). As already
discussed, these issues can cause signiﬁcant gaps in
the knowledge operators have about their infrastruc-
tures and may potentially lead to dangerous miscon-
ﬁgurations of the involved systems. The meeting
with the operators at the University of Twente con-
ﬁrmed that employed HMIs were not able to signal
any of the misconﬁgurations found or even notify
the users on generated BACnet errors. As a result,
the University of Twente asked to deploy our sys-
tem into the building automation system continu-
ously and let operators receive notiﬁcations of the
generated alerts. So while our datasets did not in-
clude actual attacks, we were able to reliably detect
notable deviations from the speciﬁcations at zero
false-positives. This result is in line with the work
of Uppuluri et al. [62] showing that speciﬁcation-
based intrusion detection works towards optimal de-
tection rate while substantially decreasing the num-
ber of false positives compared to anomaly-based
detection.

• On the other hand, our approach does not necessar-
ily detect all possible attacks threatening the mon-
itored infrastructure. In fact, any attack operating
within the boundaries deﬁned by employed spec-
iﬁcations would not be caught by our IDS. How-
ever, our solution substantially narrows down what
a malicious user can do and covers most of the at-
tack scenarios deﬁned within the categories listed
in §3.2. Furthermore, our solution does not exclude
the use of other approaches such as pure anomaly-
based intrusion detection either improving the ob-
tained rule set or working in parallel.

Each one of the implemented phases effectively
achieved the deﬁned goals. Thanks to the numerous read
operations, System Discovery took just a few hours of
network snifﬁng to gather all the information needed to
describe the whole set of BACSs. With this information,
our approach was able to rapidly and automatically iden-
tify available sources of information and craft effective
speciﬁcation rules.

Feature Lookup focused just on structured documents
such as PICSs and EDE ﬁles. In some of the tests, we
further extended online research to documents such as
BACS user manuals. Our system was able to down-
load 10 manuals related to components deployed in the
monitored infrastructures. However, we decided to not
further employ manuals because an analysis showed
they were fullly overlappig with the information found
in the PICSs. Nevertheless, one way to improve our

Figure 13: Unexpected property write request

All these mismatches between implementation and spec-
iﬁcation are particularly relevant for what concerns inter-
operability. In fact, software solutions that deﬁne their
interactions with a BACS based on its public documen-
tation can incur into inconsistencies caused by incorrect
or lacking implementations.

Finally,

the system triggered an alert correspond-
ing to an unexpected write operation on a BACnet
property supposed to be readable only. A Priva con-
troller received a BACnet WriteProperty request on
the Exception schedule of an object Schedule (Fig-
ure 13). Despite what we knew from the related PICS,
the BACS sent back a SimpleACK message, acknowl-
edging the success of the operation (the actual writing
was conﬁrmed by later read operations). These kinds
of situations are especially dangerous due to the unpre-
dictability of their results. As no indication is provided
by the vendor, the write operation can either succeed or
fail, and may generate a response or not (even indepen-
dently from the actual modiﬁcation of the value within
the property). Meeting with the operators revealed that
this write operation was due to a human mistake during
the conﬁguration of the Priva controller. However, the
same situation could ﬁt the “process control subverting”
scenario described in §3.2.
8 Discussion

Performed experiments conﬁrm the feasibility of the ap-
proach within building automation systems and pave the
way for its application to different domains.

8.1 Analysis of the Results
By construction, our IDS is able to detect events that do
not match the speciﬁcations coming from retrieved doc-
umentation. This aspect leads to two considerations:

• On the one hand, an alert raised by the system does
not necessarily refer to a security-relevant event
as the related mismatches may not directly harm
the monitored devices. However, all ﬁndings re-
vealed network activities otherwise invisible to op-
erators. Over the two months of analysis, every alert

802  25th USENIX Security Symposium 

USENIX Association

12

speciﬁcation-mining approach is to enable handling het-
erogeneous documentation and, especially, unstructured
information. To this regard, we observe that Feature
Lookup should abstract from domain-speciﬁc parsing
scripts and generalize the process of mining and struc-
turing infrastructure features. Correctly selecting infor-
mation can take advantage of standard data mining and
natural language processing. Our work did not present a
general approach to this activity. However, works such
as [57, 15, 50] may fulﬁll this goal. With more general
techniques capable of extracting knowledge from het-
erogeneous documentation, the effort of deploying the
system completely converges on mapping retrieved in-
formation to the abstract rules. According to the mon-
itored infrastructures, operators should identify the re-
lated concepts of variable type, value and access method
and, eventually, let the system interpret data coming from
Feature Lookup and instantiate the speciﬁcation rules.

Even without such a general approach, our solution
drastically reduced the time needed to deploy intrusion
detection into a BACnet-based building automation sys-
tem. Obtaining the same set of speciﬁcation rules by
hand would have required substantial effort, making it
infeasible for larger infrastructures. Furthermore, the ob-
tained system comes with the intrinsic capability to up-
date according to the changes of the monitored infras-
tructure. In fact, whenever new BACSs are deployed, our
system transparently reads the new information over the
network and goes through the three steps all over again.
In the end, this solution makes the implemented system
directly applicable to any other BACnet infrastructure
with no further effort on conﬁguration or deployment.

The proposed approach works likewise for different
building automation technologies. As discussed, this
would mostly require a modiﬁcation of the mapping pro-
cess linking retrieved information and abstract rules but
would leave the core concept unchanged. Other build-
ing automation infrastructures such as KNX [32] and
LonWorks [11] also meet the requirements of availabil-
ity and linkability. These widely used protocols present
characteristics similar to the ones observed for BACnet.
Moreover, both KNX and LonWorks promote and sup-
port the use of documents describing protocol implemen-
tation details (although not as formal as BACnet PICS).
To show the generality of our approach beyond
building automation systems we outline how the same
speciﬁcation-mining technique applies to two different
domains of NCSs, namely ICS and in-vehicle networks.

Industrial Control Systems

8.2
ICS is a term generally used to indicate several types
of control systems (e.g., Supervisory Control And Data
Acquisition or “SCADA”) used in industrial production

for monitoring and controlling physical processes. ICSs
work over several domains such as energy, water treat-
ment, manufacturing, etc. and embrace a wide family of
technologies. Among them, Modbus [41], MMS [25],
IEC104 [12], and DNP3 [10] are some of the most used
protocols and standards deployed for industrial control.
Speciﬁcation-based intrusion detection for ICSs is not
new. Works such as [4] show the effectiveness of this
approach applied to electrical grids. However, applying
a set of speciﬁcation rules to a real deployment still re-
quires manually crafting all parameters on speciﬁc needs.
Again, our research can improve the use of speciﬁcation-
based intrusion detection by leveraging available infor-
mation of the deployments. For example, in the smart
grid scenario, we would focus on Programmable Logic
Controllers (PLCs) and Remote Terminal Units (RTUs),
as these play a main role in the infrastructure. We
would analyze variables handled by these controllers,
their types, values and access methods and then use the
abstract rules deﬁned in §7.
Regarding the assumption of §6, veriﬁed information
about the smart gird is available within conﬁguration
ﬁles that use the “Substation Conﬁguration Language”
(SCL). SCL ﬁles usually provide formal representations
of modeled data and communication services. The infor-
mation included in these ﬁles is linkable thanks to the in-
cluded detail descriptions of the involved infrastructures
(e.g., “Substation Conﬁguration Description” ﬁles). Be-
sides SCL ﬁles, operators usually store additional doc-
umentation describing physical and control processes as
in the building automation use case. An IDS can lever-
age this documentation to gather further information and
derive speciﬁcation rules.

The three steps of the approach remain unchanged.
System discovery will passively gather data about de-
vices communicating over the ICS network. According
to the verbosity of the involved protocols, an IDS will
eventually collect enough information to identify infras-
tructure components and start the Feature Lookup step.
Once information about PLCs and RTUs functioning is
retrieved, Rule Deﬁnition will use it to deﬁne the actual
speciﬁcation rules.

In-Vehicle Networks

8.3
Similar argumentation can be applied to communication
of Electronic Control Units (ECUs) over automotive bus
systems like the “Controller Area Network” (CAN) or
FlexRay found in all of today’s cars.

CAN is a network where connected ECUs communi-
cate by means of small messages with a payload of only
8 bytes. CAN uses content-based addressing where mes-
sages only carry a 11 (or 21) bit message identiﬁer, and
receiving ECUs will select messages relevant to them

USENIX Association  

25th USENIX Security Symposium  803

13

based on this message identiﬁer. Message identiﬁers
also serve as prioritization, as the employed CSMA/CR
medium access scheme will always grant priority to the
message with the lowest message identiﬁer avoiding col-
lisions on the bus. Transport layer protocols such as
ISO-TP allow for transfer of longer messages fragmented
into smaller network packets and more complex forms of
addressing crossing gateways connecting multiple CAN
segments.

In order to maintain and manage the assignment and
semantics of message identiﬁers, the design phase of an
automotive network involves setup of a so-called CAN-
Matrix that lists exactly which ECU is supposed to sent
which message identiﬁer, which ECUs will receive mes-
sages of certain type and also the payload syntax and se-
mantics. This design is done using sophisticated tools
like Vector Informatics CANOe.5 The data provided by
such tools is a perfect data source for speciﬁcation-based
IDS and for our approach, so the criteria of availabil-
ity is met. linkability is more of a concern, as messages
per se do not contain information on their source or type
and a recipient needs to know (part of) the CAN matrix
to identify how to decode a certain message ID. How-
ever, with the CAN matrix, we do have information on
the types of ECUs available and can therefore conduct
System discovery. This information can then be used
to conduct Feature Lookup. A lot of relevant informa-
tion (which messages are supposed to be seen on which
bus segment) is again contained in the CAN matrix. Un-
fortunately, documentation in vehicular networks is not
as standardized as the PICSs are in BACnet. So feature
lookup would probably require more detailed investiga-
tions and more complex document parsing. Rule deﬁni-
tion is then straightforward. However, having no source
or destination addresses in packets, one would have to
focus on message IDs, bus segments, and payload for
detection.

While speciﬁcation-based intrusion detection has been
proposed many times especially for CAN-based net-
works [36, 31], a structured approach to rule-mining is
missing in this domain so far and we see this as a promis-
ing ﬁeld of application for our approach.

9 Conclusion

As networked control technologies are rapidly emerg-
ing, the need for securing these systems faces the key
challenge of quickly scaling up to a multitude of het-
erogeneous devices. Our research aims to automate the
deployment of effective security solutions, as well to
adapt them in parallel with the monitored systems’ life-
cycle. More concretely, we present a novel approach to

5http://vector.com/vi_canoe_en.html

speciﬁcation-based intrusion detection for NCSs. While
state-of-the-art solutions exploit manually-crafted spec-
iﬁcation rules, we discuss the feasibility of automati-
cally mining these rules from available documentation.
The tests performed on real building automation systems
show the effectiveness of the obtained systems and con-
ﬁrm the time improvement in their development and de-
ployment.

10 Acknowledgments

The authors would like to explicitly thank Dina
Hadˇziosmanovi´c and Andreas Peter for the insightful
discussions that gave rise to this research. Furthermore,
the authors would like to acknowledge the work of Geert
Jan Laanstra, Henk Hobbelink, Vincent Stoffer and Chris
Weyandt at the University of Twente and the Lawrence
Berkeley National Laboratory.

This research has been partially supported by the Eu-
ropean Commission through project FP7-SEC-607093-
PREEMPTIVE funded by the 7th Framework Program.
This work has also been supported by the U.S. National
Science Foundation under Award CNS-1314973. Any
opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors or orig-
inators, and do not necessarily reﬂect the views of the
sponsors.

References
[1] ANSI/ASHRAE STANDARD 135-2012. A data communica-
tion protocol for building automation and control networks, 2012.

[2] BACNET INTEREST GROUP EUROPE. Engineering data ex-
change template for BACnet systems - “description of the EDE
data ﬁelds”, 2007.

[3] BALEPIN, I., MALTSEV, S., ROWE, J., AND LEVITT, K. N.
Using speciﬁcation-based intrusion detection for automated re-
sponse. In Recent Advances in Intrusion Detection, 6th Interna-
tional Symposium, RAID 2003, Pittsburgh, PA, USA, September
8-10, Proceedings (2003), pp. 136–154.

[4] BERTHIER, R., AND SANDERS, W. H. Speciﬁcation-based
intrusion detection for advanced metering infrastructures.
In
17th IEEE Paciﬁc Rim International Symposium on Dependable
Computing, PRDC 2011, Pasadena, CA, USA, December 12-14
(2011), pp. 184–193.

[5] CASELLI, M., HAD ˇZIOSMANOVI ´C, D., ZAMBON, E., AND
KARGL, F. On the feasibility of device ﬁngerprinting in in-
dustrial control systems. In Critical Information Infrastructures
Security - 8th International Workshop, CRITIS 2013, Amster-
dam, The Netherlands, September 16-18, Revised Selected Pa-
pers (2013), pp. 155–166.
ˇCELEDA, P., KREJ ˇC´I, R., AND KRM´I ˇCEK, V. Flow-based se-
curity issue detection in building automation and control net-
works. In Information and Communication Technologies - 18th
EUNICE/ IFIP WG 6.2, 6.6 International Conference, EUNICE
2012, Budapest, Hungary, August 29-31, Proceedings (2012),
pp. 64–75.

[6]

804  25th USENIX Security Symposium 

USENIX Association

14

[7] CHAUGULE, A., XU, Z., AND ZHU, S. A speciﬁcation based
intrusion detection framework for mobile phones.
In Applied
Cryptography and Network Security - 9th International Confer-
ence, ACNS 2011, Nerja, Spain, June 7-10, Proceedings (2011),
pp. 19–37.

[23] HASSAN, H. M., MAHMOUD, M., AND EL-KASSAS, S. Secur-
ing the AODV protocol using speciﬁcation-based intrusion de-
tection. In Q2SWinet’06 - Proceedings of the Second ACM Work-
shop on Q2S and Security for Wireless and Mobile Networks, Ter-
romolinos, Spain, October 2 (2006), pp. 33–36.

[8] CHEUNG, S., DUTERTRE, B., FONG, M., LINDQVIST, U.,
SKINNER, K., AND VALDES, A. Using model-based intrusion
detection for SCADA networks. In Proceedings of the SCADA
Security Scientiﬁc Symposium, Miami Beach, Florida, USA, 7
December (2007), pp. 1–12.

[9] DENNING, D. E. An intrusion-detection model. In Proceedings
of the 1986 IEEE Symposium on Security and Privacy, Oakland,
California, USA, April 7-9 (1986), pp. 118–133.

[10] DIST-1815-WG.

IEEE standard for electric power systems
communications-distributed network protocol (DNP3), 2012.
https://standards.ieee.org/findstds/standard/
1815-2012.html.

[11] ECHELON CORPORATION.

LonTalk protocol speciﬁcation
v3.0, 1994. http://www.enerlon.com/JobAids/Lontalk%
20Protocol%20Spec.pdf.

[12] EQUIPMENT,

IEC TELECONTROL.

Systems—part 5-104:
Transmission protocols - network access for IEC 60870-5-101
using standard transport proﬁles.

[13] FORREST, S., HOFMEYR, S. A., SOMAYAJI, A., AND
LONGSTAFF, T. A. A sense of self for Unix processes. In IEEE
Symposium on Security and Privacy, Oakland, CA, USA, May 6-8
(1996), pp. 120–128.

[14] FOVINO, I. N., CARCANO, A., MUREL, T. D. L., TROM-
BETTA, A., AND MASERA, M. Modbus/DNP3 state-based intru-
sion detection system. In 24th IEEE International Conference on
Advanced Information Networking and Applications, AINA 2010,
Perth, Australia, April 20-13 (2010), pp. 729–736.

[15] GILDEA, D., AND JURAFSKY, D. Automatic labeling of seman-

tic roles. Computational Linguistics 28, 3 (2002), 245–288.

[16] GILL, R., SMITH, J., AND CLARK, A. J. Speciﬁcation-based in-
trusion detection in WLANs. In 22nd Annual Computer Security
Applications Conference (ACSAC 2006), Miami Beach, Florida,
USA, 11-15 December (2006), pp. 141–152.

[17] GRANZER, W., KASTNER, W., NEUGSCHWANDTNER, G.,
AND PRAUS, F. Security in networked building automation sys-
tems. Tech. rep., 2005.

[18] GRANZER, W., PRAUS, F., AND KASTNER, W. Security in
building automation systems. IEEE Trans. Industrial Electron-
ics 57, 11 (2010), 3622–3630.

[19] GR ¨ONKVIST, J., HANSSON, A., AND SK ¨OLD, M. Evaluation
of a speciﬁcation-based intrusion detection system for AODV. In
The Sixth Annual Mediterranean Ad Hoc Networking Workshop
(2007), pp. 121–128.

[20] GUPTA, R. A., AND CHOW, M. Networked control system:
Overview and research trends. IEEE Trans. Industrial Electronics
57, 7 (2010), 2527–2535.

[21] HADELI, H., SCHIERHOLZ, R., BRAENDLE, M., AND
TUDUCE, C. Leveraging determinism in industrial control sys-
tems for advanced anomaly detection and reliable security conﬁg-
uration. In Proceedings of 12th IEEE International Conference
on Emerging Technologies and Factory Automation, ETFA 2009,
Palma de Mallorca, Spain, September 22-25 (2009), pp. 1–8.

[22] HAD ˇZIOSMANOVI ´C, D., BOLZONI, D., ETALLE, S., AND
HARTEL, P. H. Challenges and opportunities in securing indus-
trial control systems. In Complexity in Engineering, COMPENG
2012, Aachen, Germany, June 11-13 (2012), pp. 1–6.

[24] HOLMBERG, D. G., AND EVANS, D. BACnet Wide Area Net-
work Security Threat Assessment. US Department of Commerce,
National Institute of Standards and Technology NIST, 2003.

[25] ISO.

Industrial automation systems – manufacturing message

speciﬁcation – part 2: Protocol speciﬁcation, 2003.

[26] JIEKE, P., REDOL, J., AND CORREIA, M. Speciﬁcation-based
intrusion detection system for carrier ethernet. In WEBIST 2007 -
Proceedings of the Third International Conference on Web Infor-
mation Systems and Technologies, Volume IT, Barcelona, Spain,
March 3-6 (2007), pp. 426–429.

[27] JOKAR, P., NICANFAR, H., AND LEUNG, V. C. M.
Speciﬁcation-based intrusion detection for home area networks
in smart grids.
In IEEE Second International Conference on
Smart Grid Communications, SmartGridComm 2011, Brussels,
Belgium, October 17-20 (2011), pp. 208–213.

[28] KASTNER, W., NEUGSCHWANDTNER, G., SOUCEK, S., AND
NEWMAN, M. H. Communication systems for building automa-
tion and control. Proceedings of the IEEE 93, 6 (2005), 1178–
1203.

[29] KAUR, J., TONEJC, J., WENDZEL, S., AND MEIER, M. Secur-
ing BACnet’s pitfalls. In ICT Systems Security and Privacy Pro-
tection - 30th IFIP TC 11 International Conference, SEC 2015,
Hamburg, Germany, May 26-28, Proceedings (2015), pp. 616–
629.

[30] KIM, K., AND KUMAR, P. R. The importance, design and
implementation of a middleware for networked control systems.
Springer Lecture Notes in Control and Information Sciences 406,
1 (2010), 1–29.

[31] KLEBERGER, P., OLOVSSON, T., AND JONSSON, E. Security
aspects of the in-vehicle network in the connected car. In IEEE
Intelligent Vehicles Symposium (IV), 2011, Baden-Baden, Ger-
many, June 5-9 (2011), pp. 528–533.

[32] KNX ASSOCIATION. KNX Standard, 2011. https://www.

knx.org.

[33] KO, C., BRUTCH, P., ROWE, J., TSAFNAT, G., AND LEVITT,
K. N. System health and intrusion monitoring using a hierarchy
of constraints.
In Recent Advances in Intrusion Detection, 4th
International Symposium, RAID 2001 Davis, CA, USA, October
10-12, Proceedings (2001), pp. 190–204.

[34] KO, C., FINK, G., AND LEVITT, K. N. Automated detection
of vulnerabilities in privileged programs by execution monitor-
ing. In 10th Annual Computer Security Applications Conference,
ACSAC 1994, Orlando, FL, USA, 5-9 December (1994), pp. 134–
144.

[35] KO, C., RUSCHITZKA, M., AND LEVITT, K. N. Execution
monitoring of security-critical programs in distributed systems:
A speciﬁcation-based approach. In IEEE Symposium on Security
and Privacy, Oakland, CA, USA, May 4-7 (1997), pp. 175–187.
[36] LARSON, U. E., NILSSON, D. K., AND JONSSON, E. An ap-
proach to speciﬁcation-based attack detection for in-vehicle net-
works. In IEEE Intelligent Vehicles Symposium (IV), 2008, Eind-
hoven, the Netherlands, June 4-6 (2008), pp. 220–225.

[37] LIN, H., SLAGELL, A. J., MARTINO, C. D., KALBARCZYK,
Z., AND IYER, R. K. Adapting Bro into SCADA: Building a
speciﬁcation-based intrusion detection system for the DNP3 pro-
tocol. In Cyber Security and Information Intelligence, CSIIRW
’13, Oak Ridge, TN, USA, January 8-10 (2013), p. 5.

USENIX Association  

25th USENIX Security Symposium  805

15

[38] LYON, G. F. Nmap network scanning: The ofﬁcial Nmap project
Insecure,

guide to network discovery and security scanning.
2009. https://nmap.org/.

[39] MANYIKA, J., CHUI, M., BUGHIN, J., DOBBS, R., BISSON,
P., AND MARRS, A. Disruptive technologies: Advances that
will transform life, business, and the global economy. Tech. rep.,
2013.

[40] MATHERLY, J. C. SHODAN: the computer search engine, Jun

2016. http://www.shodanhq.com/.

[41] MODBUS-IDA. Modbus application protocol speciﬁcation

v1.1b3, 2012. http://www.modbus.org.

[42] NATIONAL JOINT APPRENTICESHIP & TECHNICAL COMMIT-
TEE. Building Automation: Control Devices and Applications.
American Technical Publishers, Inc., 2008.

[43] NEWMAN, M. BACnet: The Global Standard for Building Au-

tomation and Control Networks. Momentum Press, 2013.

[44] ORSET, J., ALCALDE, B., AND CAVALLI, A. R. An EFSM-
based intrusion detection system for ad hoc networks.
In Au-
tomated Technology for Veriﬁcation and Analysis, Third Inter-
national Symposium, ATVA 2005, Taipei, Taiwan, October 4-7,
Proceedings (2005), pp. 400–413.

[45] PAN, Z., HARIRI, S., AND AL-NASHIF, Y. B. Anomaly based
intrusion detection for building automation and control networks.
In 11th IEEE/ACS International Conference on Computer Sys-
tems and Applications, AICCSA 2014, Doha, Qatar, November
10-13 (2014), pp. 72–77.

[46] PAXSON, V. Bro: A system for detecting network intruders in
In Proceedings of the 7th USENIX Security Sympo-

real-time.
sium, San Antonio, TX, USA, January 26-29 (1998).

[47] PEACOCK, M. D., AND JOHNSTONE, M. N. An analysis of

security issues in building automation systems.

[48] PETRONI, N. L., FRASER, T., WALTERS, A., AND ARBAUGH,
W. A. An architecture for speciﬁcation-based detection of se-
mantic integrity violations in kernel dynamic data. In Proceed-
ings of the 15th USENIX Security Symposium, Vancouver, BC,
Canada, July 31 - August 4 (2006).

[49] SALSBURY, T. I. The smart building. In Springer Handbook of

Automation. Springer, 2009, pp. 1079–1093.

[50] SANEIFAR, H., BONNIOL, S., LAURENT, A., PONCELET, P.,
AND ROCHE, M. Terminology extraction from log ﬁles.
In
Database and Expert Systems Applications, 20th International
Conference, DEXA 2009, Linz, Austria, August 31 - September 4,
Proceedings (2009), pp. 769–776.

[51] SANNER, M. F. Python: a programming language for software
integration and development. J Mol Graph Model 17, 1 (1999),
57–61. https://www.python.org/.

[52] SEKAR, R., CAI, Y., AND SEGAL, M. A speciﬁcation-based
approach for building survivable systems. In Proceedings of the
National Information Systems Security Conference (NISSC’98)
(1998), pp. 338–347.

[53] SEKAR, R., GUPTA, A. K., FRULLO, J., SHANBHAG, T., TI-
WARI, A., YANG, H., AND ZHOU, S.
Speciﬁcation-based
anomaly detection: A new approach for detecting network intru-
sions. In Proceedings of the 9th ACM Conference on Computer
and Communications Security, CCS 2002, Washington, DC, USA,
November 18-22 (2002), pp. 265–274.

[54] SEKAR, R., AND UPPULURI, P. Synthesizing fast intrusion pre-
vention/detection systems from high-level speciﬁcations. In Pro-
ceedings of the 8th USENIX Security Symposium, Washington,
D.C., August 23-26 (1999).

[55] SOMMER, R., AMANN, J., AND HALL, S. Spicy: A uniﬁed deep
packet inspection framework dissecting all your data. Tech. rep.,
ICSI, 2015. TR-15-004.

[56] SONG, T., KO, C., TSENG, C. H., BALASUBRAMANYAM,
P., CHAUDHARY, A., AND LEVITT, K. N. Formal reasoning
about a speciﬁcation-based intrusion detection for dynamic auto-
conﬁguration protocols in ad hoc networks. In Formal Aspects
in Security and Trust, Third International Workshop, FAST 2005,
Newcastle upon Tyne, UK, July 18-19, Revised Selected Papers
(2005), pp. 16–33.

[57] STRZALKOWSKI, T. Natural language information retrieval. Inf.

Process. Manage. 31, 3 (1995), 397–417.

[58] SZL ´OSARCZYK, S., WENDZEL, S., KAUR, J., MEIER, M.,
AND SCHUBERT, F. Towards suppressing attacks on and im-
proving resilience of building automation systems - an approach
exempliﬁed using BACnet. In Sicherheit 2014: Sicherheit, Schutz
und Zuverl¨assigkeit, Beitr¨age der 7. Jahrestagung des Fachbere-
ichs Sicherheit der Gesellschaft f¨ur Informatik e.V. (GI), 19.-21.
M¨arz 2014, Wien, ¨Osterreich (2014), pp. 407–418.

[59] TRUONG, P., NIEH, D., AND MOH, M. Speciﬁcation-based in-
trusion detection for H.323-based voice over IP. In Proceedings
of the Fifth IEEE International Symposium on Signal Processing
and Information Technology (ISSPIT 2005), Athens, Greece, De-
cember 18-21 (2005), pp. 387–392.

[60] TSENG, C., BALASUBRAMANYAM, P., KO, C., LIMPRASIT-
TIPORN, R., ROWE, J., AND LEVITT, K. N. A speciﬁcation-
based intrusion detection system for AODV. In Proceedings of
the 1st ACM Workshop on Security of ad hoc and Sensor Net-
works, SASN 2003, Fairfax, Virginia, USA (2003), pp. 125–134.

[61] TSENG, C. H., SONG, T., BALASUBRAMANYAM, P., KO, C.,
AND LEVITT, K. N. A speciﬁcation-based intrusion detection
model for OLSR. In Recent Advances in Intrusion Detection, 8th
International Symposium, RAID 2005, Seattle, WA, USA, Septem-
ber 7-9, Revised Papers (2005), pp. 330–350.

[62] UPPULURI, P., AND SEKAR, R. Experiences with speciﬁcation-
based intrusion detection. In Recent Advances in Intrusion Detec-
tion, 4th International Symposium, RAID 2001 Davis, CA, USA,
October 10-12, Proceedings (2001), pp. 172–189.

[63] WENDZEL, S., KAHLER, B., AND RIST, T. Covert channels
and their prevention in building automation protocols: A pro-
totype exempliﬁed using BACnet.
In 2012 IEEE International
Conference on Green Computing and Communications, Confer-
ence on Internet of Things, and Conference on Cyber, Physical
and Social Computing, GreenCom/iThings/CPSCom 2012, Be-
sancon, France, November 20-23 (2012), pp. 731–736.

[64] ZALEWSKI, M. P0f: Passive OS ﬁngerprinting tool, 2006.

lcamtuf.coredump.cx/p0f3/.

[65] ZHANG, P. Industrial Control Technology: A Handbook for En-

gineers and Researchers. William Andrew Inc., 2008.

806  25th USENIX Security Symposium 

USENIX Association

16

