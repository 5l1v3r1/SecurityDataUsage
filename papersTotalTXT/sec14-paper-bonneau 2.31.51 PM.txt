Towards Reliable Storage of 56-bit Secrets  

in Human Memory

Joseph Bonneau, Princeton University; Stuart Schechter, Microsoft Research

https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/bonneau

This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXTowards reliable storage of 56-bit secrets in human memory

Joseph Bonneau

Princeton University

Stuart Schechter
Microsoft Research

Abstract
Challenging the conventional wisdom that users cannot
remember cryptographically-strong secrets, we test the
hypothesis that users can learn randomly-assigned 56-
bit codes (encoded as either 6 words or 12 characters)
through spaced repetition. We asked remote research
participants to perform a distractor task that required log-
ging into a website 90 times, over up to two weeks, with
a password of their choosing. After they entered their
chosen password correctly we displayed a short code (4
letters or 2 words, 18.8 bits) that we required them to
type. For subsequent logins we added an increasing de-
lay prior to displaying the code, which participants could
avoid by typing the code from memory. As participants
learned, we added two more codes to comprise a 56.4-
bit secret. Overall, 94% of participants eventually typed
their entire secret from memory, learning it after a me-
dian of 36 logins. The learning component of our system
added a median delay of just 6.9 s per login and a to-
tal of less than 12 minutes over an average of ten days.
88% were able to recall their codes exactly when asked
at least three days later, with only 21% reporting having
written their secret down. As one participant wrote with
surprise, “the words are branded into my brain.”

1

Introduction

Humans are incapable of securely storing high-quality cryp-
tographic keys . . . they are also large, expensive to maintain,
difﬁcult to manage, and they pollute the environment. It is as-
tonishing that these devices continue to be manufactured and
deployed. But they are sufﬁciently pervasive that we must de-
sign our protocols around their limitations.

—Kaufman, Perlman and Speciner, 2002 [54]

The dismissal of human memory by the security com-
munity reached the point of parody long ago. While as-
signing random passwords to users was considered stan-
dard as recently in the mid-1980s [26], the practice died

out in the 90s [4] and NIST guidelines now presume all
passwords are user-chosen [32]. Most banks have even
given up on expecting customers to memorize random
four-digits PINs [22].

We hypothesized that perceived limits on humans’
ability to remember secrets are an artifact of today’s sys-
tems, which provide users with a single brief opportunity
during enrolment to permanently imprint a secret pass-
word into long-term memory. By contrast, modern theo-
ries of the brain posit that it is important to forget random
information seen once, with no connection to past expe-
rience, so as to avoid being overwhelmed by the constant
ﬂow of new sensory information [10].

We hypothesized that, if we could relax time con-
straints under which users are expected to learn, most
could memorize a randomly-assigned secret of 56 bits.
To allow for this memorization period, we propose using
an alternate form of authentication while learning, which
may be weaker or less convenient than we would like in
the long-term. For example, while learning a strong se-
cret used to protect an enterprise account, users might
be allowed to login using a user-chosen password, but
only from their assigned computer on the corporate net-
work and only for a probationary period. Or, if learning a
master key for their password manager, which maintains
a database of all personal credentials, users might only
be allowed to upload this database to the network after
learning a strong secret used to encrypt it.

By relaxing this time constraint we are able to ex-
ploit spaced repetition, in which information is learned
through exposure separated by signiﬁcant delay inter-
vals. Spaced repetition was identiﬁed in the 19th cen-
tury [43] and has been robustly shown to be among the
most effective means of memorizing unstructured infor-
mation [35, 11]. Perhaps the highest praise is its popu-
larity amongst medical students, language learners, and
others who are highly motivated to learn a large amount
of vocabulary as efﬁciently as possible [34, 91].

To test our hypothesis, we piggybacked spaced repeti-

USENIX Association  

23rd USENIX Security Symposium  607

Figure 1: The login form for a user logging in for the ﬁrst
time, learning a code made of letters.

tion of a new random secret onto an existing login pro-
cess utilizing a user-chosen password. Our system can be
seen in action in Figure 1. After receiving a user’s self-
chosen password, we add a new ﬁeld into which they
must type a random security code, which we display di-
rectly above this ﬁeld. With each login we add a 1
3 second
delay (up to a maximum of 10 seconds) before display-
ing the hint for them to copy, encouraging them to type
the code from memory if possible to save time.

We recruited remote research participants to perform a
study that required logging into a website 90 times over
up to 15 days, which they did at an average rate of nine
logins per day. We assigned each participant a random
56-bit ‘security code’ encoded into three chunks of either
four lowercase letters or two words. After participants
began to enter the ﬁrst chunk before it was displayed, we
added a second and likewise for the third and ﬁnal chunk.
We did not tell participants that learning the random se-
cret was a goal of the research study; they simply learned
it to save time. Participants experienced a median addi-
tional delay from using our system of just 6.9 s on each
login, or about 11 m 53 s total over the entire study.

Three days after participants completed the initial
study and had stopped using their security codes, we
asked them to recall their code from memory in a follow-
up survey which 88% completed. They returned after
a median of 3 days 18 hours (mean 4 days 23 hours).
We found that 46 of 56 (82%) assigned letters and 52 of
56 (93%) assigned words recalled their codes correctly.
Only 21% reported writing down or otherwise storing the
security codes outside their memory and the recall rate
was actually higher amongst those who didn’t.

While 56-bit secrets are usually overkill for web au-
thentication, the most common use of passwords to-
day, there are several compelling applications for “high
value” passwords such as master passwords for pass-
word managers, passwords used to protect private keys,
device-unlock passwords, and enterprise login pass-
words where cryptographically-strong passwords can
eliminate an entire class of attack.
In debunking the
myth that users are inherently incapable of remembering
a strong secret, we advocate that using spaced repetition
to train users to remember strong secrets should be avail-
able in every security engineer’s toolbox.

2 Security goals

Evaluating the difﬁculty of guessing user-chosen pass-
words is messy [56] and security engineers are left with
few hard guarantees beyond empirical estimates of min-
entropy, which can be as low as 10 bits or fewer [18]. By
contrast, with random passwords we can easily provide
strong bounds of the difﬁculty of guessing, if not other
attack vectors against passwords [20].

2.1 The cost of brute-force
Random passwords are primarily a defense against an
ofﬂine attack (eq. brute-force attack), in which the at-
tacker is capable of trying as many guesses as they can
afford to check computationally. We can estimate the
cost of brute-force by observing the Bitcoin network [3],
which utilizes proof-of-work with SHA-256 to maintain
integrity of its transaction ledger and hence provides di-
rect monetary rewards for efﬁcient brute force. While
SHA-256 is just one example of a secure hash function,
it provides a reasonable benchmark.
In 2013, Bitcoin miners collectively performed ≈ 275
SHA-256 hashes in exchange for bitcoin rewards worth
≈ US$257M. This provides only a rough estimate as Bit-
coin’s price has ﬂuctuated and Bitcoin miners may have
proﬁted from carrying signiﬁcant exchange-rate risk or
utilizing stolen electricity. Still, this is the only publicly-
known operation performing in excess of 264 crypto-
graphic operations and hence provides the best estimate
available. Even assuming a centralized effort could be
an order of magnitude more efﬁcient, this still leaves us
with an estimate of US$1M to perform a 270 SHA-256
evaluations and around US$1B for 280 evaluations.

In most scenarios, we can gain equivalent security
with a smaller secret by key stretching, deliberately mak-
ing the veriﬁcation function computationally expensive
for both the attacker and legitimate users [66, 57]. Clas-
sically, this takes the form of an iterated hash func-
tion, though there are more advanced techniques such as
memory-bound hashes like scrypt [69] or halting pass-
word puzzles which run forever on incorrect guesses and
require costly backtracking [25].

With simple iterated password hashing, a modern CPU
can compute a hash function like SHA-256 at around
10 MHz [1] (10 million SHA-256 computations per sec-
ond), meaning that if we slow down legitimate users by
≈ 2 ms we can add 14 bits to the effective strength of
a password, and we can add 24 bits at a cost of ≈ 2 s.
While brute-forcing speed will increase as hardware im-
proves [38], the same advances enable defenders to con-
tinuously increase [72] the amount of stretching in use at
constant real-world cost [19], meaning these basic num-
bers should persist indeﬁnitely.

608  23rd USENIX Security Symposium 

USENIX Association

2

2.2 Practical attack scenarios

Given the above constraints, we consider a 56-bit ran-
dom password a reasonable target for most practical sce-
narios, pushing the attacker cost around US$1M with 14
bits (around 2 ms) of stretching, or US$1B with 24 bits
(around 2 s) of stretching. Defending against ofﬂine at-
tacks remains useful in several scenarios.

Password managers are a compelling aid to the difﬁ-
culty of remembering many passwords online, but they
reduce security for all of a user’s credentials to the
strength of a master password used to encrypt them at
rest. In at least one instance, a password management
service suffered a breach of the systems used to store
users’ data [63]. Given that password managers only
need to decrypt the credentials at startup, several seconds
of stretching may be acceptable.

Similarly, when creating a public/private key pair for
personal communication, users today typically use a
password to encrypt the private key ﬁle to guard against
theft. Given a sufﬁciently strong random password, users
could use their password and a unique public salt (e.g.,
an email address) to seed a random number generator and
create the keys. The private key could then simply be re-
derived when needed from the password, preventing the
need for storing the private key at all. This application
also likely tolerates extensive stretching.

Passwords used to unlock personal devices (e.g.
smartphones) are becoming increasingly critical as these
devices are often a second factor (or sole factor) in au-
thentication to many other services. Today, most devices
use relatively weak secrets and rely on tamper-proof
hardware to limit the number of guesses if a device is
stolen. Strong passwords could be used to remove trust in
device hardware. This is a more challenging application,
however. The budget for key-stretching may be 14 bits or
fewer, due to the frequency with which users authenticate
and the limited CPU and battery resources available. Ad-
ditionally, entering strong passwords quickly on a small
touchscreen may be prohibitive.

Finally, when authenticating users remotely, such as
logging into an enterprise network, security requirements
may motivate transitioning from user-chosen secrets to
strong random ones. Defending against online guessing,
in which the attacker must verify password guesses us-
ing the genuine login server as an oracle, can be done
with far smaller random passwords. Even without ex-
plicit rate-limiting, attacking a 40-bit secret online would
generate signiﬁcantly more trafﬁc than any practical sys-
tem routinely handles. 40-bit random passwords would
ensure defense-in-depth against failures in rate-limiting.
Alternately, attackers may perform an ofﬂine attack
if a remote authentication server is breached.
In gen-
eral, we would favor back-end defenses against pass-

word database compromises which don’t place an addi-
tional burden on users—such as hashing passwords with
a key kept in special-purpose hardware, dividing infor-
mation up amongst multiple servers [52] or one limited-
bandwidth server [41]. Random passwords would also
frustrate brute-force in this scenario, although the oppor-
tunity for key-stretching is probably closer to the 2 ms
(14 bit) range to limit load on the login server.

3 Design

Given our estimation that a 56-bit secret can provide
acceptable security against feasible brute-force attacks
given a strong hash function and reasonable key stretch-
ing, our goal was to design a simple prototype interface
that could train users to learn 56 bits secret with as little
burden as possible.

Spaced repetition [43, 70, 62] typically employs de-
lays (spacings) of increasing length between rehearsals
of the chunk of information to be memorized. While pre-
cisely controlling rehearsal spacing makes sense in appli-
cations where education is users’ primary goal, we did
not want to interrupt users from their work. Instead, we
chose to piggyback learning on top of an already-existing
interruption in users’ work-ﬂow—the login process it-
self. We allow users to employ a user-chosen password
for login, then piggyback learning of our assigned secret
at the end of the login step. We split the 56-bit secret up
into three equal-sized chunks to be learned sequentially,
to enable a gradual presentation and make it as easy as
possible for users to start typing from memory.

3.1 Encoding the secret
Although previous studies have found no signiﬁcant dif-
ferences in user’s ability to memorize a secret encoded
as words or letters [77, 64], we implemented both encod-
ings. For letters, we used a string of 12 lowercase letters
chosen uniformly at random from the English alphabet to
encode a 2612 ≈ 56.4 bit secret. The three chunks of the
secret were 4 letters each (representing ≈ 18.8 bits each).
For words, we chose a sequence of 6 short, common
English words. To keep security identical to that of the
letters case, we created our own list of 676 (262) pos-
sible words such that 6 words chosen uniformly at ran-
dom would encode a 6766 = 2612 ≈ 56.4 bit secret. We
extracted all 3–5 English nouns, verbs and adjectives
(which users tend to prefer in passwords [24, 85]) from
Wiktionary, excluding those marked as vulgar or slang
words and plural nouns. We also manually ﬁltered out
potentially insulting or negative words. From these can-
didate words we then greedily built our dictionary of 676
words by repeatedly choosing the most common remain-
ing word, ranked by frequency in the Google N-gram

USENIX Association  

23rd USENIX Security Symposium  609

3

610  23rd USENIX Security Symposium 

USENIX Association

webcorpus[27].Afterchoosingeachwordwethenre-movedallwordswithinaneditdistanceoftwofromtheremainingsetofcandidatestopotentiallyallowlimitedtypocorrection.Wealsoexcludedwordswhichwereacompletepreﬁxofanyotherword,topotentiallyallowauto-complete.WepresentthecompletelistinTable3.3.2LoginformandhintingUnliketypicalloginforms,wedonotpresentabuttontocompletesign-in,butratherautomaticallysubmitthepasswordforveriﬁcationviaAJAXeachtimeacharacteristyped.Abovethepasswordﬁeldwedisplaytheword“verifying”whileawaitingaresponseand“notyetcor-rect”whilethecurrenttextisnotthecorrectpassword.Aftertheuser’sself-chosenpasswordisveriﬁed,atextboxforenteringtheﬁrstchunkoftheuser’sassignedcodeappearstotherightofthepasswordﬁeld,asweshowinFigure1.Ontheﬁrstlogin,wedisplaythecorrectvalueofthechunkimmediatelyabovetheﬁeldintowhichusersmustenterit.Intheversionusedforourstudy,weincludedapop-upintroducingthesecuritycodeanditspurpose:Duetoconcernsaboutstolenaccountsandbonuses,wearegiv-ingyouanadditionalsecuritycode.Toﬁnishloggingin,simplytypethe[fourletters|twowords]abovethetextbox.Yourcodewillnotchange,soonceyouhavelearnedit,trytotypeitbeforethehintappears.Wecoloreachcharacterauserentersintothesecuritycodeﬁeldgreenifitiscorrectandredifincorrect.Were-placecorrectcharacterswithagreencircleafter250ms.Witheachconsecutivelogin,wedelaytheappearanceofthehintby13ofasecondforeachtimetheuserhaspreviouslyseenthechunk,uptoamaximumof10sec-onds.Iftheusertypesacharactercorrectlybeforethedelayexpires,westartthedelaycountdownagain.Weselectedthesedelayvalueswiththegoalofimposingtheminimalannoyancenecessarytonudgeuserstostarttyp-ingfrommemory.Afterauserentersachunkwithoutseeingthehintonthreeconsecutivelogins,weaddanotherchunk.Intheversionusedinourstudy,weshowapop-upwhichcanbedismissedforallfuturelogins:Congratulations!Youhavelearnedtheﬁrst[fourletters|twowords]ofyoursecuritycode.Wehaveaddedanother[fourlet-ters|twowords].Justliketheﬁrst[fourletters|twowords],onceyouhavelearnedthem,youcantypethemwithoutwaitingforthehinttoappear.Whenwedetectthatauserhasﬁnishedtypingtheﬁrstchunkoftheirsecuritycode,weautomaticallytab(movedthecursor)tothetextﬁeldforthesecondchunkandthenstartthedelayforthatchunk’shint.Aftertyp-ingthesecondchunkcorrectlyfrommemorythreetimesFigure2:Theloginformforauserinwhohasjustre-ceivedthethirdsecuritycodechunkwords.inarow,weaddthethirdandﬁnalchunk.Intheversionusedinthestudy,wealsodisplayedonemorepop-up:Congratulations!Youhavelearnedtheﬁrst[eightletters|fourwords]ofyoursecuritycode.Wehaveaddedaﬁnal[fourletters|twowords].Thesearethelast[fourletters|twowords]wewillaskyoutolearn.Onceyouhavelearnedthem,youcantypethembeforethehintappears.Onceyouknowthefullcode,wecanuseittoprotectyouraccount.Weillustratetheloginprocessfromourstudy,usingallthreechunks,inFigure2.Inarealdeployment,oncetheuserisconsistentlytypingtheentiresecuritycodefrommemory,enteringtheirself-chosenpasswordwouldnolongerbenecessary.Wedisablepastingandautomaticform-ﬁllingforthesecuritycodeﬁeldtoencourageuserstotypefrommem-ory.Weallowuserstotypetheircodeinloweroruppercase,withallnon-lettercharactersbeingignored,includ-ingspacesbetweenwordsasnowordisapreﬁxofanyotherword.Duringtrainingweautomaticallyinsertaspaceattheendofanyenteredcodewordsouserslearnthattheydonotneedtotypethespaces.4ExperimentalMethodologyWeusedaremoteonlinestudytoevaluateoursystem.Tokeepparticipantsfromrealizingthepurposeofourstudywasthesecuritycodesandpotentiallyalteringtheirbehavior,wepresentedourstudyasapsychologystudywiththesecuritycodesaroutinepartofloggingintoparticipate.WerecruitedparticipantsusingAmazon’sMechanicalTurk(MTurk)platform[59]andpaidthemtoparticipate,whichrequiredloggingin90timesin15days.Forcompleteness,weprovideexactstudymateri-alstheextendedversionofthispaper[23].4.1ThedistractortaskWeintendedourdistractortasktoprovideaplausibleobjectofstudythatwouldleadustoaskparticipantstologintoourwebsiterepeatedly(distractingparticipantsfromthesubjectofourinvestigation)andtorequireanon-trivialmentaleffort(distractingthemfrommakingconsciouseffortstomemorizetheirsecuritycodes).Yetwealsowantedthedistractortasktoberelativelyfast,4USENIX Association  

23rd USENIX Security Symposium  611

Figure3:TheAttentionGame,ourdistractortaskinteresting,andchallenging,sincewewereaskingpar-ticipantstoperformalargenumberoflogins.WedesignedagametoresembledescendantsoftheclassicpsychologicalstudythatrevealedtheStroopef-fect[79].Ourgamemeasuredparticipants’abilitytoig-norewhereawordappeared(theleftorrightsideoftheirscreen)andrespondtothemeaningoftheworditself.Each60-secondgameconsistedof10trialsduringwhicheithertheword‘left’or‘right’wouldappearinoneoftwosquaresonthescreen,asillustratedinFigure3.Thewordsappearedinarandomsquareafterarandomdelayof2–4seconds,afterwhichparticipantswereaskedtoimmediatelypressthefkeyuponseeingtheword‘left’orjkeyuponseeingtheword‘right’(correspondingtotheleftandrightsidesofaQWERTYkeyboard).Duringthegame,participantssawascorebasedontheirreactiontime,withpenaltiesforpressingthewrongkey.4.2TreatmentsWerandomlyassignedparticipantstothreetreatments:letters(40%ofparticipants),words(40%),andcontrol(20%).Participantsinthelettersandwordstreatmentsreceivedsecuritycodesconsistingoflettersandwords,respectively,asdescribedinSection3.1.Participantsinthecontroltreatmentreceivednosecuritycodeatallandsawasimplepasswordformforalllogins;wein-cludedthistreatmentprimarilytogaugewhetherthead-ditionalsecuritycodeswerecausingparticipantstodropoutoftheexperimentmorethantraditionalauthentica-tionwouldhave.4.3RecruitingWerecruitedparticipantstoourstudyusingAma-zon’sMechanicalTurkbypostingaHumanIntelligenceTask(HIT)titled“60-SecondAttentionStudy”,payingUS$0.40,andrequiringnologin.Whenparticipantscompletedthegame,wepresentedthemwithanofferto“Earn$19bybeingpartofourextendedstudy”(ascreenshotoftheofferisintheextendedversionofthispaper[23]).Theofferstatedthatparticipantswouldberequiredtoplaythegameagain90timeswithin15days,answertwoshortquestionsbeforeplayingthegame,wait30minutesaftereachgamebeforestartinganewgamesession,andthattheywouldhavetologinforeachses-sion.Wewarnedparticipantsthatthosewhojoinedtheextendedstudybutdidnotcompleteitwouldnotreceivepartialpayment.OurstudyprominentlylistedMicrosoftResearchastheinstitutionresponsibleforthestudy.Aswedidnotwanttoplaceanundueburdenonworkerswhowerenotinterestedinevenreadingouroffer,weprovidedalinkwithalargeboldfaceheadingtitled“Getpaidnowforyourparticipationinthisshortexperiment”allowingparticipantstobepaidimmediatelywithoutac-cepting,orevenreading,ouroffer.Whenworkerswhohadperformedthesingle-gameHITsigneduptoparticipateinour90-gameattentionstudy,wepresentedthemwithasign-uppagedisplayingourapprovedconsentformandaskingthemtochooseausernameandapasswordofatleastsixcharacters.Forthe88loginsfollowingsignup(games2–89),andforlo-gintotheﬁnalsession(inwhichwedidnotshowthegamebutinsteadshowedtheﬁnalsurvey),werequiredparticipantstologinusingthechosenpasswordandse-curitycode(ifassignedanon-controltreatment).Amazon’spoliciesforbidHITsthatrequireworkerstosignupforaccountsonwebsitesortoprovidetheiremailaddresses.TheserulespreventanumberofabusiveusesofMechanicalTurk.TheyalsoprotectAmazon’sbusi-nessbyforbiddingrequestersfromrecruitingworkers,establishingameansofcontactthatbypassesAmazon,andthenpayinghiredworkersforfuturetaskswithoutpayingAmazonforitsroleinrecruitingtheworkers.OurHITwascompliantwiththeletteroftheserulesbecauseweonlyrequiredworkerstoplaytheattentiongame,andtheywereinnowayobligatedtosignupforthefullat-tentionstudy.Wewerealsocompliantwiththespiritoftherules,aswewerenotaskingworkerstoengageinabusiveactionsandwedidnotcutAmazonoutoftheirroleasmarketmaker—wepaidparticipantsforthe90-gameattentionstudybypostingabonusfortheHITtheyalreadycompletedthroughAmazon.Asinanytwo-weekproject,someparticipantsre-questedextensionstothecompletiondeadlineinordertoreach90completedgame.Weprovided24-hourexten-sionstoparticipantswhowerewithin20gamesofcom-pletingthestudyatthedeadline.5612  23rd USENIX Security Symposium 

USENIX Association

Figure4:Participantswereaskedtoﬁlloutthistwo-questionsurveybeforeeveryattentiongame.Figure5:Aftercompletinganattentiontest,participantscouldnotperformanotheronefor30minutes.4.4SessionsAftereachloginwepresentedaveryshortsurvey(showninFigure4)askingparticipantsabouttheirrecentsleepandeating.Thiswasdesignedsolelytosupportthepur-portedgoalofthestudyandweignoredtheresponses.Afterparticipantscompletedthesurveyweimmedi-atelydisplayedthe“AttentionGame”.Whentheycom-pletedthegame,weoverlaidatimerontopofthepagecountingdown30minutesuntiltheycouldagainﬁlloutthesurveyandplaythegame(seeFigure5).Thetimeralsocounteddowninthetitleofthepage,sothatpartic-ipantswouldseethecountdownwhenbrowsinginothertabsandknowwhentheywerenextallowedtoplay.Ifparticipantstriedtologintothewebsiteagainbeforethe30-minutewaitingperiodwascomplete,wedisplayedthecountdownagain,startingfromtheamountoftimeremainingsincetheylastcompletedthegame.4.5CompletionsurveyWhenparticipantsloggedinforthe90thandﬁnaltime,weskippedthegameanddisplayedourcompletionsur-vey.Weprovidethefulltextofthesurvey(withpartici-pants’answercounts)intheextendedversionofthispa-per[23].Westartedthesurveywithdemographicques-tionsandthenaskedparticipantsiftheyhadwrittendownorstoredtheirpasswordsorassignedsecuritycodesout-sideoftheirmemory.Wethendebriefedparticipantsaboutthetruenatureofthestudy,explainingthatthesecuritycodewasthefocusofthestudy,thoughwedidnotrevealthatweplannedafollow-upstudy.Wecouldnotdeferthedebrieﬁngtothefollow-upstudy,asparticipantshadnotcommittedtoengagewithusbeyondtheendofthestudyandmightnotacceptinvitationsforfuturecontact.Indeed,someparticipantsreporteddiscussingthestudyinforums,butaswehadentrustedthosewhoﬁnishedthestudywiththetruth,theyreturnedthattrustbyrespectingforumrulesagainst‘spoilers’inallcasesweareawareof.Toaidwiththefollow-upstudy,weaskedparticipantstoprovidetheiremailaddress,statingthequestioninamannerthatwehopedwouldminimizesuspicionthataformalfollow-upstudywasimminent.Ifouranalysisraisesmorequestionsaboutyourexperi-enceduringthestudy,maywecontactyouandaskyoutoanswerafewquestionsinreturnforanadditionalbonus?Ifso,provideyouremailbelow.(Thisisoptional!)4.6PaymentWepaid$20toparticipantswhocompletedthestudy,asopposedtothe$19promised,toshowextragratitudefortheirparticipation.Weinformedparticipantsofthisonlyaftertheyhadcompletedthe‘attention’studyandﬁlledouttheirpost-deceptionethicsquestionnaire,soastonottainttheirresponsesabouttheethicsofthedeception.However,thispaymentcamewellbeforetheinvitationtothefollow-upstudy.Receivingapaymentexceedingwhatwehadpromisedmayhaveincreasedparticipants’receptivenesstothatinvitation.Despitetellingparticipantstheywouldnotbepaidun-lesstheycompletedthestudy,wedidpay$0.20perlo-gintoallparticipantswhologgedintothesiteatleastonceaftersigningup.Wedidsobecausewecouldn’tbecertainthattheextraworkofenteringasecuritycodedidn’tcausesomeparticipantstodropout.Wewantedtoensurethatifparticipantsfoundthesecuritycodesoarduousastoquit,theywouldnotloseoutonpaymentfortheattentionteststheydidcomplete.Wedidnotre-vealthisfacttotheparticipantswhocompletedthestudyandﬁlledouttheethicssurveyaswefearedtheymightcommunicateittothosewhohadyettoﬁnish.4.7Follow-upsAtleast72hoursafteranon-controlgroupparticipantcompletedthestudy,weemailedthemaninvitationtoperformanadditionalHITfor$1(thisemailisrepro-ducedintheextendedversionofthispaper[23]).Most6participants provided an email address in the ﬁnal sur-
vey of the attention study; we tried to contact those who
didn’t via Mechanical Turk. When participants accepted
the HIT, we identiﬁed them by their Mechanical Turk ID
to verify that they’d participated in the main study.1
The follow-up study contained only one question:

Please try to recall and enter the security code that we as-
signed you during the attention study.
If you stored or wrote down your security code, please
do not look it up. We are only interested in knowing what
you can recall using only your memory.
It’s OK if you
don’t remember some or all of it. Just do the best you can.

We presented participants with three text ﬁelds for the
three chunks of their security code. Unlike the data-entry
ﬁeld used when they logged in for the attention experi-
ment, we used plain text ﬁelds without any guidance as to
whether the characters typed were correct. We accepted
all responses from participants that arrived within two
weeks of their completion of the study.

We emailed all participants who completed the ﬁrst
follow-up again 14 days after they completed it with the
offer to complete a second identical follow-up for an ad-
ditional $1 reward.

4.8 Ethics
The experiment was performed by Microsoft Research
and was reviewed and approved by the organizations’s
ethics review process prior to the start of our ﬁrst pilot.2
We employed deception to mask the focus of our re-
search out of concern that participants might work harder
to memorize a code if they knew it to be the focus of our
study. We took a number of steps to minimize the poten-
tial for our deception to cause harm. We provided partic-
ipants with estimates for the amount of time to complete
the study padded to include the unanticipated time to en-
ter the security code. While we told participants they
would not be paid if they did not complete the study, we
did make partial payments. We monitored how partic-
ipants responded to the deception, investigating the re-
sponses of pilot participants before proceeding with the
full study and continued to monitor participants in the
full study, using a standard post-deception survey hosted
by the Ethical Research Project [82]. We also offered
participants the opportunity to withdraw their consent for
use data derived from their participants. The vast major-
ity of participants had no objection to the deception and

1We failed to verify that it had been three days since they completed
the study, requiring us to disqualify three participants who discovered
the follow-up study prematurely (see Section 5.1).

2The ﬁrst author started a position at Princeton after the research
was underway. He was not involved in the execution of the study or
communications with participants. He did not have access to the email
addresses of those participants who volunteered to provide them (the
only personally-identiﬁable information collected).

none asked to have their data withdrawn. We provide
more detail on participants’ ethics responses in the ex-
tended version of this paper [23].

5 Results

We present overall analysis of the most important results
from our study: participant’s ability to learn and recall
security codes. We present a full accounting of partici-
pants’ responses to the multiple-choice questions of our
ﬁnal survey and the complete text of that survey in the ex-
tended version of this paper [23], including demograph-
ics which reﬂect the typical MTurk population [74].

5.1 Recruitment and completion
We offered our initial attention-game task to roughly 300
workers from February 3–5, 2014. 251 workers accepted
the offer to participate in our study by completing the
sign-up page and playing the ﬁrst game. We stopped
inviting new participants when we had reached roughly
100 sign-ups for our two experimental groups. Partic-
ipants’ assigned treatment had no effect until they re-
turned after sign-up and correctly entered their username
and chosen password into the login page, so we discard
the 28 who signed up but never returned. We categorize
the 223 participants who did return in Table 1.

5.1.1 Dropouts
Inserting a security-code learning step into the login pro-
cess creates an added burden for participants. Of par-
ticipants who completed the study, typing (and waiting
for) the security codes added a median delay of 6.9 s per
login. To measure the impact of this burden, we tested
the hypothesis that participants assigned a security code
would be less likely to complete the experiment than
those in the control. The null hypothesis is that group
assignment has no impact on the rate of completion.

Indeed, the study-completion rates in the fourth row
of Table 1 are higher for control than the experimental
groups. We use a two-tailed Fisher’s Exact Test to com-
pare the proportion of participants who completed the
study between those assigned a security code (the union
of the letters and words treatments, or 133 of 170) to that
of the control (35 of 41). The probability of this dif-
ference occurring by chance under the null hypothesis is
p = 0.2166. While this is far from the threshold for sta-
tistical signiﬁcance, such a test cannot be used to reject
the alternate hypothesis that the observed difference re-
ﬂects a real percentage of participants who dropped out
due to the security code.

Digging into the data further, we can separate out
those participants who abandoned the study after exactly

USENIX Association  

23rd USENIX Security Symposium  613

7

Signed up for the ‘attention’ study

Quit after 2 or 3 games
Otherwise failed to ﬁnish

Completed the ‘attention’ study
Received full security code

Typed entire code from memory

Participated in ﬁrst follow-up

Recalled code correctly

Participated in second follow-up

Recalled code correctly

Control
41
0/41
6/41
35/41

92
0%
9/92
15% 14/92
85% 69/92
63/68
62/63
56/63
46/56
52/56
29/52

—
—
—
—
—
—

Letters

Words

Total

90

10% 12/90
15% 12/90
75% 66/90
93% 64/65
99% 64/64
89% 56/64
82% 52/56
93% 52/56
56% 32/52

223
21/223
13%
13%
32/223
73% 170/223
98% 127/133
100% 126/127
88% 112/127
93%
98/112
93% 104/112
62%
61/104

9%
14%
76%
95%
99%
88%
88%
93%
59%

Table 1: Results summary: participants who signed up for the attention study, the fraction of those participants who
completed the study, the fraction of the remaining participants who entered the ﬁrst two chunks of their security code
reliably enough to be shown the full security code (all three chunks), the fraction of those remaining who participated
in the follow-up studies (after 3 and 17 days, respectively), and the fraction of those who recalled their security code
correctly. The control group did not receive security codes and hence are excluded from the latter rows of the table.

two or three games from those who failed to ﬁnish later
(no participant quit after the fourth or ﬁfth games). While
no participant in the control quit between two or three
games, 9 participants assigned to letters and 12 assigned
to words did. For participants who completed more than
three games, the rate of failure to ﬁnish the study is re-
markably consistent between groups. We do not perform
statistical tests as this threshold is data-derived and any
hypothesis based on it would be post-hoc. Rather, as our
study otherwise presents a overall favorable view of ran-
dom assigned secrets, we present the data in this way as
it illustrates to the reader reason for skepticism regarding
user acceptance among unmotivated participants.

5.1.2 Participants who appeared not to learn

Six participants completed the study without receiving
all three chunks of their security codes, having failed to
demonstrate learning by typing the ﬁrst chunk (one par-
ticipant from letters) or second chunk (ﬁve participants,
four from letters and one from words) before the hint ap-
peared. After the conclusion of the study we offered par-
ticipants $1 to provide insights into what had happened
and all replied. Two in the letters group, including the
one who only received one chunk, reported genuine difﬁ-
culty with memory. The other four stated quite explicitly
(which we provide in the extended version of this pa-
per [23]) that they purposely avoided revealing that they
had learned the second chunk to avoid being assigned
more to learn.

5.1.3 Excluded participants

We found it necessary to exclude four participants from
some of our analysis. Three participants, two in words

and one in letters, discovered and accepted the follow-
up HIT before three days had passed since the end of
the study, ignoring the admonition not to accept this HIT
without an invitation. Though these participants all com-
pleted the 90-game attention study, learned and recalled
their entire security code, we count them as having not
returned for the follow-up. We corrected this bug prior
to the second follow-up. We disqualiﬁed one additional
‘participant’ in the letters group which appeared to be
using an automated script.

After revealing the deceptive nature of the study we
gave participants the option to withdraw their consent for
us to use our observations of their behavior, while still
receiving full payment. Fortunately, none chose to do so.

5.2 Learning rates
Of non-control participants completing the study, 93%
eventually learned their full security code well enough
to type it from memory three times in a row (91% of
letters and 96% of words). Most participants learned
their security codes early in the study, after a median of
36 logins (37 for letters and 33 of words). We show the
cumulative distribution of when participants memorized
each chunk of their code in Figure 6.

We consider whether participants ﬁrst

typed their
codes from memory in fewer logins with either letters
or words, with the null hypothesis that encoding had no
impact on this measure of learning speed. A two-tailed
Mann-Whitney U (rank sum) test on the distribution of
these two sets of learning speeds estimates a probability
of p = 0.07 (U = 1616) of observing this difference by
chance, preventing us from rejecting the null hypothesis.
We had hypothesized that, with each subsequent
chunk we asked participants to memorize, their learn-

614  23rd USENIX Security Symposium 

USENIX Association

8

1.0

0.8

0.6

0.4

0.2

k
n
u
h
c

d
e
z
i
r
o
m
e
m
g
n
i
v
a
h

s
t
n
a
p
i
c
i
t
r
a
p

f
o
%

1.0

0.8

0.6

0.4

0.2

k
n
u
h
c

g
n

i
l
l
a
c
e
r

y
l
t
c
e
r
r
o
c

s
t
n
a
p
i
c
i
t
r
a
p

f
o
%

Words (1st chunk)
Words (2nd chunk)
Words (3rd chunk)
Letters (1st chunk)
Letters (2nd chunk)
Letters (3rd chunk)

Words (1st chunk)
Words (2nd chunk)
Words (3rd chunk)
Letters (1st chunk)
Letters (2nd chunk)
Letters (3rd chunk)

0.0

0

10

20

30

40

50

Login attempt #

60

70

80

90

0.0

0

10

20

30

40

50

60

# Login attempts since chunk introduced

Figure 6: We show the proportion of participants who
had memorized each chunk of their security code after
a given number of login attempts. We considered a par-
ticipant to have memorized a chunk after they entered it
without a hint in three consecutive logins.

ing speed might decrease due to interference [31] or in-
crease due to familiarity with the system. Learning times
decreased. We use a Mann-Whitney U test to compare
learning times between the ﬁrst and ﬁnal chunks, using
times only for participants who learned all three, yielding
a signiﬁcant p < 0.001 (U = 4717). To remove the im-
pact of the time required to notice the delay and learn that
they could enter the code before it appeared, we compare
the learning times between the third and second chunks.
This difference is much smaller, with a Mann-Whitney
U test yielding a probability of p = 0.39 (U = 7646) of
an effect due to chance.

To illustrate the increasing rate of learning we show,
in Figure 7, the percent of participants who typed each
chunk correctly from memory as a function of the num-
ber of previous exposures to that chunk.

5.3 Login speed and errors
Overall, participants in the words group took a median
time of 7.7 s to enter their security codes, including wait-
ing for any hints to appear that they needed, and partic-
ipants in the letters group took a median time of 6.0 s.
Restricting our analysis to those logins in which partici-
pants were required to enter all three chunks of the code
only increases the median login time to 8.2 s for words
and 6.1 s for letters.3 The distribution had a relatively
long tail, however, with the 95th percentile of logins tak-
ing 23.6 s for words and 20.5 s for letters.

3The median login time actually went down for letters participants
when all three chunks were required, likely because this included more
logins typed exclusively from memory with no waiting for a hint.

Figure 7: For each of the three chunks in participants’ se-
curity codes, we show the proportion of participants who
entered each chunk without a hint as a function of the
number of previous exposures to the chunk (the number
of previous logins in which the chunk appeared). On the
whole, participants actually memorized their second and
third chunks more quickly than the ﬁrst.

After computing the median login time for each par-
ticipant, we compared the set of these values for par-
ticipants in the two experimental groups using a Mann-
Whitney U. We can reject the null hypothesis that the dif-
ferences between these medians were the result of chance
with p < 0.01 (U = 1452) and conclude that participants
in the letters group were signiﬁcantly faster.

Errors in entering security codes (whether typos or
genuine memory errors) were relatively rare: over all 90
logins participants in the words group made fewer errors
(with a median of 5) than participants in the letters group
(median 7). Using a Mann-Whitney U, we cannot reject
the null hypothesis that neither group would make more
errors than the other (p = 0.08 (U = 1706)).

5.4 Recall of security codes in follow-ups
We sent invitations to participants to follow-up studies
testing recall of their security codes 3 days after the ini-
tial study ended and then 14 more days after they com-
pleted the ﬁrst follow-up. The median time between
when participants completed the study and actually took
the ﬁrst follow-up study was 3 days 18 hours (mean 4
days 23 hours). For the second follow-up study the me-
dian time was 16 days 0 hours (mean 16 days 13 hours).
By comparison, the median time to complete the study
itself was 10 days 5 hours (mean 9 days 19 hours).

Overall, 88% of participants recalled their code cor-
rectly in the ﬁrst follow-up and 59% did so in the sec-
ond. The drop-off at the second follow-up was expected

USENIX Association  

23rd USENIX Security Symposium  615

9

as memory is believed to decay exponentially with the
delay since the information was last recalled [89].

We had hypothesized that participants in the letters
treatment might be more or less likely to recall their secu-
rity codes correctly in the follow-ups than participants in
the words treatment. As seen in Table 1, of participants
in the letters group 82% recalled their security codes cor-
rectly in the ﬁrst follow-up and 56% did so in the second
study, compared to 93% and 62%, respectively, of users
in words. Using a two-tailed Fisher’s Exact Test, we can-
not rule out the null hypothesis that participants in ei-
ther group were equally likely to recall codes correctly,
with the observed differences occurring with a p = 0.15
chance in the ﬁrst follow-up and p = 0.45 in the second
follow-up under the null hypothesis.

5.4.1 Types of errors

We observed 14 participants incorrectly entering their
code in the ﬁrst follow-up and 52 in the second. All
13 users who entered incorrectly in the ﬁrst follow-up
and participated in the second entered their code incor-
rectly again. This sample is too low to draw ﬁrm con-
clusions about the nature of participants’ recall errors,
but we did see evidence that users retained partial mem-
ory, with 75% of users entering at least one component
of their code correctly in the second follow-up and 48%
missing only one component or entering components in
the wrong order. Re-arranging the order of components,
which accounted for 10% of errors, could be corrected
by accepting components in any order at a loss of only
log2(3!) ≈ 2.6 bits of security. Unfortunately, the major-
ity of other errors could not be corrected without signif-
icantly downgrading security. Only 3 participants (6%)
in the second-followup (and 2 in the ﬁrst) entered a code
within an edit distance of 2 of the correct code. We
present further information on the types of errors ob-
served in the extended version of this paper [23].

5.4.2 Storing security codes

A minority of participants reported storing their security
code outside of their memory, as presented in Table 2.
We were concerned that participants who had stored their
security codes might have been tempted to look them up
and thereby inﬂated the recall rate during the follow-up.
However, only 82% of participants storing their security
code recalled it correctly on follow-up, whereas 89% of
participants not storing the security code did. While it’s
possible that participants who did not rely on a stored
code were better able to remember as a result, we had not
hypothesized this in advance nor would the differences
we observed have been statistically signiﬁcant.

We had hypothesized that participants might be more

likely to write down or otherwise store codes outside
their memory if assigned a code composed of letters as
opposed to words, or vice versa. The null hypothesis is
that treatment has no impact on the choice to store codes.
In the completion survey, 18 of the 69 participants in
the letters treatment reported having stored their security
code, as compared to 10 of the 66 in the words treatment.
We use a two-sided Fisher’s Exact Test to estimate that
such a difference would occur with probability p = 0.14
under the null hypothesis. Thus we can not conclude that
either treatment made participants more likely to write
their code down.

6 Limitations

Whenever testing a new approach to security, its novelty
alone may be enough to reveal to research participants
that it is the focus of the study. Despite our best efforts,
of the 133 participants in the experimental groups who
completed the study (68 in letters and 65 in words), only
35 (26%, 24 from letters and 11 from words) reported
that they did not suspect that the security code might be
the focus of the study. The majority, 70 (53%, 28 from
letters and 42 from words) reported having some suspi-
cion and 28 (21%, 16 from letters and 12 from words)
reported being ‘certain’ the security code was the focus
of the study. Still, to our knowledge no participants re-
vealed any ‘spoilers’ on public forums. Participants who
suspected we were studying their ability to learn the se-
curity code may have tried harder to memorize the code
than if they had not, though it’s not clear how their effort
would compare to that of a real-world user relying on a
randomly-assigned code to secure something valuable.

7 Background and related work

7.1 Physiological principles of memory
Human memory has been studied extensively by psy-
chologists (as well as neuroscientists and others). The
spacing effect describes how people are better able to re-
call information if it is presented for the same duration,
but in intervals spaced over a longer period of time. This
effect was ﬁrst described in the 19th century [43] and is
considered one of the most robust memory effects [10].
It has even been demonstrated in animals. The effect is
almost always far more powerful than variations in mem-
ory between individual people [35].

The cause of the spacing effect is still under debate,
but most theories are based around the multi-store model
of memory [33] in which short-term (or working mem-
ory) and long-term memory are distinct neurological pro-
cesses [8, 9]. One theory of the spacing effect posits

616  23rd USENIX Security Symposium 

USENIX Association

10

Did you store any part of the additional security code for the

study website, such as by writing it down, emailing it to

yourself, or adding it to a password manager?
‘Yes’

‘No’

Letters

Words

Letters

Words

Completed the study

Reported storing password

Received full security code
Participated in follow-up
Recalled code correctly

18/68
11/18
16/18
14/16
12/14

26% 10/65
6/10
61%
9/10
89%
8/9
88%
86%
6/8

15% 50/68
60%
2/50
90% 47/50
89% 42/47
75% 34/42

74% 55/65
4%
0/55
94% 55/55
89% 48/55
81% 46/48

85%
0%
100%
87%
96%

Table 2: A minority of participants reported storing their security code outside of their memory. Each row corresponds
to an identically-named row in Table 1, separated by participants’ response to the code storage question in each column.
The ﬁrst row shows the fraction of all participants who completed the study in each group, and each subsequent row
as a fraction of the one above, except for the italicized row which identiﬁes participants who reported storing their
self-chosen password (which was much more common amongst participants who stored their security code).

that when information is presented which has left short-
term memory, a trace of it is recognized from long-term
memory [47] and hence stimulated, strengthening the
long-term memory through long-term potentiation [14]
of neural synapses. Thus, massed presentation of in-
formation is less effective at forming long-term memo-
ries because the information is recognized from work-
ing memory as it is presented. In our case, the natural
spacing between password logins is almost certainly long
enough for the password to have left working memory.

Early work on spaced learning focused on expanding
presentation in which an exponentially increasing inter-
val between presentations was considered optimal [70,
62]. More recent reviews have suggested that the pre-
cise spacing between presentations is not particularly im-
portant [11] or that even spacing may actually be supe-
rior [53]. This is fortunate for our purposes as password
logins are likely to be relatively evenly spaced in time.
Other work has focused on dynamically changing spac-
ing using feedback from the learner such as speed and
accuracy of recall [68] which could potentially guide ar-
tiﬁcial rehearsal of passwords.

7.2 Approaches to random passwords
Many proposals have aimed to produce random pass-
words which are easier for humans to memorize, im-
plicitly invoking several principles of human memory.
Early proposals typically focused on pronounceable ran-
dom passwords [46, 90] in which strings were produced
randomly but with an English-like distribution of letters
or phonemes. This was the basis for NIST’s APG stan-
dard [2], though that speciﬁc scheme was later shown to
be weak [45]. The independently-designed pwgen com-
mand for generating pronounceable passwords is still
distributed with many Unix systems [5].

Generating a random set of words from a dictionary, as

we did in our words treatment, is also a classic approach,
now immortalized by the web comic XKCD [67]. This
was ﬁrst proposed by Kurzban [61] with a very small 100
word dictionary, the popular Diceware project [6] offers
4,000 word dictionaries. Little available research exists
on what size and composition of dictionaries is optimal.
Finally, a number of proposals have aimed to enhance
memorability of a random string by offering a secondary
coding such as a set of images [58], a grammatical sen-
tence [7, 50], or a song [65]. Brown’s passmaze proto-
col was recognition-based, with users simply recogniz-
ing words in a grid [29]. None of these proposals has
received extensive published usability studies.

7.3 Studies on password recall
A number of studies have examined user performance
in recalling passwords under various conditions. These
studies often involve users choosing or being assigned a
new password in an explicitly experimental setting, and
testing the percentage of users who can correctly recall
their password later. Surprisingly, a large number of
studies have failed to ﬁnd any statistically signiﬁcant im-
pact on users’ ability to recall passwords chosen under
a variety of experimental treatments, including varying
length and composition requirements [95, 71, 92, 86, 60]
or requiring sentence-length passphrases [55].4 The con-
sistent lack of impact of password structure on recall
rates across studies appears to have gone unremarked in
any of the individual studies.

However, several studies have found that stricter com-
position requirements increase the number of users writ-
ing their passwords down [71, 60] and users self-report
that they believe passwords are harder to remember when
created under stricter password policies [60, 92].

4Keith et al. [55] did observe far more typos with sentence-length
passwords, which needed correcting to isolate the effective recall rates.

USENIX Association  

23rd USENIX Security Symposium  617

11

At least three studies have concluded that users are
more likely to remember passwords they use with greater
frequency [95, 28, 42]. This suggests that lack of ad-
equate training may in fact be the main bottleneck to
password memorization, rather than the inherent com-
plexity of passwords themselves. Brostoff [28] appears
to have made the only study of password automacity (the
ability to enter a password without consciously thinking
about it), and estimated that for most users, this property
emerges for passwords they type at least once per day.

A few studies have directly compared recall rates of
user-generated passwords to assigned passwords. Inter-
estingly, none has been able to conclude that users were
less likely to remember assigned passwords. For exam-
ple, in a 1990 study by Zviran and Haga [94] in which
users were asked to generate a password and then recall it
3 months later, recall was below 50% for all unprompted
text passwords and no worse for system-assigned random
passwords, though the rate of writing increased. A simi-
lar lab study by Bunnell et al. found a negligibly smaller
difference in recall rate for random passwords [30]. A
2000 study by Yan et al. [92] found that users assigned
random passwords for real, frequently-used accounts ac-
tually requested fewer password resets than users choos-
ing their own passwords, though those users were also
encouraged to write their passwords down “until they had
memorized them.” Stobert in 2011 [78] found no sig-
niﬁcant difference in recall between assigned and user-
chosen text passwords.

Two studies have exclusively compared user’s ability
to recall random passwords under different encodings.
The results of both were inconclusive, with no signiﬁ-
cant difference in recall rate between users given random
alphanumeric strings, random pronounceable strings or
randomly generated passphrases at a comparable secu-
rity level of 30 [77] or 38 bits [64]. The results ap-
pear robust to signiﬁcant changes in the word dictionary
used for passwords or the letters used in random strings.
However, users stated that alphanumeric strings seemed
harder to memorize than random passphrases [77].

All of these studies except that of Yan et al. face va-
lidity concerns as the passwords were explicitly created
for a study of password security. A 2013 study by Fahl
et al. [44] compared user behavior in such scenarios and
found that a non-trivial proportion of users behave signif-
icantly differently in explicit password studies by choos-
ing deliberately weak passwords, while a large number of
users re-use real passwords in laboratory studies. Both
behaviors bias text passwords to appear more memo-
rable, as deliberately weak passwords may be easy to
memorize and existing passwords may already be mem-
orized. Also of concern, all of these studies (again ex-
cluding Yan et al.) involved a single enrollment process
followed by recall test, with no opportunity for learning.

Spaced repetition for passwords was recently sug-
gested by Blocki et al. [16], who proposed designing
password schemes which insert a minimal number of ar-
tiﬁcial rehearsals to maintain security. After our study,
Blocki published results from a preliminary study on
mnemonic passwords with formal rehearsals [15]. Com-
pared to our study, participants performed a much lower
number of rehearsals spaced (about 10) spaced over a
longer period (up to 64 days), prompted by the system
at speciﬁc times rather than at the participant’s conve-
nience. Unlike our study participants were aware that
memorization was the explicit goal of the study. Blocki
also incorporated additional mnemonic techniques (im-
ages and stories). This study provides evidence that
spaced repetition and other techniques can be applied
more aggressively for motivated users, whereas as our
study demonstrates the practicality with few system
changes and unmotivated users.

7.4 Alternative authentication schemes
Several approaches have been explored for exploiting
properties of human memory in authentication systems.
One approach is to query already-held memories us-
ing personal knowledge question schemes such as “what
is your mother’s maiden name?” though more sophis-
ticated schemes have been proposed [93, 48] While
these schemes typically enable better recall than pass-
words, they are vulnerable to attacks by close social re-
lations [76], many people’s answers are available in on-
line search engines or social networks [73], and many
questions are vulnerable to statistical guessing [21, 76].
An advantage of personal knowledge questions is that
they represent cued recall with the question acting as
a cue, which generally increases memory performance
over free recall.

Graphical passwords aim to utilize humans’ strong
abilities to recognize visual data [13]. Some schemes
employ cued recall only by asking users to recognize a
secret image from a set [40, 87, 80]. Others use uncued
memory by asking users to draw a secret pattern [49, 81,
12] or click a set of secret points in an image [88, 37].
These schemes are often still vulnerable to guessing at-
tacks due to predictable user choices [39, 83, 84]. The
Persuasive Cued Click-Points scheme [36] attempts to
address this by forcing users to choose points within a
system-assigned region, which was not found to signif-
icantly reduce recall. Still, it remains unclear exactly
what level of security is provided by most graphical
schemes and they generally take longer to authentication
than typing a text password. They have found an im-
portant niche on mobile devices with touch screens, with
current versions of Android and Windows 8 deploying
graphical schemes for screen unlock.

618  23rd USENIX Security Symposium 

USENIX Association

12

Bojinov et al. [17] proposed the use of implicit mem-
ory for authentication, training users to type a random
key sequence in rapid order using a game similar to one
used in psychological research to study implicit mem-
ory formation [75]. After a 30–45 minute training pe-
riod, users were tested 1–2 weeks later on the same game
with their trained sequences and random sequences, with
about half performing signiﬁcantly better on trained se-
quences. Such a scheme offers the unique property that
users are unaware of their secret and thus incapable of
leaking it to an attacker who doesn’t know the correct
secret challenge to test on, providing a measure of re-
sistance against “rubber-hose” attacks (physical torture).
Without dramatic improvements however this scheme is
impractical for normal personal or corporate logins due
to the very long enrollment and login times and the low
rate of successful authentication.

8 Open questions and future work

As this was our ﬁrst exploration of spaced repetition for
learning random secrets, many of our design choices
were best guesses worthy of further exploration. The
character set used when encoding secrets as letters,
namely 26 lowercase letters, might be inferior to an ex-
panded set such as base-32 with digits included [51]. Our
choice of a dictionary of 676 words is almost surely not
optimal, since we deliberately chose it for equivalence to
the size of our character set. Splitting the secret into three
equal-sized chunks was also simply a design heuristic,
performance might be better with more or fewer chunks.
We expect spaced repetition to be a powerful enough
tool for users to memorize secrets under a variety rep-
resenation formats, though the precise details may have
important implications. We observed letters to be slightly
faster to type and words slightly faster to learn. We also
observed double the rate of forgotten codes after three
days in the letters group and, though this difference was
not statistically signiﬁcant given our sample sizes and the
low absolute difference, this is worthy of further study as
this difference could be important in practice.

Our system can likely be improved by exploiting ad-
ditional memory effects, such as dual-coding secrets by
showing pictures next to each word or requiring greater
depth of processing during each rehearsal. Cued recall
could also be utilized by showing users random prompts
(images or text) in addition to a random password.

On the downside, interference effects may be a ma-
jor hindrance if users were asked to memorize multiple
random passwords using a system like ours. This is wor-
thy of further study, but suggests that random passwords
should only be used for critical accounts.

Changing the login frequency may decrease or in-
crease performance. We aimed to approximate the num-

ber of daily logins required in an enterprise environment
in which users lock their screen whenever leaving their
desks. In this context, the trade-offs appear reasonable
if newly-enrolled users can learn a strong password after
two weeks of reduced security (to the level of a user-
chosen password) with about 10 minutes of aggregate
time spent learning during the training period.

In contexts with far fewer logins, such as password
managers or private keys which might be used once
per day or less, learning might require a larger number
of total logins.
If a higher total number of logins are
needed and they occur at a slower rate, this may lead
to an unacceptable period of reduced security.
In this
case, security-conscious users could use rehearsals out-
side of authentication events. Further, if codes are used
extremely infrequently after being memorized, artiﬁcial
rehearsals may be desirable even after learning the secret.
These are important cases to study, in particular as these
are cases in which there is no good alternative defense
against ofﬂine brute-force attacks.

While the learning rates of our participants did not
slow down as the number of chunks they memorized in-
creased, they might have more have trouble as the num-
ber of chunks grows further or as they have to asso-
ciate different codes with different accounts. Fortunately,
most users only have a small number of accounts valu-
able enough to require a strong random secret.

9 Conclusion

For those discouraged by the ample literature detailing
the problems that can result when users and security
mechanisms collide, we see hope for the human race.
Most users can memorize strong cryptographic secrets
when, using systems freed from the constraints of tradi-
tional one-time enrollment interfaces, they have the op-
portunity to learn over time. Our prototype system and
evaluation demonstrate the brain’s remarkable ability to
learn and later recall random strings—a fact that sur-
prised even participants at the conclusion of our study.

10 Acknowledgments

We thank Janice Tsai for assistance and suggestions on
running an ethical experiment, Serge Egelman and David
Molnar for help running our experiment on Mechanical
Turk, and Arvind Narayanan, Cormac Herley, Paul van
Oorschot, Bill Bolosky, Ross Anderson, Cristian Bravo-
Lilo, Craig Agricola and our anonymous peer reviewers
for many helpful suggestions in presenting our results.

USENIX Association  

23rd USENIX Security Symposium  619

13

References
[1] HashCat project. http://hashcat.net/hashcat/.
[2] “Automated Password Generator (APG)”. NIST Federal Infor-

mation Processing Standards Publication (1993).

[3] Bitcoin currency statistics. blockchain.info/stats, 2014.
[4] ADAMS, A., SASSE, M. A., AND LUNT, P. Making passwords
secure and usable. In People and Computers XII. Springer Lon-
don, 1997, pp. 1–19.

[5] ALLBERY, B. pwgen—random but pronounceable password gen-

erator. USENET posting in comp.sources.misc (1988).

[6] ARNOLD, R. G. The Diceware Passphrase Home Page. world.

std.com/~reinhold/diceware.html, 2014.

[7] ATALLAH, M. J., MCDONOUGH, C. J., RASKIN, V., AND
NIRENBURG, S. Natural language processing for information as-
surance and security: an overview and implementations. In Pro-
ceedings of the 2000 New Security Paradigms Workshop (2001),
ACM, pp. 51–65.

[8] ATKINSON, R. C., AND SHIFFRIN, R. M. Human memory: A
proposed system and its control processes. The Psychology of
Learning and Motivation 2 (1968), 89–195.

[9] BADDELEY, A. Working memory. Science 255, 5044 (1992),

556–559.

[10] BADDELEY, A. D. Human memory: Theory and practice. Psy-

chology Press, 1997.

[11] BALOTA, D. A., DUCHEK, J. M., AND LOGAN, J. M. Is ex-
panded retrieval practice a superior form of spaced retrieval? A
critical review of the extant literature. The foundations of re-
membering: Essays in honor of Henry L. Roediger, III (2007),
83–105.

[12] BICAKCI, K., AND VAN OORSCHOT, P. C. A multi-word pass-
word proposal (gridWord) and exploring questions about sci-
ence in security research and usable security evaluation. In Pro-
ceedings of the 2011 New Security Paradigms Workshop (2011),
ACM, pp. 25–36.

[13] BIDDLE, R., CHIASSON, S., AND VAN OORSCHOT, P. C.
Graphical passwords: Learning from the ﬁrst twelve years. ACM
Computing Surveys (CSUR) 44, 4 (2012), 19.

[14] BLISS, T. V., AND LØMO, T. Long-lasting potentiation of synap-
tic transmission in the dentate area of the anaesthetized rabbit
following stimulation of the perforant path. The Journal of Phys-
iology 232, 2 (1973), 331–356.

[15] BLOCKI, J. Usable Human Authentication: A Quantitative Treat-

ment. PhD thesis, Carnegie Mellon University, June 2014.

[16] BLOCKI, J., BLUM, M., AND DATTA, A. Naturally rehears-
In Advances in Cryptology-ASIACRYPT 2013.

ing passwords.
Springer, 2013, pp. 361–380.

[17] BOJINOV, H., SANCHEZ, D., REBER, P., BONEH, D., AND
LINCOLN, P. Neuroscience meets cryptography: designing
crypto primitives secure against rubber hose attacks. In Proceed-
ings of the 21st USENIX Security Symposium (2012).

[18] BONNEAU, J. Guessing human-chosen secrets. PhD thesis, Uni-

versity of Cambridge, May 2012.

[19] BONNEAU, J. Moore’s Law won’t kill passwords. Light Blue

Touchpaper, January 2013.

[21] BONNEAU, J., JUST, M., AND MATTHEWS, G. What’s in a
Name? Evaluating Statistical Attacks on Personal Knowledge
Questions. In FC ’10: Proceedings of the the 14th International
Conference on Financial Cryptography (January 2010).

[22] BONNEAU, J., PREIBUSCH, S., AND ANDERSON, R. A birthday
present every eleven wallets? The security of customer-chosen
banking PINs. In FC ’12: Proceedings of the the 16th Interna-
tional Conference on Financial Cryptography (March 2012).

[23] BONNEAU, J., AND SCHECHTER, S. Towards reliable storage of
56-bit secrets in human memory (extended version). Tech. rep.,
Microsoft Research.

[24] BONNEAU, J., AND SHUTOVA, E. Linguistic properties of multi-
word passphrases. In USEC ’12: Workshop on Usable Security
(March 2012).

[25] BOYEN, X. Halting password puzzles. In USENIX Security Sym-

posium (2007).

[26] BRAND, S. Department of Defense Password Management

Guideline.

[27] BRANTZ, T., AND FRANZ, A. The Google Web 1T 5-gram
corpus. Tech. Rep. LDC2006T13, Linguistic Data Consortium,
2006.

[28] BROSTOFF, A. Improving password system effectiveness. PhD

thesis, University College London, 2004.

[29] BROWN, D. R. Prompted User Retrieval of Secret Entropy:
The Passmaze Protocol. IACR Cryptology ePrint Archive 2005
(2005), 434.

[30] BUNNELL, J., PODD, J., HENDERSON, R., NAPIER, R., AND
KENNEDY-MOFFAT, J. Cognitive, associative and conventional
passwords: Recall and guessing rates. Computers & Security 16,
7 (1997), 629–641.

[31] BUNTING, M. Proactive interference and item similarity in work-
ing memory. Journal of Experimental Psychology: Learning,
Memory, and Cognition 32, 2 (2006), 183.

[32] BURR, W. E., DODSON, D. F., AND POLK, W. T. Elec-
tronic Authentication Guideline. NIST Special Publication 800-
63 (2006).

[33] CAMERON, K. A., HAARMANN, H. J., GRAFMAN, J., AND
RUCHKIN, D. S. Long-term memory is the representational basis
for semantic verbal short-term memory. Psychophysiology 42, 6
(2005), 643–653.

[34] CAPLE, C. The Effects of Spaced Practice and Spaced Review on
Recall and Retention Using Computer Assisted Instruction. PhD
thesis, North Carolina State University, 1996.

[35] CEPEDA, N. J., PASHLER, H., VUL, E., WIXTED, J. T., AND
ROHRER, D. Distributed practice in verbal recall tasks: A review
and quantitative synthesis. Psychological Bulletin 132, 3 (2006),
354.

[36] CHIASSON, S., FORGET, A., BIDDLE, R., AND VAN
OORSCHOT, P. C. Inﬂuencing users towards better passwords:
persuasive cued click-points. In Proceedings of the 22nd British
HCI Group Annual Conference on People and Computers: Cul-
ture, Creativity, Interaction-Volume 1 (2008), British Computer
Society, pp. 121–130.

[37] CHIASSON, S., VAN OORSCHOT, P. C., AND BIDDLE, R.
Graphical password authentication using cued click points.
In
Computer Security–ESORICS 2007. Springer, 2007, pp. 359–
374.

[20] BONNEAU, J., HERLEY, C., VAN OORSCHOT, P. C., AND STA-
JANO, F. The Quest to Replace Passwords: A Framework for
Comparative Evaluation of Web Authentication Schemes.
In
2012 IEEE Symposium on Security and Privacy (May 2012).

[38] CLAIR, L. S., JOHANSEN, L., ENCK, W., PIRRETTI, M.,
TRAYNOR, P., MCDANIEL, P., AND JAEGER, T. Password ex-
haustion: Predicting the end of password usefulness. In Informa-
tion Systems Security. Springer, 2006, pp. 37–55.

620  23rd USENIX Security Symposium 

USENIX Association

14

[39] DAVIS, D., MONROSE, F., AND REITER, M. K. On User Choice
in Graphical Password Schemes. In USENIX Security Symposium
(2004), vol. 13, pp. 11–11.

[57] KELSEY, J., SCHNEIER, B., HALL, C., AND WAGNER, D. Se-
cure applications of low-entropy keys. In Information Security.
Springer, 1998, pp. 121–134.

[40] DHAMIJA, R., AND PERRIG, A. D´ej`a Vu: A User Study Using
Images for Authentication. In Proceedings of the 9th Conference
on USENIX Security Symposium - Volume 9 (Berkeley, CA, USA,
2000), SSYM’00, USENIX Association, pp. 4–4.

[41] DI CRESCENZO, G., LIPTON, R., AND WALFISH, S. Perfectly
In

secure password protocols in the bounded retrieval model.
Theory of Cryptography. Springer, 2006, pp. 225–244.

[42] DUGGAN, G. B., JOHNSON, H., AND GRAWEMEYER, B. Ra-
tional security: Modelling everyday password use. International
Journal of Human-Computer Studies 70, 6 (2012), 415–431.

[43] EBBINGHAUS, H. ¨Uber das ged¨achtnis: untersuchungen zur ex-

perimentellen psychologie. Duncker & Humblot, 1885.

[44] FAHL, S., HARBACH, M., ACAR, Y., AND SMITH, M. On the
ecological validity of a password study.
In Proceedings of the
Ninth Symposium on Usable Privacy and Security (2013), ACM,
p. 13.

[45] GANESAN, R., DAVIES, C., AND ATLANTIC, B. A new attack
on random pronounceable password generators. In Proceedings
of the 17th {NIST}-{NCSC} National Computer Security Con-
ference (1994).
[46] GASSER, M. A random word generator for pronounceable pass-

words. Tech. rep., DTIC Document, 1975.

[47] GREENE, R. L. Spacing effects in memory: Evidence for a two-
process account. Journal of Experimental Psychology: Learning,
Memory, and Cognition 15, 3 (1989), 371.

[48] JAKOBSSON, M., YANG, L., AND WETZEL, S. Quantifying the
security of preference-based authentication.
In Proceedings of
the 4th ACM Workshop on Digital Identity Management (2008),
ACM, pp. 61–70.

[49] JERMYN, I., MAYER, A., MONROSE, F., REITER, M. K., RU-
BIN, A. D., ET AL. The design and analysis of graphical pass-
words. In Proceedings of the 8th USENIX Security Symposium
(1999), vol. 8, Washington DC, pp. 1–1.

[50] JEYARAMAN, S., AND TOPKARA, U. Have the cake and eat it
too—Infusing usability into text-password based authentication
systems.
In Computer Security Applications Conference, 21st
Annual (2005), IEEE.

[51] JOSEFSSON, S. The Base16, Base32, and Base64 Data Encod-

ings. RFC 4648 (Proposed Standard), Oct. 2006.

[52] JUELS, A., AND RIVEST, R. L. Honeywords: Making Password-
cracking Detectable. In Proceedings of the 2013 ACM SIGSAC
Conference on Computer & Communications Security (New
York, NY, USA, 2013), CCS ’13, ACM, pp. 145–160.

[53] KARPICKE, J. D., AND ROEDIGER III, H. L. Expanding re-
trieval practice promotes short-term retention, but equally spaced
retrieval enhances long-term retention. Journal of Experimental
Psychology: Learning, Memory, and Cognition 33, 4 (2007), 704.
[54] KAUFMAN, C., PERLMAN, R., AND SPECINER, M. Network
security: Private communication in a public world. Prentice Hall
Press, 2002.

[55] KEITH, M., SHAO, B., AND STEINBART, P. J. The usability of
passphrases for authentication: An empirical ﬁeld study. Interna-
tional Journal of Human-Computer Studies 65, 1 (2007), 17–28.
[56] KELLEY, P. G., KOMANDURI, S., MAZUREK, M. L., SHAY,
R., VIDAS, T., BAUER, L., CHRISTIN, N., CRANOR, L. F.,
AND LOPEZ, J. Guess again (and again and again): Measuring
password strength by simulating password-cracking algorithms.
In 2012 IEEE Symposium on Security and Privacy (2012), IEEE,
pp. 523–537.

[58] KING, M. Rebus passwords.

In Proceedings of the Seventh
Annual Computer Security Applications Conference, 1991 (Dec
1991), pp. 239–243.

[59] KITTUR, A., CHI, E. H., AND SUH, B. Crowdsourcing User
Studies with Mechanical Turk.
In Proceedings of the SIGCHI
Conference on Human Factors in Computing Systems (New York,
NY, USA, 2008), CHI ’08, ACM, pp. 453–456.

[60] KOMANDURI, S., SHAY, R., KELLEY, P. G., MAZUREK, M. L.,
BAUER, L., CHRISTIN, N., CRANOR, L. F., AND EGELMAN,
S. Of passwords and people: measuring the effect of password-
composition policies.
In Proceedings of the SIGCHI Confer-
ence on Human Factors in Computing Systems (2011), ACM,
pp. 2595–2604.

[61] KURZBAN, S. A. Easily Remembered Passphrases: A Better

Approach. SIGSAC Rev. 3, 2-4 (Sept. 1985), 10–21.

[62] LANDAUER, T., AND BJORK, R. Optimum rehearsal patterns
and name learning. InM. M. Gruneberg, PE Morris, & RN Sykes
(Eds.), Practical aspects of memory (pp. 625-632), 1978.

[63] LASTPASS.

Notiﬁcation.

LastPass

Security

http://blog.lastpass.com/2011/05/lastpass-security-
notiﬁcation.html.

[64] LEONHARD, M. D., AND VENKATAKRISHNAN, V. A compar-
ative study of three random password generators. In IEEE EIT
(2007).

[65] MEUNIER, P. C. Sing-a-Password: Quality Random Password

Generation with Mnemonics. 1998.

[66] MORRIS, R., AND THOMPSON, K. Password Security: A Case

History. Communications of the ACM 22, 11 (1979), 594–597.

[67] MUNROE, R. Password Strength. https://www.xkcd.com/

936/, 2012.

[68] PAVLIK, P. I., AND ANDERSON, J. R. Using a model to com-
pute the optimal schedule of practice. Journal of Experimental
Psychology: Applied 14, 2 (2008), 101.

[69] PERCIVAL, C. Stronger key derivation via sequential memory-

hard functions. 2009.

[70] PIMSLEUR, P. A memory schedule. Modern Language Journal

(1967), 73–75.

[71] PROCTOR, R. W., LIEN, M.-C., VU, K.-P. L., SCHULTZ,
E. E., AND SALVENDY, G.
Improving computer security for
authentication of users: Inﬂuence of proactive password restric-
tions. Behavior Research Methods, Instruments, & Computers
34, 2 (2002), 163–169.

[72] PROVOS, N., AND MAZIERES, D. A Future-Adaptable Pass-
In USENIX Annual Technical Conference,

word Scheme.
FREENIX Track (1999), pp. 81–91.

[73] RABKIN, A. Personal knowledge questions for fallback authenti-
cation: Security questions in the era of Facebook. In Proceedings
of the 4th Symposium on Usable Privacy and Security (2008),
ACM, pp. 13–23.

[74] ROSS, J., IRANI, L., SILBERMAN, M. S., ZALDIVAR, A., AND
TOMLINSON, B. Who Are the Crowdworkers?: Shifting De-
mographics in Mechanical Turk. In CHI ’10 Extended Abstracts
on Human Factors in Computing Systems (New York, NY, USA,
2010), CHI EA ’10, ACM, pp. 2863–2872.

[75] SANCHEZ, D. J., GOBEL, E. W., AND REBER, P. J. Performing
the unexplainable: Implicit task performance reveals individually
reliable sequence learning without explicit knowledge. Psycho-
nomic Bulletin & Review 17, 6 (2010), 790–796.

USENIX Association  

23rd USENIX Security Symposium  621

15

[76] SCHECHTER, S., BRUSH, A. B., AND EGELMAN, S.

It’s No
Secret. Measuring the Security and Reliability of Authentication
via “Secret” Questions. In Security and Privacy, 2009 30th IEEE
Symposium on (2009), IEEE, pp. 375–390.

[77] SHAY, R., KELLEY, P. G., KOMANDURI, S., MAZUREK, M. L.,
UR, B., VIDAS, T., BAUER, L., CHRISTIN, N., AND CRANOR,
L. F. Correct horse battery staple: Exploring the usability of
system-assigned passphrases. In Proceedings of the Eighth Sym-
posium on Usable Privacy and Security (2012), ACM, p. 7.

[78] STOBERT, E. A. Memorability of Assigned Random Graphical

Passwords. Master’s thesis, Carleton University, 2011.

[79] STROOP, J. R. Studies of Interference in Serial Verbal Reactions.
Journal of Experimental Psychology 18, 6 (Dec. 1935), 643–662.
Inkblot authentication.

[80] STUBBLEFIELD, A., AND SIMON, D.

Microsoft Research (2004).

[81] TAO, H., AND ADAMS, C. Pass-Go: A Proposal to Improve
the Usability of Graphical Passwords. IJ Network Security 7, 2
(2008), 273–292.

[82] THE ETHICAL RESEARCH PROJECT.

Post-experiment sur-
vey for deception studies. https://www.ethicalresearch.
org/.

[83] VAN OORSCHOT, P. C., AND THORPE, J. On predictive mod-
els and user-drawn graphical passwords. ACM Transactions on
Information and System Security (TISSEC) 10, 4 (2008), 5.

[84] VAN OORSCHOT, P. C., AND THORPE, J. Exploiting predictabil-
ity in click-based graphical passwords. Journal of Computer Se-
curity 19, 4 (2011), 669–702.

[85] VERAS, R., COLLINS, C., AND THORPE, J. On the semantic
patterns of passwords and their security impact. In Network and
Distributed System Security Symposium (NDSS’14) (2014).

[86] VU, K.-P. L., PROCTOR, R. W., BHARGAV-SPANTZEL, A.,
TAI, B.-L. B., COOK, J., AND EUGENE SCHULTZ, E.
Im-
proving password security and memorability to protect personal
and organizational information. International Journal of Human-
Computer Studies 65, 8 (2007), 744–757.

[87] WEINSHALL, D., AND KIRKPATRICK, S. Passwords You’ll
Never Forget, but Can’t Recall. In CHI ’04 Extended Abstracts
on Human Factors in Computing Systems (New York, NY, USA,
2004), CHI EA ’04, ACM, pp. 1399–1402.

[88] WIEDENBECK, S., WATERS, J., BIRGET, J.-C., BRODSKIY,
A., AND MEMON, N. PassPoints: Design and longitudinal eval-
uation of a graphical password system. International Journal of
Human-Computer Studies 63, 1 (2005), 102–127.

[89] WIXTED, J. T. The psychology and neuroscience of forgetting.

Annual Psychology Review 55 (2004), 235–269.

[90] WOOD, H. M. The use of passwords for controlled access to
computer resources, vol. 500. US Department of Commerce, Na-
tional Bureau of Standards, 1977.

[91] WOZNIAK, P. SuperMemo 2004. TESL EJ 10, 4 (2007).
[92] YAN, J. J., BLACKWELL, A. F., ANDERSON, R. J., AND
GRANT, A. Password Memorability and Security: Empirical Re-
sults. IEEE Security & privacy 2, 5 (2004), 25–31.

[93] ZVIRAN, M., AND HAGA, W. User authentication by cognitive
passwords: an empirical assessment. In Proceedings of the 5th
Jerusalem Conference on Information Technology (Oct 1990),
pp. 137–144.

[94] ZVIRAN, M., AND HAGA, W. J. Passwords Security: An Ex-

ploratory Study. Tech. rep., Naval Postgraduate School, 1990.

[95] ZVIRAN, M., AND HAGA, W. J. Password security: an empirical
study. Journal of Management Information Systems 15 (1999),
161–186.

622  23rd USENIX Security Symposium 

USENIX Association

16

abuse
able
alarm
air
army
area
auto
aura
begin
beer
board
blue
broth
brief
call
cadet
cider
chute
color
cog
curve
cups
desk
depot
drop
drive
edge
echo
era
equal
far
fancy
ﬁfty
ﬁeld
folk
foe
fuzzy
fused
glory
gleam
guide
guess
head
hazy
hot
hoop
inch
image
job
jewel
kiss
king
lava
laugh
link
limit
loud
love
march mason
model
mixed
nap
myth
note
noun
optic
open
path
pass
pipe
piece
porch
poppy
queen
quite
reply
rents
roll
rock
salt
saga
sewer
seven
skew
six
snake
sneer
split
spine
sum
suit
tax
taste
tidal
tiara
torso
total
turn
tuna
value
usual
visit
vital

acid
album
aroma
aware
belly
body
brute
camp
cigar
comic

cut
diary
drug
edit
error
fatal
ﬁlm
foot
gala
glut
gulf
heel
house
index
join
knee
law
lion
lowly
may
moist
navy
novel
orbit
pause
pitch
posse
radio
resin
room
same
share
skin
snout
spoke
super
teak
tiger
touch
tutor
vapor
vivid

acorn
alert
arrow
awful
bench
bogus
buddy
can
city
copy
cycle
diet
dry
egg
essay
fault
ﬁnd
form
gang
goat
gym
help
huge
inner
joke
knife
layer
lip
luck
meat
mole
neck
numb
order
pawn
pivot
power
ram
rhyme
rope
satin
she
skull
snug
spur
surf
tempo

tilt
town
twist
vat

vogue

acre
alive
arson
axis
best
bolt
buff
cargo
civil
cord
daily
dim
due
elbow
ether
favor
ﬁrst
four
gas
good
habit
hem
human
input
jolly
known
leaf
liter
lunch
media
mom
need
nurse
organ
pearl
place
press
range
rib

rough
sauce
ship
sky
soap
squad
sway
ten
time
trade
two
vein
voice

actor
ally
ask
baby
bias
bones
bugle
case
class
cost
dance
ditto
dust
elder
event
feast
ﬁt

foyer
gauge
gorge
half
here
hurt
iris
judge
labor
left
loan
lynx
melon
money
neon
nylon
ounce
pedal
plea
price
rapid
rich
row
scale
show
slack
soda
state
sweet
term
title
trend
type
verse
voter

add
amber
aspen
back
big
book
build
cedar
clear
court
dark
dizzy
duty
elite
exact
feet
ﬂat
frame
gaze
gourd
hand
high
husk
iron
juice
lady
legal
lobby
lyric
memo
moral
new
oak
outer
peg
plot
proof
rate
ridge
royal
scene
shrub
sleep
solid
step
swift
text
toast
trial
ultra
veto
vowel

adobe
ample
asset
bad
birth
born
bulk
cello
climb
cover
dash
dose
dwarf
elm
exile
fence
ﬂesh
free
gel
grace
happy
hike
hyper
issue
junk
laid
lemon
local
madam
menu
motor
nine
oats
oval
penny
plug
pub
razor
right
ruby
scope
sick
slice
sonic
stiff
sword
thank
today
trout
uncle
video
wafer

aft
adult
anvil
angle
atom
atlas
bare
baker
bite
bison
bowl
bound
butt
burst
chair
cent
club
clock
crew
craft
death
data
downy
doubt
early
eager
end
empty
eye
extra
fetch
ferry
ﬂow
ﬂint
fruit
front
giant
ghost
grid
great
hasty
harsh
hoax
hint
idea
ice
ivory
item
karma
jury
lane
lamb
level
lens
logic
lodge
main
magic
mercy
mess
mouth moved
nod
noble
ocean
offer
pale
owner
petty
peril
point
poet
pump
pulse
real
rebel
rise
riot
rumor
rule
sedan
scrap
siege
side
slump
sloth
soon
sort
straw
story
taboo
syrup
thing
theft
tomb
token
true
tube
upper
union
vigor
view
wagon
wait

age
apply
attic
basis
blame
box
buy
check
coal
crime
debt
dozen
easy
enemy
fact
feud
ﬂuid
full
gift
group
haul
holy
idle
ivy
keep
lapse
lies
long
major
metal
mud
noise
oil
panic
phase
polo
pupil
red
river
run
sense
sign
small
soul
study
tail
thorn
tons
tuft
urban
vinyl
waltz

agony
arbor
aunt
beam
bloom
break
cabin
chose
code
cruel
delay
dream
ebb
envy
false
ﬁber
focus
funny
glad
guard
hawk
honor

agile
apron
audit
baton
blind
brain
buzz
child
cobra
crown
decoy
drawn
eaten
entry
faith
fever
ﬂy
fume
give
grub
haven
home
idol
ill
jade
jazz
key
kid
large
last
life
lily
loose
loss
mango maple
minor
milk
mute
music
north
nomad
one
part
piano
poor
quart
relic
robot
rush
set
siren
smile
speak
sugar
talk
thumb

old
paper
phone
pond
pure
reef
road
rural
serve
silly
smear
space
style
take
three
tooth
tug
urge
viper
warm

top
tulip
user
virus
wasp

Table 3: The 676 (262) words used by the words treatment

17

USENIX Association  

23rd USENIX Security Symposium  623

