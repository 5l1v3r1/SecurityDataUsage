Sneaking Past the Firewall: Quantifying the

Unexpected Trafﬁc on Major TCP and UDP Ports

Shane Alcock

University of Waikato

Hamilton, New Zealand
salcock@waikato.ac.nz

Jean-Pierre Möller
University of Waikato

Richard Nelson

University of Waikato

Hamilton, New Zealand
jp.moller78@gmail.com

Hamilton, New Zealand

richardn@waikato.ac.nz

ABSTRACT
This study aims to identify and quantify applications
that are making use of port numbers that are typi-
cally associated with other major Internet applications
(i.e. port 53, 80, 123, 443, 8000 and 8080) to bypass
port-based traﬃc controls such as ﬁrewalls. We use
lightweight packet inspection to examine each ﬂow ob-
served using these ports on our campus network over the
course of a week in September 2015 and identify appli-
cations that are producing network traﬃc that does not
match the expected application for each port. We ﬁnd
that there are numerous programs that co-opt the port
numbers of major Internet applications on our campus,
many of which are Chinese in origin and are not recog-
nized by existing traﬃc classiﬁcation tools. As a result
of our investigation, new rules for identifying over 20
new applications have been made available to the re-
search community.

Keywords
traﬃc classiﬁcation; ﬁrewalls; application protocols

1.

INTRODUCTION

Practical network operations are still heavily depen-
dent on port numbers from transport layer headers (i.e.
TCP and UDP) for traﬃc control purposes [6]; ﬁrewall
rules being one of the more obvious examples. Port-
based controls are popular because they are easy, and
therefore cheap, to implement in hardware and because
they are simple for operators to comprehend. The prob-
lem with port-based approaches is that port numbers
cannot reliably identify all applications. Peer-to-peer

Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.

IMC ’16, November 14–16, Santa Monica, CA, USA.

c(cid:13) 2016 ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987447

(P2P) applications, in particular, have long been us-
ing random port numbers to avoid having their traf-
ﬁc dropped or rate-limited by network operators [11].
In response, standard operating practice has moved to-
wards a ‘default deny’ approach to ﬁrewalling, particu-
larly within corporate or campus networks, where only
traﬃc on ports associated with essential services is al-
lowed to traverse protected segments of the network.

However, this ignores another problem: what if other
applications start using the ports that are typically as-
sociated with the essential services? Previous research
has already identiﬁed that not all TCP port 80 traﬃc is
HTTP [5] [8] [10] [15], although in each study the ‘un-
expected’ traﬃc on TCP port 80 was not analyzed in
depth or associated with particular applications. Other
ports used by essential services have been ignored in
past research, such as TCP port 443 (HTTPS), UDP
port 53 (DNS) and the alternative HTTP ports (TCP
port 8080 and 8000). As a result, we know that these
ports may be sometimes used by other applications but
little about which applications are doing so and the
amount of traﬃc that these applications are ‘sneaking’
past port-based traﬃc controls.

In this paper, we investigate and catalogue unex-
pected traﬃc on the set of ports that are most likely to
be open on many, if not all, ﬁrewalls: port 53, 80, 443,
8000, 8080 and 123. Our aim is to not just demonstrate
that unexpected traﬃc exists on these ports (as this has
already been established in previous literature), but to
also investigate further and try to correctly identify the
applications responsible for as much of the unexpected
traﬃc as possible.

Using a week-long packet capture from our campus
network and the libprotoident [1] traﬃc classiﬁcation
library, we have successfully identiﬁed many of the ap-
plications that were using these port numbers and can
therefore bypass a typical ﬁrewall conﬁguration unde-
tected. We also quantify the eﬀect of these applications
in terms of the number of ﬂows and amount of bytes
that each application was contributing. Many of the ap-
plications that we identiﬁed originate from China and,
as far as we are aware, were not able to be recognized
by existing open-source traﬃc classiﬁers prior to this

231research being conducted. Rules for 22 new application
protocols have been added to libprotoident and made
freely available through the latest software release.

Because our analysis is from a single campus network
with a high proportion of Chinese and Taiwanese over-
seas students (8.4% of students are from China / Tai-
wan), we recognize that it would not be appropriate to
generalize our observations to the Internet as a whole.
Rather, we present this study as an single data point
that can be compared against by people with access to
datasets from other networks with diﬀerent demograph-
ics. To aid in the continuation of study in this area, the
new protocol matching rules that we developed have
been included in the latest libprotoident release and are
therefore freely available to other researchers.

2. METHODOLOGY

2.1 Packet Traces

The traceset used in this analysis consists of seven
days and seven hours of packet capture taken in Septem-
ber 2015 at the University of Waikato, during a teaching
semester at the University. During this period, 8.4% of
enrolled students (1,048 out of 12,502 enrolments) were
international students from either China or Taiwan; the
relevance of this statistic will become apparent when we
present our results in Section 3.

The packets were captured using an Endace Probe
that was installed at the edge of the campus network,
outside the campus ﬁrewall. In this location, the Probe
was able to observe all traﬃc entering and exiting the
University. The packets captured by the Probe were for-
warded to an instance of our custom WDCap trace cap-
ture software [17] that was running in a virtual machine
on the probe. WDCap was conﬁgured to anonymize the
local IP address (i.e. the University address) using the
standard preﬁx-preserving CryptoPAn method [9] and
to truncate each packet to contain no more than four
bytes of post-transport header payload. Both of these
modiﬁcations were to preserve the privacy of the net-
work users. The remote IP address was left unmodiﬁed
(with permission from the University); this was primar-
ily to aid us in identifying the source of new applications
encountered during our analysis.

2.2 Libprotoident

Libprotoident [1] is a software library for lightweight
traﬃc classiﬁcation that can identify the application
protocol being used by network ﬂows based on the con-
tents of the ﬁrst four bytes of payload sent in each
direction, the size of the ﬁrst packet sent in each di-
rection and the port numbers used by each endpoint.
Unlike some classiﬁcation techniques, libprotoident as-
sumes the IP addresses for each ﬂow are anonymized
so the addresses are not used for classiﬁcation. De-
spite using such limited information, libprotoident has
compared favorably with other open-source DPI-based
classiﬁers in terms of accuracy [2] [4].

The analysis presented in this paper was conducted
using the lpi_protoident tool that is included with
the libprotoident library. This tool prints a single line
of output for each bidirectional ﬂow found in the in-
put traﬃc dataset containing the ﬂow 5-tuple, the time
that the ﬂow began, the number of bytes sent in each di-
rection and the application protocol that libprotoident
has assigned to that ﬂow. TCP ﬂows where a com-
plete handshake was not observed are ignored, as we
cannot be certain that the ﬁrst payload-bearing pack-
ets for those ﬂows will have been observed. For UDP,
we already have to accept that the ﬁrst payload-bearing
packets may be missing, even if the ﬂow begins and ends
within the time period covered by our dataset, so all
observed ﬂows are reported. Flows are expired after ei-
ther a period of inactivity (2 minutes for UDP ﬂows and
unestablished TCP ﬂows, 2 hours for established TCP
ﬂows) or the observation of a connection termination
signal (e.g. a TCP RST or a FIN in both directions).

To prevent scans, backscatter and other unsolicited
traﬃc from aﬀecting our results, we ignored all ﬂows
where both endpoints did not participate in the ﬂow.
For TCP ﬂows, the handshake must have been com-
pleted successfully and at least one endpoint must have
sent a packet bearing payload. For UDP ﬂows, only
ﬂows where both endpoints had sent a payload-bearing
packet have been included in the analysis.

Our initial attempt at analysis with the most recent
libprotoident release resulted in a signiﬁcant quantity
of unidentiﬁed traﬃc. As a result, much of the research
eﬀort in this study was in developing new libprotoident
rules to reduce the amount of unidentiﬁed traﬃc in our
dataset as much as possible. As a result, we have been
able to add rules to libprotoident for 22 new applica-
tions, as well as improve the quality of the rules for
a further 10 applications that were already supported.
Most of the new applications are Chinese in origin and
include Kankan, Kakao, Weibo, Kugou and Xiami.

Space limitations mean that we are unable to fully
describe the changes to libprotoident here; instead, we
have created a companion webpage 1 for interested read-
ers with more detail on the new applications that we
have identiﬁed as a result of this work and the rules
that we have written to match them. The new and
improved protocol rules have also been made available
publicly in the 2.0.8 release of libprotoident, which is
open-sourced under the GPL.

3. RESULTS

Table 1 shows the amount of expected and unex-
pected traﬃc in our dataset for each of the ports that
we investigated. We consider traﬃc on a port to be ‘un-
expected’ if the application protocol does not match the
protocol that one would expect to see on that port. For
each port number, we examined both TCP and UDP

1https://secure.wand.net.nz/content/sneaking-past-
ﬁrewall-paper-addendum

232Port
TCP 53
TCP 80
TCP 123
TCP 443
TCP 8000 HTTP
TCP 8080 HTTP
DNS
UDP 53
HTTP
UDP 80
NTP
UDP 123
UDP 443
QUIC
UDP 8000 HTTP
UDP 8080 HTTP

Protocol Expected Bytes
1.4 G (74.6 %)
DNS
HTTP
11 T (99.8 %)
None (0.00 %)
NTP
12 T (99.3 %)
HTTPS
4.2 G (98.9 %)
24 G (32.6 %)
127 G (95.3 %)
None (0.00 %)
16 G (99.99 %)
1.4 T (99.8 %)
None (0.00 %)
None (0.00 %)

Expected Flows Unexpected Bytes Unexpected Flows
137 K (7.0 %)
1.8 M (93.0 %)
59 M (99.3 %)
406 K (0.7 %)
236 (100 %)
0 (0.00%)
421 K (0.7 %)
64 M (99.3 %)
11 K (38.5 %)
18 K (61.5 %)
193 K (63.0 %)
113 K (37.0 %)
91 K (0.03 %)
364 G (99.97 %)
90 K (100 %)
0 (0.00%)
609 (0.01 %)
123 M (99.99 %)
93 K (2.7 %)
3.4 M (97.3 %)
0 (0.00%)
167 K (100 %)
30 K (100 %)
0 (0.00%)

463 M (25.4 %)
26 G (0.2 %)
293 K (100 %)
89 G (0.7 %)
45 M (1.1 %)
50 G (67.4 %)
6.2 G (4.7 %)
7 G (100 %)
274 K (0.01 %)
2.2 G (0.2 %)
13 G (100 %)
38 G (100 %)

Table 1: Expected and unexpected traﬃc volumes on each port analyzed for this study.

traﬃc as the IANA port number registry often assigns
both the TCP and UDP port numbers to the same
application (for example, UDP port 80 is assigned to
HTTP), so it is possible that an operator might open
these ports for both transport protocols.

Table 1 includes counts for both traﬃc volumes (as
bytes) and unique ﬂows. We designated QUIC as the
expected protocol for UDP port 443, even though the
IANA registry has UDP port 443 assigned as HTTPS,
because it was clear from our initial analysis that QUIC
was the primary user of this port. The volume of QUIC
traﬃc that we observed on our campus network was
much higher than we had anticipated (1.4 TB), almost
all of which was coming from Google Global Cache
nodes. This demonstrates that Google is now using
QUIC to distribute a large proportion of content, which
we believe will have a major impact on how Google ser-
vices, especially YouTube, are measured and monitored.
Only in ﬁve out of twelve cases did the expected
protocol accounts for more than 95% of the ﬂows and
bytes observed for a port number. Even in these cases,
a closer examination of the absolute quantities reveals
that there was still a signiﬁcant amount of unexpected
traﬃc present on some ports. For instance, there was 89
GB of non-HTTPS traﬃc on TCP port 443 and a fur-
ther 26 GB of non-HTTP traﬃc on TCP port 80. The
remaining seven ports have been more clearly co-opted
by other applications. On TCP port 8080, the amount
of HTTP traﬃc was outweighed by non-HTTP traﬃc
by a ratio of 2:1 and there was 38 GB of traﬃc observed
on UDP port 8080, none of which matched the protocol
assigned to that port by IANA.

Tables 2 through to 11 show the most prominent un-
expected applications observed on each of the analyzed
ports. We have omitted the tables for TCP and UDP
port 123 as these ports had so little unexpected traﬃc
that they did not warrant further analysis. In the ta-
bles, ‘Unknown’ represents ﬂows that libprotoident was
unable to assign to a particular protocol and ‘Other’
refers to ﬂows that matched a protocol that neither con-
tributed a suﬃcient number of bytes or ﬂows to deserve

Protocol

Youku
Unknown
OpenVPN
Other (2)

(%)
93.3
4.48
2.20
0.02

Bytes Flows Remote Local
IPs
12
45
31
-

(%)
0.71
88.9
10.3
0.09

IPs
776
345
188
-

Table 2: Non-DNS Applications observed using
TCP port 53 in the Waikato traces.

a separate row. The number of unique applications rep-
resented by the ‘Other’ category are included in paren-
theses next to the label.

We have also included the number of unique local
and remote IP addresses (as they appeared in the IP
headers of the packets in our traces) that were observed
using each application. These numbers are included to
demonstrate that much of the behavior that we are re-
porting is not necessarily limited to just one or two net-
work users or servers. However, because many of the
student subnets on our campus use DHCP to lease IP
addresses to users and a single user could therefore lease
multiple addresses over the duration of our dataset, the
local IP numbers should be seen as only an approxima-
tion of the number of users for each application.

3.1 TCP Ports

Youku, a Chinese video hosting and streaming ser-
vice similar to YouTube, was responsible for 93.3% of
the unexpected traﬃc on TCP port 53, as shown in Ta-
ble 2. The number of Youku ﬂows observed was small:
less than 1% of unexpected ﬂows. Most of the unex-
pected ﬂows were categorized as Unknown by libpro-
toident; manual analysis of these ﬂows suggested that
they are most likely DNS requests that did not receive a
response. Because libprotoident cannot be certain that
the traﬃc was DNS without seeing the identiﬁcation
ﬁeld of the response packet, the ﬂows were reported as
Unknown. The only other protocol to feature promi-
nently on TCP port 53 was OpenVPN, which was re-
sponsible for 10.3% of unexpected ﬂows.

233Protocol

(%)
47.7
RTMP
15.0
Unknown
13.4
Taobao
11.4
Spotify
3.70
SPDY
3.35
WeChat
2.56
Invalid HTTP
0.68
HTTPS
BadBaidu
0.05
NortonBackup <0.01
2.36
Other (36)

Bytes Flows Remote Local
IPs
301
3,681
269
2,039
628
3,055
723
3,976
1,832
52
-

IPs
96
5,835
8
113
73
47
731
598
2,594
4
-

(%)
1.79
16.3
0.49
1.93
1.74
8.18
2.36
5.37
38.6
10.9
12.4

Table 3: Non-HTTP Applications observed us-
ing TCP port 80 in the Waikato traces.

Protocol

RTMP
HTTP
Spotify
WeChat
Runescape
Unknown
CrashPlan
Telegram
Taobao
WhatsApp
Line
Other (33)

Bytes Flows Remote Local
IPs
1,587
3,918
2,100
3,258
50
4,754
36
230
552
3,288
1,463
-

IPs
82
386
118
66
73
3,385
13
19
79
400
22
-

(%)
77.3
5.92
4.65
4.35
3.30
2.04
1.22
0.23
0.20
0.20
0.11
0.44

(%)
2.37
10.8
1.86
12.5
0.19
17.0
0.05
1.84
1.18
13.7
6.13
30.4

Table 4: Non-HTTPS Applications observed us-
ing TCP port 443 in the Waikato traces.

There was a much larger variety of application pro-
tocols observed on TCP port 80; in total, 46 unique
application protocols were reported by libprotoident as
using TCP port 80. Table 3 shows the major contribu-
tors of unexpected traﬃc on TCP port 80. RTMP (i.e.
Flash) was the biggest contributor by traﬃc volume,
producing nearly half of the non-HTTP traﬃc observed
on TCP port 80. Traﬃc associated with the Chinese
online marketplace Taobao (or its parent company Al-
ibaba) comprised a further 3.4 GB of traﬃc, closely fol-
lowed by the music-streaming application Spotify with
2.9 GB. SPDY, an application protocol developed by
Google for faster delivery of web content, is responsible
for nearly 1 GB of TCP port 80 traﬃc, much less than
the 1.4 TB of QUIC traﬃc seen on UDP port 443.

Another protocol that we observed on TCP port 80
that is worth mentioning is the ‘BadBaidu’ protocol,
which is associated with use of the Baidu web browser
and has some peculiar characteristics. Periodically, the
host running the browser would make an outbound TCP
connection to one of a large number of Baidu-controlled
servers. Once the handshake was complete, the client

Protocol

Shoutcast
RTMP
Unknown
BitTorrent
QQ
Other (6)

Bytes Flows Remote Local
IPs
2
85
242
11
362
-

(%)
34.1
27.0
22.7
7.33
3.86
5.01

(%)
0.08
54.7
12.7
0.57
31.0
0.87

IPs
2
7
117
9
17
-

Table 5: Non-HTTP Applications observed us-
ing TCP port 8000 in the Waikato traces.

Protocol

(%)
64.3
Xunlei
28.2
Xunlei VIP
5.18
Speedtest
1.08
Unknown
0.76
WeChat
0.35
QQ
0.04
SSL/TLS
0.03
RTMP
Weibo
0.02
Other (16) <0.01

Bytes Flows Remote Local
IPs
19
23
21
2,775
3,068
1,288
14
221
1,213
-

(%)
5.92
0.81
0.23
27.4
28.6
7.70
0.29
11.6
10.9
6.52

IPs
506
222
7
737
43
147
15
11
9
-

Table 6: Non-HTTP Applications observed us-
ing TCP port 8080 in the Waikato traces.

would then send a FIN ACK packet which received no
response from the server. The client would typically re-
transmit this packet ﬁve times, before sending a packet
with a single byte of payload (0x00) and an invalid se-
quence number2. The server will then reset the connec-
tion, presumably because of the invalid TCP behavior.
The purpose of these ﬂows is not entirely clear, but
the eﬀect was apparent in our results: we observed over
150,000 ﬂows from 1840 diﬀerent unique IP addresses
that matched the BadBaidu behavior in our one-week
long dataset. Because each ﬂow only generated one byte
of application payload, the traﬃc produced by this pro-
tocol was tiny; if we had focused on byte contributions
alone, this protocol would have gone unnoticed.

RTMP was an even larger contributor of unexpected
traﬃc on TCP port 443, as shown in Table 4. 69 of the
89 GB of unexpected traﬃc was attributed to RTMP.
The next biggest contributor was unencrypted HTTP
with 5.3 GB. Spotify and WeChat (a popular Chinese
messaging application) appear in Table 4, having pre-
viously been prominent on TCP port 80 as well. Other
messaging applications such as Telegram, WhatsApp
and Line produced large numbers of unexpected ﬂows,
suggesting that TCP port 443 is frequently used for en-
crypted messaging. This is probably due to two factors:
ﬁrstly, TCP port 443 is unlikely to be blocked by oper-
ators and, secondly, traﬃc on port 443 is expected to

2Speciﬁcally, the sequence number matches the number
consumed by the original outgoing SYN packet.

234Protocol

Youku
Avast DNS
Wolfenstein
360.cn
WeChat
Fortinet
Unknown
Other (11)

Bytes Flows Remote Local
IPs
17
82
1
682
5
1
367
-

(%)
(%)
13.0
95.2
1.70
14.2
1.69 <0.01
36.1
0.66
0.29
0.02
3.14
0.24
31.4
0.18
0.01
2.19

IPs
8,734
94
2
160
3
22
1,674
-

Table 7: Non-DNS Applications observed using
UDP port 53 in the Waikato traces.

Protocol

WeChat
Wolfenstein
Unknown
BitTorrent
QQLive
Gnutella
Other (10)

Bytes Flows Remote Local
IPs
261
1
751
492
136
165
-

IPs
9
20
419
1,092
22,815
13
-

(%)
92.6
3.67
3.57
0.35
0.26
0.13
0.36

(%)
0.81
0.02
4.51
13.9
31.9
47.3
1.57

Table 8: Applications observed using UDP port
80 in the Waikato traces.

be encrypted in some way so will not attract as much
scrutiny from DPI software.

Table 5 shows that TCP port 8000 was not heavily
utilized by unexpected applications. The two biggest
contributors, RTMP and Shoutcast (a media broadcast-
ing application), contributed just 28 MB of traﬃc com-
bined and there were only nine Shoutcast ﬂows on TCP
port 8000 in total. Another application worth mention-
ing was QQ, a Chinese messaging application, which
was responsible for 31% of the unexpected ﬂows.

By contrast, TCP port 8080 featured a large amount
of non-HTTP traﬃc, most of which was attributed to
Xunlei, a ﬁle download client that is popular in China.
Xunlei implements a custom protocol for P2P down-
loads which accounts for 32 GB of unexpected traﬃc on
TCP port 8080 (as seen in Table 6). The Xunlei client
also features the ability to accelerate a download using
a VIP service. This service allows users to download
parts of their ﬁle from copies stored on well-connected
servers hosted by Xunlei. The accelerated download
uses a separate protocol, which we have called Xunlei
VIP. Speedtest, the broadband speed test developed by
Ookla, is another major contributor, accounting for 2.6
GB of observed traﬃc on TCP port 8080.

3.2 UDP Ports

As with TCP port 53, Youku is the biggest source of
unexpected traﬃc on UDP port 53. Aside from Youku,
security-related applications appear frequently in Table
7: Avast DNS, 360.cn and Fortinet, for instance. Avast
DNS refers to the ‘Secure DNS’ replacement for regular

Protocol

Cisco VPN
Unknown
Avast DNS
OpenVPN
Skype
Other (8)

Bytes Flows Remote Local
IPs
2
172
91
4
3,025
-

(%)
(%)
81.3 <0.01
0.05
10.4
28.0
5.57
0.01
2.54
0.13
69.4
2.11
0.09

IPs
2
67
94
3
552
-

Table 9: Non-QUIC Applications observed using
UDP port 443 in the Waikato traces.

Protocol

QQ
Kugou
Unknown
QQ Live
QQPCMgr
Xunyou
Other (11)

Bytes Flows Remote Local
IPs
699
107
735
564
329
39
-

IPs
506
32,784
478
74
19
194
-

(%)
60.7
27.1
8.17
1.65
1.13
<0.01
1.23

(%)
28.5
24.9
12.6
5.89
18.0
8.48
1.68

Table 10: Applications observed using UDP port
8000 in the Waikato traces.

DNS that is included in some Avast security software.
We suspect that the 360.cn traﬃc is a similar service
for users of 360 Total Security from Qihoo.

For UDP port 80, 92.6% of the unexpected bytes were
attributed to WeChat, although there were only 735
ﬂows observed, as shown in Table 8. File sharing ap-
plications, including BitTorrent, QQLive and Gnutella,
were responsible for almost all of the unexpected ﬂows
on UDP port 80 but the small overall traﬃc volume
produced by these protocols suggest that UDP port 80
was being used for P2P network maintenance.

Once again, a single application dominates the unex-
pected bytes for UDP port 443; in this case, Table 9
shows that the Cisco SSL-based VPN protocol was re-
sponsible for 81.3% of the traﬃc volume. Interestingly,
this traﬃc was produced by just two UDP ﬂows. Skype
contributed the most unexpected ﬂows on UDP port
443 at 69.4%, but the large number of ﬂows resulted
in only 3 MB of traﬃc volume. Avast DNS was also
prominent on UDP port 443:
in this case, the traﬃc
was conventional DNS but sent to Avast servers that
are listening on UDP port 443.

UDP port 8000 was almost entirely used by Chinese
applications, as shown in Table 10. The biggest by traf-
ﬁc volume was Tencent QQ, which had also been promi-
nent on TCP port 8000. The other major contributor
of unexpected bytes was Kugou, a music streaming ap-
plication. QQ Live (video streaming), QQ PC Manager
(security / anti-virus) and Xunyou (game acceleration)
were large contributors of ﬂows on UDP port 8000.

Finally, Table 11 shows that there were two applica-
tions that were responsible for most of the traﬃc on

235Protocol

OpenVPN
WeChat
Xunlei
BitTorrent
Kankan
Unknown
Other (9)

Bytes Flows Remote Local
IPs
20
254
9
287
83
91
-

(%)
83.1
16.1
0.46
0.32
0.06
0.01
0.01

(%)
0.25
2.43
0.11
9.16
71.1
12.7
4.31

IPs
56
11
13
982
15
151
-

Table 11: Applications observed using UDP port
8080 in the Waikato traces.

UDP port 8080: OpenVPN (which contributed 31.4
GB) and WeChat (which produced 6.1 GB). As with
the Cisco VPN ﬂows on UDP port 443, the number
of OpenVPN ﬂows was relatively small for the amount
of traﬃc observed, suggesting that the VPNs were be-
ing used to transfer large ﬁles. Kankan, a P2P video
streaming application from the same company as Xun-
lei, was the biggest contributor of ﬂows on UDP port
8080. Based on the traﬃc volume observed, the Kankan
traﬃc was most likely to be used for P2P network main-
tenance rather than streaming the videos themselves.

4. RELATED WORK

The increasing disassociation between port numbers
and the applications that use them has been widely
studied and accepted with the research community, in-
cluding [6] [11] [12] to name but a few well-known pub-
lications. Most eﬀort in this area has been concerned
with ﬁnding new ways to identify applications (partic-
ularly P2P applications) that do not rely on port num-
bers. Deep or lightweight packet inspection have been
popular approaches [1] [7] and there has also been a
signiﬁcant amount of research into methods based on
statistical analysis and machine-learning [14] [16] [18].
Application mixes across all ports on a network have
also been well studied in the past, with [3] and [15] be-
ing two notable recent studies in this space.

More speciﬁcally, there have been several previous
works have identiﬁed non-HTTP applications that make
use of TCP port 80. In 2010, Dainotti et al. [5] demon-
strated a successful trained method for distinguishing
between HTTP and non-HTTP traﬃc on TCP port 80.
The authors found that approximately 5% of TCP port
80 packets were classiﬁed as non-HTTP. Much of this
traﬃc was further identiﬁed as P2P traﬃc but the au-
thors were unable to identify the application protocol
for nearly half of the non-HTTP ﬂows that they ob-
served, which suggests there may have been many other
unidentiﬁed applications that were also using TCP port
80 at that time.
Gebert et al.

[10] published an analysis in 2012 of
traﬃc from a German broadband wireless provider us-
ing OpenDPI (the forerunner to nDPI) and found that a
large proportion of the traﬃc that OpenDPI was unable

to identify appeared on TCP port 80. They also found
signiﬁcant quantities of BitTorrent and MSN Messenger
traﬃc on TCP port 80. TCP port 443 is also mentioned
as a contributor of unidentiﬁed traﬃc in the paper but
there is no mention of the applications that might be
responsible for that traﬃc. In 2006, Dreger et al. [8] rec-
ognized that applications could use TCP port 80 to by-
pass ﬁrewalls and published a table showing that there
is a proportion of ﬂows on TCP port 80 that did not
match the signature for HTTP included with l7-ﬁlter.
[13] examined the relationship between
TCP port 80 and HTTP traﬃc in 2009 and found that
98.1% of the bytes on TCP port 80 were HTTP, which
correlates reasonably well with our own ﬁndings, and
that Shoutcast was the largest non-HTTP application
on TCP port 80. More recently, Richter et al.
[15]
reported that less than 0.3% of TCP port 80 traﬃc ob-
served at a European IXP in 2013 did not involve a
known HTTP endpoint, therefore they assumed that
the traﬃc was most likely not HTTP.

Maier et al.

An important distinction between our work and these
previous studies is the greater depth in our analysis of
the unexpected traﬃc. We have taken the time to in-
vestigate and identify unknown application protocols so
that we are able to account for the majority of the traﬃc
we are studying. Furthermore, whereas only [10] looked
beyond TCP port 80, we have investigated other port
numbers that are associated with popular Internet ap-
plications, such as port 53, 443 and 8080.

5. CONCLUSION

This paper presents the results of an investigation
into unexpected traﬃc on the TCP and UDP ports that
are associated with core Internet applications such as
HTTP, HTTPS, DNS and NTP. The aim of this work
was to identify and quantify applications that may be
co-opting these ports to potentially bypass traditional
port-based traﬃc controls, such as ﬁrewalls.

This study examined traﬃc captured at the border of
the University of Waikato campus network in September
2015 and used the libprotoident software to categorize
the traﬃc based on the application protocol being used.
We researched payload patterns that libprotoident was
initially unable to identify and developed new rules for
many previously unknown application protocols. These
rules have been included in the latest release of libpro-
toident both for the beneﬁt of other researchers and to
demonstrate that these applications can easily be rec-
ognized through lightweight packet inspection.

While we found that in many cases the expected ap-
plication protocol accounted for the vast majority of
the ﬂows and bytes observed on the ports that we in-
vestigated, the absolute quantity of unexpected traﬃc
on some ports was not negligible. While this is not
an unprecedented result in itself, further investigation
of the unexpected traﬃc using libprotoident revealed
some interesting trends, particularly the large number

236of Chinese applications using ports that are commonly
associated with other applications. We also discovered
some strange behavior associated with the Baidu web
browser that was responsible for a huge number of un-
expected ﬂows on TCP port 80, each producing just a
single byte of application payload. The purpose of these
ﬂows remains unclear and this is one obvious avenue for
further investigation.

One caveat is that the predominance of Chinese ap-
plications in our results may be a speciﬁc quirk of our
dataset; 8.4% of students at the University of Waikato
are visitors from either China or Taiwan and the usage
of Chinese applications might not be as notable at other
campuses with diﬀerent demographics. For this reason,
we present this paper more as an interesting data point
that can be compared against by future studies rather
than a deﬁnitive result that can be generalized across
all networks.

However, this does not invalidate our ﬁnding that
these applications exist and are making use of the port
numbers noted in this paper; it simply means that the
relative impact of the Chinese applications may not
be as large on other networks, depending on the de-
mographics of the user population. As we have pub-
lished the protocol identiﬁcation rules that we used for
this study, we anticipate that researchers with access to
other datasets (including residential and corporate net-
works) will repeat our analysis to determine which of
our ﬁndings can be generalized and which are speciﬁc
to our dataset.

6. REFERENCES

[1] S. Alcock and R. Nelson. Libprotoident: Traﬃc

Classiﬁcation using Lightweight Packet
Inspection. WAND Network Research Group,
Tech. Rep, 2012.

[2] S. Alcock and R. Nelson. Measuring the Accuracy

of Open-source Payload-based Traﬃc Classiﬁers
using Popular Internet Applications. In Local
Computer Networks Workshops (LCN
Workshops), 2013 IEEE 38th Conference on,
pages 956–963. IEEE, 2013.

[3] V. Carela-Espa˜nol, P. Barlet-Ros, A. Bifet, and
K. Fukuda. A Streaming Flow-Based Technique
for Traﬃc Classiﬁcation Applied to 12 + 1 Years
of Internet Traﬃc. Telecommunication Systems,
pages 1–14, 2015.

[4] V. Carela-Espa˜nol, T. Bujlow, and P. Barlet-Ros.

Is our Ground-Truth for Traﬃc Classiﬁcation
Reliable? In Passive and Active Measurement,
pages 98–108. Springer, 2014.

[5] A. Dainotti, F. Gargiulo, L. I. Kuncheva,

A. Pescap`e, and C. Sansone. Identiﬁcation of
Traﬃc Flows Hiding Behind TCP Port 80. In
Communications (ICC), 2010 IEEE International
Conference on, pages 1–6. IEEE, 2010.

[6] A. Dainotti, A. Pescape, and K. C. Claﬀy. Issues

and Future Directions in Traﬃc Classiﬁcation.
Network, IEEE, 26(1):35–40, 2012.

[7] L. Deri, M. Martinelli, T. Bujlow, and

A. Cardigliano. nDPI: Open-source High-speed
Deep Packet Inspection. In Wireless
Communications and Mobile Computing
Conference (IWCMC), 2014 International, pages
617–622. IEEE, 2014.

[8] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and
R. Sommer. Dynamic Application-Layer Protocol
Analysis for Network Intrusion Detection. In
USENIX Security, pages 257–272, 2006.

[9] J. Fan, J. Xu, and M. H. Ammar. Crypto-PAn:

Cryptography-based Preﬁx-preserving
Anonymization. Computer Networks, 46(2), 2004.

[10] S. Gebert, R. Pries, D. Schlosser, and K. Heck.

Internet Access Traﬃc Measurement and
Analysis. In Proceedings of the 4th International
Conference on Traﬃc Monitoring and Analysis,
pages 29–42. Springer-Verlag, 2012.

[11] T. Karagiannis, A. Broido, N. Brownlee,

K. Claﬀy, and M. Faloutsos. Is P2P Dying or Just
Hiding? In Global Telecommunications
Conference, 2004. GLOBECOM’04. IEEE,
volume 3, pages 1532–1538. IEEE, 2004.

[12] T. Karagiannis, K. Papagiannaki, and

M. Faloutsos. BLINC: Multilevel Traﬃc
Classiﬁcation in the Dark. In ACM SIGCOMM
Computer Communication Review, volume 35,
pages 229–240. ACM, 2005.

[13] G. Maier, A. Feldmann, V. Paxson, and

M. Allman. On Dominant Characteristics of
Residential Broadband Internet Traﬃc. In Proc.
of the 9th ACM Internet Measurement
Conference, pages 90–102. ACM, 2009.

[14] T. T. Nguyen, G. Armitage, P. Branch, and

S. Zander. Timely and Continuous
Machine-Learning-based Classiﬁcation for
Interactive IP Traﬃc. IEEE/ACM Transactions
on Networking (TON), 20(6):1880–1894, 2012.

[15] P. Richter, N. Chatzis, G. Smaragdakis,

A. Feldmann, and W. Willinger. Distilling the
Internet’s Application Mix from Packet-Sampled
Traﬃc. In Passive and Active Measurement, pages
179–192. Springer, 2015.

[16] A. Tongaonkar, R. Torres, M. Iliofotou,

R. Keralapura, and A. Nucci. Towards Self
Adaptive Network Traﬃc Classiﬁcation.
Computer Communications, 56:35–46, 2015.

[17] WAND Network Research Group. WDCap, 2016.
http://research.wand.net.nz/software/wdcap.php.

[18] J. Zhang, X. Chen, Y. Xiang, W. Zhou, and

J. Wu. Robust Network Traﬃc Classiﬁcation.
IEEE/ACM Transactions on Networking,
23(4):1257–1270, 2015.

237