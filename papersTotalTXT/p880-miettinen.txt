Context-Based Zero-Interaction Pairing and Key Evolution

for Advanced Personal Devices

Markus Miettinen
Technische Universität
markus.miettinen@

Darmstadt

trust.cased.de

N. Asokan

Aalto University and University

of Helsinki

asokan@acm.org

Thien Duc Nguyen
Technische Universität
ducthien.nguyen@

Darmstadt

trust.cased.de

Ahmad-Reza Sadeghi

Technische Universität
ahmad.sadeghi@

Darmstadt

trust.cased.de

Majid Sobhani

Darmstadt

Technische Universität
majid.sobhani@
trust.cased.de

ABSTRACT
Solutions for pairing devices without prior security associa-
tions typically require users to actively take part in the pair-
ing process of the devices. Scenarios involving new types of
devices like Internet-of-Things (IoT) appliances and wear-
able devices make it, however, desirable to be able to pair
users’ personal devices without user involvement.

In this paper, we present a new approach for secure zero-
interaction pairing suitable for IoT and wearable devices.
We primarily require pairing to happen between “correct”
devices – the devices that the user intends to pair. Our pair-
ing scheme identiﬁes the correct devices based on measuring
sustained co-presence over time. We do this by having the
devices compute a ﬁngerprint of their ambient context us-
ing information gathered through commonly available sensor
modalities like ambient noise and luminosity. We introduce
a novel robust and inexpensive approach for ﬁngerprinting
contexts over time. Co-present devices will observe roughly
similar context ﬁngerprints that we use in a key evolution
protocol to gradually increase the conﬁdence in the authen-
ticity of the correct devices. Our experiments show the ef-
fectiveness of this approach for zero-interaction pairing.

Categories and Subject Descriptors
K.6.5 [Management of computing and information
systems]: Security and Protection—Authentication

Keywords
contextual security; context-based pairing; zero-interaction

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660334.

1.

INTRODUCTION

Traditional approaches for key agreement between per-
sonal devices without any prior security association (also
known as “pairing”) typically rely on some form of active user
involvement to authenticate the key agreement. For exam-
ple, the user may be asked to compare authentication strings
displayed on the devices or to bring the devices close enough
so that they can communicate via a Near Field Communi-
cation channel [17]. Such measures are required to thwart
man-in-the middle attacks targeting the initial key agree-
ment. Relying on user involvement to authenticate pairing
is cumbersome, error-prone and does not scale well.
It is
therefore desirable to devise zero-interaction pairing mech-
anisms which do not require any user interaction.

In this paper, we consider the challenge of zero-interaction
pairing for two particularly important emerging classes of
personal devices: Internet-of-Things (IoT) appliances and
wearables. There has been an increasing interest in both
of these classes accompanied by a steady stream of prod-
uct announcements and media coverage.
IoT devices are
intelligent network-enabled appliances utilizing connectiv-
ity and local computation to enable richer functionality and
improved user experience. Examples of IoT devices include
Nest smoke detectors and thermostats [12], the Oral-B con-
nected toothbrush [13], the Bee+ smart injection tracker
for diabetic patients [21], and the Spotter smart home sen-
sor [14]. According to a recent Gartner forecast, the total
installed base of IoT devices will grow to 26 billion units by
2020 [8]. Such devices will therefore play a signiﬁcant role
in the future end-user computing infrastructures. Similarly,
new wearable devices include wristbands used for activity
monitoring (e.g., LG LifeBand Touch, POLAR Loop Ac-
tivity Tracker), augmented reality gadgets like the Google
Glass near-eye display device, smart watch devices (e.g.,
Samsung Galaxy Gear) and many more.
It is estimated
that by 2017, 50% of all smartphone app interactions will
involve wearable devices [7], emphasizing the important role
that wearables are expected to play in future smartphone
usage scenarios.

Both IoT devices and wearables process sensitive informa-
tion and critical operations. Thus securing their communi-
cations is essential. On the other hand, in both cases ordi-

880nary users may own and manage many devices. The devices
themselves may not have any user interfaces. Therefore,
zero-interaction pairing will greatly improve the usability of
conﬁguring these devices.

The security goal of pairing personal devices is to en-
sure that the key agreement takes place between the de-
vices owned by the user.
In traditional pairing schemes,
users are required to demonstratively identify the correct
devices [1]. The requirement of zero-interaction, however,
rules out demonstrative identiﬁcation.

Existing pairing solutions that do not require direct user
involvement can be broadly divided into two classes: key
predistribution and context-based pairing approaches. Key
predistribution-based approaches (e.g., [6, 2, 10, 18]) are
mainly intended for digital sensor network (DSN) scenarios
and require key material to be distributed to all network
nodes before their deployment in the ﬁeld. In IoT scenar-
ios, however, such predistribution is not feasible due to the
overwhelmingly large number of devices deployed and the
fact that there are hundreds if not thousands of diﬀerent
device vendors that do not necessarily share any security
associations with each other. Furthermore, in our scenarios
multiple authentication domains may exist in overlapping
physical spaces, such as the IoT domains of two neighboring
apartments. Therefore the pairing solution must be capa-
ble of automatically distinguishing between such overlapping
domains.

Context-based pairing approaches (e.g., [20, 16]), on the
other hand, use co-presence of devices to identify the de-
vices to be paired. These schemes leverage the fact that
co-present devices will perceive roughly the same ambient
context via their on-board sensors – thus each device takes
a momentary snapshot of its ambient context using a given
sensor modality (e.g., acoustic or electromagnetic) and uses
the resulting “context ﬁngerprint” to authenticate key agree-
ment. Relying on a one-shot ﬁngerprint for zero-interaction
pairing has some drawbacks in the scenarios we consider.
First, to ensure security the context ﬁngerprint must have
suﬃcient entropy (e.g., 128 bits). This imposes strict re-
quirements on the ﬁngerprinting technique such as the need
for tight time synchronization between devices (as in [16]) or
access to low-level information like raw WiFi packets that is
typically not available to apps in commodity devices (as in
[20]). Second, momentary co-presence of two devices does
not always imply that the devices belong to the same user.

Our goal and contributions. In this paper, we present
a novel approach for zero-interaction pairing that is suit-
able for IoT and wearable device scenarios. Unlike previous
schemes, we identify correct devices based on the notion of
sustained co-presence: our scheme uses sensed context ﬁn-
gerprints to evolve the pairing key periodically in a way that
is only possible for devices co-present over extended periods
of time. This is based on the intuition that in the long run, a
user’s personal devices are much more likely to be co-present
with one another as compared to other users’ devices. We
use readily available context sensor modalities like audio and
luminosity. An initial (potentially insecure) pairing is grad-
ually strengthened using a key evolution approach that step-
by-step establishes and increases the authenticity of correct
peers, while making it increasingly diﬃcult for wrong de-
vices to maintain an authenticated pairing with the user’s
devices.

The context ﬁngerprints we use are based on observable
changes in the average luminosity and noise levels of the
devices’ ambient context over a longer time period. Use of
longer time periods implies that our ﬁngerprinting scheme
does not require tight time synchronization and is thus ro-
bust. Fingerprints are used to authenticate each key evolu-
tion step.

Our main contributions are the following:
• We describe a robust context-based shared en-
tropy extraction scheme for audio and luminosity
modalities and demonstrate its eﬀectiveness using real
context data (Section 4).

• We incorporate the entropy extraction into a novel key
evolution approach for automatically pairing personal
devices of the user (Section 3) and reason about its se-
curity (Section 5). The key evolution ensures that pair-
ing succeeds between devices that exhibit sustained co-
presence, which is typical for personal devices in IoT
and wearable device scenarios.

The rest of this paper is structured as follows: In Sect. 2,
we describe the context-based pairing scenario and problem
setting. In Sect. 3 we describe the key evolution approach,
which utilizes a ﬁngerprinting scheme presented and evalu-
ated in Sect. 4. An analysis of the security properties of our
approach is presented in Sect. 5. We conclude the paper with
a presentation of related work in Sect. 6 and a conclusion in
Sect. 7.

2. PROBLEM DESCRIPTION

We focus on the problem of pairing between two devices.
By ”pairing”, we mean the process of setting up a shared
security association (e.g., a shared symmetric key) between
the devices. Pairing must be established only between the
devices that the user intends to pair, i.e., devices belonging
to the same user. We refer to these as the correct peers.
Conversely devices owned by other users are wrong peers.
The security goal of pairing is to ensure that only a pairing
between correct peers is accepted as genuine. Our approach
is to develop a context-based pairing scheme to this end.
“Context” means here the ambient environment of a device.
A device can characterize its context by using context data
that can be sensed using on-board sensor modalities.
In
this paper, we use ambient audio (sensed by microphones)
and luminosity (sensed by lux sensors) for characterizing a
context.

We consider the pairing problem in two particular sce-
narios: a static setting primarily concerning IoT devices in-
stalled at the user’s home, and, a mobile setting for wearable
personal devices.

IoT Scenario. The IoT scenario is shown in Fig. 1. A
user has installed some IoT devices d1 and d2. Her neigh-
bor also has an IoT device A in his apartment. IoT devices
are typically equipped with WiFi or Bluetooth connectivity
and hence may be placed within each other’s communication
range. We can assume that all devices are able to communi-
cate with one another and are equipped with context sensors
to sense contextual parameters. Over time, the devices d1
and d2 in the user’s home should establish a secure pairing
between each other without user interaction, while making
sure that a trusted pairing is not erroneously established
with device A.

881User’s home

A

d2

d1

Neighbour’s home

Figure 1: Scenario 1: Pairing of personal IoT devices

Impersonator A

MITM A

Device d1

Device d2

Figure 2: Scenario 2: Pairing of personal wearable
devices

Wearable Scenario. The second scenario is concerned
with the secure pairing of personal wearable devices, as de-
picted in Fig. 2. The user has a smartphone d1 and buys a
smart watch d2, turns it on and starts using it. The newly
activated smart watch d2 actively searches for smartphones
nearby and establishes an initial pairing with all such de-
vices that it can ﬁnd nearby. Similarly d1 will accept any
initial pairing from any wearable device that contacts it.

In order to establish the authenticity of such initial pair-
ings, the two devices then attempt to evolve their pairing
key using a key evolution protocol during a gestation period.
If at the end of the gestation period the two devices have
suﬃcient conﬁdence in the authenticity of each other belong-
ing to the same domain, i.e., being owned by the same user,
they accept the pairing key as genuine. Otherwise, they dis-
card the pairing the key. If the wearable device d2 accepts
a key, it stops making new key pairing requests, since it is
already associated with the correct user’s smartphone. Also
in this scenario, we need to make sure that the pairing key
of a device A not belonging to the user is not erroneously
accepted as genuine.
2.1 Threat Model and Assumptions
The threat we are concerned with is that an adversary
device A succeeds in making a legitimate device d1 accept a
pairing with A as genuine.
IoT Scenario. In the IoT scenario, the adversary A is an
IoT device in the neighbor’s apartment. This device can be
benign, just trying to pair with other devices it can discover
in its proximity, or, malicious, if infected with malware, ag-
gressively trying to pair with and inﬁltrate any IoT networks
it can discover. The wrong peer A is permanently near de-
vice d1 and can communicate with it over a wireless link,
but it is not able to monitor d1’s ambient context, since it
is separated from it by a solid wall.
If the neighboring apartment where the wrong device A is
located has large windows facing the same direction as the

user’s apartment, A may have visibility to any changes in
the outside luminosity aﬀecting the lighting conditions in the
user’s apartment, but it is not able to directly observe the
lighting conditions in the ambient context of d1. Speciﬁcally,
A is not capable of mounting targeted attacks, i.e., attacks
that are executed by directly monitoring the target apart-
ment where d1 is located, e.g., from another apartment over
the street. Since A is assumed to be a regular IoT device,
it neither has the directional high-ﬁdelity sensors required
for monitoring a speciﬁc target over large distances nor the
functional logic for mounting such attacks.

Wearable Scenario. In the wearable device scenario, the
adversary A is either a malicious attacker trying to play a
man-in-the-middle attack on the user and his wearable de-
vice, in order to obtain sensitive information exchanged be-
tween them, or it could be just someone else’s device search-
ing for its own peer device. We assume that the wrong peer
A is from time to time present in the same context as d1,
e.g., while d1 is visiting a place where also A is located (cf.
Fig 2) and hence A can observe the same contextual pa-
rameters as d1. However, A is not able to follow the user
constantly. The amount of time A is able to monitor d1’s
context is therefore limited and signiﬁcantly smaller than
the time that d1 and d2 spend co-located in the same con-
texts. We follow a standard Dolev-Yao adversary model [4]
and assume that A has full control over all communication
channels.

In both scenarios we assume that the user’s own devices
d1 and d2 consistently spend most of the time in the same
contexts. In the IoT scenario, the context is spatially static,
e.g., the user’s home, since typically IoT devices are house-
hold appliances (smart TVs, smart thermostats, etc.) that
are relatively static objects. Wearable devices like a smart
watch, on the other hand, are continuously carried by the
user and are therefore sharing the same, although changing
context during the day as the user moves around.
2.2 Objectives

Our main objectives are as follows.

Authenticated pairing. User devices (IoT devices and
wearables) securely establish authenticated pairings with the
correct peer devices, i.e., a user’s device d1 accepts a pairing
with d2 after a gestation period if, and only if, d1 and d2 are
owned by the same user and thus are co-present for longer
periods of time. Authenticated pairings are not established
with wrong peers A, including attacker devices playing man-
in-the middle and impersonation attacks against the correct
peers.
Zero-interaction. The pairing must happen without user
interaction, i.e., based solely on information that the in-
volved devices can communicate and sense from their ambi-
ent context without human involvement.
2.3 Solution Approach

Previous approaches for context-based pairing presented
in literature use context information to establish a one-shot
secure pairing [20, 16]. The security of these approaches de-
pends on the assumption that the adversary is not present
suﬃciently close in the context of the user devices d1 and d2
when the pairing is performed and thus unable to observe the
same contextual parameters as d1 and d2. These approaches
rely, however, on the user to visually determine that no ad-
versary A is present in the proximity of the devices d1 and d2

882before the pairing is initiated. In a zero-interaction setting,
this is not possible. For example, in a situation in which
wearable devices are taken into use at a moment when sev-
eral parties are present in the same room, an adversary A
might very well be present.

Therefore, we follow a more in-depth defense strategy by
utilizing a key evolution approach described in Sect. 3. In
our approach, the target device d1 is initially entitled to es-
tablish pairings with all other devices in proximity, including
correct and wrong peers. These pairings are, however, as-
signed an authenticity rating that is initially zero, meaning
that the authenticity of the counterpart has not been veri-
ﬁed. Key evolution is then used to gradually increment the
authenticity rating of correct peers, so that over time only
pairings with correct peers will be accepted as genuine.

In earlier approaches, context ﬁngerprints used for one-
shot pairing must have suﬃcient entropy (e.g. 128 bits).
Obtaining a suﬃcient amount of entropy from a short con-
text snapshot requires therefore tight time synchronization
between the devices d1 and d2 to be paired [16]. On com-
modity devices achieving suﬃciently accurate synchroniza-
tion might not be technically feasible. To overcome this
limitation, we utilize a more robust ﬁngerprinting approach
that operates on longitudinal context measurements and is
thus not as sensitive to time synchronization issues. The
ﬁngerprinting scheme used is described in Sect. 4.
3. CONTEXT-BASED KEY EVOLUTION

Our key evolution approach is based on the assumption
that two devices that have established an initial pairing can
utilize the common information about their ambient context
observed over time to iteratively evolve their pairing key.
With each successful iteration, the belief in the authenticity
of the counterpart is increased, since the protocol is designed
in a way that makes it hard for devices not continuously
sharing the same context to execute it successfully.

In the approach, both peers extract context ﬁngerprints
from their surroundings by continuously monitoring their
context. If the peers spend prolonged periods of time in the
same context, observing the same contextual information,
the ﬁngerprints they extract will be similar as well. We will
deﬁne the extraction of ﬁngerprints in section 4.

The key evolution approach utilizes three conceptual com-
ponents: key evolution, key conﬁrmation, and, key accep-
tance. Key evolution and key conﬁrmation are executed it-
eratively between the peer devices in what we call a key
evolution step: evolving the pairing key and verifying the
success or failure of each key evolution. After a suﬃcient
number of key evolution steps have been performed, key ac-
ceptance is used to ultimately determine, whether a pairing
counterpart is a correct or wrong peer.

To perform a key evolution based on context ﬁngerprints,
we require a fuzzy commitment scheme that is ideal w.r.t.
the hiding property. Such a scheme is able to transform a
secret value s into a commitment / opening value pair (δ, λ),
such that δ does not reveal any information about the secret
s, and all pairs (δ, ˆλ) will reveal s if the Hamming distance
Ham(λ, ˆλ) ≤ t, but it is not feasible to ﬁnd an opening value
λ(cid:48), for which Ham(λ, λ(cid:48)) > t, such that (δ, λ(cid:48)) would reveal
the secret s. In this scheme, the value t is a parameter and
denotes the maximum Hamming distance that the scheme
allows for an opening value ˆλ to have from λ, so that the
secret s is revealed. In other words, if party d1 commits to

a secret s to obtain a commitment / opening pair (δ, λ) ←
Commit(s), and a subsequent opening of the commitment by
party d2 yields ˆs ← Open(δ, ˆλ), then s = ˆs iﬀ Ham(λ, ˆλ) ≤ t.
We could utilize any key agreement scheme that provides
such a fuzzy commitment (e.g., [3]), but for the purpose of
this paper, we adopt and adapt the approach of Sch¨urmann
and Sigg in [16].
It is based on the fuzzy vault construc-
tion of Juels and Sudan [9]. It utilizes the error-correcting
properties of Reed-Solomon codes [15] to enable two peers to
agree on a common key, if the context ﬁngerprints that peers
extracted from information in their ambient context diﬀer
in at most t bits. The value of t depends on the parameter-
ization of the Reed-Solomon code and can thus be selected
freely based on the number of bit errors to be expected be-
tween the ﬁngerprints of legitimate peers. The details of the
key evolution approach are shown in Fig. 3.
3.1 Key Evolution

Initially, two devices d1 and d2 look for other devices to
pair with. When they encounter each other for the ﬁrst time,
they establish an initial pairing key K 0
d1,d2 (e.g., by using a
Diﬃe-Hellman key exchange). This initial key agreement
is unauthenticated, i.e., neither device knows, whether the
pairing counterpart belongs to the same owner or not. Our
goal is to use subsequent key evolution to determine whether
the pairing counterpart belongs to the same user or not.

Device d1 initiates the protocol by sending a key evolu-
tion request EVO_REQ to device d2. The request contains
timestamps t1 and t2, specifying the starting and ending
times on which to synchronize the generation of the context
ﬁngerprints. From the context observations Cd1 (t1, t2) and
Cd2 (t1, t2) falling between the speciﬁed timestamps, both
= φ(Cd1 (t1, t2)) and
peers extract context ﬁngerprints FCd1
= φ(Cd2 (t1, t2)), respectively, by applying a ﬁngerprint
FCd2
extraction function φ(·) on the collected context sequences.
The extraction function is deﬁned in Def. 3 in Sect. 4.
After generating the ﬁngerprints, device d1 selects a ran-
dom key evolution diversiﬁer Kr ∈ Fm
2k , and uses the fuzzy
commitment scheme to transform it into a commitment /
opening value pair (δ, λ) ← Commit(Kr). The opening value
λ ∈ Fn
2k is calculated as the codeword for Kr using Reed-
Solomon (RS) encoding: λ ← RS(2k, m, n, Kr). The com-
mitment value δ is then calculated as the diﬀerence of the
(cid:9) λ, where
ﬁngerprint FCd1
(cid:9) denotes subtraction in the ﬁeld Fn
2k .

and the codeword λ: δ = FCd1

Device d1 then transmits the commitment value δ to de-
vice d2, which in turn obtains an opening value ˆλ and re-
trieves the key evolution diversiﬁer by opening the commit-
(cid:48) ← Open(δ, ˆλ). It does so by decoding the
ment of d1 : Kr
opening value using the Reed-Solomon decoding function.
Given that the fuzzy commitment scheme fulﬁls the hiding
(cid:48) only if Ham(λ, ˆλ) ≤ t. Since
property requirement, Kr = Kr
(cid:9) λ, it
ˆλ is calculated as ˆλ = FCd2
means that the ﬁngerprints FCd1
can diﬀer in at
most t bits, which in this case is the maximum number of
bits the RS coding can correct. Otherwise, d2 will not be
able to open the commitment correctly, and the retrieved
key derivation keys will not be identical, i.e., Kr (cid:54)= Kr
3.2 Key Conﬁrmation

(cid:9) δ, and δ as δ = FCd1

and FCd2

(cid:48).

To determine whether the key evolution was successful,
both devices calculate candidate pairing keys by using a key
derivation function KDF applied on the old pairing key K i

d1,d2

883Device d1

K i

d1,d2

Device d2

EVO_REQ(cid:107)(t1, t2)

= φ(Cd1 (t1, t2))

FCd1
random Kr ∈ Fm

2k

encode: λ ∈ Fn

2k ← RS(2k, m, n, Kr)

FCd2

= φ(Cd2 (t1, t2))

δ = FCd1

(cid:9) λ

δ

decode: Kr

(cid:9) δ

ˆλ = FCd2
(cid:48) ← RS(2k, m, n, ˆλ)

K + = KDF(K i

d1,d2 , Kr)

K +(cid:48)

= KDF(K i

d1,d2 , Kr

(cid:48))

Symmetric-key authentication protocol

K i+1
d1,d2

= K +

if result == success

K i+1
d1,d2

= K +(cid:48)

device d . The chain identiﬁer is a hash value of the key K 0
d
derived during the initial unauthenticated pairing with d ,
and X is the identity that d claims to represent. We de-
note the set of all devices d claiming identity X with DX .
We evolve the pairing key K i
d independently for each de-
vice’s key chain and keep track of the number of successful
key evolution steps associated with each key chain identiﬁer
ID X
d as well as the total number of successful key evolution
steps for the claimed identity X . The ratio of successful key
evolution steps for each key chain identiﬁer ID X
d to the to-
tal number of successful key evolution steps for the related
identity X becomes therefore a measure for the authenticity
of the device associated with that key chain identiﬁer.

Definition 1

(Authenticity rating α). Let γ(ID X
d )
denote the number of successful key evolution steps that a de-
vice has performed with a peer device d with key chain iden-
tiﬁer ID X
d under the claimed identity X . The authenticity
rating α(ID X
d ) is the ratio of successful key evolution steps
for the key chain ID X
d to the overall number of successful
key evolution steps for identity X :

Figure 3: The Key Evolution Protocol

α(ID X

d ) =

(cid:80)

γ(ID X
d )
γ(ID X
di )

di∈DX

.

(1)

(cid:48), respec-
and the key evolution diversiﬁer, i.e., Kr or Kr
tively. The peers then execute a symmetric-key authentica-
tion protocol with the candidate keys to determine, whether
they are identical. The used protocol needs to be toler-
ant to oﬄine guessing attacks. For example, a password-
authenticated key-exchange scheme [22] can be used (al-
though they are intended for long-lived short shared secrets).
If the protocol succeeds, the key evolution step is consid-
ered successfully completed and the peers start using the
candidate keys as their new pairing keys, i.e., device d1 sets
K i+1
d1,d2

= K + and device d2 sets K i+1
d1,d2

= K +(cid:48)

.

3.3 Key Acceptance

To ultimately determine whether a pairing counterpart is
a correct or a wrong peer, we apply the following strategy:
assuming that a wrong peer A is spatially or temporally lim-
ited in its ability to continuously monitor the context of a
target device d1, it is likely that A will fail in key evolution
much more often than a correct peer d2, who is predomi-
nantly co-present in d1’s context. By keeping track of the
number of successful key evolutions each pairing counterpart
is able to follow, it becomes therefore possible to distinguish
the correct peer d2 from wrong peer A.

We need to take into account that wrong peers may ap-
pear at any point in the pairing and key evolution process. A
wrong peer A may initiate the pairing ﬁrst and impersonate
a correct peer d2 which will come into communication range
only later, or, A may appear after an initial pairing with the
correct peer d2 has already been established, and may claim
to be d2. Since we assume that there is no prior security asso-
ciation between any of the devices, we can’t distinguish with
certainty whether the former or the latter device requesting
the pairing is the correct personal device d2. Therefore, we
need to initially accept all pairing requests for a particular
device identity and use the key evolution protocol to verify,
which device actually is the authentic one.

To be able to distinguish diﬀerent devices from each other,
d ) for each

we assign a key chain identiﬁer ID X

d = Hash(K 0

The key evolution is performed during predetermined key
evolution cycles. During each key evolution cycle, device d1
will try to perform key evolution for an identity X with each
device d ∈ DX claiming to represent that identity. If these
attempts succeed, the count of successful key evolution steps
for identity X is incremented. Our key evolution approach
is designed in a way that only devices d that are in the
same context as the target device d1 for the majority of the
time during a key evolution cycle will succeed in the key
evolution step. Thus, since correct peers are signiﬁcantly
more often in the same context than wrong peers, the value
γ(ID X
d ) for any correct peers d will, over time, grow larger
than for any wrong peers that will inevitably ’miss’ such key
evolution steps during which the wrong peers are not in the
same context as d1, or are unable to observe d1’s context.

The context-based pairing approach can therefore be sum-

marized as follows:

1. Establish pairing key with device d claiming to be X .

Assign initial authenticity rating α(ID X

d ) = 0 to it.

2. Monitor the context and regularly evolve pairing keys
with other devices based on derived context informa-
tion.

3. After the number of successful key evolution steps for
identity X reaches a speciﬁed threshold value αthr ,
check if the acceptance criteria listed below hold. If
either criterion does not hold, the key evolution pro-
cess is continued, and acceptance criteria re-evaluated
after each successful key evolution step for identity X .

The ﬁrst acceptance criterion requires that in order to be
accepted as genuine, a peer device d ’s pairing key under
an identity X needs to have a suﬃcient authenticity rating
α(ID X
d ), and this rating has to be higher than any other
peer’s rating for X by a speciﬁed margin αmarg in order to
make the determination of the correct peer unambiguous.

884Criterion 1

(Authenticity dominance).

Let αmin , αmarg ∈ [0, 1] denote a minimal authenticity thresh-
old and an authenticity margin, respectively. If there is a
device d ∈ DX claiming to represent identity X , such that
d ) > αmin ∧ ∀di ∈ DX , di (cid:54)= d : α(ID X
d ) · αmarg >
α(ID X
α(ID X
di ), accept d as authentic, if also criterion 2 for d
holds. If |DX| = 1, i.e., there is only one device d claiming
the identity X , d is accepted as authentic, if α(ID X
d ) > αmin ,
and criterion 2 holds for it.

Threshold αmin determines the minimal authenticity rat-
ing required for a peer to be considered genuine. Margin
factor αmarg ∈ [0, 1] determines, how much the authenticity
rating of a correct peer has to dominate over the authentic-
ity ratings of all other peers in order for it to be considered
genuine.

The second criterion requires that the key evolution with
a device needs to be attempted at least ρmin times, before
the authenticity rating can be regarded as representative. In
addition, the number of key evolution cycles during which
the key evolution is attempted needs to cover at least a frac-
tion of ρcov of the total key evolution cycles after the initial
pairing. Otherwise, an adversary A in the wearable sce-
nario could just selectively attempt key evolution only when
d1 is in its context and thereby slowly accumulate a high
authenticity rating even though it only occasionally shares
the same context with d1.

Criterion 2

(Confidence). Let ρd denote the num-
ber of key evolution cycles during which device d has at-
tempted key evolution and ρ∗
d the total amount of key evo-
lution cycles since establishing the initial pairing for d . Let
also ρmin ∈ N+ denote a key evolution attempt threshold and
ρcov ∈ [0, 1] a key evolution coverage threshold. The pairing
of a device d is accepted as genuine only if ρd > ρmin and
ρd
ρ∗d

> ρcov .

Once a device d ’s pairing is accepted as genuine, there are
two options: other key chains may be removed and pairing
stopped (e.g., when a smartwatch has found its host smart-
phone), or, the accepting device may continue to evolve pair-
ing keys for other devices (e.g., in the case of smart TV that
can accommodate multiple remote controls).

4. ROBUST CONTEXT FINGERPRINTS

We apply our context ﬁngerprinting method on two diﬀer-
ent contextual modalities: ambient noise and light. As men-
tioned before, the ﬁngerprinting scheme is inspired by Sch¨ur-
mann and Sigg [16], but it is diﬀerent in several ways: The
scheme in [16] requires tight time synchronization, whereas
our scheme does not. Their scheme is intended to extract
enough entropy within a very short time to be used as a
cryptographic key, whereas our ﬁngerprints have a longitu-
dinal orientation. Finally, our scheme is equally applicable
to both audio and luminosity and the ﬁngerprints represent
more sustained changes in the contextual characteristics of
the ambient context over several hours. Thereby, the ﬁn-
gerprints will also capture phenomena originating from the
user’s actions (such as switching on the lights, chatter, si-
lence, etc.). These events are inherently random and there-
fore diﬃcult to predict even for advanced attackers that may
try to utilize proﬁled information about the target context
in attempting to fabricate context ﬁngerprints.

Using a longitudinal approach in ﬁngerprint generation
and key evolution has also the advantage that the scheme
is more robust against attackers that are occasionally co-
located with the paired devices. This is diﬀerent to earlier
approaches, where the security of the pairing is dependent
on the fact that the attacker is not sharing the context with
the paired devices at the time of pairing [20, 16]. Our longi-
tudinal approach, on the other hand, can gracefully handle
situations in which the attacker is occasionally in the same
context with the paired devices, as we will show in Sect. 5.
In our scheme, the devices are continuously monitoring
their context by scanning context snapshots cw(t). Every f
seconds, a snapshot of w seconds is recorded. Each snapshot
consists of a sequence of measurements mi in a particular
contextual modality like ambient luminosity or noise level,
such that cw(t) = (mi, mi+1, . . . , mi+n), where the times-
tamp associated with an individual measurement mi is de-
noted with t(mi), and, t(mi+n) − t(mi) = w. Since the
used snapshot length w is ﬁxed and usually clear from the
context, we omit it in the following and denote a context
snapshot just with c(t) for better readability.

We average the measurements within each context snap-

shot c(t) and denote the snapshot’s average value as

(cid:80)

¯c(t) =

mi∈c(t) mi
|{mi ∈ c(t)}| ,

(2)

where | · | denotes set cardinality.

Based on a sequence of context snapshots C(t, t + nf ) =
(c(t), c(t+f ), c(t+2f ), . . . , c(t+nf )), we calculate its context
ﬁngerprint as a sequence of bits, in which each bit denotes
the change of the snapshot’s average value in comparison
with the previous snapshot’s average. The ﬁngerprint bit
corresponding to a context snapshot is set to “1” if the rel-
ative change between the snapshot’s average value and the
previous snapshot’s average value is larger than a speciﬁed
relative threshold ∆rel and if the diﬀerence between the val-
ues exceeds an absolute threshold value ∆abs. Otherwise,
the bit is “0”.

Definition 2. Let C(t, t + nf ) be a sequence of context
snapshots, i.e., c(ti) ∈ C(t, t + nf ), t < ti ≤ t + nf, n ∈
N+. We deﬁne the ﬁngerprint bit b(ti) corresponding to
each snapshot c(ti) as
¯c(ti−f ) − 1| > ∆rel ∧ |¯c(ti) − ¯c(ti−f )| > ∆abs
| ¯c(ti)

(cid:40)1,

b(ti) =

0, otherwise.

(3)

Definition 3. We deﬁne the ﬁngerprint φ(C(t, t + nf ))

of a sequence of context snapshots C(t, t+nf ), n∈N+ as

φ(C(t, t + nf )) = (b(t), b(t + f ), . . . , b(t + nf )).

(4)

The rationale for our notion of ﬁngerprints is that two de-
vices that share the same context for an extended period of
time will also experience changes in context parameters in a
similar way. For example, if the user switches on the lights in
a room, the increase in luminosity in the room will be sensed
by all devices located inside the room, whereas other devices
not in the same room will not be able to sense it. There-
fore, bits generated this way will be shared only with the
co-located devices. The same applies to ﬁngerprints based
on audio. The alternating patterns between chatter, silence
and possible other persistent ambient sounds will generate

885ﬁngerprint bits in a way that is similar between devices in
the same audio context (e.g., the same room). Devices out-
side the audio context will, however, not be able to sense
these changes.

The same logic applies also to mobile personal devices like
wearables, which are usually always carried together. Even
though the context in which the devices are located may
change as the user moves, the changes will be sensed in a
similar way by both devices.

We will evaluate our ﬁngerprint extraction scheme in both

static and mobile scenarios in Sect. 4.1.
4.1 Implementation and Evaluation

To analyze the feasibility of our approach, we performed
several experiments in diﬀerent contexts investigating, how
similar ﬁngerprints extracted from ambient luminosity and
noise levels are in real contextual settings.

4.1.1 System Set-Up
To simulate the capability of IoT and wearable devices to
sense their ambient context and to use the context infor-
mation for key evolution, we used Android OS smartphones
(Samsung Galaxy Nexus, Nexus S and Galaxy S III devices)
running dedicated context data collection software. The col-
lection software on each device continuously measured the
luminosity and noise levels in the device’s context and rou-
tinely sent the collected data to a server for oﬀ-line data
analysis. In these experiments we used a static placement
of the test devices to simulate IoT device pairing scenarios,
whereas for personal wearable pairing scenarios test persons
carried the data collection devices with them.

In both settings, the orientation of the luminosity sensors
of the devices impacts the magnitude of observed luminosity
readings. However, since our method for deriving ﬁngerprint
bits from luminosity readings is not based on absolute lumi-
nosity values, but on relative changes in the ambient illumi-
nation, the exact placement and orientation of the devices
plays only a minor role.

4.1.2 IoT Scenario
In this scenario, we investigated whether IoT devices lo-
cated in the same room can successfully establish similar
enough ﬁngerprints to be used for context-based key evo-
lution. We tested the scenario in diﬀerent set-ups and lo-
cations over several months, varying the placement of the
devices with regard to each other and within the room. Ta-
ble 1 shows one example of the placement of devices in two
settings at two diﬀerent locations: oﬃce and home.

In the oﬃce setting, two devices simulating correct peers
were placed on the wall of an oﬃce room, three meters apart
from each other. Other smartphones simulating wrong peers
were placed in nearby rooms, but without direct visibility
to the room with the correct peers.
In the home setting,
the correct peers were placed in the living room of the test
participant’s house. A smartphone simulating a wrong peer
in a neighboring apartment was placed in another room of
the house, but on a diﬀerent ﬂoor.

To eliminate eﬀects that possible diﬀerences in the orien-
tation of windows of the rooms could have on lighting con-
ditions, we selected rooms that had relatively large windows
facing the same direction, allowing outdoor light to illumi-
nate all rooms used in the experiment in a similar way during
daytime. In addition, to obtain a baseline measurement of

Table 1: Placement of test devices in an IoT scenario

Device

Placement

Oﬃce setting

Device d1 User’s oﬃce
Device d2 User’s oﬃce

A1
A2
A3

A1
A2

Outdoor light
Adjacent oﬃce
Coﬀee room, one room apart

Home setting

Device d1 Living room, ground ﬂoor
Device d2 Living room, ground ﬂoor

Outdoor light
Studio, 2nd ﬂoor

Table 2: Average ﬁngerprint similarity between the
co-located and adversary devices in the IoT scenario

Average ﬁngerprint similarity with co-located devices
Audio

Luminosity

d1 and d2

d1 and d2

95.0 %
70.0 %
88.7 %
68.3 %

Oﬃce setting, 8 a.m. to 6 p.m.
A1
A2
A3
Home setting, 6 a.m. to 10 p.m.
A1
A2

82.9 %
70.8 %
70.6 %

91.8 %
-
71.7 %
62.6 %

87.5 %
-
77.0 %

the outdoor lighting conditions that aﬀect the illumination
of the room with the correct peers, we dedicated in each
scenario one device for measuring the direct outdoor light
falling into the room.
Results. We collected luminosity and audio measurements
during the course of several weeks. We extracted context-
based ﬁngerprints based on a time window of w = 120 sec-
onds for each device and compared the average bit diﬀer-
ences of the ﬁngerprints of correct and wrong peers.
In
both settings, hardly any bits were generated during night-
time. We will show in Sect. 5 that ﬁngerprints generated
from nighttime data contain only very little entropy and
can therefore not be used for ﬁngerprint generation. There-
fore, we concentrate our analysis in the oﬃce setting during
business hours between 8 a.m. and 6 p.m. and in the home
setting during active hours of a household between 6 a.m.
and 10 p.m. The results are shown in Tab. 2.

In the oﬃce setting, the co-located devices clearly show
the largest bit similarity in their respective ﬁngerprints. For
the luminosity data, the diﬀerence between the co-located
devices d1 and d2 and the adversary device A2 in the ad-
jacent oﬃce is relatively small, i.e., only 6.3%. This is so
because the lighting conditions aﬀecting the rooms are al-
most identical and the eﬀect of sunlight dominates the over-
all lighting conditions during business hours1.
For audio, the diﬀerences are clearer. Adversary A2 in the
adjacent oﬃce has only 71.7 % similarity compared to 91.8 %

1The measurements were done less than two months from
the summer solstice in the northern hemisphere, i.e., the
brightest time in the year. The inﬂuence of sunlight is likely
to be be smaller during other times of the year.

886for the co-located devices d1 and d2. This is so, even though
the doors of the rooms in question to a common hallway
were mostly kept open, so that some parts of the acoustic
environment could be shared by the devices in these rooms.
However, adversary device A3 located in the coﬀee room
was farther away, so that it was acoustically more clearly
decoupled from the co-located devices. Therefore the simi-
larity percentage of its ﬁngerprints to the ﬁngerprints of the
co-located devices is signiﬁcantly lower, i.e., 62.6 %.

In the home setting, the results were similar. Here, the
similarity between co-located devices was on the average
82.9 % for luminosity and 87.5 % for audio. There was
also a clear diﬀerence to the adversary devices, which could
only achieve bit similarity values of 70.8 % for luminosity
and 77.0 % for audio ﬁngerprints.
4.1.3 Wearable Device Scenario
In this scenario, we simulated the contextual environment
that typical wearable devices are confronted with. We did
this by equipping test users with smartphones, each playing
the role of a wearable device. We considered two alternative
settings: a ’smart watch’ scenario, in which one device plays
the role of a smart watch, and the other device is used like a
regular smartphone. The other, ’cycling’ scenario, simulates
the use of wearable devices as ﬁtness gadgets.

In the smart watch scenario, users were equipped with
two smartphones which they carried with them continuously.
One of the devices simulated a smart watch that is worn on
the user’s wrist.
It was therefore placed in a translucent
carrying pouch so that its light sensor was constantly ex-
posed to the ambient light. The other device was used like
a regular smartphone.

In the ’cycling’ scenario, we used two smartphones to sim-
ulate wearable ﬁtness gadgets, currently one of the most
popular classes of wearable devices.
In our scenario, we
considered a cyclist, who is using a heart rate monitor to
record his physical performance and a near-eye display de-
vice to visually follow the key characteristics of his workout,
including the heart rate. The smartphone playing the role
of a near-eye display device was attached on the side of the
bicycle helmet of the cyclist, with the light sensor showing
outwards. The other device played the role of the smart
heart rate sensor. It was placed in a translucent carrying
pouch on the chest of the cyclist, facing forward, which is
also a typical placement for heart rate sensors. In the cy-
cling scenario, ambient light and noise data were collected
during the workouts of the cyclist.

Results. We collected traces from co-located devices car-
ried by test persons in a number of mobile and static con-
texts: walking, in public transport, as well as stays in the
home and oﬃce contexts. Since the mobility of the user
introduces a signiﬁcant amount of changes into the devices’
contexts, the bit similarity of ﬁngerprints from the co-located
devices was relatively high, 92.6 % on average (minimum
87.3 %, maximum 96.7 %). This provides a good basis for
successful key evolution between the co-located devices. In
the wearable device scenario, however, also the presence of
wrong peer devices in the context plays a role. We analyze
the eﬀect of such devices on the key evolution scheme in
more detail in Section 5.1.

For the cycling scenario we collected 10 traces of con-
text measurements captured along a back-and-forth journey
on a ﬁxed route of approximately 10 miles. The exercises

were spread out over several weeks, encompassing varying
road and weather conditions ranging from rainy, overcast
to sunny days. Since the contextual environment changes
in this scenario much faster than in the static scenario, we
chose a shorter time window w = 5 sec and higher sampling
rate f = 5 sec for luminosity-based ﬁngerprint generation.
Using this ﬁngerprinting scheme, the ﬁngerprints for the ex-
ercises contained 665 to 784 bits. For audio data, a slightly
longer time window of w = 6 sec was used, giving us ﬁn-
gerprints of 501 to 550 bits. The bit similarity between the
ﬁngerprints of the co-located devices d1 and d2 was on the
average 68.6 % for luminosity-based ﬁngerprints (minimum
62.8 %, maximum 74.5 %) and 65.9 % for audio-based ﬁn-
gerprints (minimum 63.6 %, maximum 67.1 %).

4.1.4 Context Replay Attacks
In addition to testing the bit similarities of co-located de-
vices we also examined the eﬀect of context replay attacks
by analyzing whether an attacker, who knows the route that
a user is going to use could record the context parameters
along this route and use this recording to produce a context
ﬁngerprint that could fool a target device into believing that
the attacker has been sharing the same context. We there-
fore used the set of ﬁngerprints from the cycling scenario
generated on diﬀerent days on the same route and measured
their bit similarity. We did this in order to ﬁnd out what an
attacker in the optimal (worst) case could achieve. We iter-
ated over all exercise ﬁngerprints, using one ﬁngerprint at a
time as the target device d1’s ﬁngerprint and the remaining
ﬁngerprints as ﬁngerprints of the adversary A. Since the ﬁn-
gerprints were recorded at diﬀerent times, it was not clear
how to optimally align them. We therefore calculated the
bit diﬀerence for each target-attacker ﬁngerprint pair for all
possible overlapping alignments of the ﬁngerprints and used
the minimal bit diﬀerence to choose the optimal alignment.
We then averaged the bit similarity values over the adver-
sarial ﬁngerprints with optimal alignments.

The ﬁngerprint similarity of simulated replay attacks with
the target devices was 59.5 % (minimum 55.9 %, maximum
62.3 %) for luminosity-based ﬁngerprints and 56.4 % (mini-
mum 55.0 %, maximum 56.8 %) for audio-based ﬁngerprints.
The margin between the actually co-located device pair d1
and d2 to the replayed adversarial ﬁngerprints was on the
average 52.5 bits (minimum 4 bits, maximum 104 bits) for
luminosity and 42.8 bits (minimum 27 bits, maximum 51
bits) for audio in favor of the co-located pair.

The clear margins between the bit similarities of co-located
and attacker ﬁngerprints suggest that it’s in most cases pos-
sible to deﬁne a parameter value t for the fuzzy commitment
scheme so that co-located peers will be able to successfully
perform key evolution steps, while blocking most attackers
from doing so. The analysis here also involves two rather
optimistic assumptions in favor of the attacker, namely that
the attacker is able to record the trace in exactly the same
way as the targeted user and that the attacker is able to
guess the optimal alignment of his ﬁngerprint with the tar-
get user’s ﬁngerprint. In practice, it is unlikely that an at-
tacker would be able to always guess the optimal alignment,
or record context traces with the same rhythm and speed
as the targeted users. Hence in practice the margins in fa-
vor of the correct peers will be much larger than the ones
presented above.

8875. SECURITY ANALYSIS

In our analysis we assume that the legitimate personal
devices of the user have not been compromised and execute
context sensing, key agreement, key evolution and authen-
tication protocols as speciﬁed.
Let us consider an adversary A impersonating X , having
a key chain identity ID XA . The only way for A to get its
pairing with a target device d1 accepted as genuine is to
achieve a high enough authenticity rating α(ID XA ). To do
this, it needs to successfully participate in the key evolution
process. A can do so in two cases:

1. A is in the same context as d1 and can generate context
ﬁngerprints FCA suﬃciently similar to the ﬁngerprint
FCd1

, FCA ) ≤ t, or,

of d1, i.e., Ham(FCd1

2. A is not in the same context as d1 but is able to fabri-
CA suﬃciently similar with

cate context ﬁngerprints F (cid:48)
the ﬁngerprint of d1, i.e., Ham(FCd1

CA ) ≤ t.

, F (cid:48)

We will ﬁrst analyze the eﬀect of A being in the same
context with d1 on his authenticity rating, and then analyze
the success probability of the attacker fabricating context
ﬁngerprints.
5.1 Attacker in Same Context as Target

Let us denote with θ the probability that A is able to
, FCA ) ≤ t and
extract a ﬁngerprint FCA having Ham(FCd1
with β the probability that a co-located device d2 extracts
a ﬁngerprint FCd2
If A is present in the same context as d1, A can extract
ﬁngerprints FCA that have the same probability to have a
bit diﬀerence of t or lower than the co-located device d2.
Therefore, θ = β. However, to simplify the analysis, let
us assume a perfect attacker that always succeeds in key
evolution when it is in the context, i.e., θ = 1.

having Ham(FCd1

) ≤ t.

, FCd2

We denote with n the number of key evolution steps that
a correct peer d2 will attempt during a speciﬁc time period
and with m the number of key evolution steps that the wrong
peer A will attempt during the same time. To maximally
increase its authenticity rating, A will attempt to do key
evolution steps every time it is co-located with the target
device in the same context. When A is not in the same
context, the probability to successfully evolve the key is less
than β. Therefore A will not participate in key evolution.
Since d2 is a benign peer, it will regularly attempt to evolve
its pairing key with d1 each time it is co-located with it.

d2 ) > γ(ID XA). Since γ(ID X

According to Def. 1 the authenticity rating α(ID X

d2 ) of
the correct peer d2 will be higher, if it has performed more
successful key evolution steps than the attacker A, i.e., if
d2 ) = β · n and γ(ID XA) =
γ(ID X
θ· m = m, and, if β· n > m holds, then attacker A will never
be able to obtain an authenticity rating that is higher than
the rating of the correct peer. However, since we assume
that n >> m, and, in particular β · n > m, it is clear that
the attacker will not succeed in getting his pairing accepted
as genuine in our scheme.
5.2 Attacker not in Same Context as Target

The fuzzy commitment scheme used in the key evolu-
tion protocol provides the hiding property as mentioned in
Sect. 3. A will not be able to reveal the correct key deriva-
tion key Kr and thus participate successfully in the key evo-
lution protocol if it can’t ﬁnd a context ﬁngerprint F (cid:48)
CA that

CA satisfying this criterion.

has a Hamming distance of at most t bits to the ﬁngerprint
FCd1
of the targeted device d1. We focus our analysis there-
fore on examining whether an attacker is able to fabricate
ﬁngerprints F (cid:48)
When the attacker A has no access to actual context mea-
is extracted, A has the fol-
surements based on which FCd1
lowing options for fabricating the ﬁngerprint F (cid:48)
: a ran-
dom guess, a proﬁling-based guess, or, the use of partial
information.

Cd1

Random Guess.

In a random guess, the probability to guess one bit cor-
rectly is 0.5. Consequently, for a ﬁngerprint of length k, the
likelihood for a successful guess is therefore 2−k. The suc-
cess probability is negligibly small for typical ﬁngerprints of
tens or hundreds of bits. For example, using a ﬁngerprint-
ing window of w = 120 sec and ﬁngerprinting periods of two
hours, one already gets ﬁngerprints of 60 bits, which would
be excessively diﬃcult to guess with random guesses.

Proﬁling-Based Guesses.

An obvious improvement to this attack would be to use
proﬁled information about the distribution of bits to improve
A’s chances to fabricate valid ﬁngerprints F (cid:48)
CA . Depending
on the used ﬁngerprinting parameters, the type of context
in question as well as the time of the day, the distribution of
ﬁngerprint bits in the ﬁngerprint changes. For example, dur-
ing nighttime, when it typically is silent and dark, and thus
no signiﬁcant changes in the context parameters take place,
an overwhelming majority of bits in d1’s ﬁngerprint FCd1
will be “0” bits, with only a few “1” bits (if any) in-between.
Fig. 4 shows for the oﬃce context and the audio modality
examined in our evaluation experiments the distribution of
“1” vs. “0” bits changing according to the time of day. If A
can obtain such proﬁle information about a context where
d1 is going to be, A can utilize the proﬁled information in
fabricating ﬁngerprints F (cid:48)
CA that are more likely to have a
lower Hamming distance Ham(FCd1
, FCA ) to the ﬁngerprint
FCd1

of device d1 extracted in that context.

sociated with individual bits b ∈ FCd1

The strength of a ﬁngerprint against proﬁling-based guess-
ing attacks can be analyzed by looking at the surprisal as-
using a frequentist
interpretation of probability. We do this by calculating the
occurrence probability of a particular bit b in the ﬁngerprint
during a speciﬁc time of the day. Thus, the probability of a
particular bit (i.e., “1” or “0”) is equal to the fraction of that
bit’s occurrences in the context ﬁngerprints during that time
of the day. Given the occurrence probability of a particular
bit, we deﬁne the surprisal associated with individual bits
as follows.

Definition 4

(Surprisal σ of a fingerprint bit).
Let B be a random variable modelling the occurrence of a bit
as a ﬁngerprint bit in ﬁngerprint F . The surprisal σ asso-
ciated with the occurrence of a ﬁngerprint bit b ∈ {0, 1} is
P (B=b) ) =
the self-information of this bit σ(b) = I(b) = log(
−log(P (B = b)), and is measured in bits.

1

Definition 5

(Surprisal of a fingerprint).

The surprisal σ(F ) of a ﬁngerprint F is the sum of the sur-
prisal values of its individual bits, i.e.,

(cid:88)

b∈F

σ(F ) =

σ(b).

888For example, we can see based on Fig. 4 that context
measurements made during the night are not suitable for
generating hard-to-guess context ﬁngerprints. This is be-
cause, e.g., during the time window of 2 a.m. to 4 a.m. on
the average only 1 % of the extracted ﬁngerprint bits are “1”
bits. Each of these bits has a surprisal value of 6.3 bits per
ﬁngerprint bit, but the remaining “0” bits only have a sur-
prisal of 0.02 bits per ﬁngerprint bit. This means that, e.g.,
a 60-bit ﬁngerprint extracted during this time frame would
have only 5.8 bits of total surprisal on the average. In other
words, the attacker would have a 2−5.8 ≈ 1.8% chance of
guessing the exactly correct context ﬁngerprint by utilizing
proﬁling information.
However, since we are using a fuzzy commitment scheme,
the attacker A does not even have to guess the exact ﬁnger-
print. Any ﬁngerprint F (cid:48)
CA that is within Hamming distance
t of the ﬁngerprint FCd1
of target device d1, will enable the
attacker A to open the commitment and retrieve the correct
key derivation key Kr.

From the evaluation results (cf. Tab. 2) we can see that
in the oﬃce environment, and for the audio modality, the
context ﬁngerprints of co-located devices will deviate on the
average in ca. 10 % of the bits.
In order to let correct
peers perform key evolution successfully, we need to tune
the parameter t of the fuzzy commitment scheme so that
it allows ﬁngerprints deviating in 10 % of the bits to still
open the fuzzy commitments. Coming back to our exam-
ple of Fig. 4, this would mean that for ﬁngerprints of 60
bits we would need to set t = 6 bits. A could use this to
his advantage and fabricate during nighttime context ﬁn-
CA = {0}60 containing nothing but “0” bits. The
gerprints F (cid:48)
fuzzy commitment scheme would correct the errors this ﬁn-
, since it
gerprint has with regard to d1’s ﬁngerprint FCd1
on the average contains less than t = 6 “1” bits during the
night. The attacker A could thus successfully evolve the key
nearly every time just by targeting ﬁngerprints generated
from nighttime context data.

To thwart such attacks against ﬁngerprints with very low
surprisal values, we need to add an additional requirement:
only ﬁngerprints FCd having suﬃcient total surprisal may
be taken into account when evaluating authenticity ratings.

Requirement 1

(Surprisal threshold σthr ). When
d1 calculates the number of successful key evolution steps
with another device d , only such evolution steps may be
taken into account that have been based on ﬁngerprints FCd1
having a surprisal value σ(FCd1
Here σmarg denotes a surprisal margin required in addition
to the bits that the fuzzy commitment scheme will correct.
In eﬀect, σmarg deﬁnes, how hard it is for an attacker to
guess a ﬁngerprint F (cid:48)
CA that is required for successful key
evolution.

) > t + σmarg .

Use of Partial Information.

In addition to proﬁling-based guesses, the attacker A may
be in the position to utilize partial information about the
context ﬁngerprint FCd1
of the target device d1. Such partial
information may be available to the attacker based on the
fact that the contextual separation between the attacker’s
context and the target context, where d1 is located, is not
complete. In the case of the luminosity, this may be caused
by the fact that outdoor light is inﬂuencing the lighting con-

Figure 4: Distribution of bits and surprisal of ﬁn-
gerprints in oﬃce context depending on time of day
(audio)

ditions in both the target device d1’s context, as well as the
context of the attacker A. In the case of audio, partial in-
formation may be because of acoustic events that are heard
in both contexts.

The existence of such partial information has the eﬀect
that the ﬁngerprints FCd1
and FCA share common bits at-
tributable to this partial information. The eﬀect of the par-
tial information is signiﬁcant. If one looks at the bit simi-
larities of adversarial devices to the co-located ones, we can
see that the attacker devices share ca. 65 - 85 % of common
bits, depending on the placement of the attacker devices.

The partial information plays therefore in the attacker’s
If A can assume that his ﬁngerprint FCA contains
favor.
partial information about the target device d1’s ﬁngerprint
, A can use its own ﬁngerprint FCA as a basis for fabri-
FCd1
cating a fake ﬁngerprint F (cid:48)
CA . If we denote the bit diﬀerence
of A’s ﬁngerprint FCA and the target ﬁngerprint FCd1
with
t(cid:48), then A needs to guess only ∆t = t(cid:48) − t bit modiﬁcations
to FCA correctly to fabricate a fake ﬁngerprint F (cid:48)
CA hav-
CA ) ≤ t, and thus allowing A to participate
ing Ham(FCd1
successfully in the key evolution.
Since the A does not know which of the bits in FCA dif-
, A needs to guess a set of at
fer from d1’s ﬁngerprint FCd1
least ∆t bit positions to correct in FCA in order to obtain
CA ) ≤ t. This means
a ﬁngerprint F (cid:48)
he needs to select ∆t bits from the total set of t(cid:48) bits dif-
and ﬂip them. A can select these with a
fering with FCd1
probability of

CA having Ham(FCd1

, F (cid:48)

, F (cid:48)

(cid:1)
(cid:0) t(cid:48)
(cid:0)|FC|
(cid:1) ,

∆t

∆t

P (∆t successful corrections) =

(5)

where |FC| denotes the bit length of the used ﬁngerprints.
Consider as an example 360-bit ﬁngerprints corresponding
to, e.g., 6 hours of 1-minute observations. Assume that A
has a ﬁngerprint FCA that has a bit diﬀerence of 15 %,
i.e., t(cid:48) = 54 bits. Assume also that the fuzzy commitment
scheme corrects up to 10 % of bit diﬀerences, i.e., t = 36
bits. How diﬃcult is it for A to guess a ﬁngerprint F (cid:48)
CA ) ≤ t = 36? To do this, the attacker
with Ham(FCd1
would need to correct ∆t = 18 bits. We can calculate the
≈ 9.27 × 10−17. This is
success probability for A as
equivalent to ca. 53 bits of entropy and demonstrates that
guessing correct ﬁngerprints will be excessively diﬃcult for

(54
18)
(360
18 )

, F (cid:48)

Cd1

0102030405060700%5%10%15%20%25%30%35%40%12 pm-2 am2 am-4 am4 am-6 am6 am-8 am8 am-10 am10 am-12 am12 am-2 pm2 pm-4 pm4 pm-6 pm6 pm-8 pm8 pm-10 pm10 pm-12 pmSurprisal (bits)Fraction of 1-bits in fingerprintFraction of 1-bits infingerprintAverage surprisal offingerprint889the attacker, if the used ﬁngerprints are long enough. Note
that the length of the used ﬁngerprints can be freely chosen
depending on the security requirements of a speciﬁc use case.
The only limiting factor is the time required to acquire the
context measurements for generating the ﬁngerprints.

Some of the changes in d1’s ambient context, especially in
the ambient luminosity, can originate from environmental
changes that can also be observable by the attacker A in a
close-by room (e.g., if direct sunlight is suddenly obscured
by a cloud). A could utilize this information to give more
conﬁdence to bits b in its ﬁngerprint FCA that A knows to
originate from such environmental events. Thus, he could
limit the search space of bit positions to be ﬂipped to fab-
CA , thus decreasing the eﬀective length |FC| of the
ricate F (cid:48)
ﬁngerprint in Eq. 5 and thereby improving his chances for
success. However, in our attacker model, A is an oﬀ-the-shelf
IoT device, and does in general not have the technology to
interpret the causes behind changes in sensor readings in an
automated way. Therefore it wouldn’t be straightforward
for A to distinguish which changes in the sensor readings
are caused by such changes in the environment that are ob-
servable also in d1’s context and which are not. On the other
hand, should such technology become available in the future,
it could not only be used by A to improve its guesses, but
also by d1 to defend against guessing. While generating its
ﬁngerprint, d1 could keep track of the number of ﬁngerprint
bits b ∈ FCd1
that were inﬂuenced by changes in the envi-
ronment outside of its proximate context. The target device
d1 could then disregard such key evolution steps, for which
the number of inﬂuenced ﬁngerprint bits is too high.

6. RELATED WORK

There are various approaches proposed to establish a se-
cure pairing between devices. These approaches can be
broadly divided into two main categories: utilizing key pre-
distribution mainly addressing nodes in digital sensor net-
works (DSN), and utilizing context information for key es-
tablishment or co-presence veriﬁcation.

Key predistribution-based approaches. A scheme for
key distribution in DSNs based on predistributing keys to
nodes was presented by Eschenauer and Gligor [6]. Their
scheme ensured that when deployed, each sensor node shares
a key with a neighboring node. Chan et al. [2] extend this
basic scheme and design three enhanced key pre-distribution
schemes: the q-composite scheme, multipath reinforcement
scheme, and, random pairwise key predistribution scheme.
Liu et al. [10] propose key predistribution schemes based on
preassignment of polynomial shares to sensor network nodes:
a random subset assignment scheme and a hypercube-based
key predistribution scheme.

Traynor et al. [18] extend the key predistribution schemes
by removing the assumption of homogeneous sensor nodes
and key predistribution by introducing unbalanced proba-
bilistic key distribution. They also extend their approach
to hybrid settings in which key distribution centers (KDC)
may be available.

However, all of the above schemes are mainly targeted at
DSNs deployed in a geographically limited area. Hence they
are as such not applicable nor scalable in practice to our
setting, which involves arbitrary subsets of devices coming
from a pool of potentially millions of IoT and wearable de-
vices deployed anywhere on the planet. Also, in contrast to

DSNs that typically are deployed by a single or a few organi-
zations sharing trust associations, IoT and wearable devices
are expected to come from hundreds if not thousands of dif-
ferent manufacturers. It is highly unlikely that all potential
IoT and wearable device vendors would share mutual secu-
rity associations necessary for pre-keying of devices. These
factors make any solutions based on predistributing keys be-
tween devices infeasible to deploy in practice.

Therefore, our approach presented in this paper does not
utilize key predistribution to devices, but builds on utilizing
ambient context information for evolving a pairing key be-
tween devices consistently sharing the same context.

Context information-based approaches. Varshavsky et
al. [20] proposed to use the ﬂuctuations in the received signal
strength of WiFi broadcast packets for verifying the immedi-
ate proximity of the to-be-paired parties. This approach is,
however not suitable for IoT scenarios: it is unlikely to work
in situations in which peers are located farther away from
each other than one meter, due to the local nature of the
ﬂuctuations in WiFi signals. The authors also acknowledge
that it does not protect against man-in-the middle attacks
that are mounted by an attacker immediately behind a wall
to the user’s location, since WiFi signals are unaﬀected by
some wall materials.

Narayanan et al. [11] propose a similar approach, in which
WiFi broadcast packets are monitored to determine location
tags that peers can compare to determine whether they are
co-located or not. Their solution addresses, however, the
problem of privacy-preserving determination of co-location
and does not address the problem of pairing previously un-
known peers with each other, whereas we explicitly address
the problem of pairing personal devices.

Sch¨urmann and Sigg [16] propose to use audio for generat-
ing a shared secret between co-located peers to be used as a
pairing key. They record audio samples and calculate audio
ﬁngerprints based on them. Using Reed-Solomon encoding
for fuzzy extraction of a common key they show that in
various audio environments, cryptographic keys can be de-
rived from the surrounding audio context. Their approach
attempts to extract a large amount of entropy from a short
audio snapshot and requires therefore very exact temporal
alignment of the sound samples, which is diﬃcult to achieve
with oﬀ-the shelf devices. Our approach is diﬀerent, since
our method does not require exact temporal alignment, and
it operates on longitudinal data, extracting entropy from the
user’s context over a longer period of time. Contrary to the
approaches in [20, 11, 16], our approach can also handle sit-
uations in which an adversary is present in the correct peers’
context without breaking the authenticity of the pairing.

The problem of zero-interaction authentication utilizing
contextual proofs of presence has been discussed by Truong
et al. [19]. While their work also addresses a zero-interaction
scenario, their problem is diﬀerent: they consider the prob-
lem of co-location veriﬁcation using context information in
a setting, in which both endpoints are trusted and already
have an established security association, whereas our ap-
proach addresses the problem of pairing devices that do not
have any prior security associations with each other.

7. CONCLUSION

We have presented a novel key evolution approach for pair-
ing personal IoT and wearable devices. The approach builds

890on a robust scheme for extracting shared entropy from the
ambient context of such devices. We have also evaluated the
approach based on experiments with luminosity and ambient
noise in a number of diﬀerent environments. These results
should be understood as indicative, primarily establishing
the overall feasibility of our proposed approach. Currently
we are working on more large-scale testing in diﬀerent sce-
narios and diﬀerent contexts, which we think is of impor-
tance for further research in this area.

Acknowledgments
This work was supported in part by the Intel Institute for
Collaborative Research in Secure Computing (ICRI-SC) and
the Academy of Finland (“Contextual Security” project).

We thank Jan-Erik Ekberg for originally suggesting the
idea of strengthening a shared key between two devices over
time [5]. We would also like to thank our shepherd Florian
Kerschbaum and the anonymous reviewers for their insight-
ful feedback.

8. REFERENCES
[1] D. Balfanz, D. K. Smetters, P. Stewart, and H. C.

Wong. Talking to strangers: Authentication in ad-hoc
wireless networks. In Proc. Network and Distributed
System Security Symposium (NDSS), San Diego, CA,
USA, Feb. 2002.

[2] H. Chan, A. Perrig, and D. Song. Random key

predistribution schemes for sensor networks. In Proc.
2003 IEEE Symposium on Security and Privacy, pages
197–213, May 2003.

[3] Y. Dodis, J. Katz, L. Reyzin, and A. Smith. Robust

fuzzy extractors and authenticated key agreement
from close secrets. In C. Dwork, editor, Advances in
Cryptology - CRYPTO 2006, volume 4117 of Lecture
Notes in Computer Science, pages 232–250. Springer
Berlin Heidelberg, 2006.

[4] D. Dolev and A. C. Yao. On the security of public key
protocols. IEEE Transactions on Information Theory,
29(2):198–208, Mar 1983.

[5] J.-E. Ekberg. Key establishment in constrained
devices. graduate seminar paper in T-110.7290 -
Research Seminar on Network Security, Oct. 2006.
http://www.tcs.hut.fi/Studies/T-79.7001/
2006AUT/seminar-papers/Ekberg-paper-final.pdf.
[6] L. Eschenauer and V. D. Gligor. A key-management
scheme for distributed sensor networks. In Proc. 9th
ACM Conference on Computer and Communications
Security, CCS ’02, pages 41–47, New York, NY, USA,
2002. ACM.

[7] Gartner. Gartner says by 2017, mobile users will

provide personalized data streams to more than 100
apps and services every day, Jan. 2014.
http://www.gartner.com/newsroom/id/2654115
[Referenced 2014-04-28].

[8] Gartner. Gartner says the internet of things installed

base will grow to 26 billion units by 2020, 2014.
http://www.gartner.com/newsroom/id/2636073
[Referenced on 2014-04-28].

[9] A. Juels and M. Sudan. A fuzzy vault scheme. Designs,

Codes and Cryptography, 38(2):237–257, 2006.

[10] D. Liu, P. Ning, and R. Li. Establishing pairwise keys

in distributed sensor networks. ACM Trans. Inf. Syst.
Secur., 8(1):41–77, Feb. 2005.

[11] A. Narayanan, N. Thiagarajan, M. Lakhani,

M. Hamburg, and D. Boneh. Location privacy via
private proximity testing. In Proc. Network and
Distributed System Security Symposium (NDSS), San
Diego, CA, USA, Feb. 2011.

[12] Nest Labs. Nest thermostat and nest smoke and CO

alarm, 2014. http://nest.com/ [Referenced on
2014-04-28].
[13] Oral-B. ORAL-B R(cid:13) debuts world’s ﬁrst available

interactive electric toothbrush at mobile wold congress
2014, 2014. http://connectedtoothbrush.com/
[Referenced 2014-04-28].

[14] Quirky. Spotter multipurpose sensor, 2014.

https://www.quirky.com/shop/
609-spotter-multi-purpose-sensor [Referenced
2014-04-28].

[15] I. Reed and G. Solomon. Polynomial codes over certain

ﬁnite ﬁelds. Journal of the Society for Industrial and
Applied Mathematics, 8(2):300–304, 1960.

[16] D. Sch¨urmann and S. Sigg. Secure communication

based on ambient audio. IEEE Transactions on Mobile
Computing, 12(2):358–370, Feb 2013.

[17] J. Suomalainen, J. Valkonen, and N. Asokan. Security

associations in personal networks: A comparative
analysis. In F. Stajano, C. Meadows, S. Capkun, and
T. Moore, editors, Security and Privacy in Ad-hoc and
Sensor Networks, volume 4572 of Lecture Notes in
Computer Science, pages 43–57. Springer Berlin
Heidelberg, 2007.

[18] P. Traynor, R. Kumar, H. Choi, G. Cao, S. Zhu, and
T. La Porta. Eﬃcient hybrid security mechanisms for
heterogeneous sensor networks. IEEE Transactions on
Mobile Computing, 6(6):663–677, June 2007.

[19] H. T. T. Truong, X. Gao, B. Shrestha, N. Saxena,

N. Asokan, and P. Nurmi. Comparing and fusing
diﬀerent sensor modalities for relay attack resistance
in zero-interaction authentication. In IEEE Int. Conf.
on Pervasive Computing and Communications
(PerCom), Budapest, Hungary, Mar. 2014.

[20] A. Varshavsky, A. Scannell, A. LaMarca, and E. Lara.

Amigo: Proximity-based authentication of mobile
devices. In J. Krumm, G. Abowd, A. Seneviratne, and
T. Strang, editors, UbiComp 2007: Ubiquitous
Computing, volume 4717 of Lecture Notes in
Computer Science, pages 253–270. Springer Berlin
Heidelberg, 2007.

[21] Vigilant. Vigilant unveils smart IoT innovation for

diabetic patients, Feb. 2014. http://vigilant.ch/en/
News/Company_News/2014/0221/53.html [Referenced
2014-08-23].

[22] T. D. Wu. The secure remote password protocol. In

Proc. Network and Distributed Systems Security
Symposium (NDSS), pages 97–111, San Diego, CA,
USA, Mar. 1998.

891