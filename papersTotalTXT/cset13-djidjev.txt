Generation of SSH Network Trafﬁc Data for IDS Testbeds

Los Alamos National Laboratory, Los Alamos, New Mexico, U.S.A.

Hristo Djidjev ∗

Institute of Information and Communication Technologies, Soﬁa, Bulgaria

Lyudmil Aleksandrov

Abstract
We develop an algorithm for generating secure shell (ssh)
network trafﬁc that can ﬁnd use as a part of a testbed
for evaluating anomaly detection and intrusion detection
systems in cyber security. Given an initial dataset de-
scribing real network trafﬁc, the generator produces syn-
thetic trafﬁc with characteristics close to the original.
The objective is to match parameters of the original traf-
ﬁc such as trafﬁc volumes, session durations, diurnal pat-
terns, and relationships between hosts in terms of com-
municating pairs and subsets.

1

Introduction

One of the most challenging tasks of cyber security is
preventing the unauthorized access to computer systems
and the stored information of commercial or national se-
curity value. Intrusion detection systems (IDSs) moni-
tor the trafﬁc and try to discover evidence of malicious
activities. One approach for achieving that is to use the
methods and tools of anomaly detection, which try to dis-
cover patterns of activity that are unusual (anomalous).
In the training mode,
Such IDSs work in two modes.
the historical trafﬁc is analyzed and a model of normal
behavior is created. Such model might contain typical
values or statistical distributions of some statistical pa-
rameters of the trafﬁc and the threshold beyond which
the trafﬁc will be labeled as anomalous. In the detection
phase, the new (current) trafﬁc is analyzed and compared
to the model. If the trafﬁc is determined to be anomalous,
it is then forwarded to a cyber security specialist for ad-
ditional analysis.

In order to test existing and new anomaly and intru-
sion detection algorithms, it is often preferable to use a
generator that can produce network trafﬁc that resembles
∗The authors acknowledge and appreciate the support provided for
this work by the Los Alamos National Laboratory Directed Research
and Development Program (LDRD).

a real observed one and that uses adjustable parameters
such as the number of hosts, number of sessions, and
average session durations. Using real trafﬁc for testing
purposes has several drawbacks. Network data can be
difﬁcult or impossible to obtain for many researchers.
Sharing data between researchers can pose security or
privacy issues or be forbidden by organization’s cyber
policies. For anomaly detection testing purposes, it will
be hard to distinguish between normal and malicious real
trafﬁc, and therefore, it will be hard to evaluate the per-
formance of the tested anomaly detection tool. Using a
trafﬁc generator allows one to mix normal and malicious
trafﬁc in various scenarios and also vary the other traf-
ﬁc parameters so that the anomaly detector can be tested
under different circumstances.

In this paper we describe a new algorithm for gener-
ating normal (as opposed to malicious) network trafﬁc
based on the secure shell (ssh) protocol. The trafﬁc data
we generate is in the form of a set of ssh sessions, where
for each session we provide its source and target nodes
(corresponding to the IP addresses of hosts in the real
trafﬁc), its start time, and its duration. Our goal is to cap-
ture patterns of real trafﬁc associated with relationships
between pairs of hosts and pairs of sessions. Speciﬁ-
cally, we are interested in interrelated sessions that may
have been run by the same user during certain activity.
For instance, a legitimate user may start at host A, ssh
to host B, ssh from host B to host C (as host C may
not be directly reachable from A), and then close all ses-
sions. In such a case we consider sessions AB and BC
related. We merge such interrelated sessions in structures
we call telescoping subgraphs (TSGs) [3]. More for-
mally, TSGs are maximal subgraphs of the trafﬁc graph
that satisfy the telescoping property, illustrated on Fig-
ure 1(a). (Maximal means here that the subgraph cannot
be expanded with more edges satisfying the telescoping
property.) A decomposition of a trafﬁc graph into TSGs,
called TSG-decomposition, can be computed in nearly

Several more recent works that take into account the
network topology have targeted generation of web usage
(Internet) trafﬁc. Sommers et al. [7] describe a network
ﬂow generation tool called fs that generates trafﬁc for ar-
bitrary network topology. Vishwanath and Vahdat [10]
describe a trafﬁc generator called Swing that captures
packet interactions between applications and users as
well as burstiness of trafﬁc. However, in these and other
similar projects, e.g. tmix [11], the network topology is
speciﬁed by the user and is not re-generated based on an
analysis of historical data. Tools such as Monkey [1] that
do use empirical trace data, emulate only behavior at lo-
cal host level and fail to analyze and emulate the global
communications data patterns.

We are not aware of any other generation tool for cy-
bersecurity applications such as ours that can recreate
the global network topology and the global communica-
tion patterns, while not exactly and explicitly copying the
real network. A similar network generation problem has
been addressed from purely graph-theoretic viewpoint,
i.e., generating a random network (graph) that has ex-
pected degrees matching ones of a given graph [2]. How-
ever, that method does not take into account the temporal
information and relationships between edges (sessions)
that is key to our study. Finally, a problem that is not
a subject of this paper, generating malicious trafﬁc, has
been discussed in several works, including [5, 8].

3 Algorithm outline

The structure of our generation algorithm can be seen
as being analogous to the anomaly detection algorithm
from [3]. Both algorithms have a ﬁrst phase that pro-
cesses historical data and extract a model for the trafﬁc,
although the information in that model is a bit different
in the two cases. The information that is used in the gen-
eration algorithm, called proﬁle of the trafﬁc, includes
the indegrees and outdegrees of the nodes, the number
and sizes of the TSGs, the dependencies between edges,
i.e., which pairs of edges occur consecutively in the same
TSG, and information about session durations. That in-
formation is collected over a certain period of time (time
window) immediately preceding the current time in a
proﬁling phase, which corresponds to the training phase
in anomaly detection. The time window length W is a
run-time parameter currently set at 28 days.

Moreover, both the anomaly detection and the gener-
ation algorithm have a second phase that uses the model
created in the ﬁrst one. For anomaly detection, it is the
detection phase, where new trafﬁc is compared and eval-
uated with respect to the model. In the generation algo-
rithm, we have a generation phase, where new trafﬁc is
generated based on the model (proﬁle). After new traf-
ﬁc is generated covering certain period of time w (in our

Figure 1: A telescoping subgraph (TSG). Edges have la-
bels s, e, where s is the start time and e is the end time
of the corresponding sessions. (a) Two edges with labels
a, b and c, d can appear consecutively in a TSG only if
they satisfy a ≤ c and b ≥ d (the telescoping property).
(b) TSG-decomposition. The trafﬁc graph can be decom-
posed into maximal TSGs so that each edge belongs to
some TSG. TSGs with more than one edge are shown
with different colors. All remaining TSGs are single-
edge ones and are shown in the same color.

linear time [3].

The difference between the patterns of legitimate users
and intruders has proved useful and has been exploited
in previous anomaly detectors [3, 6]. Hence, one of our
objectives is to generate trafﬁc whose hosts and sessions
are interrelated in a way resembling the one observed in
the original trafﬁc. Other objectives are to preserve the
temporal aspects of the trafﬁc, namely, the varying levels
of activity during different days of the week and times
of the day, the session durations, the total volume of the
trafﬁc, and the distributions of the node outdegrees and
indegrees, deﬁned as the numbers of sessions with origin
or target a given host, respectively. Finally, we want our
algorithm to be scalable so that it will be able to generate
trafﬁc with tens of thousands of hosts and millions of
sessions in a reasonable time, e.g., in an hour or less.

2 Related work

One of the most comprehensive efforts to generate realis-
tic network trafﬁc was by the DARPA sponsored project
on developing an evaluation system for IDS performed
by the MIT Lincoln Laboratory [4]. Their system is
agent-based, where software programs (agents) simulate
the activities of real users. While that method can recre-
ate realistic trafﬁc volumes and application usage pat-
terns, it cannot emulate the topology of the underlying
network and the communication patterns between hosts
and servers.

2

a,bc,d(a)(b)implementation w is one hour), the new trafﬁc is added
to the model and the trafﬁc from the oldest hour is re-
moved, thereby sliding the time window forward by one
hour. Similarly, trafﬁc is generated for another hour, the
statistics are updated, and so on until the required dura-
tion for the generated trafﬁc is met.

Since the procedure outlined above requires existing
trafﬁc covering a period of at least W prior to the current
time, the question arises about how to provide an initial
trafﬁc of length W . One way will be to just use real traf-
ﬁc of such length in order to generate the new trafﬁc, and
at the end of the generation to exclude it from the ﬁnal
result. The disadvantage of this approach is that one will
not be able to freely choose some parameters of the syn-
thetic trafﬁc such as number of nodes or number of edges
(volume of trafﬁc) as they will be determined by the real
trafﬁc that we have used. Furthermore, there is the risk
of overﬁtting the model of the new trafﬁc on the model
of the old one. Hence, our generation phase contains two
modes; in the seeding mode, it generates trafﬁc for du-
ration W based on the proﬁle of the original trafﬁc; in
the second, generation mode, it generates synthetic traf-
ﬁc based on the current proﬁle and then, each time than
new trafﬁc of duration w has been created, it updates the
proﬁle taking into account that newest trafﬁc.

To summarize, the structure of our trafﬁc generating
algorithm is the following. During the proﬁling phase,
the original trafﬁc is analyzed and an initial proﬁle P
is computed. During the generation phase, in a seeding
mode, an initial trafﬁc covering a time period of length
W is generated based on P , and P is updated by us-
ing that new trafﬁc. Then in generation mode, a new
trafﬁc of length w (cid:28) W is generated based on (the up-
dated) P , and P is updated including the trafﬁc from the
newest window and dropping the oldest window-w traf-
ﬁc. (Hence, the proﬁle is always based on a time window
of length W .) The process is repeated, each time adding
new trafﬁc of time-length w, until synthetic trafﬁc of de-
sired total time is produced. We will describe each of the
phases in more details in the next sections.

4 The proﬁling phase

The purpose of this phase is to construct a proﬁle of
the original trafﬁc that will be used during the genera-
tion phase. That proﬁle should contain all the informa-
tion needed by the generation phase and it has to be or-
ganized in a data structure that will allow easy updates
when newly generated trafﬁc is taken into account.
{num, sz, ptn, dur, n, w, W}, where
- num is the total number of TSGs;
- sz(k) is the number of TSGs of size k;

Formally, we deﬁne a trafﬁc proﬁle as a tuple P =

3

- ptn gives information about connection patterns for
sets of nodes as follows: ptn(1, e) is the number
of times edge e has been observed (i.e., how many
times the endpoints of e have been connected) and
ptn(2, e, h) is the number of times edge h has been
preceded by edge e in a TSG;

- dur(e) is the duration of edge e;

- n is the number of the nodes;

- w, W are the small and the big time windows lengths.

Furthermore, num, sz, and ptn are additionally in-
dexed (stored as separate values) for each of the seven
weekdays and for each of the 24 hour combinations,
thereby allowing us to capture daily and weekly time
patterns during the generation phase.
For instance,
num[w, h] will denote the total number of TSGs for
weekday w and time of the day h, while ptn(w, h, 1, e)
is the number edge e has been observed on weekday w at
time h.

Our choice of the patterns ptn given above is dictated
by our objective to capture the communication relation-
ships between nodes; namely ptn(1, e) contains infor-
mation about which pairs of nodes have communicated
with each other, while ptn(2, e, h) can be used to deter-
mine how likely it is that a session by the nodes repre-
sented by e is followed by a session corresponding to the
endpoints of h. One could possibly consider patterns of
more than two edges, but such patterns will increase sig-
niﬁcantly the size of the proﬁle and the computational
complexity of the generation algorithm and decrease its
efﬁciency.

The procedure is outlined in Algorithm 1. First we ad-
just the number of nodes of G to match the target node
number N. If N > n, in line 5 we create a new node, add
it to the graph, connect it to the rest of the graph by new
edges, and repeat until the graph has N nodes in total.
In order to deﬁne the new edges connecting those new
nodes to the rest of G, for each new node v, we choose
randomly and uniformly a node w already in G (includ-
ing both original and newly added nodes), and for each
directed edge (w, x) or (y, w) in G deﬁne a new directed
edge (v, x) or (y, v), respectively. Finally, start time and
duration times of the new edges are assigned randomly
by sampling normal distributions with means the corre-
sponding times of the corresponding original edges.

Next, in the loop in lines 7–15, for each time win-
dow w, we construct the graph corresponding to trafﬁc
that started in that window, and then extract length-1 and
length-2 patterns and TSGs from the resulting graph. In
order to ﬁnd those patterns efﬁciently, we deﬁne an aux-
iliary graph H. H has a vertex v for each edge e = e(v)
of G and two vertices u and w of H are connected by

Algorithm 1 Computing initial proﬁle P
Input: Time windows W > 0 and w > 0, trafﬁc graph
G of n nodes and duration U = kw, number N of
nodes for generated graph
{num, sz, ptn, dur, N, w, W} for G

Output: A

proﬁle

trafﬁc

=

P

choose n − N nodes from G and remove them

create N − n new nodes and add them to G

1: if N < n then
2:
3: end if
4: if N > n then
5:
6: end if
7: for all t0 ∈ {0, w, 2w, . . . , (k − 1)w} do
8:
9:
10:

for all t1 ∈ [0, 1, . . . , w] do

t = t0 + t1
Deﬁne ˆG as the graph containing all edges

of G with start time in[t, t + w − 1].

Update the number of length-1 and

lengths-2 patterns in the W -window by
removing patterns containing expired
edges, i.e., edges whose end time is less
than t − W .

Find all length-1 and lengths-2 patterns in

ˆG and update the corresponding ptn
and dur data structures

Find all TSGs of ˆG and use their sizes to

update the num and sz structures

11:

12:

13:

end for t1

14:
15: end for t0
16: Output P

an edge of H if the target of e(u) is source of e(w) and
e(u) and e(w) satisfy the telescoping property. Hence,
the edges of H can easily be created by looking at each
node v of G and pairing each incoming with each out-
going edge for v that satisfy the telescoping property.
Then it is not hard to see that the nodes of H correspond
to length-1 patterns and the edges of H correspond to
length-2 patterns.

In order to ﬁnd the TSG-decomposition of the graph
ˆG (deﬁned in line 10 of Algorithm 1), we construct the
set S of all nodes of H that have no incoming edges.
Then the node in S are exactly the roots of the TSGs
of the decomposition, and any TSG t can be constructed
by doing a depth-ﬁrst search in H from the node corre-
sponding to the root of t. Since depth-ﬁrst search takes a
linear time to compute [9], the TSG-decomposition can
be computed in time linear to the size of H.

5 The generation phase

As mentioned above,
the generation phase has two
modes, generation of seed trafﬁc and generation of new
trafﬁc based on the seed. These stages will be described
in the next two subsections.

5.1 The seeding mode
The structure of the seeding algorithm is given in Algo-
rithm 2. We will next discuss some of the steps in more
detail.

Algorithm 2 Computing a seed trafﬁc graph
Input: A trafﬁc proﬁle P
Output: A seed graph S and its proﬁle P (S) to be used

in the generation phase

proﬁle

1: Initialize S as an empty graph and P (S) as its
2: for all t ∈ {0, w, 2w, . . . , kw = W} do
3:

Determine the weekday d and the day time h

corresponding to t

Pick a number Num of the TSGs to generate
consistent with num[d, h]
for all k ∈ {1, . . . Num} do

Pick a size s for the next TSG T using the
sz[d, h] structure
Initialize T as the empty tree
Create a root edge e using the ptn[d, h]
for all l ∈ {2, . . . , s} do

data structures and add it to T

Pick randomly an edge h = (t, u) from

T to use as a root for expansion
Create an edge f = (u, v) using the

ptn[d, h] structures and add it to T

4:

5:
6:

7:
8:

9:
10:

11:

end for l

end for k
Add T to graph S
Update the P (S) with the new trafﬁc

12:
13:
14:
15:
16: end for t
17: Output S

The algorithm loops, in lines 2–16, over all time win-
dows of length w, similar to Algorithm 1. (In our imple-
mentation, w was chosen to be one hour.) In line 4, the
value for N um is picked by sampling a normal distribu-
tion with mean num[d, h]. Similarly, in line 6, we pick s
by sampling a normal distribution with mean sz[d, h].

In line 8, we consider the following cases for deﬁning
the root edge e. If s = 1, we sample a discrete distribu-
tion determined by the frequencies in ptn(d, h, 0), i.e.,
we pick e with probability proportional to the frequency

4

of the individual edges in the (d, h) time window. We ap-
ply the same procedure if ptn(d, h, 1) has no elements,
i.e., if the number s(cid:48) of TSGs of sizes at least two in the
(d, h) time window is zero. Finally, in the case s ≥ 2
and s(cid:48) ≥ 1, we pick e by sampling a discrete distribu-
tion determined by the frequencies in ptn(d, h, 1), i.e.,
the patterns of length 2. Speciﬁcally, if the pattern (f, h)
is picked, we set e = f. The reason we use ptn(d, h, 1)
in the case s ≥ 2 instead of ptn(d, h, 0) is that the vast
majority of TSGs are of length 1, hence the latter choice
would lead to many cases where e has never been in the
same TSG with any other edge and, therefore, in the ma-
jority of cases the edges in the TSG rooted at e would not
use make use of the patterns from the proﬁle.

Next, if s > 1, Algorithm 2 adds one edge at a time
to the new TSG T until T ’s size becomes s. In line 10,
we randomly choose an edge h from the edges in T with
probability proportional to the number n(h) of length-2
patterns with ﬁrst edge h. We also assign a lower non-
zero probability for h in the case n(h) = 0. In line 11,
if there is a length-2 pattern with ﬁrst edge h, then we
choose randomly one such pattern p with probability pro-
portional to the frequency of that pattern relative to other
patterns starting with h and deﬁne f as the second edge
in p. If there is no length-2 pattern with ﬁrst edge h, then
we pick randomly an edge f from ptn(d, h, 1) with ﬁrst
node u, if there is such an edge, with probability pro-
portional to the frequency (multiplicity) of f. Finally, if
there is no such edge in ptn(d, h, 1), we pick v randomly
from the nodes of G with probability proportional to v’s
indegree in G. Finally, in line 15, the proﬁle P (S) is
updated by a procedure similar to the one described in
Algorithm 2.

5.2 The generation mode
The algorithm for the generation mode is similar to the
Algorithm 2 described in the previous section. The only
differences are that, instead of using the trafﬁc proﬁle
P for the original trafﬁc graph, we use the proﬁle P (S)
for the seed graph S, which is updated in line 15 as the
time window W slides forward, and instead of the loop
in lines 2–16 covering a time interval of W , the length
of the loop will be determined of the time period the new
trafﬁc is required to cover, which will be an input param-
eter.

6 Experimental evaluation

For our experiments we used historical ssh network traf-
ﬁc data collected at Los Alamos National Laboratory.
The subset used for testing was cleaned (faulty or du-
plicated data was removed), the packets were stitched to-
gether into sessions, and the sessions data converted into

a graph format.

We computed a trafﬁc proﬁle by applying Algorithm 1
on a graph representing trafﬁc for a period W set to 28
days. The resulting proﬁle was used in the generation
of a new trafﬁc for a period W . As described above,
the generation involves two stages, ﬁrst generating a seed
graph for a period W by using Algorithm 2, and then
using the algorithm described in Section 5.2. The seed
graph trafﬁc produced in the ﬁrst stage is ignored and
only the trafﬁc produced in the second stage is used in
the analysis. The generation process is repeated 10 times
with different random number generator seeds and the
measured values have been averaged. We compared the
indegrees, the outdegrees, the session durations, and the
diurnal trafﬁc volume patterns. The results are presented
on Figures 2 and 3.

The ﬁrst plot compares the indegrees of the original
and the generated trafﬁc, where the frequency, deﬁned
as the number of nodes with indegree d for each number
d, in the original and the generated graphs are plotted.
Since the generated trafﬁc data is averaged over 10 runs
it is smoother, while the original trafﬁc is not averaged
and hence the plot is more rugged having for some val-
ues of d no nodes with indegree d. For that reason, we
plotted a second smoothed version of the original trafﬁc
data showing the moving average of the frequency over
the last ﬁve values, which matches the generated traf-
ﬁc data more closely. The spike at point 200 is because
of the fact that all entries with d > 200, which are very
sparse, have been lumped into single entry with d = 200.
(This rule has been applied to the other plots as well.)

The second plot of Figure 2 shows a similar compar-
ison for the outdegrees. While the plots are reasonably
close, the match is not as good as in the previous case.
The reason is most likely due to the way the edges (ses-
sions) are generated. While the target of a new edge is
always chosen taking into account the proﬁle informa-
tion about indegrees, the source of a new edge is chosen
based on the ptn pattern information. For instance, if the
TSG that needs to be generated consists of the consecu-
tive edges and we have already generated the ﬁrst edge
e1, the second edge e2 is chosen based on information
how often the sequence e1, e2 occurs in the proﬁle data.
Hence, e2 would be chosen based on information not di-
rectly related to the outdegrees. However, e1 in this ex-
ample would be constructed using the indegree and out-
degree information, hence the generally good (but not
perfect) match in the plot.

The last plot of Figure 2 compares the durations. Like
the previous plot, there is a generally good match, but
also some deviations, especially for low duration values.
The likely reason is that, when an edge is created that has

5

Figure 3: Diurnal patterns for the total volume of the
original and generated trafﬁc.

Finally, Table 1 lists the Pearson correlation coefﬁ-
cients for the compared parameters for the original ver-
sus the generated and the generated smoothed trafﬁc as
discussed above. The table shows that the original and
generated trafﬁc variables are very highly correlated, es-
pecially in the smoothed case. We can therefore con-
clude that the generated trafﬁc satisﬁes the requirements
for matching the speciﬁed parameters of the original one.

Generated

Raw

Smoothed

Indeg Outdeg Dur Volume
0.84
0.96

0.94
0.97

0.83
0.93

0.99
1.00

Table 1: Correlation between indegrees, outdegrees, du-
rations, and diurnal trafﬁc volume patterns for the origi-
nal and the generated trafﬁc.

The algorithms are also relatively fast, generating a
day’s trafﬁc for roughly 10 seconds on a desktop com-
puter.

7 Conclusion

We described a method for generating ssh trafﬁc that has
similar characteristics to a real observed trafﬁc and ex-
perimentally analyzed its performance. There are several
open problems for future research. One is to generalize
the method to capture yearly trafﬁc patterns as the net-
work trafﬁc in days around public holidays (before, dur-
ing and after), other special events, vacation periods, etc.
is expected to be different from the typical patterns dur-
ing regular working days. It will also be interesting to ap-
ply the methodology to communication protocols other
than ssh. Finally, the algorithm described here generates
only ”normal” trafﬁc; for anomaly detection testbeds it is
important to have abnormal, or attacker’s trafﬁc. We are
planning to address those issues in our future work.

Figure 2: Indegree, outdegree, and duration distributions
for the original and generated trafﬁc.

no analogue in the proﬁle (an edge e between two nodes
that have never been connected in the trafﬁc used for the
proﬁle), the duration is assigned based on the average
duration for all proﬁle edges. That increases the num-
ber of instances with durations close to the average ones
and decreases the number of instances with very small
durations.

Figure 3 compares the original and generated trafﬁc
with respect to the total trafﬁc volumes for each week-
day/hour combination. There is almost a perfect match,
which can be explained by the speciﬁc way the trafﬁc is
generated, namely, that the algorithm generates the same
number and the same sizes of the TSGs speciﬁed by the
trafﬁc proﬁle for each weekday/hour, which uniquely de-
termines the total trafﬁc volume.

6

 0.1 1 10 100 1000 10000 0 40 80 120 160 200FrequencyIndegreeOriginal trafficOriginal smoothed trafficGenerated traffic 0.1 1 10 100 1000 10000 0 40 80 120 160 200FrequencyOutdegreeOriginal trafficOriginal smoothed trafficGenerated traffic 100 1000 10000 100000 1e+006 10 208 406 604 802 1000FrequencyDurationOriginal trafficOriginal smoothed trafficGenerated traffic100020003000500010000                Mon                Tue                Wed                Thu                Fri                Sat                SunTraffic volumeWeekday/hourOriginal trafficGenerated traffic[11] Michele C. Weigle, Prashanth Adurthi, F´elix
Hern´andez-Campos, Kevin Jeffay, and F. Donelson
Smith. Tmix: a tool for generating realistic tcp ap-
plication workloads in ns-2. SIGCOMM Comput.
Commun. Rev., 36(3):65–76, July 2006.

References

[1] Yu-Chung Cheng, Urs H¨olzle, Neal Cardwell, Ste-
fan Savage, and Geoffrey M. Voelker. Monkey see,
monkey do: A tool for tcp tracing and replaying.
In USENIX Annual Technical Conference, General
Track, pages 87–98, 2004.

[2] F. Chung and L. Lu. Connected components in ran-
dom graphs with given expected degree sequences.
Annals of Combinatorics, 6(2):125–145, Novem-
ber 2002.

[3] Hristo Djidjev, Gary Sandine, Curtis Storlie, and
Scott Vander Wiel. Graph based statistical analy-
sis of network trafﬁc. In Proceedings of the Ninth
Workshop on Mining and Learning with Graphs,
August 2011.

[4] R.P. Lippmann, D.J. Fried, I. Graf, J.W. Haines,
K.R. Kendall, D. McClung, D. Weber, S.E. Web-
ster, D. Wyschogrod, R.K. Cunningham, and M.A.
Zissman. Evaluating intrusion detection systems:
the 1998 DARPA off-line intrusion detection evalu-
ation. In DARPA Information Survivability Confer-
ence and Exposition, 2000. DISCEX ’00. Proceed-
ings, volume 2, pages 12–26, 2000.

[5] Darren Mutz, Giovanni Vigna, and Richard A.
Kemmerer. An experience developing an ids stim-
ulator for the black-box testing of network intru-
sion detection systems. In ACSAC, pages 374–383,
2003.

[6] Josh Neil. Scan statistics for the online detection of
locally anomalous subgraphs. Phd thesis, Univer-
sity of New Mexico, 2011.

[7] Joel Sommers, Rhys Alistair Bowden, Brian Eriks-
son, Paul Barford, Matthew Roughan, and Nick G.
Dufﬁeld. Efﬁcient network-wide ﬂow record gen-
eration. In INFOCOM, pages 2363–2371, 2011.

[8] Joel Sommers, Vinod Yegneswaran, and Paul Bar-
ford. A framework for malicious workload gen-
In Proceedings of the 4th ACM SIG-
eration.
COMM conference on Internet measurement, IMC
’04, pages 82–87, New York, NY, USA, 2004.
ACM.

[9] Robert Endre Tarjan. Depth-ﬁrst search and linear
graph algorithms. SIAM J. Comput., 1(2):146–160,
1972.

[10] Kashi Venkatesh Vishwanath and Amin Vahdat.
Realistic and responsive network trafﬁc generation.
SIGCOMM Comput. Commun. Rev., 36(4):111–
122, August 2006.

7

