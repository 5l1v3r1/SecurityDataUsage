DACSA: A Decoupled Architecture for Cloud Security Analysis

Jason Gionta1, Ahmed Azab3, William Enck1, Peng Ning1, and Xiaolan Zhang2

1North Carolina State University
{jjgionta,whenck,pning}@ncsu.edu

3Samsung Electronics Co., Ltd.
{ahmedmoneeb}@gmail.com

2Google Inc.

{czhang.us}@gmail.com

Abstract

Monitoring virtual machine execution from the hypervi-
sor provides new opportunities for evaluating cloud se-
curity. Unfortunately, traditional hypervisor based moni-
toring techniques tightly couple monitoring with internal
VM operations and as a result 1) impose unacceptably
high overhead to both guest and host environments and
2) do not scale. Towards addressing this problem, we
present DACSA, a decoupled “Out-of-VM” cloud anal-
ysis architecture for cyber testing. DACSA leverages
guest VMs that act as sensors to capture security cen-
tric information for analysis. Guest VMs and host envi-
ronments incur minimal impact. We measure DACSA’s
impact to VMs at 0-6% and host impact at 0-3% which
is only incurred during state acquisition. As a result,
DACSA can enable production environments as a testbed
for security analysis.

Introduction

1
Security is a top concern for organizations looking to
adopt cloud services [3]. Not only do organizations give
up control over the infrastructure layer, they also expect
to be co-located with VMs that may be compromised.
Despite these new security challenges, cloud computing
also offers new opportunities for enhancing and evalu-
ating security. In particular, cloud infrastructure can be
leveraged as a testbed for enabling and performing se-
curity analysis. The large scale of cloud infrastructure
allows modern data mining techniques to be applied to
massive monitoring datasets to detect patterns of attacks
that would otherwise be difﬁcult to glean within a smaller
scale environment.

In a cloud infrastructure testbed, client VMs act as sen-
sors for capturing data and identifying malicious activ-

ity. For example, port analysis can identify communi-
cation endpoints for botnets or code injection in com-
promised processes. Capturing critical security infor-
mation regarding client VMs can be enabled using hy-
pervisor based (i.e., Out-of-VM) monitoring of opera-
tions [1, 10–12].

Traditional Out-of-VM analysis interposes a layer be-
tween the guest OS and the hypervisor which is used
to intercept “live” events as they occur in the guest OS
[10–12]. For example, Revirt traps and logs all system
calls from user to kernel space recording inputs. As such,
the monitoring becomes part of the critical path of execu-
tion for guest applications, which imposes unacceptably
high overheads on host and guest workloads.

In this paper we propose DACSA, an Out-of-VM
cloud analysis architecture that decouples the analysis
from the capturing of the running memory states of
the guests. This decoupling is a conscious design de-
cision that sacriﬁces “live” monitoring for scalability
and performance. We optimize the capturing of mem-
ory states to minimize impact on VM operating envi-
ronments. Then analysis occurs ofﬂine on the captured
state, again minimizing impact on guest and host envi-
ronments. As a result, client VMs are leveraged as low
impact sensors allowing cloud infrastructure to be lever-
aged as a testbed for security testing.

DACSA is transparent to guest operations by operat-
ing Out-of-VM and with minimal impact. We leverage
techniques for quickly acquiring the running state of a
VM environment with minimal impact to VM execution.
We then use memory forensic techniques to extract secu-
rity relevant features such as process memory or library
dependencies. Relevant information can then be used as
triggers or analyzed in an automated fashion.

We provide the following contributions:

Runtime state acquisition is currently supported by many
virtualization platforms [4,5] and in-host memory acqui-
sition tools [6]. However, existing acquisition techniques
often suffer from limitations that require either 1) paus-
ing execution for several minutes while state is acquired
or 2) processing state while execution continues which
leads to unreliable information [6].

Fast Out-of-VM Context Snapshotting

The intuition of fast snapshotting is to perform the min-
imal amount of work to acquire the working context of
the machine. We observe that the majority of work as-
sociated with context acquisition techniques [4,5] results
from the process of copying data byte-by-byte.
If the
copy process can be done in an ofﬂine manner, machine
execution can continue while the context is acquired.

We facilitate copying context in an ofﬂine manner by
creating a logical copy of machine memory. Logical
copies can be made without copying data byte-by-byte
and only require creating data structures. As a result,
logical copy creation requires minimal time, CPU, and
memory resources. Also, the logical copy will remain
unchanged while execution continues.

Logical Memory Copy: We use Copy-On-Write
(COW) to facilitate creating a logical copy of memory.
COW allows multiple entities to share the same set of
data without making duplicates. The operating system
only needs to manage internal data structures represent-
ing the copy.

We create a logical copy of the VM using fork. Fork
creates an identical logical copy of the running QEMU
process using the Copy-On-Write feature of the host op-
erating system. Once forked, we allow the parent process
to continue to run the VM. The child process contains the
identical logical copy of the parent which is used to drive
analysis.

The above approach discusses a type II hypervisor.
Fast snapshots can also be accomplished on a type I hy-
pervisor by setting all guest pages to read-only and han-
dling copying pages on writes. This approach is present
by Srivastava et al. towards trusted VM snapshots [13].
Ensuring a Reliable Copy: We stop VM execution
prior to the copy creation and ﬂush all asynchronous I/O
requests. This is required as allowing two VMs to run
using the same resources will lead to a non-deterministic
state which will 1) affect the running guest environment
and 2) affect correctness of the snapshot. The period the
VM is stopped is the time it takes to create the logical
copy i.e. the time to fork the QEMU process. Once the
process is forked the parent restarts the VM. The child
process remains stopped to no longer interfere with exe-
cution.

Figure 1: DACSA Architecture: A Decoupled Approach for
VM Memory Content Acquisition and Analysis

• We design a generic architecture towards enabling
cloud infrastructure as security testbed using VMs
as low impact sensors.

• We develop a technique to acquire the running state
of a VM environment with minimal impact to the
client operating environment.

• We evaluate our architecture and show minimal im-
pact to both the guest and host environments with
ﬁxed overhead.

2 Design
The DACSA Architecture consists of three main compo-
nents: client runtime acquisition, state carving, and anal-
ysis. The client runtime acquisition is responsible for
extracting the running state of the VM environment. The
running state includes the live memory and CPU context
at the time the extraction request is made. State carving
describes the process of extracting relevant information
from the captured running state. Finally, the analysis tool
represents a corpus of third party security tools for identi-
fying threats. Figure 1 depicts the DACSA platform. For
our design discussion, we use the virtualization software
QEMU/KVM to host VMs.

2.1 Client Runtime Acquisition
Testbed analysis requires periodically acquiring the run-
ning state of VMs. The process of acquiring the run-
ning state of an executing environment is not a new idea.

HostAnalysis HostVM AttributesContext AcquisitionContext CarverVMVMContext Acquisition......HostContext AcquisitionContext CarverVMVMContext Acquisition...2.2 Context Carving
Carving is a computer forensics term to extract informa-
tion from raw memory or machine context using fore-
knowledge about the operating environment. Many ma-
ture forensic tools exist to carve out intricate information
such as process memory, API hooks, open ports, registry
key, etc. Using existing forensic tools, we can imme-
diately carve relevant VM information from the logical
copy to be used for analysis.

DACSA uses the logical copy as the datasource for
carving. The logical copy can be used to export the VM’s
physical memory in to a Raw/DD style format which is a
common format supported by existing forensic tools [2].
QEMU provides interfaces for reading guest memory by
physical address. Memory is written out in a linear fash-
ion from low to high (e.g. Raw/DD). The CPU context is
also recorded for assistance in carving.

Unfortunately, dumping memory in Raw/DD style re-
quires writing the entire memory contents of the VM
physical memory to disk proceeded by reading the ﬁle by
forensic tools. As a result, this can have a severe impact
on I/O performance for the guest and host. As an alter-
native, memory forensic techniques can also be adopted
to work directly with the logical copy by 1) creating cus-
tom carving tool for the speciﬁc operating system or 2)
providing an interface for forensic tools to work with the
logical copy.

Custom carving uses a highly tailored library to ex-
tract speciﬁc VM information based on the known in-
ternal structure of the VM operating system. The ex-
tracted information is highly dependent on the analysis
being performed.

Interfacing the logical copy directly with forensic tools
provides the most beneﬁt without imposing the costs of
writing and reading the entire memory contents to/from
disk. To build an interface, a shared library is created
which hooks I/O operations for the forensic tool. I/O op-
erations that are requested for the logical copy are sim-
ulated. For example, open requests for the logical copy
will return a fake ﬁle descriptor that is tracked. Requests
not speciﬁc to the logical copy are passed through as nor-
mal.

2.3 Analysis
DACSA’s analysis component takes information from
carving as input for analysis. Information is then sent to
a separate machine for analysis. This prevents resource
contention and security that could affect both the host
and guest operating environments.

Analysis can be done on a per VM basis such as scan-
ning for malware or across VM by clustering features
such as library dependencies. Bianchi et al. have pre-
viously clustered kernel features can be used to identify

unknown rootkit installations [6].

3

Implementation

We prototype the DACSA platform using QEMU/KVM
[5] virtualization software. We extend QEMU’s monitor
interface to allow for new context acquisition and carv-
ing requests. Our host is Ubuntu 12.04 64-bit and VM
environment is Windows 7 SP1 64-bit.

Our custom carving tool uses the internal structure of
Windows to walk the processes in memory. We use the
kernel’s GS (64-bit)/FS (32bit) register which contains
the Kernel Process Control Region (KPCR) to ﬁnd the
head EPROCESS data structure. In some cases, the CPU
context may contain userspace data and thus the GS/FS
register points to the Thread Environment Block (TEB).
In this case we can use a cached KPCR value or linear
scan the physical memory to ﬁnd the KPCR data struc-
ture [2].

Our I/O interception library is a generic shared li-
brary for use with *nix based operating systems which
support dynamic linking. The shared library contains
functions to handle basic I/O operations such as open,
close, read, lseek, fstat, etc. Upon an open, lstat, or xstat
call, our interception library checks the name of the ﬁle
against a pre-known value representing the logical mem-
ory copy and takes appropriate action to handle the oper-
ation. Shared memory is used to enable communication
and data marshaling between the logical copy and I/O
interception library. Read operations result in data being
copied from the logical copy to the provided buffer.

We use the above carving mechanisms to extract all
process virtual memory. In Windows, this can be done by
walking the VAD (Virtual Address Descriptor) tree [9].
We then scan the VADs with ClamAV Anti-Virus soft-
ware to identify any potential malware running in the
guest environment.

4 Evaluation

We evaluate DACSA on an IBM System X server with
a Xeon E5450 Quad-Core CPU with 32GB RAM. Each
guest is conﬁgured with 1GB RAM and 1 VCPU.

DACSA seeks to enable client VMs as low impact sen-
sors which limit the impact to the guest and host environ-
ments. The impact of DACSA on the guest environment
is 1) the time the VM is stopped to create the logical
copy and 2) the observed guest machine performance re-
duction during the snapshot and carving process.

We measure the average time the VM is stopped at
0.2112 seconds with a standard deviation of 0.07359 sec-
onds. This time may not be distinguishable from other
working latency (e.g. WAN latency, I/O bound pro-

Table 2: Host Percent Utilization. Note: CPU Util. for All VMs is CPU cost per snapshot.

CPU Utilization

Memory Utilization

VMs

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

Idle

0.24
0.33
0.95
1.19
0.94

1

1.03
1.29
1.24
1.68
1.04
1.46
1.89
1.83
1.26

1 VM All Vms
Snapshot
1.89
2.07
2.25
2.36
2.66
2.2
2.3
2.53
2.51
2.87
2.44
2.55
2.84
3.23
2.6

1.7
1.53
1.423
1.362
1.366
1.4
1.385
1.445
1.333
1.266
1.236
1.175
1.168
1.13
1.102

Idle

10.3
13.8
17.37
20.93
24.5
28.16
31.76
34.85
37.84
40.89
43.87
46.84
49.84
52.75
55.83

21

1 VM All Vms
Snapshot
10.34
10.31
13.86
13.81
17.39
17.42
20.95
24.55
28.18
31.77
34.74
37.64
40.72
43.66
46.72
49.67
52.65
55.65

24.62
28.24
31.67
34.69
37.63
40.69
43.54
46.59
49.5
52.59
55.52

Table 1: Guest Performance Impact (Idle VMs used as base-
line)

CPU Ops/Sec

VMs

1 VM

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

101.737
98.6734
98.8032
96.4023
95.9635
98.9038
102.878
98.8272
99.7351
97.905
97.0239
99.5379
98.0907
100.227
96.7603

All VMs
Snapshot
100.364
96.4428
96.6209
96.0401
97.6089
97.1004
99.4367
96.0313
98.6273
96.0243
97.5519
97.6411
94.4631
93.9003
96.5923

Memory Ops/Sec
All VMs
1 VM
Snapshot
98.9737
98.6737
97.7142
98.9995
97.0413
97.4161
98.6395
98.8463
98.8661
98.9277
97.3235
100.811
99.1737
97.6079
98.6042

98.4414
100.049
99.3542
98.7704
97.9539
97.5546
99.1186
98.5701
98.8986
98.3499
98.9141
100.976
100.327
98.9583
100.306

cesses, etc.). However, applications that are latency sen-
sitive should be aware of the potential impacts.

To measure the impact of DACSA on the guest, we
run NovaBench in the VM while snapshotting is per-
formed. We incrementally start VMs to observe the im-
pact of DACSA under different host loads. We record the
difference between snapshotting and carve a single run-
ning VM (i.e. “1 VM”) and all running VMs on the host
(i.e. “All VMs Snapshot”). The carving process simply
identiﬁes the running processes in the guest VM. Table 1
contains the performance impact on the guest CPU and

Memory compared to an idle VM baseline. CPU perfor-
mance is based on the number of integer operations per
second while Memory is measured on Read/Write opera-
tions per second. We observe the maximum CPU impact
is ≈6% while maximum Memory impact is ≈4%. The
observed impact is only during the snapshot and carving
process. The actual impact to guest VMs is dependent
on the length of time required to complete the carving
process. This is due to the fact that the OS manages the
copies of COW memory pages while the logical copy
is held in memory. We note the impact observed while
snapshotting one VM versus all VMs is the same allow-
ing scalability across the host.

We measure the impact on the host by observing the
CPU and Memory utilization during the snapshot pro-
cess. Again, we incrementally start VMs and take snap-
shots and carve process list information of a single VM
and all running VMs. Results are found in Table 2. The
host memory utilization has no noticeable impact due to
Copy-on-Write. The CPU impact during a single snap-
shot is ≈2%. The “All VMs Snapshot” depicts the CPU
cost per VM snapshot. During the carving process, the
executing VM will modify memory which will causes
the host to copy pages and increase the write working
set. We measured the rate at which the write working set
increases at 100-300 MB per minute. Carving typically
takes on the order of seconds to extract necessary infor-
mation. However, we note the time required to carve is
dependent on the type of information being extracted for
analysis.

We evaluated the correctness of the carving compo-
nents by extracting all virtual memory for all processes

from one logical copy. We then wrote the logical copy to
disk using the slow QEMU supported memory snapshot-
ting. The snapshot on disk was loaded with Volatility [2]
and we extracted the virtual memory of all processes. We
then bitwise compared each memory segment with the
memory extracted virtual memory Volatility. We identi-
ﬁed all identical copies from both Volatility and our tool.
We then ran the malware, Cerberus Remote Adminis-
tration Tool, in a VM and infected an Internet Explorer
process. After which, we acquired the machine context
of the infected machine, extracted the memory segments,
and scanned each segment using ClamAV. ClamAV cor-
rectly identiﬁed the infected Internet Explorer process.

5 Related Work
Performing Out-of-VM analysis is not a new idea [6,10–
12]. For example, VMWatcher proposes running a virus
scanner on VM ﬁles while the system is running [12].
Unfortunately, VMWatcher tightly couples the guest en-
vironment and analysis preventing scalability. Revirt de-
couples analysis and monitoring by recording the guest
VM operations [11]. Analysis is then done by replaying
the execution. However, Revirt adds up to 58% over-
head to the monitoring VM environment. DACSA adds
4% only during the snapshot and extraction phase which
is only in the order of seconds. Similar to Revirt, Af-
tersight seeks to decouple analysis from monitoring by
recording and replaying execution [7]. However, After-
sight suffers from large log ﬁles which are not suitable
for multiple co-located VMs. Virtuoso allows Out-of-
VM utilities to be run on live VM memory with mini-
mal overhead [10]. However, Virtuoso requires exten-
sive training to be done on the target VM to generate
Out-of-VM utilities. Furthermore, training on the VM
must be redone after each operating system update or in-
ternal structure change. Blacksheep clusters Window’s
Kernel features to identify new rootkits [6]. However,
Blacksheep is not suitable for production environments
as guest machines are stopped for minutes while exe-
cution context is captured. Trend Micro has released a
product called Deep Security which provides “agentless”
monitoring of VMs for malware and ﬁle integrity check-
ing [1]. Unfortunately, the product does not seem to deal
with VM memory but only ﬁle system interactions. Fur-
thermore, Trend Mirco has not provided an evaluation of
the impact of Deep Security on VM performance.

DACSA’s approach to fast memory snapshots has sim-
ilarities to research and techniques into VM migration
and cloning. Clark et al. presented Live VM migration
where VM’s running state was copied to a new machine
while the VM continues to run. The process of copy-
ing can take upwards of 90 seconds wherein the VM
observes performance degradation in throughput up to

20% [8]. DACSA sees less than 5% for only a few sec-
onds. Sun et al. proposed fast VM cloning based on
Xen using COW to write protect pages from the hyper-
visor [14]. The paper discusses the technical challenges
of duplicating and sharing VM memory on a clone oper-
ation. DACSA sidesteps these challenges by leveraging
the process level COW features of forking.

6 Recognition
This work is supported by U.S. National Science Foun-
dation (NSF) under grant 0910767, the U.S. Army Re-
search Ofﬁce (ARO) under grant W911NF-08-1-0105
managed by NCSU Secure Open Systems Initiative
(SOSI), and an IBM Open Collaboration Faculty Award.
We would like to thank the reviewers for their insight-
ful comments and critiques. We would especially like to
thank Eric Eide for his guidance on revisions and insight
into existing literature.

7 Conclusion
In this work, we propose DACSA a decoupled Out-of-
VM cloud security analysis architecture. DACSA lever-
ages VMs as low impact sensors enabling virtualized
cloud infrastructure to be leveraged as a security analysis
testbed. DACSA uses fast snapshots to acquire the run-
ning context of VMs with minimal impact to client oper-
ation. Existing memory forensic techniques can then be
used to extract security centric information from running
VMs. Analysis of the extracted information can then be
performed in an ofﬂine fashion to limit impact to the host
and VM environments. Our preliminary results demon-
strate DACSA to be a promising approach towards low-
intrusive, scalable security analysis for the cloud.

References
[1] Agentless security. Trend Micro.
[2] The volatility framework: volatile memory artifact

extraction utility framework. Volatile Systems.

[3] Michael Armbrust, Armando Fox, Rean Grifﬁth,
Anthony D. Joseph, Randy Katz, Andy Konwinski,
Gunho Lee, David Patterson, Ariel Rabkin, Ion Sto-
ica, and Matei Zaharia. A view of cloud computing.
Commun. ACM, 2010.

[4] Paul Barham, Boris Dragovic, Keir Fraser, Steven
Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian
Pratt, and Andrew Warﬁeld. Xen and the art of vir-
tualization. In Proceedings of the nineteenth ACM
symposium on Operating systems principles, 2003.
[5] Fabrice Bellard. Qemu, a fast and portable dynamic
translator. In Proceedings of the annual conference
on USENIX Annual Technical Conference, 2005.

[6] Antonio Bianchi, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. Blacksheep: detect-
ing compromised hosts in homogeneous crowds. In
Proceedings of the 2012 ACM conference on Com-
puter and communications security, 2012.

[7] Jim Chow, Tal Garﬁnkel, and Peter M Chen. De-
coupling dynamic program analysis from execution
in virtual environments. In USENIX 2008 Annual
Technical Conference on Annual Technical Confer-
ence, pages 1–14, 2008.

[8] Christopher Clark, Keir Fraser, Steven Hand, Ja-
cob Gorm Hansen, Eric Jul, Christian Limpach,
Ian Pratt, and Andrew Warﬁeld. Live migration of
virtual machines. In Proceedings of the 2nd con-
ference on Symposium on Networked Systems De-
sign & Implementation-Volume 2, pages 273–286.
USENIX Association, 2005.

[9] Brendan Dolan-Gavitt. The vad tree: A process-eye
view of physical memory. Digit. Investig., Septem-
ber 2007.

[10] Brendan Dolan-Gavitt, Tim Leek, Michael Zhivich,
Jonathon Gifﬁn, and Wenke Lee. Virtuoso: Nar-
rowing the semantic gap in virtual machine intro-
spection. In Proceedings of the 2011 IEEE Sympo-
sium on Security and Privacy, SP ’11, 2011.

[11] George W. Dunlap, Samuel T. King, Sukru Cinar,
Murtaza A. Basrai, and Peter M. Chen. Revirt: en-
abling intrusion analysis through virtual-machine
logging and replay. In Proceedings of the 5th sym-
posium on Operating systems design and imple-
mentation, 2002.

[12] Xuxian Jiang, Xinyuan Wang, and Dongyan Xu.
Stealthy malware detection through vmm-based
”out-of-the-box” semantic view reconstruction. In
Proceedings of the 14th ACM conference on Com-
puter and communications security, 2007.

[13] Abhinav Srivastava, Himanshu Raj, Jonathon Gif-
ﬁn, and Paul England.
Trusted vm snapshots
In Research
in untrusted cloud infrastructures.
in Attacks, Intrusions, and Defenses, pages 1–21.
Springer, 2012.

[14] Yifeng Sun, Yingwei Luo, Xiaolin Wang, Zhenlin
Wang, Binbin Zhang, Haogang Chen, and Xiaom-
ing Li. Fast live cloning of virtual machine based
on xen. In High Performance Computing and Com-
munications, 2009. HPCC’09. 11th IEEE Interna-
tional Conference on, pages 392–399. IEEE, 2009.

