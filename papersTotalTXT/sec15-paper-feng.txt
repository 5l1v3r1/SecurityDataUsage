LinkDroid: Reducing Unregulated Aggregation  

of App Usage Behaviors

Huan Feng, Kassem Fawaz, and Kang G. Shin, University of Michigan

https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/feng

This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-931971-232Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXLinkDroid: Reducing Unregulated Aggregation of App Usage Behaviors

Huan Feng, Kassem Fawaz, and Kang G. Shin

Department of Electrical Engineering and Computer Science

The University of Michigan

{huanfeng, kmfawaz, kgshin}@umich.edu

Abstract

Usage behaviors of different smartphone apps capture
different views of an individual’s life, and are largely in-
dependent of each other. However, in the current mobile
app ecosystem, a curious party can covertly link and ag-
gregate usage behaviors of the same user across different
apps. We refer to this as unregulated aggregation of app-
usage behaviors. In this paper, we present a fresh per-
spective of unregulated aggregation, focusing on moni-
toring, characterizing and reducing the underlying linka-
bility across apps. The cornerstone of our study is the
Dynamic Linkability Graph (DLG) which tracks app-
level linkability during runtime. We observed how DLG
evolves on real-world users and identiﬁed real-world ev-
idence of apps abusing IPCs and OS-level identifying in-
formation to establish linkability. Based on these obser-
vations, we propose a linkability-aware extension to cur-
rent mobile operating systems, called LinkDroid, which
provides runtime monitoring and mediation of linkabil-
ity across different apps. LinkDroid is a client-side
solution and compatible with the existing smartphone
ecosystem.
It helps end-users “sense” this emerging
threat and provides them intuitive opt-out options.

1 Introduction

Mobile users run apps for various purposes, and exhibit
very different or even unrelated behaviors in running dif-
ferent apps. For example, a user may expose his chatting
history to WhatsApp, mobility traces to Maps, and po-
litical interests to CNN. Information about a single user,
therefore, is scattered across different apps and each app
acquires only a partial view of the user. Ideally, these
views should remain as ‘isolated islands of information’
conﬁned within each of the different apps. In practice,
however, once the users’ behavioral information is at the
hands of the apps, it may be shared or leaked in an ar-
bitrary way without the users’ control or consent. This
makes it possible for a curious adversary to aggregate

usage behaviors of the same user across multiple apps
without his knowledge and consent, which we refer to as
unregulated aggregation of app-usage behaviors.

In the current mobile ecosystem, many parties are in-
terested in conducting unregulated aggregation, includ-
ing:

• Advertising Agencies embed ad libraries in different
apps, establishing an explicit channel of cross-app
usage aggregation. For example, Grindr is a geoso-
cial app geared towards gay users, and BabyBump
is a social network for expecting parents. Both apps
include the same advertising library, MoPub, which
can aggregate their information and recommend re-
lated ads, such as on gay parenting books. However,
users may not want this type of unsolicited aggre-
gation, especially across sensitive aspects of their
lives.

• Surveillance Agencies monitor all aspects of the
population for various precautionary purposes,
some of which may cross the ‘red line’ of individu-
als’ privacy. It has been widely publicized that NSA
and GCHQ are conducting public surveillance by
aggregating information leaked via mobile apps, in-
cluding popular ones such as Angry Birds [3]. A
recent study [26] shows that a similar adversary is
able to attribute up to 50% of the mobile trafﬁc to
the “monitored” users, and extract detailed personal
interests, such as political views and sexual orienta-
tions.

• IT Companies in the mobile industry frequently
acquire other app companies, harvesting vast user
base and data. Yahoo alone acquired more than 10
mobile app companies in 2013, with Facebook and
Google following closely behind [1]. These acquisi-
tions allow an IT company to link and aggregate be-
haviors of the same user from multiple apps without
the user’s consent. Moreover, if the acquiring com-

USENIX Association  

24th USENIX Security Symposium  769

pany (such as Facebook) already knows the users’
real identities, usage behaviors of all the apps it ac-
quires become identiﬁable.

These scenarios of unregulated aggregation are realis-
tic, ﬁnancially motivated, and are only becoming more
prevalent in the foreseeable future. In spite of this grave
privacy threat, the process of unregulated aggregation is
unobservable and works as a black box — no one knows
what information has actually been aggregated and what
really happens in the cloud. Users, therefore, are largely
unaware of this threat and have no opt-out options. Exist-
ing proposals disallow apps from collecting user behav-
iors and shift part of the app logic (e.g., personalization)
to the mobile OS or trusted cloud providers [7, 17]. This,
albeit effective, is against the incentive of app developers
and requires construction of a new ecosystem. There-
fore, there is an urgent need for a practical solution that
is compatible with the existing mobile ecosystem.

In this paper, we propose a new way of addressing the
unregulated aggregation problem by monitoring, charac-
terizing and reducing the underlying linkability across
apps. Two apps are linkable if they can associate their
usage behaviors of the same user. This linkability is the
prerequisite of conducting unregulated aggregation and
represents an upper-bound of the potential threat. Re-
searchers studied linkability under domain-speciﬁc sce-
narios, such as on movie reviews [19] and social net-
works [16]. In contrast, we focus on the linkability that
is ubiquitous in the mobile ecosystem and introduced
by domain-independent factors, such as device IDs, ac-
count numbers, location and inter-app communications.
Speciﬁcally, we model mobile apps on the same device
as a Dynamic Linkability Graph (DLG) which moni-
tors apps’ access to OS-level identifying information and
cross-app communication channels. DLG quantiﬁes the
potential threat of unregulated aggregation and allows us
to monitor the linkability across apps during runtime.

We implemented DLG as an Android extension and
observed how it evolved on 13 users during a period of
47 days. The results reveal an alarming view of the app-
level linkability in the wild. Two random apps (installed
by the same user) are linkable with a probability of 0.81.
Speciﬁcally, 86% of the apps a user installed are directly
linkable to the Facebook app, namely, his real iden-
tity. In particular, we found that apps frequently abuse
OS-level information and inter-process communication
(IPC) channels in unexpected ways, establishing the link-
ability that is unrelated to app functionalities. For exam-
ple, we found that many of the apps requesting account
information collect all of the user’s accounts even when
they only need one to function correctly. We also no-
ticed that some advertising agencies, such as Admob and
Facebook, use IPCs to share user identiﬁers with other

apps, completely bypassing system permissions and con-
trols. Furthermore, we identiﬁed cases when different
apps write and read the same persistent ﬁle in shared stor-
age to exchange user identiﬁers. The end-users should
be promptly warned about these unexpected behaviors to
reduce unnecessary linkability.

Based on the above observations, we propose
LinkDroid, a linkability-aware extension to Android
which provides runtime monitoring and mediation of the
linkability across apps. LinkDroid introduces a new di-
mension to privacy protection on smartphones. Instead
of checking whether some app behavior poses direct pri-
vacy threat, LinkDroid warns users about how it implic-
itly affects the linkability across apps. Practicality is a
main driver for the design of LinkDroid. It extends the
widely-deployed (both runtime and install-time) permis-
sion model on the mobile OS that end-users are already
familiar with. Speciﬁcally, LinkDroid provides the fol-
lowing privacy-enhancing features:

• Install-Time Obfuscation: LinkDroid obfuscates
device-speciﬁc identiﬁers that have no inﬂuence on
most app functionalities, such as IMEI, Android ID,
etc. We perform this during install-time to maintain
the consistency of these identiﬁers within each app.

• Runtime Linkability Monitoring: When an app
tries to perform a certain action that introduces ad-
ditional linkability, users will receive a just-in-time
prompt and an intuitive risk indicator. Users can
then exercise runtime access control and choose any
of the opt-out options provided by LinkDroid.

• Unlinkable Mode: The user can start an app in un-
linkable mode. This will create a new instance of
the app which is unlinkable with other apps. All
actions that may establish a direct association with
other apps will be denied by default. This way, users
can enjoy ﬁner-grained privacy protection, unlink-
ing only a set of app sessions.

We evaluated LinkDroid on the same set of 13 users
as in our measurement and found that LinkDroid re-
duces the cross-app linkability substantially with little
loss of app performance. The probability of two random
apps being linkable is reduced from 0.81 to 0.21, and the
percentage of apps that are directly linkable to Facebook
drops from 86% to 18%. On average, a user only needs
to handle 1.06 prompts per day in the 47-day experiments
and the performance overhead is marginal.

This paper makes the following contributions:

1. Introduction of a novel perspective of defending
against unregulated aggregation by addressing the
underlying linkability across apps (Section 2).

770  24th USENIX Security Symposium 

USENIX Association

2. Proposal of the Dynamic Linkability Graph (DLG)
which enables runtime monitoring of cross-app
linkability (Section 3).

3. Identiﬁcation of real-world evidence of how apps
abuse IPCs and OS-level information to establish
linkability across apps (Section 4).

4. Addition of a new dimension to access control
based on the runtime linkability, and development
of a practical countermeasure, LinkDroid, to de-
fend against unregulated aggregation (Section 5).

2 Privacy Threats: A New Perspective

In this section, we will ﬁrst introduce our threat model
of unregulated aggregation and then propose a novel per-
spective of addressing it by monitoring, characterizing
and reducing the linkability across apps. We will also
summarize the explicit/implicit sources of linkability in
the current mobile app ecosystem.

2.1 Threat Model
In this paper, we target unregulated aggregation across
app-usage behaviors,
i.e., when an adversary aggre-
gates usage behaviors across multiple functionally-
independent apps without users’ knowledge or consent.
In our threat model, an adversary can be any party that
collects information from multiple apps or controls mul-
tiple apps, such as a widely-adopted advertising agency,
an IT company in charge of multiple authentic apps, or a
set of malicious colluding apps. We assume the mobile
operating system and network operators are trustworthy
and will not collude with the adversary.

2.2 Linkability: A New Perspective
There are many parties interested in conducting unregu-
lated aggregation across apps. In practice, however, this
process is unobservable and works as a black box — no
one knows what information an adversary has collected
and whether it has been aggregated in the cloud. Ex-
isting studies propose to disable mobile apps from col-
lecting usage behaviors and shift part of the app logic
to trusted cloud providers or mobile OS [7, 17]. These
solutions, albeit effective, require building a new ecosys-
tem and greatly restrict functionalities of the apps. Here,
we address unregulated aggregation from a very differ-
ent angle by monitoring, characterizing and reducing the
underlying linkability across mobile apps. Two apps
are linkable if they can associate usage behaviors of the
same user. This linkability is the prerequisite of conduct-
ing unregulated aggregation, and represents an “upper-
bound” of the potential threat.
In the current mobile

Type

Android ID

IMEI
MAC

Account
Contacts

2013-3
80%
61%
28%
24%
21%

2013-10

84%
64%
42%
29%
26%

2014-8
87%
65%
51%
32%
33%

2015-1
91%
68%
55%
35%
37%

Table 1: Apps are increasingly interested in requesting persis-
tent and consistent identifying information during the past few
years.

app ecosystem, there are various sources of linkability
that an adversary can exploit. Researchers have stud-
ied linkability under several domain-speciﬁc scenarios,
such as movie reviews [19] and social networks [16].
Here, we focus on the linkability that is ubiquitous and
domain-independent. Speciﬁcally, we group its con-
tributing sources into the following two fundamental cat-
egories.

OS-Level Information The mobile OS provides apps
ubiquitous access to various system information, many
of which can be used as consistent user identiﬁers across
apps. These identiﬁers can be device-speciﬁc, such as
MAC address and IMEI, user-speciﬁc, such as phone
number or account number, or context-based, such as lo-
cation or IP clusters. We conducted a longitudinal mea-
surement study from March 2013 to January 2015, on the
top 100 free Android apps in each category. We excluded
the apps that are rarely downloaded, and considered only
those with more than 1 million downloads. We found
that apps are getting increasingly interested in request-
ing persistent and consistent identifying information, as
shown in Table 1. By January 2015, 96% of top free apps
request both the Internet access and at least one persis-
tent identifying information. These identifying vectors,
either explicit or implicit, allow two apps to link their
knowledge of the same user at a remote side without even
trying to bypass on-device isolation of the mobile OS.

Inter-Process Communications The mobile OS pro-
vides explicit Inter-Process Communication (IPC) chan-
nels, allowing apps to communicate with each other and
perform certain tasks, such as export a location from
Browser and open it with Maps. Since there is no exist-
ing control on IPC, colluding apps can exchange iden-
tifying information of the user and establish linkabil-
ity covertly, without the user’s knowledge. They can
even synchronize and agree on a randomly-generated se-
quence as a custom user identiﬁer, without accessing any
system resource or permission. This problem gets more
complex since apps can also conduct IPC implicitly by
reading and writing shared persistent storage (SD card

USENIX Association  

24th USENIX Security Symposium  771

3.2 Deﬁnitions and Metrics
Linkable Two apps a and b are linkable if there is a
path between them. In Fig. 15, app A and F are linkable,
app A and H are not linkable.

Gap is deﬁned as the number of nodes (excluding the
end nodes) on the shortest path between two linkable
apps a and b.
It represents how many additional apps
an adversary needs to control in order to link informa-
tion across a and b. For example, in Fig. 15, gapA,D = 0,
gapA,E = 1, gapA,G = 2.

Linking Ratio (LR) of an app is deﬁned as the number
of apps it is linkable to, divided by the number of all
installed apps. LR ranges from 0 to 1 and characterizes
to what extent an app is linkable to others. In DLG, LR
equals to the size of the Largest Connected Component
(LCC) this app resides in, excluding itself, divided by the
size of the entire graph, also excluding itself:

LRa =

size(LCCa) − 1
size(DLG) − 1

Linking Effort (LE)
of an app is deﬁned as the Link-
ing Effort (LE) of an app as the average gap between
it and all the apps it is linkable to. LEa characterizes
the difﬁculty in establishing linkability with a. LEa = 0
means that to link information from app a and any ran-
dom app it is linkable to, an adversary does not need ad-
ditional information from a third app.

LEa = ∑
b∈LCCa

b�=a

gapa,b

size(LCCa) − 1

LR and LE describe two orthogonal views of the
DLG. In general, LR represents the quantity of links,
describing the percentage of all installed apps that are
linkable to a certain app, whereas LE characterizes the
quality of links, describing the average amount of ef-
fort an adversary needs to make to link a certain app
In Fig. 15, LRA = 6/8, LRH = 1/8;
with other apps.
LEA = 0+0+0+1+1+2

= 4/6, LEH = 0.

7−1

GLR and GLE Both LR and LE are deﬁned for a sin-
gle app, and we also need two similar deﬁnitions for
the entire graph. So, we introduce Global Linking Ra-
tio (GLR) and Global Linking Effort (GLE). GLR repre-
sents the probability of two randomly selected apps be-
ing linkable, while GLE represents the number of apps
an adversary needs to control to link two random apps.

GLR = ∑

a

LRa

size(DLG)

Figure 1: An illustrative example of DLG. Edges of different
types represent linkability introduced by different sources.

and databases). As we will show in Section 4, these ex-
ploitations are not hypothetical and have already been
utilized by real-world apps.

3 Dynamic Linkability Graph

The cornerstone of our work is the Dynamic Linkability
Graph (DLG). It enables us to monitor app-level linka-
bility during runtime and quantify the linkability intro-
duced by different contributing sources. In what follows,
we will elaborate on the deﬁnition of DLG, the linka-
bility sources it considers, and describe how it can be
implemented as an extension of Android.

3.1 Basic Concepts

We model linkability across different apps on the same
device as an undirected graph, which is called the Dy-
namic Linkability Graph (DLG). Nodes in DLG repre-
sent apps and edges represent linkability introduced by
different contributing sources. DLG monitors the linka-
bility during runtime by tracking the apps’ access to var-
ious OS-level information and IPC channels. An edge
exists between two apps if they accessed the same identi-
fying information or engaged in an IPC. Fig. 15 presents
an illustrative example of DLG.

DLG presents a comprehensive view of the linkability
across all installed apps. An individual adversary, how-
ever, may only observe a subgraph of the DLG. For ex-
ample, an advertising agency only controls those apps
(nodes) that incorporate the same advertising library; an
IT corporate only controls those apps (nodes) it has al-
ready acquired. In the rest of the paper, we focus on the
generalized case (the entire DLG) instead of considering
each adversary individually (subgraphs of DLG).

772  24th USENIX Security Symposium 

USENIX Association

GLE =

1

∑a size(LCCa) − 1 ∑

b

gapb,c

∑
c∈LCCb

c�=b

In graph theory, GLE is also known as the Charac-
teristic Path Length (CPL) of a graph, which is widely
used in Social Network Analysis (SNA) to characterize
whether the network is easily negotiable or not.

3.3 Sources of Linkability
DLG maintains a dynamic view of app-level linkability
by monitoring runtime behaviors of the apps. Specif-
ically, it keeps track of apps’ access to device-speciﬁc
identiﬁers (IMEI, Android ID, MAC), user-speciﬁc iden-
tiﬁers (Phone Number, Accounts, Subscriber ID, ICC Se-
rial Number), and context-based information (IP, Nearby
APs, Location). It also monitors explicit IPC channels
(Intent, Service Binding) and implicit IPC channel (In-
direct RW, i.e., reading and writing the same ﬁle or
database). This is not an exhaustive list but covers most
standard and widely-used aggregating channels. Table 2
presents a list of all the contributing sources we consider
and the details of each source will be elaborated in Sec-
tion 3.4.

The criterion of two apps being linkable differs de-
pending on the linkability source. For consistent iden-
tiﬁers that are obviously unique — Android ID, IMEI,
Phone Number, MAC, Subscriber ID, Account, ICC Se-
rial Number — two apps are linkable if they both ac-
cessed the same type of identiﬁer. For pair-wise IPCs
— intents, service bindings, and indirect RW — the two
communicating parties involved are linkable. For im-
plicit and fuzzy information, such as location, nearby
APs, and IP, there are well-known ways to establish link-
ability as well. User-speciﬁc location clusters (Points of
Interests, or PoIs) is already known to be able to uniquely
identify a user [11, 15, 29]. Therefore, an adversary can
link different apps by checking whether the location in-
formation they collected reveal the same PoIs. Here,
the PoIs are extracted using a lightweight algorithm as
used in [5, 10]. We select the top 2 PoIs as the link-
ing standard, which typically correspond to home and
work addresses. Similarly, the consistency and persis-
tence of a user’s PoIs are also reﬂected on its AP clusters
and frequently-used IP addresses. This property allows
us to establish linkability across apps using these fuzzy
contextual information.

3.4 DLG: A Mobile OS Extension
DLG gives us the capability to construct cross-app link-
ability from runtime behaviors of the apps. Here, we in-
troduce how it can be implemented as an extension to

Category

Type

Source
IMEI

Device

Android ID

OS-level Info.

Personal

MAC
Phone #
Account

Subscriber ID
ICC Serial #

IP

Contextual

Nearby APs

Explicit

Location (PoIs)

Intent

Service Binding

Implicit

Indirect RW

IPC Channel

Table 2: DLG considers the linkability introduced by 10 types
of OS-level information and 3 IPC channels.

current mobile operating systems, using Android as an
illustrative example. We also considered other imple-
mentation options, such as user-level interception (Aura-
sium [28]) or dynamic OS instrumentation (Xposed
Framework [27]). The former is insecure since the exten-
sion resides in the attacker’s address space and the latter
is not comprehensive because it cannot handle the native
code of an app. However, the developer can always im-
plement a useful subset of DLG using one of these more
deployable techniques.

Android Basics Android is a Linux-based mobile OS
developed by Google. By default, each app is assigned a
different Linux uid and lives in its own sandbox. Inter-
Process Communications (IPCs) are provided across dif-
ferent sandboxes, based on the Binder protocol which is
inherently a lightweight RPC (Remote Procedure Call)
mechanism. There are four different types of compo-
nents in an Android app: Activity, Service, Content
Provider, and Broadcast Receiver. Each component rep-
resents a different way to interact with the underlying
system: Activity corresponds to a single screen support-
ing user interactions; Service runs in the background to
perform long-running operations and processing; Con-
tent Provider is responsible for managing and querying
of persistent data such as database; and Broadcast Re-
ceiver listens to system-wide broadcasts and ﬁlters those
it is interested in. Next, we describe how we instru-
ment the Android framework to monitor app’s interac-
tions with the system and each other via these compo-
nents.

Implementation Details
In order to construct a DLG
in Android, we need to track apps’ access to various OS-

USENIX Association  

24th USENIX Security Symposium  773

Figure 3: We extend the centralized intent ﬁlter in Android (com.android.server.firewall.IntentFirewall) to intercept
all the intents across apps.

Figure 2: We instrument system services (red shaded region)
to record which app accessed which identiﬁer using Wi-Fi ser-
vice as an example.

level information as well as IPCs between apps. Next, we
describe how we achieve this by instrumenting different
components of the Android framework.

Apps access most identifying information, such as
IMEI and MAC, by interacting with different system ser-
vices. These system services are parts of the Android
framework and have clear interfaces deﬁned in AIDL
(Android Interface Deﬁnition Language). By instru-
menting the public functions in each service that return
persistent identiﬁers, we can have a timestamped record
of which app accessed what type of identifying informa-
tion via which service. Fig. 2 gives a detailed view of
where to instrument using the Wi-Fi service as an exam-
ple.

On the other hand, apps access some identifying in-
formation, such as Android ID, by querying system con-
tent providers. Android framework has a universal choke
point for all access to remote content providers — the
server-side stub class ContentProvider.Transport.
By instrumenting this class, we know which database
(uri) an app is accessing and with what parameters and
actions. Fig. 4 illustrates how an app accesses remote
Content Provider and explains which part to modify in
order to log the information we need.

Figure 4: We instrument Content Provider (shaded region) to
record which app accessed which database with what parame-
ters.

Apps can launch IPCs explicitly, using Intents.
is an abstract description of an operation to
Intent
to a speciﬁc
be performed.
It can either be sent
target (app component), or broadcast
to the entire
system. Android has a centralized ﬁlter which enforces
system-wide policies for all Intents. We extend this ﬁlter
(com.android.server.firewall.IntentFirewall)
to record and intercept all Intent communications across
apps (see Fig. 3). In addition to Intents, Android also
allows an app to communicate explicitly with another
app by binding to one of the services it exports. Once
the binding is established, the two apps can commu-
nicate under a client-server model. We instrument
com.android.server.am.ActiveServices in the
Activity Manager to monitor all the attempts to establish
service bindings across apps.

Apps can also conduct IPCs implicitly by exploiting
shared persistent storage. For example, two apps can
write and read the same ﬁle in the SD card to exchange
identifying information. Therefore, we need to monitor
read and write access to persistent storage. External stor-
age in Android are wrapped by a FUSE (Filesystem in

774  24th USENIX Security Symposium 

USENIX Association

d
e

l
l

a

t
s
n

i
 
s
p
p
a

 
f

o

 

#

 25

 20

 15

 10

 5

 0

 0

average

 10

 30
# of days from deployment

 20

d
e
s
s
e
c
c
a

 
s
e
c
r
u
o
s
 
f

o

 

#

 6
 5
 4
 3
 2
 1
 0

 0

average

 5

 15
# of days since installed

 10

Figure 5: We customize the FUSE daemon under
/system/core/sdcard/sdcard.c to intercept apps’ access
to shared external storage.

Userspace) daemon which enables user-level permission
control. By modifying this daemon, we can track which
app reads or writes which ﬁles (see Fig. 5). This allows
us to implement a Read-Write monitor which captures
implicit communications via reading a ﬁle which has pre-
viously been written by another app. Besides external
storage, our Read-Write monitor also considers similar
indirect communications via system Content Providers.
We described how to monitor all formal ways an app
can interact with system components (Services, Content
Providers) and other apps (Intents, service bindings, and
indirect RW). This methodology is fundamental and can
be extended to cover other potential linkability sources
(beyond our list) as long as a clear deﬁnition is given.
By placing hooks at the aforementioned locations in the
system framework, we get all the information needed to
construct a DLG. For our measurement study, we sim-
ply log and upload these statistics to a remote server for
analysis. In our countermeasure solutions, these are used
locally to derive dynamic defense decisions.

4 Linkability in Real World

In this section, we study app-level linkability in the real
world. We ﬁrst present an overview of linkability, show-
ing the current threats we’re facing. Then, we go through
the linkability sources and analyze to what extent each of
the sources is contributing to the linkability. Finally, we
shed light on how these sources can be or have been ex-
ploited for reasons unrelated to app functionalities. This
paves the way for us to develop a practical countermea-
sure.

4.1 Deployment and Settings
We prototyped DLG on Cyanogenmod 11 (based on An-
droid 4.4.1) and installed the extended OS on 7 Samsung
Galaxy IV devices and 6 Nexus V devices. We recruited

Figure 6: For an average user, more than 80% of the apps
are installed in the ﬁrst two weeks after deployment; each app
accesses most of the linkability sources it’s interested in during
the ﬁrst day of its installation.

13 participants from the students and staff in our insti-
tution, spanning over 8 different academic departments.
Of the 13 participants, 6 of the participants are females
and 7 are males. Before using our experimental devices,
7 of them were Android users and 6 were iPhone users.
Participants are asked to operate their devices normally
without any extra requirement. They are given the op-
tion to temporarily turn off our extension if they want
more privacy when performing certain tasks. Logs are
uploaded once per hour when the device is connected to
Wi-Fi. We exclude built-in system apps (since the mobile
OS is assumed to be benign in our threat model) and con-
sider only third-party apps that are installed by the users
themselves. Note that our study is limited in its size and
the results may not generalize.

4.2 Data and Findings
We observed a total of 215 unique apps during a 47-
day period for 13 users. On average, each user installed
26 apps and each app accessed 4.8 different linkability
sources. We noticed that more than 80% of the apps are
installed within the ﬁrst two weeks after deployment, and
apps would access most of the linkability sources they
are interested in during the ﬁrst day of their installation
(see Fig. 6). This suggests that a relative short-term (a
few weeks) measurement would be enough to capture a
representative view of the problem.

Overview: Our measurement indicates an alarming
view of the threat: two random apps are linkable with
a probability of 0.81, and an adversary only needs to
control 2.2 apps (0.2 additional app), on average, to link
them. This means that an adversary in the current ecosys-
tem can aggregate information from most apps without
additional efforts (i.e., controlling a third app). Specif-
ically, we found that 86% of the apps a user installed
on his device are directly linkable to the Facebook app,
namely, his real identity. This means almost all the activ-

USENIX Association  

24th USENIX Security Symposium  775

 1

 0.8

 0.6

 0.4

 0.2

 0

I

P

A

n

Linking Ratio (LR)
% of apps accessing each source

)

E
L
(
 
t
r
o
f
f

 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0

I

P

I
c

M

A

E
 
g
n
k
n
L

i

i

L
i
n

I
c

c

B

i
n

e

S

1

e

d
i
n

g

ri
a
l

y

N

A

u

P

m

N

b

u

I
n
t
e

I
n

A

c

c

I

M

d

ir

e

n
t

o

u

c
t

R

n
t

d
r
o
i
d
I

E

I

A

C

o

c

u

e

b

s

a
r
b

a

ti

o

n

c

ri

b

M

L

S

N

D

W

e

rI

D

I

M

S

u

L
i
n

c

S

A

n

C

e

ri
a
l

N

u

E

I

d
r
o
i
d
I

b

s

e

1

c

ri

b

N

D

e

rI

L

N

A

o

c

e

c

a

ti

o

a
r
b

y

I
n

B

i
n

c

o

u

d
i
n

d

ir

e

I
n
t
e

n
t

u

n

A

m

P

n
t

g

c
t

R

W

e
r

m

m

D

b

e
r

b

e
r

b

e
r

Figure 7: The percentage of apps accessing each source, and
the linkability (LR) an app can get by exploiting each source.

Figure 8: The (average) Linking Efforts (LE) of all the apps
that are linkable due to a certain linkability source.

ities a user exhibited using mobile apps are identiﬁable,
and can be linked to the real person.

Breakdown by Source: This vast linkability is con-
tributed by various sources in the mobile ecosystem.
Here, we report the percentage of apps accessing each
source and the linkability (LR) an app can acquire by ex-
ploiting each source. The results are provided in Fig. 7.
We observed that except for device identiﬁers, many
other sources contributed to the linkability substantially.
For example, an app can be linked to 39% of all in-
stalled apps (LR=0.39) using only account information,
and 36% (LR=0.36) using only Intents. The linkability
an app can get from a source is roughly equal to the per-
centage of apps that accessed that source, except for the
case of contextual information: IP, Location and Nearby
APs. This is because the contextual information an app
collected does not always contain effectively identifying
information. For example, Yelp is mostly used at infre-
quent locations to ﬁnd nearby restaurants, but is rarely
used at consistent PoIs, such as home or ofﬁce. This ren-
ders location information useless in establishing linka-
bility with Yelp.

The effort required to aggregate two apps also differs
for different linkability sources, as shown in Fig. 8. De-
vice identiﬁers have LE=0, meaning that any two apps
accessing the same device identiﬁer can be directly ag-
gregated without requiring control of an additional third
app. Linking apps using IPC channels, such as Intents
and Indirect RW, requires the adversary to control an av-
erage of 0.6 additional app as the connecting nodes. This
indicates that, from an adversary’s perspective, exploit-
ing consistent identiﬁers is easier than building pair-wise
associations.

Breakdown by Category: We group the linkability
sources into four categories — device, personal, contex-

Category
Device
Personal
Contextual

IPC

GLR

0.52 (0.13)
0.30 (0.10)
0.20 (0.13)
0.32 (0.13)

GLE

0.03 (0.03)
0.30 (0.11)
0.33 (0.20)
0.78 (0.06)

LRFacebook
0.68 (0.12)
0.54 (0.11)
0.44 (0.25)
0.59 (0.15)

Table 3: Linkability contributed by different categories of
sources.

tual, and IPC — and study the linkability contributed by
each category (see Table 3). As expected, device-speciﬁc
information introduces substantial linkability and allows
the adversary to conduct across-app aggregation effort-
lessly. Surprisingly, the other three categories of linka-
bility sources also introduce considerable linkability. In
particular, only using fuzzy contextual information, an
adversary can link more than 40% of the installed apps
to Facebook, the user’s real identity. This suggests the
naive solution of anonymizing device ids is not enough,
and hence a comprehensive solution is needed to make a
trade-off between app functionality and privacy.

4.3 Functional Analysis
Device identiﬁers (IMEI, Android ID, MAC) introduce
vast amount of linkability. We manually went through
162 mobile apps that request these device-speciﬁc iden-
tiﬁers, but could rarely identify any explicit functional-
ity that requires accessing the actual identiﬁer. In fact,
for the majority of these apps, their functionalities are
device-independent, and therefore independent of device
IDs. This indicates that device-speciﬁc identiﬁer can be
obfuscated across apps without noticeable loss of app
functionality. The only requirement for device ID is that
it should be unique to each device.

As to personal information (Account Number, Phone

776  24th USENIX Security Symposium 

USENIX Association

<?xml version=’1.0’ encoding=’utf-8’ standalone=’yes’ ?>
<map>

<long name="timestamp" value="1419049777098" />
<long name="t2" value="1419049776889" />
<string name="UTDID">VJT7MTV268gDACiZN6xEh8af</string>
<string name="DID">356565055348652</string>
<long name="S" value="1634341681" />
<string name="SI">310260981039000</string>
<string name="EI">356565055348652</string>

</map>

Figure 9: Real-world example of indirect RW: an app
(fm.qingting.qradio) writes user identiﬁers to an xml ﬁle in SD
card which was later read by three other apps. This ﬁle contains
the IMEI (DID) and SubscriberID (SI) of the user.

Number, Installed Apps, etc.), we also observed many
unexpected accesses that resulted in unnecessary linka-
bility. We found that many apps that request account
information collected all user accounts even when they
only needed one to function correctly; many apps request
access to phone number even when it is unrelated to their
app functionalities. Since the legitimacy of a request de-
pends both on the user’s functional needs and the speciﬁc
app context, end-users should be prompted about the ac-
cess and make the ﬁnal decision.

The linkability introduced by contextual information
(Location, Nearby AP) also requires better regulation.
Many apps request permission for precise location, but
not all of them actually need it to function properly.
In many scenarios, apps only require coarse-grained lo-
cation information and shouldn’t reveal any identifying
points of interest (PoIs). Nearby AP information, which
is only expected to be used by Wi-Fi tools/managing
apps, is also abused for other purposes. We noticed that
many apps frequently collect Nearby AP information to
build an internal mapping between locations and access
points (APs). For example, we found that even if we turn
off all system location services, WeChat (an instant mes-
saging app) can still infer the user’s location only with
Nearby AP information. To reduce the linkability intro-
duced by these unexpected usages, the users should have
ﬁner-grained control on when and how the contextual in-
formation can be used.

Moreover, we found that IPC channels can be ex-
ploited in various ways to establish linkability across
apps. Apps can establish linkabililty using Intents, shar-
ing and aggregating app-speciﬁc information. For in-
stance, we observed that WeChat receives Intents from
three different apps right after their installations, report-
ing their existence on the same device. Apps can also
establish linkability with each other via service binding.
For example, both AdMob and Facebook allow an app
to bind to its service and exchanging the user identi-
ﬁer, completely bypassing the system permissions and
controls. Apps can also establish linkabililty through
Indirect RW, by writing and reading the same persis-

tent ﬁle. Fig. 9 shows a real-world example: an app
(fm.qingting.qradio) writes user identiﬁers to an xml ﬁle
in the SD card which was later read by three other apps.
The end-user should be promptly warned about these un-
expected communications across apps to reduce unnec-
essary linkability.

5 LinkDroid: A Practical Countermeasure

Based on our observation and ﬁndings on linkability
across real-world apps, we propose a practical counter-
measure, LinkDroid, on top of DLG. We ﬁrst intro-
duce the basic design principle of LinkDroid and its
three major privacy-enhancing features: install-time ob-
fuscation, runtime linkability monitoring, and unlinkable
mode support. We then evaluate the effectiveness of
LinkDroid with the same set of participants as in our
measurement study.

5.1 Design Overview

LinkDroid is designed with practicality in mind. Nu-
merous extensions, paradigms and ecosystems have been
proposed for mobile privacy, but access control (runtime
for iOS and install-time for Android) is the only de-
ployed mechanism. LinkDroid adds a new dimension
to access control on smartphone devices. Unlike exist-
ing approaches that check if some app behavior poses di-
rect privacy threats, LinkDroid warns users about how
it implicitly builds the linkability across apps. This
helps users reduce unnecessary links introduced by abus-
ing OS-level information and IPCs, which happens fre-
quently in reality as our measurement study indicated.

As shown in Fig. 10, LinkDroid provides runtime

monitoring and mediation of linkability by

• monitoring and intercepting app behaviors that may
introduce linkability (including interactions with
various system services, content providers, shared
external storage and other apps);

• querying a standalone linkability service to get the

user’s decision regarding this app behavior;

• prompting the user about the potential risk if the
user has not yet made a decision, getting his deci-
sion and updating the linkability graph (DLG).

We have already described in Section 3.4 how to in-
strument the Android framework to build the monitor-
ing components (corresponding to boxes A, B, C, D in
Fig. 10). In this section, we focus on how the linkability
service operates.

USENIX Association  

24th USENIX Security Symposium  777

Figure 10: An overview of LinkDroid. Shaded areas (red) represent the parts we need to extend/add in Android. (We already
explained how to extend A, B, C and D in Section 3.4.)

5.2 Install-Time Obfuscation
As mentioned earlier, app functionalities are largely in-
dependent of device identiﬁers. This allows us to obfus-
cate these identiﬁers and cut off many unnecessary edges
in the DLG. In our case, the list of device identiﬁers in-
cludes IMEI, Android ID and MAC. Every time an app
gets installed, the linkability service receives the app’s
uid and then generates a random mask code for it. The
mask code together with the types of obfuscated device
identiﬁers will be pushed into the decision database. This
way, when an app a tries to fetch the device identiﬁer of a
certain type t, it will only get a hash of the real identiﬁer
salted with the app-speciﬁc mask code:

IDa

t = hash(IDt + maska).

Note that we do this at install-time instead of during
each session because we still want to guarantee the rela-
tive consistency of the device identiﬁers within each app.
Otherwise, it will let the app think the user is switching to
a different device and trigger some security/veriﬁcation
mechanisms. The user can always cancel this default ob-
fuscation in the privacy manager (Fig. 12) if he ﬁnds it
necessary to reveal real device identiﬁers to certain apps.

5.3 Runtime Linkability Monitoring
Except for device-speciﬁc identiﬁers, obfuscating other
sources of linkability is likely to interfere with the
app functionalities. Whether there is a functional in-
terference or not is highly user-speciﬁc and context-
dependent. To make a useful trade-off, the user should
be involved in this decision-making process. Here,
LinkDroid provides just-in-time prompts before an
edge creates in the DLG. Speciﬁcally, if the linkabil-
ity service could not ﬁnd an existing decision regarding
some app behavior, it will issue the user a prompt, in-
forming him: 1) what app behavior triggers the prompt;
2) what’s the quantitative risk of allowing this behavior;

Figure 11: The UI prompt of LinkDroid’s runtime access
control, consisting of a behavioral description, descriptive and
quantitative risk indicators, and opt-out options.

and 3) what’re the opt-out options. Fig. 11 gives an illus-
trative example of the UI of the prompt.

Description of App Behavior Before the user can
make a decision, he ﬁrst needs to know what app behav-
ior triggers the prompt. Basically, we report two types
of description: access to OS-level information and cross-
app communications. To help the user understand the sit-
uation, we use a high-level descriptive language instead
of the exact technical terms. For example, when an app
tries to access Subscriber ID or IccSerialNumber, we re-
port that “App X asks for sim-card information.” When
an app tries to send Intents to other apps, we report “App
X tries to share content with App Y”. During our experi-
ments with real users (introduced later in the evaluation),
11 out of the 13 participants ﬁnd these descriptions clear

778  24th USENIX Security Symposium 

USENIX Association

LinkDroid also allows the user to set up a VPN (Virtual
Private Network) service to anonymize network identi-
ﬁers. When the user switches from a cellular network to
Wi-Fi, LinkDroid will automatically initialize the VPN
service to hide the user’s public IP. This may incur addi-
tional energy consumption and latency (see Section 5.5).
All choices made by the user will be stored in the de-
cision database for future reuse. We provide a central-
ized privacy manager such that the user can review and
change all previously made decisions (see Fig. 12).

5.4 Unlinkable Mode

Once a link is established in DLG, it cannot be removed.
This is because once a piece of identifying information
is accessed or a communication channel is established, it
can never be revoked. However, the user may sometimes
want to perform privacy-preserving tasks which have no
interference with the links that have already been intro-
duced. For example, when the user wants to write an
anonymous post in Reddit, he doesn’t want it to be link-
able with any of his previous posts as well as other apps.
LinkDroid provides an unlinkable mode to meet such
a need. The user can start an app in unlinkable mode
by pressing its icon for long in the app launcher. A new
uid as well as isolated storage will be allocated to this
unlinkable app instance. By default, access to all OS-
level identifying information and inter-app communica-
tions will be denied. This way, LinkDroid creates the il-
lusion that this app has just been installed on a brand-new
device. The unlinkable mode allows LinkDroid to pro-
vide ﬁner-grained (session-level) control, unlinking only
a certain set of app sessions.

5.5 Evaluation

We evaluate LinkDroid in terms of its overheads in us-
ability and performance, as well as its effectiveness in re-
ducing linkability. We replay the traces of the 13 partic-
ipants of our measurement study (see Section 4), prompt
them about the privacy threat and ask for their decisions.
This gives us the exact picture of the same set of users
using LinkDroid during the same period of time. We
instruct the user to make a decision in the most conser-
vative way: the user will Deny a request only when he
believes the prompted app behavior is not applicable to
any useful scenario; otherwise, he will Accept the re-
quest.

The overhead of LinkDroid mainly comes from two
parts: the usability burden of dealing with UI prompts
and the performance degradation of querying the linka-
bility service. Our experimental results show that, on av-
erage, each user was prompted only 1.06 times per day
during the 47-day period. The performance degradation

Figure 12: LinkDroid provides a centralized linkability man-
ager. The user can review and modify all of his previous deci-
sions regarding each app.

and informative.

Risk Indicator LinkDroid reports two types of risk
indicators to users: one is descriptive and the other is
quantitative. The descriptive indicator tells what apps
will be directly linkable to an app if the user allows its
current behavior. By ‘directly linkable,’ we mean with-
out requiring a third app as the connecting nodes. The
quantitative indicator, on the other hand, reﬂects the in-
ﬂuence on the overall linkability of the running app, in-
cluding those apps that are not directly linkable to it.
Here, the overall linkability is reported as a combination
of the linking ratio (LR) and linking effort (LE):

La = LRa × e−LEa.

The quantitative risk indicator is deﬁned as ∆La. A
user will be warned of a larger risk if the total number
of linkable apps signiﬁcantly increases, or the average
linking effort decreases substantially. We transform the
quantitative risk linearly into a scale of 4 and report the
risk as Low, Medium, High, and Severe.

Opt-out Options
In each prompt, the user has at least
two options: Allow or Deny. If the user chooses Deny,
LinkDroid will obfuscate the information this app tries
to get or shut down the communication channel this
app requests. For some types of identifying informa-
tion, such as Accounts and Location, we provide ﬁner-
grained trade-offs. For Location, the user can select from
zip-code level (1km) or city-level (10km) precision; for
Accounts, the user can choose which speciﬁc account
he wants to share instead of exposing all his accounts.

USENIX Association  

24th USENIX Security Symposium  779

)

R
L
G

i

(
 
o
i
t
a
R
 
g
n
k
n
L
 
l
a
b
o
G

l

i

 1

 0.8

 0.6

 0.4

 0.2

 0

Normal
LinkDroid

Device

Personal Contextual

IPC

All

Figure 13: The Global Linking Ratio (GLR) of different cate-
gories of sources before and after using LinkDroid.

)

R
L
G

(
 
o

i
t

 

a
R
g
n
k
n
L

i

i

 
l

a
b
o
G

l

 1

 0.8

 0.6

 0.4

 0.2

 0

Normal

LinkDroid

 0

 1

 2

 3

 4

 6

 5
 7
User Index

 8

 9  10  11  12

Figure 14: The Global Linking Ratio (GLR) of different users
before and after using LinkDroid.

introduced by the linkability service is also marginal. It
only occurs when apps access certain OS-level informa-
tion or conduct cross-app IPCs. These sensitive oper-
ations happened rather infrequently — once every 12.7
seconds during our experiments. These results suggest
that LinkDroid has limited impact on system perfor-
mance and usability.

We found that after applying LinkDroid, the Global
Linking Ratio (GLR) dropped from 81% to 21%. Fig. 13
shows the breakdown of linkability drop in different cat-
egories of sources. The majority of the remaining link-
ability comes from inter-app communications, most of
which are genuine from the user’s perspective. Not only
fewer apps are linkable, LinkDroid also makes it harder
for an adversary to aggregate information from two link-
able apps. The Global Linking Effort (GLE) increases
signiﬁcantly after applying LinkDroid: from 0.22 to
0.68. Speciﬁcally, the percentage of apps that are directly
linkable to Facebook dropped from 86% to 18%. Fig. 15
gives an illustrative example of how DLG changes after
applying LinkDroid. We also noticed that that the effec-
tiveness of LinkDroid differs across users, as shown in
Fig. 14. In general, LinkDroid is more effective for the
users who have diverse mobility patterns, are cautious
about sharing information across apps and/or maintain

(a)

(b)

Figure 15: DLG of a representative user before (a) and
after (b) applying LinkDroid. Red circle represents the
Facebook app.

different accounts for different services.

LinkDroid takes VPN as a plug-in solution to ob-
fuscate network identiﬁers. The potential drawback of
using VPN is its inﬂuence on device energy consump-
tion and network latency. We measured the device en-
ergy consumption of using VPN on a Samsung Galaxy 4
device, with Monsoon Power Monitor. Speciﬁcally, we
tested two network-intensive workloads: online videos
and browsing. We observed a 5% increase in energy con-
sumption for the ﬁrst workload, and no observable dif-
ference for the second. To measure the network latency,
we measured the ping time (average of 10 trials) to Alexa
Top 20 domains and found a 13% increase (17ms). These
results indicate that the overhead of using VPN on smart-
phone device is noticeable but not signiﬁcant. Seven of
13 participants in our evaluation were willing to use VPN

780  24th USENIX Security Symposium 

USENIX Association

services to achieve better privacy.

We interviewed the 13 participants after the experi-
ments. Questions are designed on a scale of 1 to 5 and
a score of 4 or higher is regarded as “agree.” Eleven of
the participants ﬁnd the UI prompt informative and clear
and nine are willing to use LinkDroid on a daily basis
to inform them about the risk and provide opt-out op-
tions. However, these responses might not be represen-
tative due to the limited size and diversity of the partic-
ipants. We also noticed that users care a lot about the
linkability of sensitive apps, such as Snapchat and Face-
book. Some participants clearly state that they do not
want any app to be associated with the Facebook app,
except for very necessary occasions. This also supports
the rationale behind the design of LinkDroid’s unlink-
able mode.

6 Related Work

There have been other proposals [7, 17] which also ad-
dress the privacy threats of information aggregation by
mobile apps. They shift the responsibility of informa-
tion personalization and aggregation from mobile apps
to the mobile OS or trusted cloud providers, requiring
re-development of mobile apps and extensive modiﬁ-
cations on the entire mobile ecosystem.
In contrast,
LinkDroid is a client-side solution which is compati-
ble with existing ecosystem — it focuses on character-
izing the threat in current mobile ecosystem and making
a practical trade-off, instead of proposing new computa-
tion (advertising) paradigm.

Existing studies investigated linkability under several
domain-speciﬁc scenarios. Arvind et al. [19] showed
that a user’s proﬁle in Netﬂix can be effectively linked
to his in IMDB, using long-tailed (unpopular) movies.
Sebastian et al. [16] described how to link the proﬁles of
the same user in different social networks using friends
topologies. This type of linkability is restricted to a small
scope, and may only exist across different apps in the
same domain. Here, we focus on the linkability that are
domain-independent and ubiquitous to all apps, regard-
less of the type and semantics of each app.

The capability of advertising agency on conducting
proﬁling and aggregation has been extensively stud-
ied [12, 23]. Various countermeasures have been pro-
posed, such as enforcing ﬁner-grained isolation between
ad library and the app [21, 22], or adopting a privacy-
preserving advertising paradigm [4]. However, unlike
LinkDroid, they only consider a very speciﬁc and re-
stricted scenario — advertising library — which in-
volves few functional trade-offs. LinkDroid, instead,
introduces a general linkability model, considers various
sources of linkability and suits a diverse set of adver-
saries.

There have also been numerous studies on informa-
tion access control on smartphone [6, 8, 9, 13, 14, 20, 24].
Many of these studies have already proposed to provide
apps with fake identiﬁers and other types of sensitive in-
formation [13, 20, 27]. These studies focus on the ex-
plicit privacy concern of accessing and leaking sensi-
tive user information, by malicious mobile apps or third-
party libraries. Our work addresses information access
control from a very different perspective, investigating
the implicit linkability introduced by accessing various
OS-level information and IPC channels.

Many modern browsers provide a private (incognito)
mode. These are used to defend against local attackers,
such as users sharing the same computer, from stealing
cookies or browse history from each other [2]. This is
inherently different from LinkDroid’s unlinkable mode
which targets unregulated aggregation by remote attack-
ers.

7 Discussion

In this paper, we proposed a new metric, linkability, to
quantify the ability of different apps to link and aggre-
gate their usage behaviors. This metric, albeit useful, is
only a coarse upper-bound of the actual privacy threat,
especially in the case of IPCs. Communication between
two apps does not necessarily mean that they have con-
ducted, or are capable of conducting, information aggre-
gation. However, deciding on the actual intention of each
IPC is by itself a difﬁcult task. It requires an automatic
and extensible way of conducting semantic introspection
on IPCs, and is a challenging research problem on its
own.

LinkDroid aims to reduce the linkability introduced
covertly without the user’s consent or knowledge —
it couldn’t and doesn’t try to eliminate the linkability
explicitly introduced by users. For example, a user
may post photos of himself or exhibit very identiﬁ-
able purchasing behavior in two different apps,
thus
establishing linkability.
This type of linkability is
app-speciﬁc, domain-dependent and beyond the control
of LinkDroid.
Identiﬁability or linkability of these
domain-speciﬁc usage behaviors are of particular inter-
est to other areas, such as anonymous payment [25],
anonymous query processing [18] and data anonymiza-
tion techniques.

The list of identifying information we considered in
this paper is well-formatted and widely-used. These
ubiquitous identiﬁers contribute the most to informa-
tion aggregation, since they are persistent and consis-
tent across different apps. We didn’t consider some un-
common identiﬁers, such as walking patterns and mi-
crophone signatures, because we haven’t yet observed
any real-world adoption of these techniques by commer-

USENIX Association  

24th USENIX Security Symposium  781

cial apps. However, LinkDroid can easily include other
types of identifying information, as long as a clear deﬁ-
nition is given.

DLG introduces another dimension — linkability —
to privacy protection on mobile OS and has some other
potential usages. For example, when the user wants to
perform a certain task in Android and has multiple op-
tional apps, the OS can recommend him to choose the
app which is the least linkable with others. We also
noticed some interesting side-effect of LinkDroid’s un-
linkable mode. Since unlinkable mode allows users to
enjoy ﬁner-grained (session-level) unlinkability, it can be
used to stop a certain app from continuously identifying a
user. This can be exploited to infringe the beneﬁts of app
developers in the case of copyright protection, etc. For
example, NYTimes only allows an unregistered user to
read up to 10 articles every month. However, by restart-
ing the app in unlinkable mode in each session, a user
can stop NYTimes from linking himself across different
sessions and bypass this quota restriction.

8 Conclusion

In this paper, we addressed the privacy threat of unreg-
ulated aggregation from a new perspective by monitor-
ing, characterizing and reducing the underlying linka-
bility across apps. This allows us to measure the po-
tential threat of unregulated aggregation during runtime
and promptly warn users of the associated risks. We ob-
served how real-world apps abuse OS-level information
and IPCs to establish linkability, and proposed a prac-
tical countermeasure, LinkDroid. It provides runtime
monitoring and mediation of linkability across apps, in-
troducing a new dimension to privacy protection on mo-
bile device. Our evaluation on real users has shown that
LinkDroid is effective in reducing the linkability across
apps and only incurs marginal overheads.

Acknowledgements

The work reported in this paper was supported in part
by the NSF under grants 0905143 and 1114837, and the
ARO under W811NF-12-1-0530.

References

[1] 2013:

a look back at

the year

in acquisitions.

http:

//vator.tv/news/2013-12-07-2013-a-look-back-
at-the-year-in-acquisitions.

[2] AGGARWAL, G., BURSZTEIN, E., JACKSON, C., AND BONEH,
D. An analysis of private browsing modes in modern browsers. In
Proceedings of the 19th USENIX conference on Security (2010),
USENIX Association, pp. 6–6.

[3] Angry birds and ’leaky’ phone apps targeted by nsa and gchq for
user data. http://www.theguardian.com/world/2014/jan/
27/nsa-gchq-smartphone-app-angry-birds-personal-
data.

[4] BACKES, M., KATE, A., MAFFEI, M., AND PECINA, K.
Obliviad: Provably secure and practical online behavioral adver-
tising. In Proceedings of the 2012 IEEE Symposium on Security
and Privacy (Washington, DC, USA, 2012), SP ’12, IEEE Com-
puter Society, pp. 257–271.

[5] BAMIS, A., AND SAVVIDES, A. Lightweight Extraction of Fre-
In IEEE

quent Spatio-Temporal Activities from GPS Traces.
Real-Time Systems Symposium (2010), pp. 281–291.

[6] BUGIEL, S., HEUSER, S., AND SADEGHI, A.-R. Flexible and
ﬁne-grained mandatory access control on android for diverse se-
In Presented as part of the 22nd
curity and privacy policies.
USENIX Security Symposium (Berkeley, CA, 2013), USENIX,
pp. 131–146.

[7] DAVIDSON, D., AND LIVSHITS, B. Morepriv: Mobile os sup-
port for application personalization and privacy. Tech. rep., MSR-
TR, 2012.

[8] EGELE, M., KRUEGEL, C., KIRDA, E., AND VIGNA, G. Pios:

Detecting privacy leaks in ios applications. In NDSS (2011).

[9] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. Taintdroid: An information-
ﬂow tracking system for realtime privacy monitoring on smart-
phones. In OSDI (2010), vol. 10, pp. 255–270.

[10] FAWAZ, K., AND SHIN, K. G. Location privacy protection for
In Proceedings of the 2014 ACM SIGSAC
smartphone users.
Conference on Computer and Communications Security (2014),
ACM, pp. 239–250.

[11] GOLLE, P., AND PARTRIDGE, K. On the anonymity of home-
In Proceedings of Pervasive ’09 (Berlin,

/work location pairs.
Heidelberg, 2009), Springer-Verlag, pp. 390–397.

[12] HAN, S., JUNG, J., AND WETHERALL, D. A study of third-
party tracking by mobile apps in the wild. Tech. rep., UW-CSE,
2011.

[13] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND
WETHERALL, D. These aren’t the droids you’re looking for:
retroﬁtting android to protect data from imperious applications.
In Proceedings of the 18th ACM conference on Computer and
Communications Security (2011), ACM, pp. 639–652.

[14] JEON, J., MICINSKI, K. K., VAUGHAN, J. A., FOGEL, A.,
REDDY, N., FOSTER, J. S., AND MILLSTEIN, T. Dr. android
and mr. hide: ﬁne-grained permissions in android applications. In
Proceedings of Second ACM Workshop on Security and Privacy
in Smartphones and Mobile Devices (2012), ACM, pp. 3–14.

[15] KRUMM, J.

Inference attacks on location tracks.

In Proceed-
ings of the 5th international conference on Pervasive computing
(Berlin, Heidelberg, 2007), PERVASIVE’07, Springer-Verlag,
pp. 127–143.

[16] LABITZKE, S., TARANU, I., AND HARTENSTEIN, H. What your
friends tell others about you: Low cost linkability of social net-
work proﬁles. In Proc. 5th International ACM Workshop on So-
cial Network Mining and Analysis, San Diego, CA, USA (2011).
[17] LEE, S., WONG, E. L., GOEL, D., DAHLIN, M., AND
SHMATIKOV, V. πbox: a platform for privacy-preserving apps. In
Proceedings of the 10th USENIX conference on Networked Sys-
tems Design and Implementation (2013), USENIX Association,
pp. 501–514.

[18] MOKBEL, M. F., CHOW, C.-Y., AND AREF, W. G. The new
casper: query processing for location services without compro-
In Proceedings of the 32nd international con-
mising privacy.
ference on Very large data bases (2006), VLDB Endowment,
pp. 763–774.

782  24th USENIX Security Symposium 

USENIX Association

[19] NARAYANAN, A., AND SHMATIKOV, V.

Robust de-
anonymization of large sparse datasets. In Security and Privacy,
2008. SP 2008. IEEE Symposium on (2008), IEEE, pp. 111–125.
[20] NAUMAN, M., KHAN, S., AND ZHANG, X. Apex: extend-
ing android permission model and enforcement with user-deﬁned
runtime constraints. In Proceedings of the 5th ACM Symposium
on Information, Computer and Communications Security (2010),
ACM, pp. 328–332.

[21] PEARCE, P., FELT, A. P., NUNEZ, G., AND WAGNER, D. Ad-
droid: Privilege separation for applications and advertisers in an-
droid. In Proceedings of the 7th ACM Symposium on Information,
Computer and Communications Security (2012), ACM, pp. 71–
72.

[22] SHEKHAR, S., DIETZ, M., AND WALLACH, D. S. Adsplit: sep-
arating smartphone advertising from applications. In Proceedings
of the 21st USENIX conference on Security symposium (2012),
USENIX Association, pp. 28–28.

[23] STEVENS, R., GIBLER, C., CRUSSELL, J., ERICKSON, J., AND
CHEN, H. Investigating user privacy in android ad libraries. IEEE
Mobile Security Technologies (MoST) (2012).

[24] TRIPP, O., AND RUBIN, J. A bayesian approach to privacy en-
forcement in smartphones. In Proceedings of the 23rd USENIX
Conference on Security Symposium (Berkeley, CA, USA, 2014),
SEC’14, USENIX Association, pp. 175–190.

[25] WEI, K., SMITH, A. J., CHEN, Y.-F., AND VO, B. Who-
pay: A scalable and anonymous payment system for peer-to-
In Distributed Computing Systems, 2006.
peer environments.
ICDCS 2006. 26th IEEE International Conference on (2006),
IEEE, pp. 13–13.

[26] XIA, N., SONG, H. H., LIAO, Y., ILIOFOTOU, M., NUCCI,
A., ZHANG, Z.-L., AND KUZMANOVIC, A. Mosaic: quantify-
In Proceedings of the
ing privacy leakage in mobile networks.
ACM SIGCOMM 2013 conference on SIGCOMM (2013), ACM,
pp. 279–290.

[27] Xprivacy - the ultimate, yet easy to use, privacy manager for an-

droid. https://github.com/M66B/XPrivacy#xprivacy.

[28] XU, R., SA¨IDI, H., AND ANDERSON, R. Aurasium: Practi-
cal policy enforcement for android applications. In Proceedings
of the 21st USENIX conference on Security symposium (2012),
USENIX Association, pp. 27–27.

[29] ZANG, H., AND BOLOT, J. Anonymization of location data does
In Proceedings of
not work: a large-scale measurement study.
MobiCom ’11 (New York, NY, USA, 2011), ACM, pp. 145–156.

USENIX Association  

24th USENIX Security Symposium  783

