Nonoutsourceable Scratch-Off Puzzles to

Discourage Bitcoin Mining Coalitions

Andrew Miller

Jonathan Katz

Ahmed Kosba

University of Maryland

{amiller,akosba,jkatz}@cs.umd.edu

Elaine Shi

Cornell University

runting@gmail.com

ABSTRACT
An implicit goal of Bitcoin’s reward structure is to diffuse network
inﬂuence over a diverse, decentralized population of individual par-
ticipants. Indeed, Bitcoin’s security claims rely on no single entity
wielding a sufﬁciently large portion of the network’s overall com-
putational power. Unfortunately, rather than participating indepen-
dently, most Bitcoin miners join coalitions called mining pools in
which a central pool administrator largely directs the pool’s activ-
ity, leading to a consolidation of power. Recently, the largest min-
ing pool has accounted for more than half of network’s total mining
capacity. Relatedly, “hosted mining” service providers offer their
clients the beneﬁt of economies-of-scale, tempting them away from
independent participation. We argue that the prevalence of mining
coalitions is due to a limitation of the Bitcoin proof-of-work puzzle
– speciﬁcally, that it affords an effective mechanism for enforc-
ing cooperation in a coalition. We present several deﬁnitions and
constructions for “nonoutsourceable” puzzles that thwart such en-
forcement mechanisms, thereby deterring coalitions. We also pro-
vide an implementation and benchmark results for our schemes to
show they are practical.

1.

INTRODUCTION

Bitcoin [32] and subsequent decentralized cryptocurrencies have
gained rapid popularity in recent years, and are often quoted as “a
peek into the future ﬁnancial and payment infrastructure”. Security
of such cryptocurrencies is critical, and to ensure security the most
fundamental assumption made by decentralized cryptocurrencies is
that no single entity or adminstration wields a large fraction of the
computational resources in the network. Violation of this assump-
tion can lead to severe attacks such as history revision and double
spending which essentially nullify all purported security properties
that are widely believed today.

However, two recent trends in mining – namely, mining pools
and hosted mining – have led to the concentration of mining power,
and have cast serious doubt on the well-foundedness of these funda-
mental assumptions that underly the security of Bit-coin-like cryp-
tocurrencies. Speciﬁcally, mining pools exist because solo miners
wish to hedge mining risks and obtain rewards at a more stable,
steady rate. At several times over the past two years, the largest

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’15 October 12-16, 2015, Denver, CO, USA
Copyright 2015 ACM ISBN 978-1-4503-3832-5/15/10 ... $15.00
DOI: http://dx.doi.org/10.1145/2810103.2813621.

handful of mining pools have accounted for well over a third of
the network’s overall computing effort [10]. For example, recently
the largest mining pool, GHash.IO, has even exceeded 50% of the
total mining capacity.1 Currently, Hosted mining, on the other
hand, allows individuals to outsource their mining effort to one
or a few large service providers. Hosted mining services have al-
ready emerged, such as Alydian [9], whose “launch day pricing was
$65,000 per Terahash, and mining hosting contracts are available in
5 and 10 Th/sec blocks” [9]. Hosted mining is appealing because
it can potentially reduce miners’ cost due to economies of scale.
Henceforth we will refer to both mining pools and hosted mining
as mining coalitions.

Such large mining coalitions present a potential lurking threat
to the security of Bitcoin-like cryptocurrencies. To exacerbate the
matter, several recent works [18, 24] showed that it may be incen-
tive compatible for a mining coalition to deviate from the honest
protocol – in particular, Eyal and Sirer [18] showed that a mining
concentration of about 1/3 of the network’s mining power can ob-
tain disproportionately large rewards by exhibiting certain “selﬁsh
mining” behavior.

While alternatives to centralized mining pools are well-known
and have been deployed for several years, (such as P2Pool, [44] a
decentralized mining pool architecture), these have unfortunatley
seen extremely low user adoption (at the time of writing, they ac-
count for less than 2% of the network). Fundamentally, the problem
is that Bitcoin’s reward mechanism provides no particular incentive
for users to use these decentralized alternatives.

Increasing understanding of these problems has prodded exten-
sive and continual discussions in the broad cryptocurrency commu-
nity, regarding how to deter such coalitions from forming and retain
the decentralized nature of Bitcoin-like cryptocurrencies [27]. The
community demands a technical solution to this problem.

1.1 Our Results and Contributions

Our work provides a timely response to this community-wide
concern [27], providing the ﬁrst formally founded solution to com-
bat Bitcoin mining centralization. Our key observation is the fol-
lowing: an enabling factor in the growth of mining pools is a sim-
ple yet effective enforcement mechanism; members of a mining
pool do not inherently trust one another, but instead submit cryp-
tographic proofs (called “shares”) to the other pool members (or
to the pool operator), in order to demonstrate they are contributing
work that can only beneﬁt the pool (e.g., work that is tied to the
pool operator’s public key).

http://arstechnica.com/security/2014/

1See
06/bitcoin-security-guarantee-shattered-by-
anonymous-miner-with-51-network-power/

680Strongly nonoutsourceable puzzles. Our idea, therefore, is to dis-
able such enforcement mechanisms in a cryptographically strong
manner. To this end, we are the ﬁrst to propose strongly nonout-
sourceable puzzles, a new form of proof-of-work puzzles which
additionally guarantee the following:

If a pool operator can effectively outsource mining work to a
worker, then the worker can steal the reward without producing
any evidence that can potentially implicate itself.
Intuitively, if we can enforce the above, then any pool operator
wishing to outsource mining work to an untrusted worker runs the
risk of losing its entitled mining reward, thus effectively creating a
disincentive to outsource mining work (either in the form of mining
pools or hosted mining). Our nonoutsourceable puzzle is broadly
powerful in that it renders unenforceable even external contractual
agreements between the pool operator and the worker. In partic-
ular, no matter whether the pool operator outsources work to the
worker through a cryptocurrency smart contract or through an out-
of-the-band legal contract, we guarantee that the worker can steal
the reward without leaving behind evidence of cheating.
Technical insights. At a technical level, our puzzle achieves the
aforementioned guarantees through two main insights:
P1: We craft our puzzle such that if a worker is doing a large part
of the mining computation, it must possess a sufﬁciently large
part of a “signing key” such that it can later sign over the re-
ward to its own public key – effectively stealing the award
from the pool operator;

P2: We offer a zero-knowledge spending option, such that a worker
can spend the stolen reward in a way that reveals no informa-
tion (including potential evidence that can be used to implicate
itself).

As a technical stepping stone, we formulate a weaker notion of
our puzzle referred to as a weakly nonoutsourceable puzzle. A
weakly nonoutsourceable puzzle essentially guarantees property P1
above, but does not ensure property P2. As a quick roadmap, our
plan is to ﬁrst construct a weakly nonoutsourceable puzzle, and
from there we devise a generic zero-knowledge transformation to
compile a weakly nonoutsourceable puzzle into a strongly nonout-
sourceable one. It turns out that a weakly nonoutsourceable puzzle
is the implicit security notion adopted by the recent work of Per-
macoin [29] but without being formalized there. In Section 6, we
argue that weakly nonoutsourceable puzzles alone are inadequate
to defeat mining coalitions, and in particular hosted mining.
Implementation and practical performance. We show imple-
mentation and evaluation results to demonstrate the practical per-
formance of our puzzles. Based on an instantiation using the suc-
cinct zero-knowledge option of Libsnark [5], we show that it would
take a cheating worker only 14 seconds (using approximately a
thousand parallel cores) to successfully steal a block reward. Fur-
ther, stealing a block’s reward in zero knowledge consumes only
$10 worth of Amazon AWS compute-time, which is very small in
comparison with the block’s reward – roughly $8,750, based on
Bitcoin’s current market price. Clearly this provides a sufﬁciently
strong deterrent against mining coalitions. Note also that this zero-
knowledge spending option is not normally incurred, since honest
miners can simply adopt a cheap plaintext spending option whose
cost is insigniﬁcant (see Section 6). For both the zero-knowledge
and the cheap plaintext spending options, the block veriﬁcation
overhead is insigniﬁcant (at most 1.7 seconds) in comparison with
the present Bitcoin epoch length (roughly 10 minutes).

Deployment considerations. For our nonoutsourceable puzzles to
be practically deployed, it is also important to address several addi-
tional challenges, such as how to still allow miners to reduce min-
ing uncertainty (i.e., the positive effects of mining pools), and how
to simultaneously address various other design goals such as ASIC
resistance, and lightweight clients. We give detailed explanations to
address these practical issues related to deployment (Section 7.3).
Notably, inspired by the design of state lottery games, we propose
a new, multi-tier reward system that allows us to achieve the best
of both worlds: ensure non-outsourceability of puzzles, and mean-
while allow smaller players to reduce payoff variance.
Community demand and importance of formal security. The
community’s demand for a nonoutsourceable puzzle is also seen
in the emergence of new altcoins [1, 41] that (plan to) adopt their
own home-baked versions of nonoutsourceable puzzles. Their so-
lutions, however, offer only weak nonoutsourceability, and do not
provide any formal guarantees. The existence of these custom con-
structions further motivates our efforts, and demonstrates that it is
non-trivial to both formalize the security notions as well as design
constructions with provable security. To date, our work provides
the only formally-founded solution, as well as the ﬁrst strongly non-
outsourceable puzzle construction.

2. BITCOIN BACKGROUND

We deﬁne puzzles and nonoutsourceable puzzles as an indepen-
dent concept, abstracting away the less relevant details about the
Bitcoin protocol itself. Later, however, we will discuss how the
puzzles we introduce can be integrated into a Bitcoin-like distri-
buted digital currency. For this reason, as well as to understand
the motivation behind our formal deﬁnitions, we ﬁrst present some
additional background on Bitcoin and its use of computational puz-
zles. For a more thorough explanation of the Bitcoin protocol, we
refer the readers to [3, 7, 32].
Puzzles, rewards, and epochs. In Bitcoin, new money is printed
at a predictable rate, through a distributed coin-minting process. At
the time of writing, roughly speaking, 25 bitcoins are minted every
10 minutes (referred to as an epoch) on average. When an epoch
begins, a public puzzle instance is generated by computing an up-
to-date hash of the global transaction log (called the “blockchain”).
Then, Bitcoin nodes race to solve this epoch’s puzzle. Whoever
ﬁrst ﬁnds an eligible solution to the puzzle can claim the newly
minted coins corresponding to this epoch.

In slightly more detail, miners start with the puzzle instance puz,
and construct a payload m which contains (a tree hash over) the
miners public key and a new set of transaction to commit to the
log during this epoch. He then searches for a nonce r such that
H(puz(cid:107)m(cid:107)r) < 2λ−d, where H : {0, 1}∗ → {0, 1}λ is a hash
function and d is a difﬁculty parameter. The difﬁculty parameter is
adjusted according to the total amount of computational resources
devoted to mining to ensure that each epoch lasts 10 minutes on
average.

In Section 4, we formally deﬁne a generalization of Bitcoin’s
puzzle called scratch-off puzzles. More detail about the original
Bitcoin puzzle construction can found in the full online version of
our paper.
Consensus mechanism. Bitcoin nodes reach consensus on the his-
tory of transactions by having nodes accept the blockchain with the
largest total difﬁculty. Roughly speaking, this defeats history re-
vision attacks, since to revise history would involve computing a
blockchain that is more difﬁcult than the known good chain. An
adversary must therefore possess a signiﬁcant fraction of the total

681computational resources to successfully race against the rest of the
network in extending the chain.

Bitcoin is novel in its use of computational puzzles as part of
a consensus protocol for anonymous networks without any pre-
established PKI. A related approach was earlier proposed by Asp-
nes et al. [2], although their network model nonetheless retained a
strong assumption about pre-established point-to-point channels.

3. SCRATCH-OFF PUZZLES

As introduced earlier, the Bitcoin protocol is built around a mod-
erately hard computational puzzle. Bitcoin miners compete to solve
these puzzles, and whoever solves a puzzle ﬁrst in each epoch re-
ceives a reward. As there is no shortcut to solving this puzzle, for
an attacker to dominate the network would require the attacker to
expend more computational resources than the rest of the honest
participants combined. Although the Bitcoin puzzle is commonly
referred to as a proof-of-work puzzle, the requirements of the puz-
zle are somewhat different than existing deﬁnitions for proof-of-
work puzzles [13, 16, 21, 42].

Before proceeding with our main contribution of nonoutsource-
able puzzles, we ﬁrst provide a formal deﬁnition of the basic re-
quirements of the Bitcoin puzzle, which we call a scratch-off puz-
zle.2
In particular, while a traditional proof-of-work puzzle [21]
need only be solvable by a single sequential computation, a scratch-
off puzzle must be solvable by several concurrent non-communi-
cating entities.

In what follows, we let λ denote a security parameter. A scratch-
off puzzle is parameterized by parameters (t, µ, d, t0) where, infor-
mally speaking, t denotes the amount of work needed to attempt a
single puzzle solution, µ refers to the maximum amount by which
an adversary can speed up the process of ﬁnding solutions, d affects
the average number of attempts to ﬁnd a solution, and t0 denotes
the initialiazation overhead of the algorithm. We typically assume
that t0 (cid:28) 2dt, where 2dt is the expected time required to solve a
puzzle.

DEFINITION 1. A scratch-off puzzle is parameterized by pa-
rameters (t, µ, d, t0), and consists of the following algorithms (sat-
isfying properties explained shortly):
1. G(1λ) → puz: generates a puzzle instance.
2. Work(puz, m, t) → ticket: The Work algorithm takes a puzzle
instance puz, some payload m, and time parameter t. It makes
t unit scratch attempts, using t · t + t0 time steps in total. Here
t = poly(λ) is the unit scratch time, and t0 can be thought of
as the initialization and ﬁnalization cost of Work.
3. Verify(puz, m, ticket) → {0, 1}: checks if a ticket is valid for
a speciﬁc instance puz, and payload m. If ticket passes this
check, we refer to it as a winning ticket for (puz, m).

Intuitively, the honest Work algorithm makes t unit scratch at-
tempts, and each attempt has probability 2−d of ﬁnding a winning
ticket, where d is called the puzzle’s difﬁculty parameter. For sim-
plicity, we will henceforth use the notation
ζ(t, d) := 1 − (1 − 2

−d)t

to refer to the probability of ﬁnding a winning ticket using t scratch
attempts. For technical reasons that will become apparent later, we
additionally deﬁne the shorthand ζ +(t, d) := ζ(t + 1, d). For the

2The terms “scratch-off puzzle” and “winning ticket” are motivated
by the observation that Bitcoin’s coin minting process resembles a
scratch-off lottery, wherein a participant expends a unit of effort to
learn if he holds a winning ticket.

remainder of the paper, we assume that the puzzle’s difﬁculty pa-
rameter d is ﬁxed, hence we omit the d and write ζ(t) and ζ +(t) for
simplicity. We also deﬁne the algorithm WorkTillSuccess(puz, m)
as Work(puz, m,∞); i.e., this algorithm runs until it ﬁnds a win-
ning ticket for the given instance and payload.

1. Correctness. For any (puz, m, t), if Work(puz, m, t) outputs

A scratch-off puzzle must satisfy three requirements:
ticket (cid:54)= ⊥, then Verify(puz, m, ticket) = 1.

2. Feasibility and parallelizability. Solving a scratch-off puzzle
is feasible, and can be parallelized. More formally, for any (cid:96) =

poly(λ), for any t1, t2, . . . , t(cid:96) = poly(λ), let t :=(cid:80)

i∈[(cid:96)] ti.

 puz ← G(1λ),

Pr

m ← {0, 1}λ,
∀i ∈ [(cid:96)] : ticketi ← Work(puz, m, ti) :
∃i ∈ [(cid:96)] : Verify(puz, m, ticketi)



≥ ζ(t) − negl(λ).

Intuitively, each unit scratch attempt, taking time t, has proba-
bility 2−d of ﬁnding a winning ticket. Therefore, if (cid:96) potentially
parallel processes each makes t1, t2, . . ., t(cid:96) attempts, the prob-
ability of ﬁnding one winning ticket overall is ζ(t) ± negl(λ)

where t =(cid:80)

i∈[(cid:96)] ti.

3. µ-Incompressibility. Roughly speaking, the work for solving
a puzzle must be incompressible in the sense that even the best
adversary can speed up the ﬁnding of a puzzle solution by at
most a factor of µ. More formally, a scratch-off puzzle is µ-
incompressible (where µ ≥ 1) if for any probabilistic poly-
nomial-time adversary A taking at most t · t steps,

 puz ← G(1λ),

Pr

(m, ticket) ← A(puz) :
Verify(puz, m, ticket) = 1

 ≤ ζ +(µt) ± negl(λ).

Note that ζ +(t) = 1−(1−2−d)t+1 is roughly the probability of
outputting a winning ticket after t unit scratch attempts, though
we additionally allow the adversary to make a ﬁnal guess at the
end (as in [42]), and hence the t + 1 in the exponent instead
of just t. Ideally, we would like the compressibility factor µ to
be as close to 1 as possible. When µ = 1, the honest Work
algorithm is the optimal way to solve a puzzle.
This deﬁnition implies, in particular, that solutions to previous
puzzles do not help in solving a freshly generated puzzle unseen
ahead of time.
3.1 Non-Transferability

For a practical scheme we could integrate into Bitcoin, we should
require that the payload of a ticket is non-transferable, in the fol-
lowing sense:
if an honest party publishes a ticket attributed to
a payload m (e.g., containing a public key belonging to the party
to whom the reward must be paid), the adversary should not gain
any advantage in obtaining a puzzle solution attributed to some
different payload m∗ for the same puz. This is because in Bit-
coin, each epoch is deﬁned by a globally known, unique puzzle
instance puz; at most one winning ticket for puz and a payload
message is accepted into the blockchain; and a user who solves a
puzzle only receives the reward if their message is the one that is at-
tributed. If an adversary can easily modify a victim’s winning ticket
to be attributed to a different payload of its choice, then the adver-
sary can listen for when the victim’s ticket is ﬁrst announced in
the network, and then immediately start propagating the modiﬁed
ticket (e.g., containing its own public key for the reward payment)
and attempt to outrace the victim. It is possible that the network

682will now deem the adversary as the winner of this epoch—this
is especially true if the adversary has better network connectivity
than the victim (as described in [18]). For simplicity in develop-
ing our constructions and nonoutsourceable deﬁnition, we deﬁne
this non-transferability requirement separately below. Intuitively,
non-transferability means that seeing a puzzle solution output by
an honest party does not help noticeably in producing a solution
attributed to a different payload m∗.

DEFINITION 2. Let δ be a nonnegative function of (cid:96). A scratch-
off puzzle is δ-non-transferable if it additionally satisﬁes the follow-
ing property:

For any (cid:96) = poly(λ), and for any adversary A taking t · t steps,



Pr

puz ← G(1λ)
m1, m2, . . . , m(cid:96) ← A(1λ)
∀i ∈ [(cid:96)] : ticketi ← WorkTillSuccess(puz, mi),
(puz, m∗, ticket∗) ← A(puz, {mi, ticketi}(cid:96)
i=1) :

Verify(puz, ticket∗, m∗) ∧ (∀i ∈ [(cid:96)] : m∗ (cid:54)= mi)

≤ ζ+((µ + δ)t) + negl(λ)



4. OUTSOURCED MINING AND WEAKLY

NONOUTSOURCEABLE PUZZLES

The Bitcoin scratch-off puzzle described in the previous section
is amenable to secure outsourcing, in the sense that it is possible
for one party (the worker) to perform mining work for the beneﬁt
of another (the pool operator) and to prove to the pool operator that
the work done can only beneﬁt the pool operator.
To give a speciﬁc example, let m be the public key of the pool
operator; if the worker performs 2d(cid:48)
scratch attempts, on average
it will have found at least one value r such that H(puz(cid:107)m(cid:107)r) <
2λ−d(cid:48)
. The value r can be presented to the pool operator as a
“share” (since it represents a portion of the expected work needed
to ﬁnd a solution); intuitively, any such work associated with m
cannot be reused for any other m∗ (cid:54)= m. This scheme is an essen-
tial component of nearly every Bitcoin mining pool to date [39];
the mining pool operator chooses the payload m, and mining par-
ticipants are required to present shares associated with m in order
to receive participation credit. The rise of large, centralized mining
pools is due in large part to the effectiveness of this mechanism.

We now formalize a generalization of this outsourcing protocol,
and then proceed to construct puzzles that are not amenable to out-
sourcing (i.e., for which no effective outsourcing protocol exists).
4.1 Notation and Terminology
Pool operator and Worker. We use the terminology pool opera-
tor and worker referring respectively to the party outsourcing the
mining computation and the party performing the mining computa-
tion. While this terminology is natural for describing mining pools,
we stress that our results are intended to simultaneously discourage
both mining pools and hosted mining services. In the case of hosted
mining, the roles are roughly swapped; the cloud server performs
the mining work, and the individuals who hire the service receive
the beneﬁt and must be convinced the work is performed correctly.
We use this notation since mining pools are more well-known and
widely used today, and therefore we expect the mining-pool ori-
ented terminology to be more familiar and accessible.
Protocol executions. A protocol is deﬁned by two algorithms S
and C, where S denotes the (honest) worker, and C the (honest)

pool operator. We use the notation (oS ; oC) ← (S,C) to mean that
a pair of interactive Turing Machines S and C are executed, with
oS the output of S, and oC the output of C.
In this paper we assume the pool operator executes the proto-
col program C correctly, but the worker may deviate arbitrarily.3
We use the notation (A,C) to denote an execution between a mali-
cious worker A and an honest pool operator C. Note that protocol
deﬁnition always uses the honest algorithms, i.e., (S,C) denotes
a protocol or an honest execution; whereas (A,C) represents an
execution.
4.2 Deﬁnitions
Outsourcing protocol. We now deﬁne a generalization of out-
sourced mining protocols, encompassing both mining pools and
hosted mining services. Our deﬁnition of outsourcing protocol
is broad – it captures any form of protocol where the pool oper-
ator and worker may communicate as interactive Turing Machines,
and at the end, the pool operator may obtain a winning ticket with
some probability. The protocol is parametrized by three parame-
ters tC, tS, and te, which roughly models the pool operator’s work,
honest worker’s work, and the “effective” amount of work during
the protocol.

DEFINITION 3. A (tS , tC, te)-outsourcing protocol for scratch-
off puzzle (G, Work, Verify), where te < tS + tC and tc < te, is a
two-party protocol, (S,C), such that
• The pool operator’s input is puz, and the worker’s input is ⊥.
• The pool operator C runs in at most tC · t time, and the worker
S in at most tS · t time.
• C outputs a tuple (ticket, m) at the end, where ticket is either
a winning ticket for payload m or ticket = ⊥. Further, when
interacting with an honest S, C outputs a ticket (cid:54)= ⊥ with prob-
ability at least ζ(te) − negl(λ).

Formally,

 puz ← G(1λ)

Pr

(·; ticket, m) ← (S,C(puz)) :
Verify(puz, m, ticket)

 ≥ ζ(te) − negl(λ).

The parameter te is referred to as the effective billable work, be-
cause the protocol (S,C) has the success probability of perform-
ing te unit scratch attempts. Note that it must be the case that
te < µ(tS + tC). Intuitively, an outsourcing protocol allows ef-
fective outsourcing of work by the pool operator if te (cid:29) tC.

Note that this deﬁnition does not specify how the payload m is
chosen. In typical Bitcoin mining pools, the pool operator chooses
m so that it contains the pool operator’s public key. However, our
deﬁnition also includes schemes where m is jointly computed dur-
ing interaction between S and C, for example.
Weak nonoutsourceability. So far, we have formally deﬁned what
an outsourcing protocol is. Roughly speaking, an outsourcing pro-
tocol generally captures any possible form of contractual agreement
between the pool operator and the worker. The outsource protocol
deﬁnes exactly what the worker has promised to do for the pool op-
erator, i.e., the “honest” worker behavior. If a worker is malicious,
it need not follow this honest prescribed behavior. The notion of
weak non-outsourceability requires that no matter what the pre-
scribed contractual agreement is between the pool operator and the
worker– as long as this agreement “effectively” outsources work to
3This is without loss of generality, and does not mean that we as-
sume the mining pool operator is honest, since the protocol (S,C)
may deviate from “honest” Bitcoin mining.

683the worker– there exists an adversarial worker that can always steal
the pool operator’s ticket should the pool operator ﬁnd a winning
ticket during the protocol. Effectiveness is intuitively captured by
how much effective work the worker performs vs.
the work per-
formed by the pool operator in the honest protocol. Note that there
always exists a trivial, ineffective outsourcing protocol, where the
pool operator always performs all the work by itself – in this case,
a malicious worker will not be able to steal the ticket. Therefore,
the weak non-outsourceability deﬁnition is parametrized by the ef-
fectiveness of the honest outsourcing protocol.

More speciﬁcally, the deﬁnition says that the adversarial worker
can generate a winning ticket associated with a payload of its own
choice, over which the pool operator has no inﬂuence. In a Bitcoin-
like application, a natural choice is for an adversarial worker to re-
place the payload with a public key it owns (potentially a pseudo-
nym), such that it can later spend the stolen awards. Based on this
intuition, we now formally deﬁne the notion of a weakly nonout-
sourceable scratch-off puzzle.

is

DEFINITION 4. A scratch-off-puzzle

(tS , tC, te, α, ps)-
weakly nonoutsourceable if for every (tS , tC, te)-outsourcing pro-
tocol (S,C), there exists an adversary A that runs in time at most
tS · t + α, such that:
• Let m∗

Then, at the end of an execution
(A(puz, m∗),C(puz)), the probability that A outputs a win-
ning ticket for payload m∗ is at least psζ(te). Formally,

$← {0, 1}λ.

puz ← G(1λ); m∗ $← {0, 1}λ

Pr

(ticket∗; ticket, m) ← (A(puz, m∗), C(puz)) :
Verify(puz, ticket∗, m∗)

 ≥ psζ(te).

• Let viewh denote the pool operator’s view in an execution with
the honest worker (S,C(puz)), and let view∗ denote the pool
operator’s view in an execution with the adversary
(A(puz, m∗),C(puz)). Then,

∗ c≡ viewh.

view

When C interacts with A, the view of the pool operator view∗
is computationally indistinguishable from when interacting with
an honest S.
Later, when proving that puzzles are weakly nonoutsourceable,
we typically construct an adversary A that runs the honest protocol
S until it ﬁnds a ticket for m, and then transforms the ticket into
one for m∗ with probability ps. For this reason, we refer to the
adversary A in the above deﬁnition as a stealing adversary for pro-
tocol (S,C). In practice, we would like α to be small, and ps ≤ 1
to be large, i.e., A’s run-time is not much different from that of the
honest worker, but A can steal a ticket with high probability.
If the pool operator outputs a valid ticket for m and the worker
outputs a valid ticket for m∗, then there is a race to determine
which ticket is accepted by the Bitcoin network and earns a reward.
Since the µ-incompressibility of the scratch-off puzzle guarantees
the probability of generating a winning ticket associated with either
m or m∗ is bounded above by ζ +(µ(tS + tC)), the probability of
the pool operator outputting a ticket — but not the worker — is
bounded above by ζ +(µ(tS + tC)) − psζ(te).

Note that weak nonoutsourceability does not imply that the puz-
zle is transferable.
In other words, a puzzle can be simultane-
ously non-transferable and weakly nonoutsourceable. This is so
because the stealing adversary A may rely on its view of the entire
outsourcing protocol when stealing the ticket for its own payload
m∗, whereas the adversary for the non-transferability game is only
given winning tickets as input (but no protocol views).

As we mentioned in the beginning of this section, the prevalence
of Bitcoin mining pools can be attributed in part to the effective
outsourcing protocol used to coordinate untrusted pool members
- in other words, the Bitcoin puzzle is not nonoutsourceable. We
state and prove a theorem to this effect in the full online version of
this paper.

5. A WEAKLY NONOUTSOURCEABLE

PUZZLE

In this section, we describe a weakly nonoutsourceable construc-
tion based on a Merkle-hash tree construction. We prove that our
construction satisﬁes weak nonoutsourceability (for a reasonable
choice of parameters) in the random oracle model. Informally, our
construction achieves the following:

For any outsourcing protocol that can effectively outsource a ﬁxed
constant fraction of the effective work, an adversarial worker will
be able to steal the puzzle with at least constant probability.
Our construction is inspired by the Floating Preimage Signature
(FPS) scheme used in Permacoin [29], which is a puzzle integrated
with a proof-of-retrievablity. However, Permacoin [29] only de-
scribed the issue of nonoutsourceability informally, and made no
attempt to formalize the deﬁnition nor to discuss nonoutsourceabil-
ity beyond the context of archival storage. Our construction is for-
mally deﬁned in our online full version [30], but here we provide
an informal explanation of the intuition behind it.
Intuition. To solve a puzzle, a node ﬁrst builds a Merkle tree
with random values at the leaves; denote the root by digest. Then
the node repeatedly samples a random value r, computes h =
H(puz||r||digest), and uses h to select q leaves of the Merkle tree
and their corresponding branches (i.e., the corresponding Merkle
proofs). It then hashes those branches (along with puz and r) and
checks to see if the result is less than 2λ−d.

Once successful, the node has a value r what was “difﬁcult”
to ﬁnd, but is not yet bound to the payload message m. To ef-
fect such binding, a “signing step” is performed in which h(cid:48) =
H(puz||m||digest) is used to select a set of 4q(cid:48) leaf nodes (i.e.,
using h(cid:48) a seed to a pseudorandom number generator). Any q(cid:48) of
these leaves, along with their corresponding branches, constitute a
signature for m and complete a winning ticket.

Intuitively, this puzzle is weakly nonoutsourceable because in
order for the worker to perform scratch attempts, it must
• either know a large fraction of the leaves and branches of the
Merkle tree, in which case it will be able to sign an arbitrary
payload m∗ with high probability – by revealing q(cid:48) out of the
4q(cid:48) leaves (and their corresponding branches) selected by m∗,
• or incur a large amount of overhead, due to aborting scratch
attempts for which it does not know the necessary leaves and
branches,
• or interact with the pool operator frequently, in which case the
pool operator performs a signiﬁcant fraction of the total number
of random oracle queries.
To formally prove this construction is weakly nonoutsourceable,
we assume that the cost of the Work algorithm is dominated by
calls made to random oracles. Thus, for simplicity, in the following
theorems we equate the running time with the number of calls to
the random oracle. However, the theorem can be easily generalized
(i.e., relaxing by a constant factor) as long as the cost of the rest
of the computation is only a constant fraction of the random-oracle
calls.

684The construction sketched above, and formally deﬁned in our
online full version, is a scratch-off puzzle. We defer this proof to
our online full version [30].
Let q, q(cid:48) = O(λ). Let the number of leaves L ≥ q + 8q(cid:48). Sup-
pose d > 10 and te · 2−d < 1/2. Under the aforementioned cost
model, the above construction is a (tS , tC, te, α, ps) weakly non-
outsourceable puzzle, for any 0 < γ < 1 s.t. tC < γte, ps >
2 (1 − γ) − negl(λ), and α = O(λ2); and is 0-non-transferable.
1
In other words, if the pool operator’s work tC is a not a signiﬁcant
fraction of te, i.e., work is effectively outsourced, then an adver-
sarial worker will be able to steal the pool operator’s ticket with a
reasonably big probability, and without too much additional work
than the honest worker.

The proof that this puzzle is weakly nonoutsourceable can be
found in our online full version [30], but we sketch the main idea
here.
Informally, to “effectively” outsource work to the worker,
the worker must know more than a constant fraction (say, 1/3) of
the leaves before calling the random oracle to determine whether
an attempt is successful. However, if the worker knows more than
1/3 fraction of the leaves, due to a simple Chernoff bound, it will be
able to easily steal the solution should one be found. To make this
argument formally is more intricate. For lack of space, we defer
(to the full online version of our paper) the proof that this puzzle is
non-transferable.

6. STRONGLY NONOUTSOURCEABLE

PUZZLES

In the previous section, we formally deﬁned and constructed a
scheme for weakly nonoutsourceable puzzles, which ensure that
for any “effective” outsourcing protocol, there exists an adversarial
worker that can steal the pool operator’s winning ticket with sig-
niﬁcant probability, should a winning ticket be found. This can
help deter outsourcing when individuals are expected to behave
selﬁshly.

One critical drawback of the weakly nonoutsourceable scheme
(and, indeed, of Permacoin [29]) is that a stealing adversary may
be detected when he spends his stolen reward, and thus might be
held accountable through some external means, such as legal pros-
ecution or a tainted public reputation.

For example, a simple detection mechanism would be for the
pool operator and worker to agree on a λ/2-bit preﬁx of the nonce
space to serve as a watermark. The worker can mine by randomly
choosing the remaining λ/2-bit sufﬁx, but the pool operator only
accepts evidence of mining work bearing this watermark. If the
worker publishes a stolen puzzle solution, the watermark would be
easily detectable.

Ideally, we should enable the stealing adversary to evade detec-
tion and leave no incriminating trail of evidence. Therefore, in this
section, we deﬁne a “strongly nonoutsourceable” puzzle, which
has the additional requirement that a stolen ticket cannot be dis-
tinguished from a ticket produced through independent effort.

is

puzzle

DEFINITION 5. A

(tS , tC, te, α, ps)-
strongly nonoutsourceable if it is (tS , tC, te, α, ps)-weakly nonout-
sourceable, and additionally the following holds:
For any (tS , tC, te)-outsourcing protocol (S,C), there exists an
adversary A for the protocol such that the stolen ticket output by A
for payload m∗ is computationally indistinguishable from a hon-
estly computed ticket for m∗, even given the pool operator’s view
in the execution (A,C). Formally, let puz ← G(1λ), let m∗ $←
{0, 1}λ. Consider a protocol execution (A(puz, m∗),C(puz)): let
view∗ denote the pool operator C’s view and ticket∗ the stolen

Let NIZK be a non-interactive zero-knowledge proof system. Also as-
sume that E = (Key, Enc, Dec) is a CPA-secure public-key encryption
scheme.
Let (G(cid:48), Work(cid:48), Verify(cid:48)) be a weakly nonoutsourceable scratch-off puz-
zle scheme. We now construct a strongly nonoutsourceable puzzle
scheme as below.
• G(1λ): Run the puzzle generation of the underlying scheme puz(cid:48) ←
G(cid:48)(1λ). Let crs ← NIZK.Setup(1λ); and let (skE , pkE ) ←
E.Key(1λ). Output puz ← (puz(cid:48), crs, pkE )

• Work(puz, m, t):

Parse puz := (puz(cid:48), crs, pkE ).
ticket(cid:48) ← Work(cid:48)(puz(cid:48), m, t),
Encrypt c ← Enc(pkE ; ticket(cid:48); r).
Set π ← NIZK.Prove(crs, (c, m, pkE , puz(cid:48)), (ticket(cid:48), r))
for the following NP statement:
Verify(cid:48)(puz(cid:48), m, ticket(cid:48)) ∧ c = Enc(pkE ; ticket(cid:48); r)

Return ticket := (c, π).
• Verify(puz, m, ticket);

Parse puz := (puz(cid:48), crs, pkE ), and parse ticket as (c, π).
Check that Verify(crs, (c, m, pkE , puz(cid:48)), π) = 1.

Figure 1: A generic transformation from any weakly nonoutsourceable
scratch-off puzzle to a strongly nonoutsourceable puzzle.
ticket output by A in the execution. Let ticketh denote an honestly
generated ticket for m∗, (ticketh := WorkTillSuccess(puz, m∗)),
and let viewh denote the pool operator’s view in the execution
(S,C(puz)). Then,

∗

(view

, ticket

∗

)

c≡ (viewh, ticketh)

Recall that in Bitcoin, the message payload m typically contains
a Merkle root hash representing a set of new transactions to commit
to the blockchain in this round, including the public key to which
the reward is assigned. Thus to take advantage of the strongly non-
outsourceable puzzle, the stealing worker should bind its substi-
tuted payload m∗ to a freshly generated public key for which it
knows the corresponding private key. It can then spend its stolen
reward anonymously, for example by laundering the coins through
a mixer [8].

In Figure 1, we present a generic transformation that turns any
weakly nonoutsourceable puzzle into a strongly nonoutsourceable
puzzle. The strengthened puzzle is essentially a zero-knowledge
extension of the original – a ticket for the strong puzzle is effec-
tively a proof of the statement “I know a solution to the underlying
puzzle.”
If (GenKey(cid:48), Work(cid:48), Verify(cid:48)) is a (tS , tC, te, α, ps) weakly non-
outsourceable puzzle, then the puzzle described in Figure 1 is a
(tS , tC, te, α + tenc + tNIZK, ps − negl(λ)) strongly nonoutsource-
able puzzle, where tenc + tNIZK is the maximum time required to
compute the encryption and NIZK in the honest Work algorithm.

We next state a theorem that this generic transformation essen-
tially preserves the non-transferability of the underlying puzzle. If
the underlying puzzle (G(cid:48), Work(cid:48), Verify(cid:48)) is δ(cid:48)-non-transferable,
then the derived puzzle through the generic transformation is δ non-
transferable for

µ + δ

(cid:48) ≤

(µ + δ)t

t · t + (tenc + tnizk)(cid:96)

where tenc and tnizk are the time for performing each encryption and
NIZK proof respectively.

Again, due to space restrictions, we defer the proof of this theo-

rem to the full online version of our paper.

685Cheap plaintext option. Although we have shown it is plausible
for a stealing worker (with parallel resources) to compute the zero-
knowledge proofs, this would place an undue burden on honest in-
dependent miners. However, it is possible to modify our generic
transformation so that there are two ways to claim a ticket: the ﬁrst
is with a zero-knowledge proof as described, while the second is
simply by revealing a plaintext winning ticket for the underlying
weakly nonoutsourceable puzzle.

7.

IMPLEMENTATION AND MICRO-
BENCHMARKS

In order to demonstrate the practicality of our schemes, we im-
plemented both our weakly nonoutsourceable and strongly nonout-
sourceable puzzle schemes and provide benchmark results below.
Metrics. We are concerned with two main performance criteria.
First, the size of a ticket and cost of verifying a ticket should be
minimal, since each participant on the network is expected to ver-
ify every ticket independently. Second, in order for our scheme to
be an effective deterrent, the cost and latency required to “steal”
a ticket should be low enough that it is at least plausible for an
outsourcing worker to compute a stolen ticket and propagate it
throughout the network before any other solution is found.

When comparing the veriﬁcation cost of our schemes to that of
the current Bitcoin protocol, we include both the cost due to the
puzzle itself, as well as the total cost of validating a block including
transactions. At present, there are over 400 transactions per block
on average; 4 we assume each transaction carries at least 1 ECDSA
signature that must be veriﬁed. In general, the computational cost
of validating blocks in Bitcoin is largely dominated by verifying
the ECDSA signatures in transactions rather than verifying puzzle
solutions. We measured that the time to verify an ECDSA signa-
ture on a 2.4GHZ Intel CPU is 1.7ms.5 On average, at the time
of writing, a block contains about 350 kilobytes of data and 600
transactions, each with an average of two signatures. 6
7.1 Our Weakly Nonoutsourceable Puzzle

The weakly nonoutsourceable puzzle is straightforward to im-
plement, and its overhead relative to the Bitcoin puzzle consists
only of λ log λ additional hashes; we implemented this in unop-
timized Python and discuss its performance later on. In contrast,
the strongly nonoutsourceable puzzle requires much more care in
implementation due to the NIZK proof, which we will describe
shortly.

We used the SHA-1 hash function throughout our implementa-
tion, since this has a relatively efﬁcient implementation as an arith-
metic circuit [36]. We restricted our focus to the following puzzle
parameters: the signature tree consists of 2h = 210 leaves, and the
number of leaves revealed during a scratch attempt and a claim is
q = q(cid:48) = 10. This provides roughly 50 bits of security for the
non-transferability property.
Performance results. In Table 1 (ﬁrst and second rows), we show
that if we replace Bitcoin’s puzzle with our weakly nonoutsource-
able puzzle, the slowdown for the block veriﬁcation operation will

number

of

per

block:

transactions

4Average
//blockchain.info/charts/n-transactions-
per-block
5Unless otherwise noted, we conducted our measurements over at
least 1000 trials, and omit the error statistic if the standard deviation
is within ±1%.
6 Average block size:
charts/

https://blockchain.info/

https:

be only 2%. More speciﬁcally, while our puzzle veriﬁcation itself
is over a thousand times more expensive than the Bitcoin puzzle,
puzzle veriﬁcation only accounts for a very small percentage of the
overall veriﬁer time. Therefore, the overall performance slowdown
is insigniﬁcant for practical purposes. Likewise, while the size of
the ticket in our scheme is almost a hundred times larger than that
of Bitcoin, the ticket is a small fraction of the total size of a block
when transactions are included.

An adversarial worker can steal a ticket in a marginal amount of
time (only one additional hash in expectation, for example, assum-
ing the worker knows at least a third of the Merkle tree branches
used during scratch attempts). This cost is insigniﬁcant compared
to the expected time for solving a puzzle.
7.2 Our Strongly Nonoutsourceable Puzzle

We next describe more details of our instantiation and imple-
mentation of our strongly nonoutsourceable puzzle, followed by
evaluation.

We implemented our puzzle twice, each time using a different
NIZK libraries: Pinocchio [36] and Libsnark [5]. Both are im-
7 Pinocchio in-
plementations of a generic [20] NIZK scheme.
cludes a compiler that generates an arithmetic circuit from high-
level C code, while Libsnark [5] provides a library C++ for com-
posing systems of equations. We used a combination of hand-tuned
and generated-from-C-code arithmetic circuits, and developed an
adapter for Libsnark to use Pinocchio’s arithmetic circuit ﬁles.

In the full online version of our paper we discuss a concrete pa-
rameterization of our scheme. We implemented an optimization to
improve the parallel running time of the prover. Essentially, we
break the overall statement into many substatements, all of which
can be proven concurrently; the overall proof consists of a proof
for one “Type II” statement, and proofs for some number of “Type
I” statements. The number of Type I statements is determined by a
parameter C (smaller C means a larger number of smaller circuits).
We discuss this in more detail in the full online version.
Performance results. The prover and veriﬁer costs for our strongly
nonoutsourceable implementation are presented in Tables 1and 2.
Each of the bottom four rows of Table 1 and top four rows of Ta-
ble 2 corresponds to a different setting of the parameter C, the num-
ber of 160-bit blocks (of the underlying ticket) checked by each
substatement (smaller values of C indicate higher degrees of paral-
lelism). The total number of substatements required (#) is reported
along with computing time per circuit for the prover and veriﬁer.
We also report the total veriﬁcation time over all the statements,
as well as the total proof size. Note that our benchmarks are for a
sequential veriﬁer, although veriﬁcation could also be parallelized.
The bottom row is for the second type of statement, which does not
depend on C. Due to the longer time required to compute these
proofs, the quantities reported are averaged over only three trials.
The reader may immediately notice the vast improvement in pro-
ver performance using Libsnark rather than Pinocchio for our im-
plementation; in particular the speedup is much greater than previ-
ous reports (i.e, several orders of magnitude vs one order of mag-
nitude) [5]. This is readily explained with reference to the highly
sequential nature of our statements, which yields deep and highly-
connected circuits. Proﬁling reveals that the cost of generating our
proofs in Pinocchio is dominated by the polynomial interpolation

7 Libsnark [5] implements several optimizations over the original
GGPR [20] scheme. The version we used includes an optimization
that turns out to be unsound. [35] Libsnark has since been patched
to restore soundness; the patch is reported only to incur an overhead
of 0.007% on typical circuits, hence we report our original ﬁgures.

686Table 1: Estimated puzzle and block veriﬁcation costs for various schemes

Scheme
Bitcoin
Weak
Strong (C = 4)
Strong (C = 3)
Strong (C = 2)
Strong (C = 1)

Verif.
11.7µs
15.1ms
0.48s
0.62s
0.93s
1.68s

Puzzle only
Ratio
1
1.3e3
4.1e+04
5.3e+04
8e+04
1.4e+05

Size
80B
6.6KB
10.8KB
17.0KB
23.2KB
29.4KB

Transactions Included

Ratio Verif. Ratio
1
1.02
1.71
1.91
2.37
3.47

0.68s
0.70s
1.16s
1.30s
1.61s
2.36s

1
83
135
213
290
368

Size Ratio
1
1.02
1.03
1.05
1.07
1.08

350KB
357KB
361KB
367KB
373KB
379KB

step, which greatly exceeds that of simpler circuits with compara-
ble number of gates [36].

Keeping in mind our goal is to prove it is plausible for a worker
to produce stolen ticket proof with low latency, we believe it is rea-
sonable to assume that such a worker has access to parallel comput-
ing resources. Using Libsnark, the combination of our statement-
level parallelism and the parallel SNARK implementation leads to
proof times in under 15 seconds at the C = 2 setting. Since the
average time between puzzle solutions in the Bitcoin network is 10
minutes, this can be a wholly plausible deterrent. At this setting,
veriﬁcation of an entire proof takes under one second. Since ap-
proximately 144 Bitcoin puzzle solutions are produced each day, it
would take approximately two minutes for a single-threaded veri-
ﬁer to validate a day’s worth of puzzle solutions.

Assuming computational power can be rented at $1.68 per hour
(based on Amazon EC2 prices for the c3.8xlarge used in our trials,
which provides 32 cores), it would cost an attacker less than $10
in total to produce a stolen ticket proof within 20 seconds. This is
vastly less than reward for a puzzle solution, which at the current
time is approximately $8,750.
7.3 Cryptocurrency Integration

We now discuss several practical aspects of integrating nonout-

sourceables puzzles within existing cryptocurrency designs.
Integrating the puzzle with Bitcoin-like cryptocurrencies.
In
our deﬁnitions, we indicate that GenPuz(1λ) must be a random
function that generates a puzzle instance, and in all of our schemes
GenPuz(1λ) simply returns a uniform random string. However,
in the actual Bitcoin protocol, the next puzzle instance is gener-
ated by applying a hash function to the solution of the previous
puzzle. Our approach is likewise to determine each next puzzle in-
stance from the hash of the previous solution and message, puz(cid:48) :=
H(puz(cid:107)m(cid:107)ticket).
Further Integration Issues. In the full online version of our paper,
we further discuss how our nonoutsourceable puzzles can be com-
bined with other proposals for complementary properties, such as
faster blocks [26, 40], support for lightweight mobile clients [32],
and either ASIC-resistance [43] or backward-compatibility with
existing mining equipment [17].

8. MULTI-TIER BLOCK REWARDS

We want to arrive at a cryptocurrency design that simultane-
ously discourages centralized mining pools and hosted mining ser-
vices, yet encourages participation from individual miners and pro-
vides similar overall functionality and security as Bitcoin today. To
achieve this, there are two major remaining challenges.
Challenge 1: Lower variance rewards for individual miners.
Individual miners should not have to wait an unreasonable amount
of time to earn a Bitcoin reward. Intuitively, we can achieve this
by decreasing the average time between blocks, so that rewards are

given out much more frequently. We are constrained, however, by
the latency of network propagation, and the time it takes to compute
the zero knowledge proofs used in the strongly nonoutsourceable
puzzle.
Challenge 2: Discourage statistical enforcement over time. Our
deﬁnition of nonoutsourceable puzzles essentially describes a one-
shot game, and ensures that the worker can steal a single puzzle
solution from the pool operator and evade detection. However, this
deﬁnition does not immediately eliminate statistical enforcement
techniques over time. For example, pool operators could mon-
itor the output of a hosted service provider and punish it (e.g.,
through legal prosecution) if it underperforms signiﬁcantly. Intu-
itively, we should address this by giving out larger rewards much
less frquently, so that the worker can steal solutions over some rea-
sonable timeframe and plausibly claim it was just unlucky.
Conﬂicting requirements. What we need is a reward structure that
simultaneously answers the above challenges. Challenge 1 desires
paying out small rewards rapidly, whereas Challenge 2 clearly fa-
vors paying out large rewards less frequently. Further, to satisfy
Challenge 1, if we reduce the inter-block time to the order of sec-
onds, we phase another challenge: since it takes at least 14 seconds
to generate the zero-knowledge proof, it would be infeasible for a
miner to steal a block this way. The miner could choose to steal
the reward using the plaintext option, but since the reward at stake
is low, the mining pool could require a small collateral deposit to
discourage such blatant stealing.

8.1 Proposed Multi-Tier Reward Structure

We propose to satisfy both of these properties by designing a
reward structure with multiple possible prizes. Our multi-tier de-
sign is inspired by the payoff structure of state lottery games, which
often have several consolation prizes as well as large, less frequent
jackpots [34,38]. The effectiveness of such lotteries at encouraging
wide participation has long been proven in practice. Our implicit
assumption is that miners will tolerate a high-variance payoff over-
all, as long as they earn some reward fairly frequently.

In Table 3, we provide a concrete example of such a multi-tier
reward schedule, the rationale for which we discuss below. Each
attempt at solving a puzzle yields some chance of winning each of
three possible prizes (in contrast with Bitcoin today, in which every
block earns the same reward). The prizes are not only associated
with different reward values, but also count with varying weight
towards the blockchain “difﬁculty” scoring function. The ﬁrst two
columns indicate the average time between rewards of a given type,
along with their relative frequency (adding up to 1). The middle
two columns indicate the prize value (in btc), along with the real-
tive contribution to the total expected reward value (adding up to
1). Note that the overall expected payout rate is the same as in Bit-
coin today (25btc every 10 minutes, on average). The ﬁnal pair of
columns indicates the blockchain difﬁculty weight associated with
each reward type along with their expected relative contributions

687Table 2: Proof and veriﬁcation micro-benchmarks for strongly nonoutsourceable puzzles

C
1
2
3
4

#
220
120
80
60

Gates
213k
280k
392k
467k

Pinocchio [36]

Prove
268.2s
578.4s
1002.9s
1242.1s

Verify
11ms
11ms
11ms
11ms

# Gates
1
282K

Prove
508.5s

Verify
10ms

Total
2.42s
1.32s
0.80s
0.66s

Total
0.01s

Type I Statements

Prove (Single-core)

16.33s
20.29s
26.92s
32.88s

19.42s

Type II Statements
Prove (Single-core)

Libsnark [5]

Prove (Multi-core) Verify
7.6ms
7.7ms
7.7ms
7.8ms

9.84s
13.90s
17.18s
20.71s

Prove (Multi-core) Verify
7.8ms

13.34s

Total
1.672s
0.924s
0.616s
0.468s

Total
0.008s

Size

29.4KB
23.2KB
17.0KB
10.8KB

Size
<1KB

towards the overall difﬁculty of a blockchain (again, adding up to
1).

Low-value consolation prize: provides low-variance rewards
to solo-miners. The consolation prize is awarded the most fre-
quently (e.g., once every three seconds). The prize is small, less
than a tenth of a Bitcoin (≈$21 at the time of writing), but the
small prizes contribute overall to 70% of the total expected value.
Medium-value main prize: ensures block conﬁrmations ar-
rive regularly. The medium-value prizes are necessary to ensure
that the log of transactions approximately as quickly and securely
as in Bitcoin. They are given out at the same rate as ordinary Bit-
coin blocks; they carry a larger reward than the low-value prize,
but contribute much less to the overall expected payout. However,
the medium-value blocks account for nearly 75% of the total dif-
ﬁculty, and a miner who ﬁnds one of these blocks has an average
of 7.5 minutes to propagate her solution before it would become
stale. The 14 seconds it takes to compute a zero-knowledge proof
is relatively small in comparison.

High-value jackpot: defends against statistical detection of
cheating hosted mining services. The jackpot prize is very rare,
and accounts for a small, yet disproportionately large fraction of
the total expected value. The role of this reward is to engender
distrust of hosted mining providers; they would proﬁt greatly by
stealing these rewards, but it would be hard to obtain statistical
evidence that they have done so.
Implementing Multi-Tier Rewards. It is straightforward to im-
plement multi-tier rewards on top of any known scratch-off puzzle
constructions (i.e., Bitcoin or our nonoutsourceable constructions).
Recall that in these constructions, the critical step of a mnining at-
tempt is to compare a hash value to a threshold, H(puz(cid:107)ticket)
?
<
T , where the threshold T = 2λ−d is parameterized by the difﬁ-
culty d. To implement three reward tiers, we introduce two ad-
ditional thresholds, Tmedium < Thigh < T . If the hash value lies
between Thigh and T , then this attempt earns a high-value reward;
if it is between Tmedium and Thigh it earns a medium-value reward;
and otherwise it earns a low-value reward. These thresholds must
be set according to the desired frequency of each reward type.

8.2 Economic Analysis of Multi-Tier Rewards
We argue that our proposed reward structure would simultane-

ously satisfy the necessary properties.
First, our scheme offers small payoff variance. At the time of
writing, the overall Bitcoin hashpower is over 3.5· 1017 hashes per
second. The most cost effective entry-level Bitcoin ASIC we know
of is the 8.0 · 1014 ASICMiner BE Tube, which costs $320. Using
this device to solo-mine, the expected time to ﬁnd a block would be
over 8.3 years. However, under our proposed scheme and typical
parameters, over a 60 day period, the mining rig mentioned earlier
has a better than 98% chance of winning at least one of these prizes.

Table 3: Reward schedules for Bitcoin & our scheme. We give a
typical parametrization for the multi-tier reward structure. Param-
eters can be tuned based on different scenarios.

Time
1
10m
.995
3s
10m
.005
3mo 3.8E-7

Freq Prize (btc)
25
8.8E-2
5
3.3E4

(rel)
(rel) Weight
1
1
1 0.2499
600 0.7497
1800 3.4E-4

1
0.7
0.2
0.1

Bitcoin
Low
Med
High

Next we argue that the payoff structure is also effective at pre-
venting temporal statistical detection. Suppose a large hosted min-
ing provider controls 25% of the network hashpower. Under the
original Bitcoin reward structure, it should expect to mine 6574
blocks during a six-month period, and the chance of it mining fewer
than 6429 blocks (≈ 98%) is less than one in a thousand. Hence,
it could expect steal at most 145 puzzle solutions (worth $900,000,
at today’s price) over this time period before being implicated with
high conﬁdence – and even less before generating considerable sus-
picion. On the other hand, under our proposed scheme, even if the
service provider is honest, it has a better than 60% chance of fail-
ing to ﬁnd any jackpot during the same time period. Thus if it does
steal one, it would arouse no suspicion, yet the expected value of
this strategy is over $4.1 million USD.

Finally, we explain that as in the strawman scheme, it is plausible
that if miners joined pools requiring small collateral deposits that
they would prefer not to defect when they ﬁnd low-value blocks.
However, since the low-value blocks account for only 25% of the
blockchain’s total difﬁculty, even if a coercer inﬂuences all the
transactions in these blocks, this would be insufﬁcient to enforce
a blacklist policy, for example. The difﬁculty weight of the main
prize is high enough to provide ample time to steal the puzzle so-
lution (7.5 minutes) and adequate incentive to do so (thousands of
dollars worth). Since these blocks account for 75% of the over-
all difﬁculty, pool members would be encouraged at least to steal
these blocks. Note that the jackpot blocks count more towards the
blockchain weight than the other blocks (so that a miner who ﬁnds
a jackpot block has a long time window (45 minutes on average)
before it becomes stale), but contributes very little to the total dif-
ﬁculty of a chain. This prevents an attacker from revising a large
span of history by ﬁnding a single jackpot block.

9. DISCUSSION

We have proposed a technical countermeasure against the con-
solidation of mining power that threatens the decentralization of
Bitcoin and other cryptocurrencies. Although we have presented a
formal deﬁnition that captures the security guarantees of our con-
struction and described how it can be practically integrated into a
cryptocurrency, due to the difﬁculty involved in modifying an in-
use cryptocurrency (i.e., via a “hard fork” upgrade [7]) and the high

688stakes involved in cryptocurrencies generally, the bar for adopting
a new design is set very high. Our work provides a signiﬁcant step
in this direction by providing a sound and practical approach to
discouraging centralization. However, in order for our solution to
be deployed we must provide a thorough and compelling argument
that this solution is fully effective, preferable to all alternatives, and
does not conﬂict with other aspects of the system. Towards this end,
we address several typical objections we have encountered in the
past, from academic reviewers and the Bitcoin community alike:
“Mining pools are good because they lower the variance for
solo miners. Therefore, nonoutsourceable puzzles are not well-
motivated.” In Section 1 we describe the severe consequences that
can occur due to the concentration of mining power — basically
all purported security properties of decentralized cryptocurrencies
can be broken if mining coalitions with signiﬁcant mining power
misbehave (and in some cases it may be in their best interest to
misbehave [18]). Further, our multi-tier reward system design (see
Section 8.2) achieves the best of both worlds, (i.e., ensuring low
variance for solo mining as well as discouraging mining coalitions).
“Can miners still use smart contracts or legal contracts to en-
force mining coalitions in spite of the nonoutsourceable puz-
zles?” Our deﬁnition of nonoutsourceable puzzles prevents the en-
forcement of contractual mechanisms including smart contracts or
legal contracts. An enforcement mechanism, such as seizing collat-
eral deposits or legal prosecution, is only effective if it can be ap-
plied with few false positives. The worker can steal the puzzle so-
lutions without being held accountable, since the zero-knowledge
spending option ensures the worker can spend stolen coins without
revealing any evidence that can later be used to implicate it.
“What about collecting statistical evidence cheating workers?”
Suppose a pool operator monitors the puzzle production rate of a
worker over time, to detect if the worker is potentially cheating.
One enforcement mechanism might be for the pool to require that a
worker submit a deposit to join, such that in case the worker is not
producing solutions at the expected rate, the deposit can be conﬁs-
cated and redistributed.

As mentioned earlier in Section 8.2, our puzzle deﬁnition is by
nature a one-shot game. Although our nonoutsourceable puzzle
alone does not prevent the collection of statistical evidence, in Sec-
tion 8.2, we argued that by combining our puzzle with a multi-tier
reward system, we effectively make it highly costly or unreliable to
accumulate statistical evidence over time. In particular, a worker
can opt to steal only the “jackpot prize” (which happens only infre-
quently but offers a large reward), while behaving honestly when
it ﬁnds a “consolation prize” which is of much smaller amount but
paid off at a frequent interval. Such an attack cannot be reliably
detected within a reasonable of timeframe (e.g., several years).
“Can coalitions be prevented by other, simpler solutions that
do not require zero knowledge proofs?” The Bitcoin community
has put forth two main alternative approaches to ours. First, we
could promote the use of P2Ppool and other forms of “responsible”
mining, so that users can join pools without ceding full control of
their resources to a central authority. This has been unsuccessful so
far. At the time of writing, P2Pool accounts for less than 2% of the
total hashpower; and while some pools support a protocol (called
“getblocktemplate”) that allows pool members to see the contents
of the blocks they are asigned to work on (and, hence, could leave if
they detect the pool is applying some disagreeable policy), the top
six pools (which account for more than two thirds of the total hash-
power) do not. A second approach is to monitor large pools and

apply social pressure to limit their size. However, pools have been
accused of hiding their bandwidth to avoid backlash. In any case,
we make an analogy to coercion-resistance in electronic voting (see
Section 10): although social deterrents to undesired beahvior may
in some cases be effective, greater conﬁdence can be derived from
a technical and economic deterrent.
“It’s too late to change Bitcoin; and regardless, large miners
wouldn’t support this change.” While we have described our de-
sign as a proposed modiﬁcation to Bitcoin, this is primarily for
ease of presentation; our design is also applicable as the basis for a
new cryptocurrency, or as a modiﬁcation to any of the hundreds of
Bitcoin-like “altcoins” [7] which compete with Bitcoin (though, at
the time of writing, Bitcoin remains far-and-away the most popu-
lar). Indeed altcoins have already begun to experiment with (weak)
nonoutsourceable puzzles.

It seems unlikely our proposed design will soon be adopted by
Bitcoin. Due to the coordination involved and the risk of splintering
the network, there is (understandably) considerable political resis-
tance within the Bitcoin community to adopting “hard fork” proto-
col changes, except in extreme cases [7]. However, such changes
have occurred in the past, and could occcur again. Though min-
ers are inﬂuential and it would be unwise to adopt a new policy
that causes them to leave, they aren’t unilaterally responsible for
Bitcoin governance [7]; instead stakeholders include payment pro-
cessors and services, operators of “full nodes” that may not mine,
and developers of popular clients. Additionally, as we mentioned
in Section 7.3 and explain in detail in our extended online paper,
our nonoutsourceable puzzle constructions can be made backward
compatible with existing Bitcoin mining equipment, lessening the
impact on established miners [17]. Finally, even if our design is not
adopted, the mere public knowledge of a viable coalition-resistant
design alternative that the community could adopt — if necessary
— may already serve as a deterrent against large coalitions.

10. RELATED WORK
Computational puzzles. Moderately hard computational puzzles,
often referred to as “proofs of work,” were originally proposed for
the purpose of combating email spam [16] (though this application
is nowadays generally considered impractical [25]). Most work
on computational puzzles has focused instead on “client puzzles,”
which can be used to prevent denial-of-service attacks [23]. Re-
cently, several attempts have been made to provide formal security
deﬁnitions for client puzzles [13, 21, 42].
Theoretical and economic understanding of Bitcoin. Although a
purely digital currency has been long sought by researchers [11,12,
14], Bitcoin’s key insight is to frame the problem as a consensus
protocol and to provide an incentive for users to participate. Al-
though Bitcoin’s security has initially been proven (informally) in
the “honest majority” model [19,31,32], this assumption is unsatis-
fying since it says nothing about whether the incentive scheme in-
deed leads to an honest majority. An economic analysis of Bitcoin
by Kroll et al. [24] showed that honest participation in Bitcoin may
be incentive compatible under assumptions such as a homogeneous
population of miners and a limited strategy space. More recently,
Eyal and Sirer [18] showed that with a more realistic strategy space,
when a single player (or coalition) comprises more than a third of
the network’s overall strength, the protocol is not incentive compat-
ible (and in fact the threshold is typically much less than one-third,
depending on other factors involving network topology). This re-
sult underscores the importance of discouraging the formation of
Bitcoin mining coalitions.

689Decentralized Mining Pools. While most mining pools (including
the largest) are operated by a central administrator, P2Pool [44] is a
successful protocol for decentralized mining pools that achieve the
desired effect (lower payout variance for participants) that does not
require an administrator. It is possible that engineering efforts to
improve P2Pool’s performance and usability and public awareness
campaigns may steer more users to P2Pool rather than centralized
mining pools (at the time of writing8, P2Pool accounts for only 1%
of the total mining capacity while the two largest pools together
account for 49%). However, as P2Pool inherently requires more
overhead than a centralized pool, we believe it is wiser to directly
discourage coalitions through the built-in reward mechanism.
Altcoins. Numerous attempts have been made to tweak the incen-
tive structure by modifying Bitcoin’s underlying puzzle. The most
popular alternative, Litecoin9 uses an scrypt-based [37] puzzle in-
tended to promote the use of general purpose equipment (espe-
cially CPUs or GPUs) rather than specialized equipment (e.g., Bit-
coin mining ASICs). Another oft-cited goal is to make the puzzle-
solving computation have an intrinsically useful side effect (this is
discussed, for example, in [24]). To our knowledge, we are the ﬁrst
to suggest deterring mining coalitions as a design goal.

Zerocoin [28], Zerocash [4], and PinocchioCoin [15] focus on
making Bitcoin transactions anonymous by introducing a public
cryptographic accumulator for mixing coins. Spending a coin in-
volves producing a zero-knowledge proof that a coin has not yet
been spent. Although our zero-knowledge proof construction may
bear superﬁcial resemblance to this approach, our work addresses
a completely different problem.
Coercion-resistance in Electronic Voting. The approach we take
is inspired by notions of coercion-resistance in electronic voting.
Vote buying (as well as other forms of coercion) is illegal in all US
state and federal elections [22]. While the threat of legal prose-
cution already poses a deterrent against such behavior, electronic
voting schemes have been designed to provide technical counter-
measures as well [6, 33]. In short, such schemes ensure that vot-
ers are unable to obtain any receipt which could demonstrate how
they voted to a coercive attacker. We draw an analogy between
vote buying and what we call outsourcing schemes; analogous to
receipt-freeness, the (strongly) nonoutsourceable property prevents
a worker from proving to a pool operator how its hashpower is used.
Most Closely Related Work. In Permacoin [29], Miller et al. pro-
posed a Bitcoin-like system that achieves decentralized data storage
as a useful side effect of mining. As part of their development, they
implicitly developed a weakly nonoutsourceable puzzle that deters
consolidation of storage capacity. Our Merkle-tree-based weakly
nonoutsourceable puzzle construction is directly inspired by the
construction in Permacoin. However, Permacoin does not make
any attempt to formalize the notion of (weakly) nonoutsourceable
puzzles, nor to consider the goal of deterring outsourcing outside
the context of archival storage. Our paper provides the ﬁrst formal
treatment of nonoutsourceable puzzles. Additionally, we introduce
a new notion of strongly nonoutsourceable puzzles, which repairs
a critical ﬂaw in Permacoin (namely, that weakly nonoutsource-
able puzzles provide no deterrence against hosted mining providers
with valuable reputations, or against pools who collect collateral
deposits from their members).

In independent work, Eyal and Sirer [17] developed a technique
for combining a weakly nonoutsourceable puzzle with an arbitrary
8According to https://blockchain.info/pools re-
trieved on August 1, 2014
9https://litecoin.org/

scratch-off puzzle, resulting in a puzzle that retains the best prop-
erties of the constituents; this can be used, for example, to create
a nonoutsourceable puzzle that is backward-compatible with ex-
isting Bitcoin mining equipment. We discuss applications of this
technique in the full online version of our paper.

11. CONCLUSION

The prevalence of Bitcoin mining coalitions (including both min-
ing pools and hosted mining services), which lead to consolidation
of power and increased systemic risk to the network, are a result of
a built-in design limitation of the Bitcoin puzzle itself – speciﬁcally,
that it admits an effective coalition enforcement mechanism. To
address this, we have proposed formal deﬁnitions of nonoutsource-
able puzzles for which no such enforcement mechanism exists. We
have contributed two constructions: a weak nonoutsourceable puz-
zle provable in the random oracle model, and a generic transforma-
tion from any weak nonoutsourceable puzzle to a strong one. The
former may already be a sufﬁcient deterrent against mining pools,
while the latter thwarts both hosted mining and mining pools. We
have implemented both of our techniques and provide performance
evaluation results showing these add only a tolerable overhead to
the cost of Bitcoin blockchain validation. Overall, we are opti-
mistic that our approach, combined with suitable modiﬁcations to
the reward structure, could be used to guarantee that participation
as an independent individual is the most effective mining strategy.
Acknowledgments We thank the readers and reviewers of earlier
drafts of this paper. This work was supported in part by NSF
awards #0964541, #1223623, and #1518765.

12. REFERENCES
[1] ziftrcoin : A cryptocurrency to enable commerce.

Whitepaper.

[2] James Aspnes, Collin Jackson, and Arvind Krishnamurthy.
Exposing computationally-challenged byzantine impostors.
Department of Computer Science, Yale University, New
Haven, CT, Tech. Rep, 2005.

[3] Simon Barber, Xavier Boyen, Elaine Shi, and Ersin Uzun.
Bitter to better – how to make bitcoin a better currency. In
Financial Cryptography and Data Security, pages 399–414.
Springer, 2012.

[4] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman,

Matthew Green, Ian Miers, Eran Tromer, and Madars Virza.
Zerocash: Decentralized anonymous payments from bitcoin.
In Security and Privacy (SP), 2014 IEEE Symposium on.
IEEE. IEEE, 2014.

[5] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and

Madars Virza. Succinct non-interactive zero knowledge for a
von neumann architecture. In 23rd USENIX Security
Symposium (USENIX Security 14), pages 781–796, San
Diego, CA, August 2014. USENIX Association.

[6] Josh Benaloh and Dwight Tuinstra. Receipt-free secret-ballot

elections. In Proceedings of the twenty-sixth annual ACM
symposium on Theory of computing, pages 544–553. ACM,
1994.

[7] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind

Narayanan, Joshua Kroll, and Edward W. Felten. Research
perspectives on bitcoin and second-generation digital
currencies. In 2015 IEEE Symposium on Security and
Privacy. IEEE, 2015.

[8] Joseph Bonneau, Arvind Narayanan, Andrew Miller, Jeremy

Clark, Joshua A Kroll, and Edward W Felten. Mixcoin:

690Anonymity for bitcoin with accountable mixes. In Financial
Cryptography and Data Security, pages 486–504. Springer,
2014.

[9] Danny Bradbury. Alydian targets big ticket miners with

terahash hosting. http:
//www.coindesk.com/alydian-targets-big-
ticket-miners-with-terahash-hosting/,
August 2013.

[10] Vitalik Buterin. Bitcoin network shaken by blockchain fork.
http://bitcoinmagazine.com/3668/bitcoin-
network-shaken-by-blockchain-fork/, 2013.

[11] David Chaum. Blind signatures for untraceable payments. In

Crypto, volume 82, pages 199–203, 1982.

[12] David Chaum, Amos Fiat, and Moni Naor. Untraceable

electronic cash. In Advances in Cryptology—CRYPTO’88,
pages 319–327. Springer, 1990.

[13] Liqun Chen, Paul Morrissey, Nigel P Smart, and Bogdan
Warinschi. Security notions and generic constructions for
client puzzles. In Advances in Cryptology–ASIACRYPT
2009, pages 505–523. Springer, 2009.

[14] Wei Dai. b-money.

http://www.weidai.com/bmoney.txt, 1998.

[15] George Danezis, Cedric Fournet, Markulf Kohlweiss, and

Bryan Parno. Pinocchio coin: building zerocoin from a
succinct pairing-based proof system. In Proceedings of the
First ACM workshop on Language support for
privacy-enhancing technologies, pages 27–30. ACM, 2013.

[16] C. Dwork and M. Naor. Pricing via processing or combatting

junk mail. In CRYPTO, 1993.

[17] Ittay Eyal and Emin Gün Sirer. How to disincentivize large

bitcoin mining pools. Blog post:
http://hackingdistributed.com/2014/06/
18/how-to-disincentivize-large-bitcoin-
mining-pools/, June 2014.

[18] Ittay Eyal and Emin Gün Sirer. Majority is not enough:

Bitcoin mining is vulnerable. In Financial Cryptography and
Data Security, pages 436–454. Springer, 2014.

[19] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. The
bitcoin backbone protocol: Analysis and applications. In
Advances in Cryptology-EUROCRYPT 2015, pages
281–310. Springer, 2015.

[20] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana

Raykova. Quadratic span programs and succinct nizks
without pcps. In Advances in Cryptology–EUROCRYPT
2013, pages 626–645. Springer, 2013.

[21] Bogdan Groza and Bogdan Warinschi. Cryptographic

puzzles and dos resilience, revisited. Designs, Codes and
Cryptography, pages 1–31, 2013.

[22] Richard L Hasen. Vote buying. California Law Review,

pages 1323–1371, 2000.

[23] Ari Juels and John G Brainard. Client puzzles: A

cryptographic countermeasure against connection depletion
attacks. In NDSS, volume 99, pages 151–165, 1999.

[24] Joshua A Kroll, Ian C Davey, and Edward W Felten. The
economics of bitcoin mining or, bitcoin in the presence of
adversaries. WEIS, 2013.

[25] Ben Laurie and Richard Clayton. Proof-of-workâ ˘A˙I proves

not to work; version 0.2. In Workshop on Economics and
Information, Security, 2004.

[26] Yoad Lewenberg, Yonatan Sompolinsky, and Aviv Zohar.

Inclusive block chain protocols. Financial Cryptography and
Data Security. Springer, 2015.

[27] Jon Matonis. The bitcoin mining arms race: Ghash.io and the

51% issue. http://www.coindesk.com/bitcoin-
mining-detente-ghash-io-51-issue/, July
2014.

[28] Ian Miers, Christina Garman, Matthew Green, and Aviel D

Rubin. Zerocoin: Anonymous distributed e-cash from
bitcoin. In Security and Privacy (SP), 2013 IEEE Symposium
on, pages 397–411. IEEE, 2013.

[29] Andrew Miller, Ari Juels, Elaine Shi, Bryan Parno, and

Jonathan Katz. Permacoin: Repurposing bitcoin work for
long-term data preservation. In IEEE Symposium on Security
and Privacy, 2014.

[30] Andrew Miller, Ahmed Kosba, Elaine Shi, and Jonathan
Katz. Nonoutsourceable scratch-off puzzles to discourage
bitcoin mining coalitions. (full version).
http://cs.umd.edu/~amiller/
nonoutsourceable_full.pdf, 2015.

[31] Andrew Miller and Joseph J. LaViola, Jr. Anonymous

byzantine consensus from moderately-hard puzzles: A model
for bitcoin. UCF Tech Report. CS-TR-14-01.

[32] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash
system. http://bitcon.org/bitcoin.pdf, 2008.
[33] Valtteri Niemi and Ari Renvall. How to prevent buying of

votes in computer elections. In Advances in
Cryptologyâ ˘A ˇTASIACRYPT’94, pages 164–170. Springer,
1995.

[34] Emily Oster. Are all lotteries regressive? evidence from the

powerball. National Tax Journal, June, 2004.

[35] Bryan Parno. A note on the unsoundness of vntinyram’s

snark. Cryptology ePrint Archive, Report 2015/437, 2015.
http://eprint.iacr.org/.

[36] Bryan Parno, Craig Gentry, Jon Howell, and Mariana

Raykova. Pinocchio: Nearly practical veriﬁable computation.
In IEEE Symposium on Security and Privacy, pages
238–252, 2013.

[37] Colin Percival and Simon Josefsson. The scrypt
password-based key derivation function. 2012.

[38] John Quiggin. On the optimal design of lotteries. Economica,

58(229):1–16, 1991.

[39] Meni Rosenfeld. Analysis of bitcoin pooled mining reward

systems. arXiv preprint arXiv:1112.4980, 2011.

[40] Yonatan Sompolinsky and Aviv Zohar. Secure high-rate

transaction processing in bitcoin. Financial Cryptography
and Data Security. Springer, 2015.

[41] Spreadcoin.

http://spreadcoin.net/files/SpreadCoin-
WhitePaper.pdf, October 2014.

[42] Douglas Stebila, Lakshmi Kuppusamy, Jothi Rangasamy,
Colin Boyd, and Juan Gonzalez Nieto. Stronger difﬁculty
notions for client puzzles and denial-of-service-resistant
protocols. In Topics in Cryptology–CT-RSA 2011, pages
284–301. Springer, 2011.

[43] John Tromp. Cuckoo cycle: a new memory-hard

proof-of-work system. Bitcoin Research Workshop, 2015.

[44] Forrest Voight. p2pool: Decentralized, dos-resistant,

hop-proof pool. https:
//bitcointalk.org/index.php?topic=18313,
June 2011.

691