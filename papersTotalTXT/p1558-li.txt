Seeing Your Face Is Not Enough: An Inertial Sensor-Based

Liveness Detection for Face Authentication

Yan Li, Yingjiu Li, Qiang Yan, Hancong Kong, Robert H. Deng

School of Information Systems, Singapore Management University

{yan.li.2009, yjli, qiang.yan.2008, hckong.2014, robertdeng}@smu.edu.sg

ABSTRACT
Leveraging built-in cameras on smartphones and tablets, face au-
thentication provides an attractive alternative of legacy passwords
due to its memory-less authentication process. However, it has an
intrinsic vulnerability against the media-based facial forgery (MFF)
where adversaries use photos/videos containing victims’ faces to
circumvent face authentication systems. In this paper, we propose
FaceLive, a practical and robust liveness detection mechanism to
strengthen the face authentication on mobile devices in ﬁghting
the MFF-based attacks. FaceLive detects the MFF-based attacks
by measuring the consistency between device movement data from
the inertial sensors and the head pose changes from the facial video
captured by built-in camera. FaceLive is practical in the sense that
it does not require any additional hardware but a generic front-
facing camera, an accelerometer, and a gyroscope, which are per-
vasively available on today’s mobile devices. FaceLive is robust
to complex lighting conditions, which may introduce illuminations
and lead to low accuracy in detecting important facial landmarks; it
is also robust to a range of cumulative errors in detecting head pose
changes during face authentication.

Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection—Au-
thentication; K.6.5 [MANAGEMENT OF COMPUTING AND
INFORMATION SYSTEMS]: Security and Protection—Authen-
tication

Keywords
Liveness detection; face authentication; media-based facial forgery

1.

INTRODUCTION

Face authentication has been commonly used in commercial
products of mobile devices, such as smartphones and tablets. Face
authentication systems. It provides a potential alternative to legacy
passwords as it requires no user memory while providing a higher
entropy for identifying users [34]. Unfortunately, most existing
face authentication systems, including Face Unlock [16], Facelock

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, CO, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813612.

Pro [11], and Visidon [48], have an intrinsic vulnerability against
the media-based facial forgery (MFF) where an adversary forges
or replays a photo/video containing a victim’s face. Prior research
has shown that 53% of facial photos in online social networks, such
as Facebook and Google+, can be simply used to spoof such face
authentication systems [28]. The MFF-based attacks pose a severe
threat to the existing face authentication systems.

In order to defend against the MFF-based attacks, liveness de-
tection is required to distinguish between the legitimate face bio-
metrics of live users and the forged face biometrics [3, 24, 26, 36].
Simple liveness detection techniques have been proposed for de-
tecting the photo-based attacks where an adversary replays a facial
photo. For example, the eye blink based approach and the head ro-
tation based approach require users to blink their eyes or rotate their
heads [24, 36]. Such liveness detection approaches are still subject
to video-based attacks where a more powerful adversary replays
pre-recorded face videos or multiple modiﬁed images containing
the required motions [38].

More advanced liveness detection techniques are proposed
against both photo-based attacks and video-based attacks. For ex-
ample, the facial thermogram based approach analyzes an addi-
tional input of thermogram data from an infrared camera [15]. The
optical ﬂow analysis based approach examines liveness clues in
a high-quality input of images/videos captured under ideal indoor
lighting conditions [24]. A recent research work thwarts the MFF-
based attacks by accurately detecting a clear edge of nose which
requires controlled lighting and clear appearance of nose [8]. How-
ever, the required inputs of these approaches may not be easy to ob-
tain on mobile devices in practice due to real-world challenges such
as limited hardware capability and varied usage environments. De-
vice manufacturers are reluctant to add extra hardware features like
infrared camera if they are not driven by strong business demand.
Meanwhile, the real non-ideal lighting conditions in varied usage
environments may lead to low quality of input images/videos due
to noisy pixels, loss of pixels, illumination, etc. The real lighting
may also diminish the geometric features of important facial land-
marks such as nose and eyes and make it difﬁcult to detect such
facial landmarks in face authentication.

To address these challenges, we propose FaceLive, an inertial
sensor-based liveness detection mechanism for face authentication
on mobile devices. FaceLive can detect the MFF-based attacks in-
cluding both photo-based attacks and video-based attacks. It does
not require any additional hardware but a generic front-facing cam-
era, an accelerometer, and a gyroscope which are commonly avail-
able on mobile devices. To thwart the MFF-based attacks, FaceLive
detects 3D characteristics of a live user’s face by measuring the
consistency between estimated head pose changes from the cap-
tured face video and the estimated movements from the inertial

1558sensors. In order to verify that the input is indeed from a live user,
FaceLive requires the user to simply hold and move a mobile device
in front of his/her face over a short distance while the front-facing
camera on the device captures the video about the user’s face and
the inertial sensors record the motion data about the device simul-
taneously. A live user is detected if the changes of head poses in
the facial video are consistent with the device movements.

We conduct a user study to validate the proposed liveness de-
tection mechanism. We collect real video data and inertial sensor
data from both legitimate authentication requests and MFF-based
attacks. We measure the Equal Error Rate (EER) of FaceLive in
varied scenarios, including unsuccessful detection of partial facial
landmarks in real-world lighting conditions, and inaccurate estima-
tion of head pose changes in liveness detection. The experimental
results indicate that FaceLive can detect the MFF-based attacks ef-
fectively with low EER rates in all tested scenarios representing
varied environments, which shows the practicability and robustness
of FaceLive.

2. RELATED WORK

Various liveness detection techniques for face authentication
have been proposed in the literature. We summarize them accord-
ing to the types of their liveness indicators, which include multi-
modal, texture pattern, 3D face, and real-time response.

Multimodal based liveness detection approaches take face bio-
metrics and other biometrics into account in user authentication.
Rowe et al. proposed a multimodal based technique which requires
a camera and a ﬁngerprint scanner to fuse face authentication and
ﬁngerprint authentication together [40]. Wilder et al.
took facial
thermogram from an inferred camera and face biometrics from a
generic camera in authentication process [15,49]. Unlike the above
approaches relying on the hardware sensors rarely deployed on mo-
bile devices, our approach requires a front-facing camera, an ac-
celerometer, and a gyroscope which are pervasively available on
today’s mobile devices.

The texture pattern based liveness detection techniques assume
that the printed fake faces contain detectable texture patterns due
to the printing process and the material printed on. Maatta et al.
determined the liveness of a user based on the local binary patterns
extracted from a single image [29]. IDIAP team took a facial video
as input and the local binary patterns from each extracted frame in
the video in order to build a global histogram for the video. The
liveness of face is determined based on the global histogram [7].
The texture pattern based techniques usually require high-quality
photos/videos captured in ideal lighting conditions, which may be
hard to achieve in practice. In contrast, FaceLive takes the input
videos in moderate quality which can be captured in varied lighting
conditions.

The 3D face liveness indicator is based on the clue that a real
face is a 3D object with depth characteristics. The detection of
the characteristics about a 3D face is usually associated with op-
tical ﬂow analysis and changes of face views. A 3D face has the
characteristic of optical ﬂow that the motion speed of the central
part of face is higher than the outer face region [24]. Along this
line, Bao et al. proposed a liveness detection which analyzes the
properties of the optical ﬂow generated from a holistic 3D face [3].
Besides the holistic face, local facial landmarks are investigated in
the optical ﬂow analysis for liveness detection. Jee et al. proposed
a liveness detection algorithm based on the shape variations of eye
blinking, which is used in optical ﬂow calculation [23]. Kollreider
et al. proposed a liveness detection algorithm which analyzes the
optical ﬂow in detecting ears, nose, and mouth [26]. However, the
optical ﬂow analysis based approaches usually require high-quality

input videos in ideal lighting conditions, which may be difﬁcult to
achieve in practice. Compared to these works, FaceLive takes in-
put videos from a generic camera which can be easily achieved in
practice.

On the other hand, the 3D characteristics about a real face can be
detected in relative movements of the face. Findling et al. proposed
to use multiple face views in face authentication. However, the pro-
posed solution would still be vulnerable to the MFF-based attacks
if an adversary obtains sufﬁcient qualiﬁed face images with speciﬁc
face views [12], while FaceLive is secure in such situation unless an
adversary is able to obtain a qualiﬁed video and generate consistent
device movement data. Chen et al. examined the 3D characteris-
tics of nose in the liveness detection given the assumption that a
real face has a 3D nose [8]. In order to determine the liveness of
a user, the liveness detection mechanism compares the similarity
between the direction changes of the mobile phone measured by
the accelerometer, and the changes of a clear nose edge observed
in the video from the camera. However, to produce a clear nose
edge, a controlled lighting is required to cast the shadow of nose
without any occlusion. This may be difﬁcult to achieve in practice
where the controlled lighting is not possible. The effectiveness of
the liveness detection mechanism is also limited for those who have
ﬂat noses. Compared to this work, FaceLive can be used in com-
plex lighting conditions and is robust to unsuccessful detection of
partial facial landmarks including nose, eyes, and mouth because
multiple facial landmarks are used in liveness detection.

The real-time response based approaches require interaction with
users in real time. Pan et al. required users to blink their eyes in
order to detect the liveness [36]. VeriFace, a popular face authenti-
cation software, asked users to rotate their heads in order to verify
the liveness [27]. Unfortunately, these approaches are subject to
the video-based attacks where adversaries may forge or replay fa-
cial videos containing the required interactions [38]. FaceLive can
detect such video-based attacks effectively.

3. PRELIMINARIES
3.1 Face Authentication

As one of the most promising biometric-based user authentica-
tion, face authentication veriﬁes a claimed identity of a user based
on the facial features extracted from the images/videos about the
user’s face. A typical face authentication system usually consists
of two subsystems including a face veriﬁcation subsystem and a
liveness detection subsystem, as shown in Figure 1.

The face veriﬁcation subsystem takes the user’s facial

im-
age/video as input through a camera and veriﬁes it with the enrolled
face biometrics for the claimed identity. This subsystem accepts
the user if the input facial image/video matches the claimed iden-
tity and rejects the user otherwise. In the veriﬁcation process, two
key modules are involved, including the face detection module and
the face matching module. The face detection module identiﬁes the
face region and removes the irrelevant parts of an image and then
passes the processed image to the face matching module. The face
matching module computes a similarity score for the input image
by comparing the image with the enrolled face template and de-
cides whether they belong to the same person. As face veriﬁcation
subsystem is designed to recognize the user from the input facial
image/video and cannot detect forged biometrics, it is inherently
vulnerable to the media based face forgery (MFF) where an adver-
sary forges or replays a victim’s facial images/video.

The liveness detection subsystem aims at preventing the MFF-
based attacks. The liveness detection distinguishes between the
faces of live users and the faces forged from facial images/videos.

1559in real time while it is difﬁcult for fake faces to do so. In particular,
eye blink and head rotation are two typical real-time response based
liveness indicators which have been used in popular face authenti-
cation systems such as Google’s FaceUnlock [16]. These liveness
detection mechanisms require no additional hardware; they work
with moderate image quality, and incur relatively low usability cost.
They can effectively detect the photo-based attacks; however, they
are still vulnerable to the video-based attacks.

The video-based attacks to face authentication systems pose sig-
niﬁcant security risks as massive amount of personal photos and
videos are published online. It is likely that these photos and videos
contain facial motions such as eye blink and head rotation which
are natural physiology behaviors of humans. Even worse, the facial
motions can be animated and synthesized through a single static fa-
cial photo from which a dynamic 3D face model is estimated [1,50].
Therefore, it is important for liveness detection to defend against
the video-based attacks.

Our proposed liveness detection mechanism, FaceLive, aims to
prevent both photo-based attacks and video-based attacks. Face-
Live detects the attacks by measuring the consistency between the
movements of mobile device and corresponding changes of head
poses. The inertial sensor data of mobile device movements and
the facial video of head pose changes are recorded simultaneously
when a user moves a mobile device in front of his/her face.

In this paper, it is assumed that an adversary may obtain and re-
play a user’s facial video containing continuous head pose changes
during the video-based attacks. To perform the attacks, the adver-
sary needs to hold and move a mobile device so as to generate the
inertial sensor data for comparison with the facial video. According
to the movements performed by the adversary, the video-based at-
tacks are categorized as random-move attacks and imitation-move
attacks. For the random-move attacks, an adversary randomly
moves the mobile device to generate the inertial sensor data. For
the imitation-move attacks, a more powerful adversary watches the
facial video and attempts to move the phone accordingly in order
to imitate the movements of the mobile device associated with the
video. More details about these attacks are given in Section 5.1.

4. DESIGN OVERVIEW

FaceLive is a liveness detection mechanism that prevents the
MFF-based attacks against face authentication systems on mobile
devices based on measuring the consistency between a facial video
about a user and the motion data about the user’s mobile device.
The video and the motion data are captured simultaneous and inde-
pendently by a front-facing camera and the inertial sensors on the
device, respectively. If a live user makes an authentication request,
the changes of head poses estimated from the facial video should
be consistent with the device movement estimated from the motion
data.

FaceLive veriﬁes the liveness of input facial biometrics based
on the detection of a 3D face which is a liveness indicator com-
monly used by many liveness detection mechanisms as described
in Section 3. To perform the liveness veriﬁcation, a user needs to
hold and move a mobile device over a short distance in front of
his/her face. In this process, a front-facing camera on the device
captures the video about the user’s face from different camera an-
gles. Meanwhile, the inertial sensors, including an accelerometer
and a gyroscope, on the device record the motion data about the de-
vice movement concurrently. The changes of the user’s head poses
correlated with the device movement can be observed in the facial
video if a real 3D face is in front of the device.

FaceLive consists of three modules, including Device Motion
Estimator (DME), Head Pose Estimator (HPE), and Consistency

Figure 1: Work ﬂow of a typical face authentication system

The liveness detection subsystem usually uses a camera or/and
other additional sensors to capture the data about a live user during
the face authentication. The captured data is analyzed by two key
modules in this subsystem, including the liveness indicator feature
extraction and the forgery detection. The liveness indicator feature
extraction module takes the captured raw data as input and extracts
feature information for liveness detection. Based on the feature in-
formation, the forgery detection module computes a liveness score
and decides whether or not it is from a live user.

In the end, based on the decisions from the two subsystems, the
face authentication system makes the ﬁnal decision whether an au-
thentication claim is accepted or rejected.
3.2 Media-based Facial Forgery and Threat

Model

The media-based facial forgery (MFF) means that users’ face
biometrics can be forged by photos or videos containing the users’
faces. The MFF poses a serious threat against face authentication
systems as adversaries may forge or replay facial photos/videos to
spoof face authentication.

Face authentication system has an intrinsic vulnerability against
the MFF-base attacks during its face veriﬁcation process. As shown
in Figure 1, the face veriﬁcation subsystem recognizes a user from
an input facial photo/video. However, it cannot distinguish if the
input facial photo/video is from a live user or from pre-recorded
photo/video of the same user. Therefore, liveness detection is in-
troduced into the face authentication system so as to thwart the
MFF-based attacks, including photo-based attacks and video-based
attacks.

The objective of liveness detection is to distinguish between the
face biometrics freshly taken from a live user and the face biomet-
rics forged from the user’s facial photos/videos. Liveness detection
is usually performed based on liveness indicators which can be de-
rived from human physiological activities. There are four major
types of liveness indicators, including multimodal, texture pattern,
3D face, and real-time response [24]. The multimodal usually re-
quires a user to provide facial biometrics and additional biometric
traits which are difﬁcult to obtain by any adversary at the same
time. The texture pattern can be used as a liveness indicator given
the assumption that printed fake faces contain certain texture pat-
terns which do not exist in real faces. The 3D face indicator is
deﬁned based on the fact that a real face is a 3D object with depth
characteristics while a fake face in a photo/video is planar (2D).
Finally, the real-time response can be used as a liveness indicator
in the assumption that legitimate users can interact with the system

1560Analyzer (CA), as shown in Figure 2. The DME module takes the
acceleration values from the accelerometer and the angular speed
from the gyroscope as inputs and converts the input data into a
motion vector representing the device movement over time. The
HPE module extracts multiple frames from the facial video and
estimates the head poses in these frames. The estimated angles of
these head poses will be converted into a head pose vector over
time. The CA module compares the motion vector and the head
pose vector and extracts the features of correlation between the two
vectors. Based on the extracted features, the CA module uses a
classiﬁcation algorithm to distinguish between a live user and an
MFF-based attack. The detail of these modules is given in the rest
of this section.

The acceleration values measured by the accelerometer may be
affected by the gravity effect and the human physiological hand
tremor. To reduce the effects of these factors, we preprocess the
raw acceleration data as detailed below.

On the one hand, due to the gravity effect, an accelerometer on
a mobile device reads the acceleration of 9.8m/s2 with a direc-
tion pointing to the earth center even when the device is station-
ary. To isolate and remove the contribution of gravity, we apply
a low-pass ﬁlter and a high-pass ﬁlter [6]. More speciﬁcally, let
RAti = (rax,ti , ray,ti , raz,ti ) be the raw acceleration value at
time ti and Gti = (gx,ti , gy,ti , gz,ti ) be the estimated gravity con-
tribution at time ti. Applying the low-pass ﬁlter, we have the esti-
mation of the isolated gravity:

Gti = α · Gti−1 + (1 − α) · RAti

(1)

where α is a smoothing factor. According to our experimental re-
sults, the ﬁlter performs best when α = 0.8. Then, the estimated
gravity is removed from the raw acceleration value by applying the
high-pass ﬁlter:

Figure 2: FaceLive mainly consist of device movement estima-
tor, head pose estimation, and consistency analyzer

4.1 Device Motion Estimator

The Device Motion Estimator (DME) utilizes the motion data
generated by an accelerometer and a gyroscope which are two iner-
tial sensors widely available on mobile computing devices. Based
on the motion data, DME estimates the movements of the device
and outputs a motion vector for the device movement over time.

The motion data include acceleration values and angular speeds
on three orthogonal axes (i.e. axis X, axis Y , and axis Z) in an in-
ertial sensor coordinate system recorded by the accelerometer and
the gyroscope, respectively. The typical inertial sensor coordinate
system on the mobile device is deﬁned relative to the screen of the
device as shown in Figure 3. In the system, axis X and axis Y are
in the same plane of the screen surface while axis Z is vertical to
the screen surface. Axis X is horizontal and points to the right.
Axis Y is vertical and points to the up. Axis Z points toward the
outside of the front surface.

Figure 3: The coordinate system for a typical inertial sensor on
a mobile phone

F Ati = RAti − Gti

(2)
where F Ati = (f ax,ti , f ay,ti , f az,ti ) is the ﬁltered acceleration
value.

On the other hand, when a user holds a mobile device, the
slight involuntary movements of the device always occur as a re-
sult of physiological hand tremor by the user. The physiologi-
cal hand tremor is usually caused by muscle contraction and re-
laxation, breath, arterial pulse, or the movements of other body
parts [46]. Consequently, certain noises are introduced into the ac-
celeration data. To remove the effects of the involuntary move-
ments, we apply a threshold h to the ﬁltered acceleration value
F Ati. If an acceleration value f as,ti < h(f as,ti ∈ F Ati , s ∈
{x, y, z}) holds, it is considered as the result of involuntary move-
ments and set to 0. Thus we have the preprocessed acceleration
Ati = (ax,ti , ay,ti , az,ti ) with

(cid:40)

as,ti =

f as,ti
0

f as,ti ≥ h
f as,ti < h

(3)

where s ∈ {x, y, z}. In our experiments, the best estimation can
be achieved when h = 0.23m/s2.

Based on the preprocessed acceleration and the angular speed,
we estimate the device movement using a dead-reckoning algo-
rithm [25]. Given acceleration readings as,ti−1 and as,ti where
s ∈ {x, y, z}, the movement on each axis during time ti−1 and
ti is calculated based the acceleration data by double integral. A
trapezoidal rule is applied to approximate the calculation of the
double integral in two stages [44]. In the ﬁrst stage, the velocity
vs,ti on axis s at time ti is obtained by
vs,ti = vs,ti−1 · cos ϕs,ti + (as,ti−1 + as,ti ) · (ti − ti−1)/2 (4)
where vs,ti−1 is the velocity at time ti−1, and ϕs,ti is the angle be-
tween axis s of the coordinate system L in the interval (ti−2, ti−1)
and axis s of the coordinate system L(cid:48) in the interval (ti−1, ti).
Note that cos ϕs,ti can be calculated based on the angular speed
recorded by the gyroscope. The initial velocity speed vs,t0 is as-
sumed to be 0 because the device movement has not begun yet at
time t0. In the second stage, the movement distance ds,ti−1 on axis
s at time ti can be calculated as

ds,ti = (vs,ti−1 · cos ϕs,ti + vs,ti ) · (ti − ti−1)/2

(5)
Let Rti = (rx,ti , ry,ti , rz,ti ) be the angular speed generated by
the gyroscope. The rotation angle along each axis can be calculated

1561by the trapezoidal rule for integral approximation as follows

θs,ti = (rs,ti−1 + rs,ti ) · (ti − ti−1)/2

(6)
where s ∈ {x, y, z}. Note (θx,ti , θy,ti , θz,ti ) is also called as Car-
dan angles which are typical for rotation of a 3D coordinate sys-
tem [47]. Then, we have

cos ϕx,ti = cos θy,ti · cos θz,ti
cos ϕy,ti = cos θx,ti · cos θz,ti
cos ϕz,ti = cos θx,ti · cos θy,ti

(7)

We can estimate the movement distance ds,ti−1 by combining
Equation (5) and Equation (7). In this paper, we exclude the move-
ments along axis Z because such movements do not change the
views of a 3D face but only scale up/down the size of a single
facial view in the photo. Finally, DME outputs a device motion
vector (Dx, Dy) between t0 and tm for axis X and axis Y , where
Ds = (ds,t1 , ds,t2 , ..., ds,tm ) and s = {x, y}.
4.2 Head Pose Estimator

As a mobile device moves in front of a user’s face, the camera
on the device captures multiple video frames about the user’s face
at different camera angles. Due to the 3D characteristics of human
face, different views of the face (i.e. head poses) can be observed
in the video frames. The Head Pose Estimator (HPE) analyzes
the frames from the facial video and estimates head poses in these
frames. The changes of these head poses are supposed to be cor-
related with the device movements. HPE calculates a head pose
vector representing the changes of the head poses over time.

In order to estimate the head poses in the facial video frames,
HPE takes two steps: facial landmark localization and head pose
estimation. In the ﬁrst step, a set of facial landmarks is located in
each frame, including inner/outer corners of left/right eyes, nose,
left/right corners of lips, and lower facial contours, as illustrated in
Figure 4. We use FaceTracker, an open-source library, to automat-
ically extract the location of these facial landmarks in real-time.
FaceTracker is an implementation of the constrained local model
(CLM) which utilizes the subspace constrained mean-shifts algo-
rithm to optimize the CLM ﬁtting and minimize the misalignment
error over all facial landmarks [41]. The location of these facial
landmarks is fed into the head pose estimation algorithm in the next
step. In the second step, we estimate the head pose in a frame us-
ing the 2D head pose estimation algorithm [35,39]. This head pose
estimation algorithm has advantages of low theoretical mean error
of 2.9◦, real-time automatic estimation process, and identity inde-
pendent feature. The head pose estimation algorithm analyzes the
projection from points in a 3D coordinate system (i.e. camera) into
a 2D coordinate system (i.e. image) using a perspective transforma-
tion [35,39]. Given a set of points from a face in the 3D coordinate
system and the projection of these points in the 2D coordinate sys-
tem, the transformation between the two systems can be estimated
with the following equations:

where ˜m = (u v 1)T is a 2D point (u, v) in homogenous coor-

˜m = A[R|T] ˜M

(8)

 is an internal calibration matrix,
 is a rotation matrix, T = (t1 t2 t3)T

cx
cy
1

 f

0
0

r12
r22
r32

0
f
0
r13
r23
r33

dinates, A =

 r11

r21
r31

R =

is a translation vector, and ˜M = (x y z 1)T is a 3D point (x, y, z)
in homogenous coordinates. A can be obtained from the camera

settings where f in A is the focal length of the camera in pixel unit
while (cx, cy) is the center point of the 2D image in pixels. The 3D
point coordinates are obtained from a pre-acquired 3D face model.

Figure 4: Facial landmarks used by the head pose estimation
algorithm

Therefore, given a set of locations of the facial landmarks in a
2D facial video frame and corresponding 3D coordinates in the
3D face model, the head pose estimation algorithm can estimate
the rotation matrix R and the translation vector T . Based on the
estimation of R and T , the 3 degrees of freedom (3DoF) of the
head pose in the frame can be calculated [35]. The 3DoF of a head
pose represents the rotation of the head relative to the front head
pose from three rotation angles, including Y aw, P itch, and Roll,
as shown in Figure 5. We use Y aw and P itch which are caused
by horizontal movements (along axis X) and vertical movements
(along axis Y ) of mobile device, respectively. We do not use Roll
because it does not contribute to the 3D face detection. A head
pose change vector is derived from the input facial video of n + 1
frames labeled between 0 and n denoted as (Hyaw, Hpitch), where
Hw = (βw,1, βw,2, ..., βw,n) and βw,i is the difference between
the head pose in frame i− 1 and in frame i for w = {yaw, pitch}.

Figure 5: Head rotation in 3DoF [33]

4.3 Consistency Analyzer

Based on the device motion vector (Dx, Dy) from DME and
the head pose change vector (Hyaw, Hpitch) from HPE, the Con-
sistency Analyzer (CA) examines the correlation between the two
vectors and uses a classiﬁer to make the ﬁnal decision based on the
correlation.
4.3.1 Correlation Analysis
When a user holds and moves a mobile device in front of a real
face over a distance, the changes of the views of the face can be
observed in the facial video. In particular, the horizontal movement

1562of the device (along axis X of the device) leads to changes in yaw
while the vertical movement of the device (along axis Y of the
device) leads to changes in pitch. The distance d of the device
movements can be correlated to the angle difference γ of the head
poses in the following geometrical relation

d = γ · DF D

(9)

where DF D is the distance between the camera on the device and
the user’s face. The value of DF D is difﬁcult to estimate accu-
rately from the facial video due to the varied size of human faces.
We thus introduce a synthetic camera based technique to convert
the head pose change vector into a synthetic camera motion vector
which is compared to the device motion vector. Consequently, the
correlation analysis takes three steps, including synthetic camera
motion vector conversion, data alignment, and correlation feature
extraction.

In the ﬁrst step, we convert the head pose change vector into
a motion vector by a synthetic camera. A synthetic camera is
an imaginary camera which moves and captures facial video syn-
chronously with the mobile device at all time. The distance be-
(cid:48)
tween the synthetic camera and the face is assumed to be D
F D
which could be different from the real distance DF D. More specif-
ically, in each time interval (ti−1, ti), the synthetic camera move-
ments always result in the same head pose changes as the real de-
vice movements. The track of the device movements can be ap-
proximated by an arc with the circle center located at the center the
3D face. Since the synthetic camera moves synchronously with the
(cid:48)
real device, the movements of the synthetic camera D
s along the
horizontal axis or the vertical axis can be calculated based on the
head pose change vector Hw = (βw,1, βw,2, ..., βw,n) and Equa-
(cid:48)
F D, the synthetic camera motion vector is
tion (9). Given a ﬁxed D
(cid:48)
(cid:48)
s = (βw,1 · D
F D), where s = x if
D
w = yaw and s = y if w = pitch.

(cid:48)
F D, ..., βw,n · D

(cid:48)
F D, βw,2 · D

s = (d(cid:48)

The second step is data alignment. Because the inertial sen-
sors and the front-facing camera on a mobile device usually
work at different sampling rate, the device motion vector Ds =
(ds,t1 , ds,t2 , ..., ds,tm ) estimated from the sensor data should be
s,ti = βw,i ·
aligned with D(cid:48)
(cid:48)
F D,s = {x, y}. A dynamic time warping (DTW) algorithm is
D
used for the alignment. The DTW algorithm is a well-known tech-
nique to ﬁnd an optimal alignment minimizing the warping distance
between two time-dependent sequences which may vary in time or
magnitude [32]. Given Ds and D(cid:48)
s, the objective function of the
DTW algorithm minimizes the warping distance:

s,tm ) where d(cid:48)

s,t2 , ..., d(cid:48)

s,t1 , d(cid:48)

L(cid:88)

DT W (Ds, D

s) = min{cp(Ds, D
(cid:48)

(cid:48)
s) =

c(ds,tl , d

s,tl )} (10)
(cid:48)

l=1

where p is an (m, n)-warping path. The optimal warping path for
the alignment and the minimum warping distance c∗
s) are
returned by the DTW algorithm.
aligned motion vectors Ds and D(cid:48)
vectors in each time interval (ti−1, ti) is

The third step is correlation feature extraction. Given the two
s, the ratio rti between the two

p(Ds, D(cid:48)

(cid:48)
ti /dti = D

(cid:48)
F D/DF D

ti ∈ D(cid:48)

rti = d
s and dti ∈ Ds. Because D(cid:48)

can calculate the mean value rmean = 1/N ·(cid:80)N

for all d(cid:48)
F D and DF D
for all rti , rtj ∈
are two constants, we have rti = rtj
{rt1 , rt2 , ..., rtN}. From the ratio vector (rt1 , rt2 , ..., rtN ), we
i=1 rti, max-
imum value rmax = max{rt1 , rt2 , ..., rtN}, minimum value

(11)

(cid:113)
1/N ·(cid:80)N
rmin = min{rt1 , rt2 , ..., rtN}, and standard deviation rsd =

i=1(rti − rmean)2.

4.3.2 Classiﬁcation
In the correlation analysis, a set of feature parameters are gen-
erated for measuring the correlation between the device motion
vector and the head pose change vector. The feature parameters
are shown in Table 1. In particular, the DTW warping distance c∗
p
measures the similarity between the device motion vector and the
head pose change vector which may vary in magnitude or time [32].
The mean ratio rmean, maximum ratio rmax, minimum ratio rmin,
and standard variation of ratio rsd are basic descriptive statistics to
summarize the ratio values between the two input vectors in the
correlation analysis [30]. The cumulative shift of device dx (or dy)
and the cumulative shift of synthetic camera d(cid:48)
y) describe the
total movement distances of the device and the synthetic camera.
All these feature parameters are fed into a classiﬁcation algorithm
so as to determine whether the input motion data matches the input
facial video for the liveness veriﬁcation.

x (or d(cid:48)

Table 1: Feature parameters

Parameter

DTW warping distance

Mean ratio

Maximum ratio
Minimum ratio

Standard variation of ratio

Cumulative shift of device on X (or Y ) axis

Cumulative shift of synthetic camera on X (or Y ) axis

Notation

c∗

p

rmean
rmax
rmin
rsd

dx (or dy)
d(cid:48)
x (or d(cid:48)
y)

In FaceLive, the classiﬁcation algorithm can be chosen from
Bayesian Network, Binomial Logistic Regression, and Multilayer
Perceptron. In particular, Bayesian network (BN) is a probabilistic
graphical model of joint multivariate probability distributions [13].
BN is capable of handling incomplete data set and easily recog-
nizing direct dependencies. Binomial logistic regression (BLR) is
a classical probabilistic statistical classiﬁcation model which pre-
dicts the outcome for a dependent variable based on multiple pre-
dictor variables [21]. BLR can be used as a parametric analytic tool
to assess the signiﬁcance of an individual predictor variable and to
provide probability outcomes. Multilayer perceptron (MLP) is a
feedforward neural network model which maps a set of input data
onto a set of outputs [14]. Finally, MLP can be used to process
complicated and imprecise data in an adaptive learning.
5. DATA COLLECTION AND EVALUA-

TION

An IRB-approved user study is conducted to evaluate the perfor-

mance of FaceLive in terms of practicality and robustness.
5.1 Data Collection

Our user study involves 73 participants, including 42 males and
31 females whose ages range between 19 and 36. The partici-
pants are recruited using recruiting emails. Each participant spends
around 60 minutes in a quiet room in the study and is paid with 10
dollars as compensation. There are four parts in the study. After
the completion of each part, the participants have a short break of
1-3 minutes before moving to the next part. The detail of the user
study is given below.

In the ﬁrst part, we capture the participants’ facial photos with 35
controlled head poses by using a Canon PowerShot A2600 (16.0-
megapixels camera). The resulting photos are 4608 × 3456 pixels

1563in size with inner pupil distance of the subjects typically exceeding
400 pixels. The 35 head poses are speciﬁed by both yaw (horizon-
tal) and pitch (vertical) rotation and represented as (βyaw, βpitch).
The value range of βyaw includes 0◦, 10◦ to left/right, 20◦ to
left/right, and 30◦ to left/right while the value range of βpitch in-
cludes 0◦, 10◦ to up/down, and 20◦ to up/down. These rotation
boundary values are chosen according to the common restriction of
the face authentication systems [1] where a participant should not
pass the face authentication if βyaw exceeds 30◦ or βpitch exceeds
20◦.

A continuous lighting system is used to eliminate the shadow on
each participant’s face. In order to control the head rotation of a
participant, we use a helmet equipped with a gyroscope. The use
of gyroscope has signiﬁcant advantages over other head rotation
control methods, including accuracy of less than 1◦ and robust to
metallic interference [33]. For each head pose, the participants are
asked to face to the Canon camera and adjust their heads to frontal
position in the way similar to [18]. Next, the participants rotate
their heads to the required angles with help of the gyroscope on
their helmets. The gyroscope generates real-time rotation angles
and broadcast the angle values via WiFi. The rotation angles are
received and displayed on an iPad screen and shown to the partic-
ipants. Then, the participants are asked to hold their head poses,
while we help remove their helmets gently and quickly so as to
avoid any signiﬁcant movements of the heads during the helmet re-
moval. At last, the facial photos of each head pose are captured im-
mediately. In order to avoid head movements when capturing head
pose images, we capture an image before removing helmet and an-
other image after. If any head movement is observed by comparing
the images, we recapture the images until no head movement is
observed. The facial photos will be used as the ground truth for
evaluating the accuracy of the head pose estimation algorithm in
HPE of FaceLive.

In the second part, we collect the facial videos and inertial sen-
sor data from the participants’ trials of FaceLive. Each partici-
pant is asked to perform 36 trials of FaceLive with 4 controlled
device movement distances and 3 controlled device positions us-
ing an HTC One X smartphone, which is equipped with a 1.3-
megapixel front-facing camera (720p for video), 4.7-inch screen,
1.5 GHz quad-core CPU, and Android 4.4.2 operating system. For
each trial of FaceLive, a participant holds and moves the smart-
phone horizontally (along axis X of the smartphone) over a given
movement distance DM D while the distance between the smart-
phone and his/her face is set to DF D. We do not consider the
movements in vertical direction (along axis Y of the smartphone)
and diagonal directions because more than half of the participants
have difﬁculties in performing these movements based on our pilot
study.

The range of DM D includes 10cm, 20cm, 30cm, and 40cm while
the range of DF D includes 30cm, 40cm, and 50cm. These values
are chosen based on the common behaviors of participants. Ac-
cording to our pilot study, more than 70% of participants have dif-
ﬁculties in moving the smartphone for DM D > 40cm or DF D >
50cm due to the limitation of the length of their arms. Since the
FaceLive relies on the movement of the smartphone, DM D can-
not be 0. Before each trial, a researcher demonstrates the required
movement in front of a participant, and the participant is required
to practice the movement. It is discovered that 60% of participants’
faces cannot be fully captured by the camera if DF D < 30cm.
During the movement, the participant’s facial video which is cap-
tured by the front-facing camera is displayed on the screen in real
time and viewed by the participant so that the participant can adjust
the smartphone and ensure his/her face is always fully captured by

the front-facing camera. In order to control the moving distance,
we mark the required distance along the horizontal axis on the wall
and the required distance between the participant’s head and the
smartphone on the ﬂoor. We ensure no signiﬁcant head rotation is
involved when a participant moves the smartphone in a way similar
to [18]. Given DM D and DF D, a participant is required to perform
3 trials of FaceLive. Both facial video and inertial sensor data are
recorded simultaneously during each trial. In total, we collect data
from 2628 trials of legitimate authentication.

In the third part, we record the inertial sensor data about the
MFF-based attacks performed by participants.
In particular, the
participants are asked to perform the random-move attacks ﬁrst and
then the imitation-move attacks. In the random-move attacks, each
participant moves the smartphone horizontally in random speed and
direction (left/right) for three times as guesses. In the imitation-
move attacks, the participant watches a facial video of another par-
ticipant on the smartphone and tries to move the smartphone in the
direction and speed as observed based on the head pose changes
in the video in order to imitate the movements associated with the
video. The participant is required to perform 3 trials for each given
video. The inertial sensor data is automatically recorded in the
smartphone during the participant’s trials. We collect data from
5256 trials in total, including 2628 trials from the random-move
attacks and 2628 trials from the imitation-move attacks.

In the ﬁnal part, each participant is asked to ﬁll in a questionnaire
with a 5-point Likert scale. The user study in this part is to collect
users’ perception on the usage of FaceLive.

5.2 Experimental Results

Based on the data collected from FaceLive trials and MFF-
based attacks, we evaluate the practicality and robustness of Face-
Live, where Bayesian Network (BN), Binomial Logistic Regres-
sion (BLR), and Multilayer Perceptron (MLP) are used as clas-
siﬁers to distinguish between legitimate authentication trials and
MFF-based attacks. Each attack trial is assigned to the positive
class while each legitimate trial is assigned to the negative class.

In terms of practicality, we show that FaceLive can effectively
detect the MFF-based attacks without requiring any additional
hardware. The evaluation is based on the attack datasets, in-
cluding the random-move dataset and the imitation-move dataset
as described in Section 5.1. The evaluation metrics include Re-
ceiver Operating Characteristic (ROC) curve and Equal Error Rate
(EER). In particular, the ROC curve illustrates the relation between
True Positive Rate (TPR) and False Alarm Rate (FAR) at various
threshold settings, where TPR measures the proportion of correctly
identiﬁed positives and FAR measures the proportion of negatives
which are falsely assigned to the positive class [19]. EER is the rate
at which false positive rate and false negative rate are equal [5,22].
The value of EER can be derived from a ROC curve. The EER
of FaceLive is as low as 4.7% (when BN is used as the classiﬁer).
FaceLive achieves TPR of 97.7% while its corresponding FAR is
6.1%.

To explain why EER cannot reach 0%, we evaluate the accuracy
of device movement estimation and head pose estimation, which
are two critical components of FaceLive. We discover that the mean
error of the device movement estimation is at most 23% and the
mean error of the head pose estimation is 7.1◦ for horizontal rota-
tion, and 7.9◦ for vertical rotation. These values will be improved
in the future when more accurate inertial sensors are deployed on
mobile devices. Meanwhile the current values are reasonable for
FaceLive to detection the MFF-based attacks effectively.

The practicality of FaceLive is also demonstrated with satisfac-
tory usability results. The average time spent on device movements

1564is 3.3 seconds. The Likert scores for the controlled setting of the
device movements are as high as 4.8 and 4.3 out of 5 in the pre-
ferred settings.

We also evaluate the robustness of FaceLive with respect to un-
successful detection of the partial facial landmarks and head in-
stability. These may happen frequently in real-world settings and
have a negative impact on the accuracy of FaceLive. Our results
show that the EER of FaceLive remains in the range of [7.2%,7.5%]
when a single facial landmark (mouth, nose, or eyes) is missing in
liveness detection. The EER of FaceLive is below 10% when the
accumulative error caused by head instability is below 16◦.
5.2.1 Detecting MFF-based Attacks
Using an accelerometer, a gyroscope, and a front-facing cam-
era, FaceLive measures the consistency between device movements
and head pose changes in order to authenticate a live user’s face.
FaceLive aims to distinguish between legitimate authentication and
MFF-based attacks, including photo-based attacks and video-based
attacks. In the photo-base attacks, an adversary replays a single
photo of the legitimate user. Because FaceLive requires changing
head poses in a facial video for liveness veriﬁcation, it is straight-
forward that FaceLive can prevent the photo-based attacks as sin-
gle photo cannot produce multiple head poses. In the following,
we focus on detecting the video-based attacks where a more pow-
erful adversary replays a pre-recorded facial video containing the
required head pose changes.

legitimate trials. The trials with lower similarity are more likely to
be classiﬁed as attacks and rejected by FaceLive.

Table 2: The results of statistical tests for the feature parame-
ters. The statistically signiﬁcant results are marked with (cid:70)

Parameter

c∗

p

rmean
rmax
rmin
rsd
dx
d(cid:48)

x

Coefﬁcient

0.3242
0.0034
0.000847
-0.000848
5.69E-14
-0.4895
-0.8972

P value

< 0.0001(cid:70)
0.001(cid:70)
0.001(cid:70)
0.001(cid:70)
0.014(cid:70)
0.1128
0.8075

We further evaluate the detection of the random-move attacks
and the imitation-move attacks, which are two types of the video-
based attacks. Our results reveal that FaceLive detects the random-
move attacks more effectively than the imitation-move attacks, as
shown in Figure 7. For the random-move attacks, the EER of Face-
Live is as low as 1%. For the imitation-move attacks, the lowest
EER of FaceLive is 6.1%.

(a)

(b)

Figure 6: ROC curves and EER of FaceLive using different
classiﬁers

Figure 7: EER of FaceLive under different attacks

Figure 6(a) shows the ROC curves of FaceLive using Bayesian
network (BN), BLR (Binomial logistic regression), and MLP (Mul-
tilayer perceptron) as the classiﬁers separately. Figure 6(b) shows
that FaceLive with BN outperforms FaceLive with BLR and MLP.
The EER of FaceLive with BN is 4.7%, which is lower than BLR
(8.6%) and MLP (6.1%). In order to examine the signiﬁcance of
the feature parameters used by the classiﬁer, we further run BLR
on SAS software. The likelihood ratio test results and the wald
statistics [21] for FaceLive with BLR classiﬁer are all smaller than
0.0001.
Our statistical analysis shows that the most inﬂuential parame-
ters are the warping distance c∗
p (p-value p < 0.0001), the mean
ratio value rmean (p = 0.001), the maximum ratio value rmax
(p = 0.001), the minimum ratio value rmin (p = 0.001), and the
standard deviation of the ratio vector rsd (p = 0.014). The results
of the parameter signiﬁcance test are given in Table 2.

The warping distance c∗

p, the mean ratio value rmean, the maxi-
mum ratio value rmax, and the standard deviation rsd have a pos-
itive impact on the probability of determining a trial as an attack
while the minimum ratio value rmin has a negative impact on the
same probability. The similarity between the device movements
and the head pose changes decreases as the values of the positive
parameters increase and as the value of the negative parameter de-
creases. The attack trials generally have a lower similarity than the

Users’ behaviors, including the distance DM D of the device
movements and the distance DF D between the device and the
users’ faces, may affect the detection of the MFF-based attacks,
especially the accuracy of the device movement estimation and the
head pose estimation. As shown in Figure 8(a), the EER of Face-
Live is relatively low when DM D is equal to 20cm, 30cm, 40cm
as compared to DM D = 10cm. The average EER rates for DM D =
20cm, 30cm, 40cm are 6.4%, 7.9%, and 6.6%, respectively. When
DM D=10cm, the average EER rate increases to 10.9%. Recall that
FaceLive detects the attacks by analyzing the correlation between
the device movements and the head pose changes. If the distance of
the device movements is too short, the head pose changes observed
in the video are insufﬁcient, which leads to relatively high EER.

The distance DF D between the device and the users’ faces is
another user behavior factor which affects FaceLive. As shown
in Figure 8(b), FaceLive achieves the lowest EER of 4.2% when
DF D=40cm. The EER values increase to 10.2% and 12.9% when
DF D is equal to 30cm and 50cm, respectively. The distance DF D
may affect the quality of facial videos and thus the accuracy of head
pose estimation in HPE. As the device is drawn closer to a user’s
face, the face region occupies more pixels in a video frame, and the
face region is easier to go out of the frame even with minor rotation
of the device. The incomplete facial region in the video frame may
reduce the accuracy of the head pose estimation algorithms [33].

0.00.20.40.60.81.00.00.20.40.60.81.0TruePositive(%)FalsePositive(%)BNBLRMLP4.78.66.1BNBLRMLP02468EER (%)13.92.86.19.56.8BNBLRMLP0246810%(EER)Random-MoveAttackImitation-MoveAttack1565error of 4.8cm. As the distance of the movements increases, the
mean error of the algorithm increases as well, which is shown in
Figure 10. The device movement estimation is based on the dead-
reckoning algorithm which estimates the current position based a
previously determined position. The dead-reckoning algorithm is
subject to cumulative errors which increase over time [25]. As the
device moves over a longer distance, the cumulative errors increase,
too.

Figure 10: Accuracy of the device movement estimation

The head pose changes are estimated from a given facial video
using the head pose estimation algorithm in HPE. In order to eval-
uate the accuracy of the head pose estimation algorithm, we use the
facial photos with controlled head poses collected in our user study.
Our results show that the head pose estimation achieves a mean er-
ror of 7.1◦ in yaw (horizontal rotation) and 7.9◦ in pitch (vertical
rotation).

The errors in device movement estimation and head pose esti-
mation lead to the errors of FaceLive in detecting the MFF-based
attacks. Our results show that these errors are reasonably low, and
the results could be further improved once high accurate inertial
sensors become available on mobile devices.

5.2.3 Usability
We measure the usability of FaceLive using three metrics, in-
cluding the average time of the device movement required for the
liveness veriﬁcation, the average Likert scores for the device move-
ment distance, and the average Likert scores for the relative dis-
tance between device and face.

Figure 11: The time of movement at different DM D

(a)

(b)

Figure 8: EER of FaceLive under controlled movements

On the other hand, if a user keeps the device farther away from the
user’s face, the face region occupies fewer pixels in a frame. This
may lead to lower accuracy in detecting important facial landmarks
which are used by the head pose estimation algorithms [33].

In order to analyze the quality of the facial videos captured at dif-
ferent distance DF D, we examine the bad frame rate of the videos.
The bad frame rate is the proportion of the facial frames from which
the head poses cannot be estimated by the head pose estimation al-
gorithm in HPE. Figure 9 shows that the bad frame rate is the
lowest at DF D =40cm, which is 3.7%. In contrast, the bad frame
rates at DF D =30cm, 50cm are higher, which are 6.6% and 12.2%,
respectively. The higher the bad frame rate, the higher the EER of
FaceLive.

Figure 9: Bad frame rate at different DF D

5.2.2 Accuracy of Device Movement Estimation and

Head Pose Estimation

FaceLive cannot detect the MFF-based attacks with 100% accu-
racy. This is mainly due to the errors in device movement estima-
tion and head pose estimation.

The device movements are estimated based on the acceleration
measured by an accelerometer and the angular speed measured by
a gyroscope on the mobile device. We evaluate the accuracy of
the device movement estimation of FaceLive in a follow-up exper-
iment. In this experiment, a smartphone is held in portrait orien-
tation where axis X of the smartphone is set along the horizontal
direction while axis Y of the smartphone is set along the gravity
direction. The smartphone moves horizontally over 10cm, 20cm,
30cm, and 40cm, respectively which are marked on the wall and
used in our study. During the movements, the acceleration values
and the angular speed data of the smartphone are recorded by the
inertial sensors. The cumulative shift of the movements in axis X
is estimated by the device movement estimation algorithm. On av-
erage, the device movement estimation algorithm achieves a mean

1020304068101210.96.47.96.6%(EER)DMD(CM)3040505101510.24.212.9%(EER)DFD(cm)30405046810126.63.712.2BadFrameRate(%)DFD(cm)101520253035402345672.34.35.96.8MeanError(cm)DMD(cm)101520253035401.01.52.02.53.03.54.04.55.01.43.14.14.6Time(second)DMD(cm)1566(a)

(b)

Figure 12: 5-point Likert scale for the controlled movements

Figure 13: Face photos in ideal lighting condition and under
illumination in varied environments [18]

The liveness detection process spends most of its time on record-
ing the required device movements and facial video. Thus the time
spent on device movements affects users’ experience. According
to our results, the time of device movements for FaceLive is 3.3
seconds on average. As the distance of the movement increases,
the time spent increases as well, which is shown in Figure 11. In
order to evaluate the users’ comfortability with the distances they
move over in the study, the users are asked to assign 5-point Likert
scores to each movement distance in the question “how comfort-
able for you to move the smartphone over the distance performed
in the study.” The Likert scores are numbers varying from 1 to 5.
The higher the Likert scores, the higher the users’ comfortability.
As shown in Figure 12(a), the users prefer a shorter distance for the
device movements in general.

Another factor is the relative distance between device and face.
We evaluate the users’ comfortability with this relative distance us-
ing a question “how comfortable for you to move the smartphone
with the relative distance between the smartphone and your face
performed in the study.” Our results show that the users prefer
40cm between the device and their faces, which is shown in Fig-
ure 12(b). The distance of 30cm is least preferable. At this distance,
users may need to move and adjust their devices carefully because
the face region could easily move out of a video frame with minor
rotation of the devices.

and mouth. The reason is that during head rotation, signiﬁcant
movements of nose can be observed. Nose is the part which sticks
out most from the face surface and is usually closest to a camera
capturing the face. As the head is rotating, the velocity of the nose
is higher than the other parts on the face according to the geometric
relationship between linear and angular motions [4]. On the other
hand, from the view of the camera, the nose can be observed faster
than the other parts on the face during the head rotation according
to the theory of optical ﬂow which describes a visual phenomenon
that the objects closer to an observer (e.g. eyes, camera) appear to
move faster than other distant objects [20].

The unsuccessful detection of eyes and mouth also decreases the
accuracy of head pose estimation. Accurate localization of eyes is
important for the alignment process in most head pose estimation
algorithms [1]. On the other hand, mouth is a trackable facial land-
mark for head pose estimation because it exhibits a contrasting re-
gion and is usually correlated with the orientation of the head [33].
As the localization information about more facial landmarks is
missing, the accuracy of head pose estimation decreases, which has
a negative impact on FaceLive. As it is shown in Figure 14, EER of
FaceLive increases to at least 18.1% when the detection of any two
types of the facial landmarks is unsuccessful. If the localization
information about all of the facial landmarks is missing, the head
poses cannot be correctly estimated by any head pose estimation
algorithms, which leads to the failure of FaceLive.

5.2.4 Robustness
It is important for liveness detection on mobile devices to be ro-
bust to complex lighting conditions and head instability in varied
environments. The complex lighting conditions may introduce il-
lumination as shown in Figure 13, and further lead to low accuracy
in detecting important facial landmarks, such as eyes, nose, and
mouth. This will affect the accuracy of facial recognition and head
pose estimation [33, 50]. On the other hand, the head instability
may introduce errors into head pose estimation.
In this section,
we evaluate the robustness of FaceLive in two situations, includ-
ing the unsuccessful detection of important facial landmarks and
the head rotation when moving the device. The facial landmarks
include eyes, nose, and mouth which are important features used
by many head pose estimation algorithms [33]. In order to simu-
late the ﬁrst situation, we intentionally remove from the collected
datasets the localization information about eyes, nose, mouth, and
the combinations of every two types of the facial landmarks. In
order to simulate the second situation, we intentionally add a uni-
formly perturbed error to each head pose measured in FaceLive.

Figure 14 show that FaceLive achieves the EER rate in the range
of [7.2%,7.5%] when the detection of a single type of facial land-
marks is unsuccessful and the coordinate information of the facial
landmarks is missing.

In particular, the missing localization of nose has a slightly more
signiﬁcant impact on FaceLive than the missing localization of eyes

Figure 14: EER of FaceLive under missing localization of the
facial landmarks

On the other hand, FaceLive is robust to the instability of head
movements. To simulate the instability of head movements, we
add uniformly perturbed error to each head pose in the head pose
change vector calculated by HPE. Figure 15 shows that FaceLive
achieves EER of no more than 9.6% when the total error of the head
instability is no more than 12◦. The EER of FaceLive increases to
12.5% when the total error reaches to 20◦.

111111311121320133459514723102030400102030405060NumberofParticipantsDMD(cm)1point2points3points4points5points272219565106101013224627304050010203040NumberofParticipantsDFD(cm)1point2points3points4points5points7.47.57.21918.418.1EyesNoseMouthEyes+NoseEyes+MouthNose+Mouth048121620EER(%)Missinglocalizationoffaciallandmarks1567inertial sensors. This can signiﬁcantly affect the accuracy of the de-
vice movement estimation, especially the movement estimation in
the direction of gravity. Fortunately, the accuracy of the inertial
sensors on mobile devices is improving as more applications, such
as electronic games, require the support of inertial sensors with rel-
atively high accuracy; meanwhile, the cost of these sensors keeps
decreasing. This trend will lead to the improved accuracy of the
device movement estimation algorithm in FaceLive. On the other
hand, the well-known restriction factors of head pose estimation
are illumination, facial occlusion, and facial expression [33]. Once
these restrictions are resolved in future research, the accuracy of
the head pose estimation algorithms will improve, so will the per-
formance of FaceLive. It is also possible to further improve Face-
Live by reﬁning the key feature parameters and the classiﬁcation
models.

Considering the potential of FaceLive, it might force an adver-
sary to develop much more sophisticated attacks. For example, the
adversary may obtain a suitable facial video and program a robotic
arm moving a target mobile device appropriately according to the
head poses in the video. Like the prior research [8, 12] relying on
the same liveness indicator, FaceLive would be vulnerable. How-
ever, our technique signiﬁcantly raises the bar for adversaries to
perform such attacks.
7. CONCLUSION

In this paper, we propose a practical and robust liveness detec-
tion mechanism, named FaceLive, to protect face authentication
from the MFF-based attacks. FaceLive can effectively detect the
MFF-based attacks without requiring any additional hardware on
mobile devices. FaceLive is robust to unsuccessful detection of
partial facial landmarks as well as inaccurate measurement of head
pose changes, which may happen during face authentication in var-
ied environments.
8. ACKNOWLEDGMENTS

This material is based on research work supported by the Sin-
gapore National Research Foundation under NCR Award Number
NRF2014NCR-NCR001-012.
9. REFERENCES
[1] A. F. Abate, M. Nappi, D. Riccio, and G. Sabatino. 2d and 3d

face recognition: A survey. Pattern Recognition Letters,
28(14):1885–1906, 2007.

[2] A. Acquisti, R. Gross, and F. Stutzman. Faces of facebook:

Privacy in the age of augmented reality. BlackHat USA, 2011.

[3] W. Bao, H. Li, N. Li, and W. Jiang. A liveness detection

method for face recognition based on optical ﬂow ﬁeld. In
IASP 2009, pages 233–236. IEEE, 2009.

[4] R. V. Benson. Euclidean geometry and convexity.

McGraw-Hill New York, 1966.

[5] B. Biggio, Z. Akhtar, G. Fumera, G. Marcialis, and F. Roli.

Security evaluation of biometric authentication systems
under real spooﬁng attacks. Biometrics, IET, 1:11–24, 2012.
[6] B. Carter. Filter design in thirty seconds. Application Report

from Texas Instruments, 2001.

[7] M. M. Chakka, A. Anjos, S. Marcel, R. Tronci, D. Muntoni,

G. Fadda, M. Pili, N. Sirena, G. Murgia, M. Ristori, et al.
Competition on counter measures to 2-d facial spooﬁng
attacks. In IJCB 2011, pages 1–6. IEEE, 2011.

[8] S. Chen, A. Pande, and P. Mohapatra. Sensor-assisted facial
recognition: An enhanced biometric authentication system
for smartphones. In MobiSys 2014, pages 109–122, 2014.

Figure 15: EER of FaceLive under head instability

6. DISCUSSION ON LIMITATIONS

Ecological validity is a challenge to any user study, like most
prior research [2, 17, 45], our study mainly recruits students in uni-
versity. These participants are usually more active in using mobile
devices. Thus the performance evaluation may vary with other pop-
ulations.

In our user study, the facial photos with controlled head poses
are used the ground truth for evaluating the accuracy of the head
pose estimation algorithm. The collection of the facial photos with
precisely controlled head poses is still challenging [33]. Like the
prior head pose data sets [18, 43], the accuracy of the head poses
in our data set may be affected by the unconscious movement of
human beings and imperfect capability of the participants to ac-
curately direct their heads. Due to the involuntary hand tremors
of human being and users’ imperfect capability of controlling hand
movements [8,37], it is also not easy to collect facial videos and de-
vice movement data with precisely controlled distance for device
movements and precisely controlled distance between the device
and users’ faces.

FaceLive requires motion data and facial video so as to analyze
the 3D face indicator of a user. The dominant factor in FaceLive
performance is the time for performing the movement and process-
ing the facial video, which is similar to most face liveness detection
methods based on 3D face indicator [3, 8, 23, 24]. In our experi-
ments, the movement in each trial takes 3.3s on average while the
detection of face and the estimation of head pose can be performed
in parallel when the facial video is recorded. The authentication
time can be reduced by processing sampled video frames instead of
processing all video frames. FaceLive can work with any face ver-
iﬁcation subsystem in face authentication. Note that the time taken
by the face veriﬁcation subsystem for the recognition of multiple
face images is negligible compared to the time taken for perform-
ing the movement in FaceLive. For example, the computation time
of PCA-based face recognition is 0.7ms for processing 100 input
face images [9]. As the performance and usability of face veriﬁ-
cation further improve, it is easy to combine it with FaceLive for
better performance in face authentication [10, 31].

Regarding the liveness detection errors, it is desired to control
noise from device movement estimation and head pose estimation.
The accuracy of device movement estimation is mainly affected by
the cumulative errors in the dead-reckoning based estimation al-
gorithms and the accuracy of the inertial sensors [25]. All dead-
reckoning based algorithms are subject to cumulative errors be-
cause they estimate the current position based on a pre-determined
position [25]. The errors can increase rapidly as time elapses. The
accuracy of the inertial sensors used on existing mobile devices is
still limited [42]. The impact of gravity is not well handled by these

48121620789101112137.389.61012.5EER(%)TotalError(Degree)1568[9] H. Cho, R. Roberts, B. Jung, O. Choi, and S. Moon. An
efﬁcient hybrid face recognition algorithm using pca and
gabor wavelets. IJARS 2014, 11(59):1–8, 2014.

[10] A. De Luca, A. Hang, E. von Zezschwitz, and H. Hussmann.
I feel like i’m taking selﬁes all day!: Towards understanding
biometric authentication on smartphones. In CHI 2015,
pages 1411–1414. ACM, 2015.

[11] Facelock.mobi. http://www.facelock.mobi/facelock-for-apps.
[12] R. D. Findling and R. Mayrhofer. Towards face unlock: on

the difﬁculty of reliably detecting faces on mobile phones. In
MoMM 2012, pages 275–280. ACM, 2012.

[13] N. Friedman, D. Geiger, and M. Goldszmidt. Bayesian

network classiﬁers. Machine learning, 29(2-3):131–163,
1997.

[14] M. Gardner and S. Dorling. Artiﬁcial neural networks (the

multilayer perceptron) ˛ała review of applications in the
atmospheric sciences. Atmospheric environment,
32(14):2627–2636, 1998.

[15] R. Ghiass, O. Arandjelovic, H. Bendada, and X. Maldague.

Infrared face recognition: A literature review. In IJCNN
2013, pages 1–10, 2013.

[16] Google.

http://www.android.com/about/ice-cream-sandwich/.

[17] R. Gross and A. Acquisti. Information revelation and privacy
in online social networks. In WPES 2005, pages 71–80, 2005.

[18] R. Gross, I. Matthews, J. Cohn, T. Kanade, and S. Baker.
Multi-pie. Image and Vision Computing, 28(5):807–813,
2010.

[19] J. A. Hanley and B. J. McNeil. The meaning and use of the

area under a receiver operating characteristic (roc) curve.
Radiology, 143(1):29–36, 1982.

[20] B. K. Horn and B. G. Schunck. Determining optical ﬂow. In

1981 Technical Symposium East, pages 319–331.
International Society for Optics and Photonics, 1981.
[21] D. W. Hosmer Jr and S. Lemeshow. Applied logistic

regression. John Wiley & Sons, 2004.

[22] A. K. Jain, A. A. Ross, and K. Nandakumar. Introduction to

Biometrics. Springer, 2014.

[23] H.-K. Jee, S.-U. Jung, and J.-H. Yoo. Liveness detection for
embedded face recognition system. International Journal of
Biological and Medical Sciences, 1(4):235–238, 2006.
[24] O. Kahm and N. Damer. 2d face liveness detection: An

overview. In BIOSIG 2012, pages 1–12, 2012.

[25] I. Kamal. WFR, a Dead Reckoning Robot–A Practical

Application to Understand the Thoery. IKA Logic:
Electronics Solutions Online Documents, 2008.

[26] K. Kollreider, H. Fronthaler, and J. Bigun. Non-intrusive

liveness detection by face images. Image and Vision
Computing, 27(3):233–244, 2009.

[27] Lenovo. http://veriface.software.informer.com/.
[28] Y. Li, K. Xu, Q. Yan, Y. Li, and R. H. Deng. Understanding

osn-based facial disclosure against face authentication
systems. In AsiaCCS 2014, pages 413–424, 2014.

[29] J. Maatta, A. Hadid, and M. Pietikainen. Face spooﬁng

detection from single images using micro-texture analysis. In
IJCB 2011, pages 1–7. IEEE, 2011.

[30] P. S. Mann. Introductory statistics. John Wiley & Sons, 2007.
[31] R. Mayrhofer and T. Kaiser. Towards usable authentication

on mobile phones: An evaluation of speaker and face

recognition on off-the-shelf handsets. In IWSSI/SPMU 2012.
Citeseer, 2012.

[32] M. Müller. Dynamic time warping. Information retrieval for

music and motion, pages 69–84, 2007.

[33] E. Murphy-Chutorian and M. M. Trivedi. Head pose

estimation in computer vision: A survey. TPAMI,
31(4):607–626, 2009.

[34] L. O’Gorman. Comparing passwords, tokens, and biometrics

for user authentication. Proceedings of the IEEE,
91(12):2021–2040, 2003.

[35] S. Ohayon and E. Rivlin. Robust 3d head tracking using
camera pose estimation. In ICPR 2006, volume 1, pages
1063–1066. IEEE, 2006.

[36] G. Pan, L. Sun, Z. Wu, and S. Lao. Eyeblink-based

anti-spooﬁng in face recognition from a generic webcamera.
In ICCV 2007, pages 1–8, 2007.

[37] M. Rahman, U. Topkara, and B. Carbunar. Seeing is not

believing: visual veriﬁcations through liveness analysis using
mobile devices. In ACSAC 2013, pages 239–248. ACM,
2013.

[38] J. Rice. http://www.androidpolice.com/2012/08/03/android-
jelly-beans-face-unlock-liveness-check-circumvented-with-
simple-photo-editing/.

[39] F. Rocca, M. Mancas, and B. Gosselin. Head pose estimation
by perspective-n-point solution based on 2d markerless face
tracking. In Intelligent Technologies for Interactive
Entertainment, pages 67–76. Springer, 2014.

[40] R. K. Rowe, U. Uludag, M. Demirkus, S. Parthasaradhi, and

A. K. Jain. A multispectral whole-hand biometric
authentication system. In Biometrics Symposium, 2007,
pages 1–6. IEEE, 2007.

[41] J. M. Saragih. Deformable face alignment via local

measurements and global constraints. In Deformation
Models, pages 187–207. Springer, 2013.

[42] P. Siirtola and J. Röning. Recognizing human activities

user-independently on smartphones based on accelerometer
data. IJIMAI 2012, 1(5), 2012.

[43] T. Sim, S. Baker, and M. Bsat. The cmu pose, illumination,
and expression database. TPAMI, 25(12):1615–1618, 2003.

[44] F. Stenger. Integration formulae based on the trapezoidal

formula. IMA Journal of Applied Mathematics,
12(1):103–114, 1973.

[45] F. Stutzman, R. Gross, and A. Acquisti. Silent listeners: The
evolution of privacy and disclosure on facebook. Journal of
Privacy and Conﬁdentiality, 4(2):2, 2013.

[46] J. Timmer, C. Gantert, G. Deuschl, and J. Honerkamp.
Characteristics of hand tremor time series. Biological
Cybernetics, 70(1):75–80, 1993.

[47] S. Tupling and M. Pierrynowski. Use of cardan angles to

locate rigid bodies in three-dimensional space. Medical and
Biological Engineering and Computing, 25(5):527–532,
1987.

[48] Visidon. http://www.visidon.ﬁ/en/Home.
[49] J. Wilder, P. J. Phillips, C. Jiang, and S. Wiener. Comparison
of visible and infra-red imagery for face recognition. In FG
1996, pages 182–187. IEEE, 1996.

[50] W. Zhao, R. Chellappa, P. J. Phillips, and A. Rosenfeld. Face

recognition: A literature survey. CSUR, 35(4):399–458,
2003.

1569