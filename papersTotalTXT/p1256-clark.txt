Moving Targets:

Security and Rapid-Release in Firefox

Sandy Clark

saender@cis.upenn.edu
University of Pennsylvania

Michael Collis

mcollis@cis.upenn.edu
University of Pennsylvania ∗

Jonathan M. Smith
jms@cis.upenn.edu
University of Pennsylvania

Matt Blaze

mab@crypto.com

University of Pennsylvania

ABSTRACT
Software engineering practices strongly aﬀect the security of
the code produced. The increasingly popular Rapid Release
Cycle (RRC) development methodology and easy network
software distribution have enabled rapid feature introduc-
tion. RRC’s deﬁning characteristic of frequent software re-
visions would seem to conﬂict with traditional software en-
gineering wisdom regarding code maturity, reliability and
reuse, as well as security.

Our investigation of the consequences of rapid release
comprises a quantitative, data-driven study of the impact
of rapid-release methodology on the security of the Mozilla
Firefox browser. We correlate reported vulnerabilities
in multiple rapid release versions of Firefox code against
those in corresponding extended release versions of the
same system; using a common software base with diﬀerent
release cycles eliminates many causes other than RRC
for the observables. Surprisingly, the resulting data show
that Firefox RRC does not result in higher vulnerability
rates and, further, that it is exactly the unfamiliar, newly
released software (the “moving targets”) that requires
time to exploit. These provocative results suggest that
a rethinking of the consequences of software engineering
practices for security may be warranted.

INTRODUCTION

1.
The root cause of many of today’s computer and network
security threats is errors in software. As software is an
engineered artifact, the discipline of software engineering
has emerged to model and manage such factors as cost [9]
and time [11] estimates, feature selection [21] and code ma-
turity [8]. A maturity model based on developer bug ﬁx
rates [40, 41] might be used in combination with other fac-
tors to determine release readiness, with the goal of shipping
bug-free software systems. When the software ships with
∗Now at Google; work done while at Penn

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2660320.

bugs, some may be exploitable vulnerabilities, and a subset
of exploitable vulnerabilities will be discovered and further
engineered into exploits which are then used, sold or saved
for later use.

Mainstream software engineering practice has develop-
ment models intended to produce secure systems. Examples
include Process Improvement Models, used in the ISO/IEC
21827 Secure Systems Engineering-Capability Maturity
Model SSE-CMM [30], originated by the U.S. National
Security Agency, but now an international standard),
Microsoft’s Secure Development Lifecycle (SDL)
[28],
Oracle’s Software Security Assurance Process [26] and the
Comprehensive, Lightweight Application Security Process
(CLASP) [50]. The goal [37] of these models is:

”To design, build, and deploy secure applications,
[...]
integrate security into your application de-
velopment life cycle and adapt your current soft-
ware engineering practices and methodologies to
include speciﬁc security-related activities”.

In contrast, Agile approaches to software development such
as Extreme Programming (XP) [16], Adaptive Software De-
velopment (ASD) [27], and Feature Driven Development
(FDD) [14] are primarily intended to ensure customer satis-
faction via rapid feature delivery [5] rather than to produce
secure code [7]. The U.S. Department of Homeland Secu-
rity [44] assessed each of the 14 core principles of the Agile
Manifesto [5] and found 6 to have negative implications for
security, with only 2 having possible positive implications.
Attempts to reconcile security with Agile development [48,
51, 32] have noted that many of the practices recommended
for security undermine the rapid iterations espoused by the
Agile Manifesto [5] (see Section 4.1).

Security experts chastise software developers [36]

for
favoring adding new features over writing less vulnerable
code. However, the survival of a product in competitive
software markets requires frequent introduction of new
features particularly for user-facing software systems such
as web browsers embroiled in features arms races.

As a consequence, two major web browser developers,
Google (Chrome) and Mozilla (Firefox), have overhauled
their development lifecycle, moving from large-scale, infre-
quent releases of new versions with later patches as needed,
to releases with new features at much shorter, regular in-
tervals. Microsoft is moving Windows development to a
RRC [19].

1256New releases of Chrome and Firefox versions occur every
six weeks. The primary intent of each RRC iteration is to get
new features to users as rapidly as possible [42, 34]; RRCs
may also include bug ﬁxes in the release.

This change in software development and release strategy
raises three security research questions that we address in
detail in Section 3:

1. Does a switch to Agile RRC development introduce
large numbers of new vulnerabilities into software,
given that the focus is on new features, rather than
on improving existing code?

2. Where in the code base are vulnerabilities being dis-
covered? (i.e., are they in code written prior to the
switch to RRC, in code introduced in previous itera-
tions of RRC or in code added in the current version?)

3. Are vulnerabilities being discovered more quickly since

the switch to RRC?

Contributions: Our main contributions are:

1. A new dataset of Firefox vulnerabilities constructed by
correlating a number of publicly available data sources;

2. Quantitative evidence that:

• The rate of vulnerability disclosure has not in-
creased substantially since the start of Firefox
RRC
• The overwhelming majority of vulnerabilities dis-
• Vulnerabilities originating in Firefox RRC ver-
sions are almost all not disclosed until that version
has been obsoleted by newer versions
• Firefox RRC does not appear to produce demon-

covered and disclosed are not in the new code

strably more vulnerable software

3. A data-inspired observation that frequent releases of
high volumes of new code, due its relative unfamil-
iarity to attackers, may provide some protection for
frequently targeted software; and

4. Further supporting evidence for an exploit-free “honey-
moon” or “grace period”[13] provided by the attacker’s
learning curve.

2. OUR DATASET AND METHODOLOGY
In this research, we seek to understand the dynamics of what
a switch to rapid-release cycles might mean for the numbers
of vulnerabilities discovered and disclosed in a hitherto tra-
ditionally developed system.

We make three assumptions, which we believe are reason-
able for the purposes of our analysis: (1) that with each
addition of new code, a number of new software defects are
also added; (2) that (to the extent that security vulnerabil-
ities are a consequence of software defects), that new vul-
nerabilities are also introduced and will be discovered and
disclosed; and (3) that attackers are analyzing code bases
searching for weaknesses in both old and new code.
2.1 Vulnerability Taxonomy
For the purposes of this paper, we diﬀerentiate among three
types of vulnerabilities:

1. Baseline vulnerabilities - vulnerabilities that aﬀect the

original codebase on which RRC was based.

2. Regressive vulnerabilities - vulnerabilities discovered
and disclosed in code after the version in which it was
introduced has been obsoleted by a more recent ver-
sion. For example, a vulnerability disclosed in version
13 that also aﬀects versions 10, 11 and 12 would be
classiﬁed as regressive.

3. New vulnerabilities - vulnerabilities that aﬀect the cur-
rent version of code at the time of disclosure but that
do not aﬀect previous versions.

We also diﬀerentiate between two states of vulnerabilities:
Active vulnerabilities are vulnerabilities that aﬀect a given
version of software while that version is the most current
available, while vulnerabilities become Inactive once the
most recent version which it aﬀects has been obsoleted
by a more recent version, ﬁxing the vulnerability. For
example, a regressive vulnerability disclosed in version 20,
but introduced in version 18, while version 20 was the most
recent is said to be active.

Finally, there are unknown vulnerabilities - vulnerabilities
in a given version of software that have not yet been publicly
found or disclosed.
2.2 Why Firefox?
Desiderata for a system to study include: (1) open source,
(2) a frequent target of attack, (3) a broad user base, and
(4) a statistically signiﬁcant population of publicly disclosed
vulnerabilities. For such software, the new features arms
race appears to conﬂict with the standard secure develop-
ment process. To test if this is indeed the case, we sought
to compare vulnerability discovery and disclosure between
software developed using Agile practices and that developed
using traditional methods. At the time of writing, the two
most widely deployed applications that make use of RRC
are Google’s Chrome and Mozilla’s Firefox web browsers.

The Firefox web browser proved to be an ideal system for

analysis, for four primary reasons.

First, since its initial release in 2004, all Firefox source
code has been open source and freely available. Pre-RRC
source code is available in a CVS repository. To prepare
for the switch to RRC, Mozilla moved what was then the
current source 3.6.2 and 4.0a to be a foundation for the ﬁrst
RRC version (5.0) into a new Mercurial repository. Since
then all changes for each subsequent new RRC version have
been added to this repository. For the purpose of our anal-
ysis, we use Firefox version 4.0 as the ’baseline’ version of
all subsequent RRC versions, and cover versions 5-20. Ver-
sion 20 had just been released when the data collection was
complete and the analysis begun; version 23 was available
by the time the analysis was complete.

Second, Firefox has a well maintained and freely avail-
able bug database, Bugzilla [38], which contains detailed
information on all bugs, including patched vulnerabilities.
Mozilla does not openly list the details of the most recent,
unpatched security vulnerabilities in Bugzilla, but they do
publish timely and somewhat detailed references to the lat-
est security bugs on the Mozilla Foundation Security Ad-
visory (MFSA) site [39] and the relevant details are made
public in Bugzilla sometime thereafter.

It is important to note that all acknowledged bugs (defects
and vulnerabilities) reported in Firefox are given a Bug ID
before being assigned to be patched, so all known vulner-
abilites are associated with some Bugzilla Bug ID. In ad-
dition, the MFSAs link to relevant references in the NIST

1257National Vulnerability Database (NVD) [43] which contains
an entry for each known vulnerability, including versions af-
fected, criticality, date released. For our study, we scraped
the NVD database for all Firefox vulnerabilities, and cross-
referenced each vulnerability disclosed with its correspond-
ing MFSA to ﬁnd each Bug ID issued. There is some over-
lap, as a single NVD (CVE [22]) entry may contain several
Firefox Bugzilla Bug IDs, and a single Bug ID may link to
multiple NVD (CVE) entries.

Third, since Firefox is a frequent target of attackers,
Mozilla has had a ’Bug Bounty’ program in place since 2004,
and purchases vulnerability information from researchers.
Recent research [23] on the eﬃcacy of Bug Bounty programs
suggests that 25% of Firefox’s vulnerabilities are discovered
through its bug bounty program. Mozilla does not announce
each purchase, but Coates [15] showed that, on average,
Mozilla purchases six new vulnerabilities per month. While
we recognize that it is impossible to know anything about
the number of private or undisclosed vulnerabilities that
may have been discovered in Firefox, and that this is a
potential source of error, we found the number of Bug
Bounty purchases consistent with the dataset we gathered
from MFSAs, Bugzilla, and the CVE database, and believe
our dataset is accurate with regard to publicly available
information. Also, while it may be the case that some
RRC code lacks critical vulnerabilities, Firefox synchronizes
the two development tracks annually, so new features
added to the RRC versions become part of the next ESR
version. Thus RRC does modify some of the core code
base. Further, our data set is cross referenced with the
MFSA [39], vulnerabilities Mozilla considers important
enough to issue an advisory for. Using this standard as
a measurement for severity avoids any risk of bias in our
results due to a bespoke metric for severity.

Fourth, Mozilla’s developers [4] acknowledged the switch
to RRC “involved changing a number of our processes. It’s
also raised some new issues.”. The midstream introduction
of RRC gives a basis for a “before and after” comparison of
security properties in light of a signiﬁcant change in soft-
ware development practices. Firefox has documented his-
tory using both development models at the same time. The
concurrent release processes for RRC and ESR (discussed
above and displayed in Table 1), eﬀectively provide two ver-
sions of the same software diﬀering in a single variable (the
release cycle). Thus, this dual-track Firefox release strat-
egy provides a unique analytic framework for a data-driven
examination of RRC.

2.3 Firefox RRC
Mozilla began the Firefox RRC in June of 2011 with the
release of version 5.0 as the ﬁrst rapid release version. The
Firefox release cycle is structured such that new code actu-
ally goes through three 6-week phases before being released.
In between major version releases, Mozilla introduces point
releases only if a critical vulnerability has been found to
aﬀect it.
In practice, there are only one or two of these
between each version. The code spends 6 weeks in devel-
opment, 6 weeks being stabilized (called the Aurora phase)
and 6 weeks being beta-tested. The code is freely available
at any of these phases. Thus, at the time of release of ver-
sion n, versions n+1 through n+3 are in the Beta, Aurora
and development phases, respectively. This schedule allows
Mozilla to release a new version regularly every 6 weeks.

Prior to the inception of RRC, a version of Firefox would
spend as long as a year in an alpha phase, and a further
year in beta, undergoing several revisions. Meanwhile, the
current release would be patched as needed.

At the start of RRC, the current stable traditionally de-
veloped code (version 3.6.2) was cloned to become the base
of the new RRC code. That same code became the Extended
Support Release (ESR). The ESR is intended for mass de-
ployment in organizations. Releases are maintained for a
year, with point releases containing security updates coin-
ciding with RRC Firefox releases. A new ESR version is
released (essentially) by rolling the features of the current
RRC version into the new ESR version. At the time of writ-
ing, Mozilla has done this twice: for versions 10 and 17, both
of which were released at the same time as the correspond-
ing RRC versions. In our analysis, we look at RRC versions
5 through 20, but when we compare RRC to ESR, we were
careful to compare only concurrent versions: RRC versions
10.0-20.0 to ESR versions 10.0-10.0.12 and 17.0-17.0.6 (See
Table 1).

2.4 Data collection
We are concerned speciﬁcally with vulnerabilities disclosed
in software developed and released under a 6-week Rapid
Release Cycle (RRC).

From the inception of RRC up to the time of writing, 617
new Bug IDs were issued, corresponding to new vulnerabil-
ities reported in the MFSAs [39] and CVE [22] database,
providing suﬃcient volume of data for empirical study.

Line of code (LOC) and ﬁle counts in this paper are de-
rived from the Mercurial repositories hosted by Mozilla and
are ﬁltered to account for a subset of ﬁletypes that account
for almost all of the code relevant to this study [2]. Speciﬁ-
cally, we include ﬁles with the extensions: .c, .C, .cc, .cpp,
.css, .cxx, .h, .H, .hpp, .htm, .html, .hxx, .inl, .js, .jsm,
.py, .s, and .xml; test cases and harness code have been ex-
cluded, as well as code comments and whitespace. Our LOC
counting is conservative and may understate changes to the
Firefox codebase between versions.

We also look at Firefox’s Extended Support Releases
(ESR). These long-term support releases still follow es-
sentially the release-and-patch cycle that preceded the
transition to RRC, with the same code base as RRC ver-
sions 10 and 17 covered by our study; the next ESR release
was version 24. ESR is an eﬀective point of comparison
when examining the impact of RRC on security.

2.5 Limitations
As noted earlier, unknown vulnerabilities exist, and this
makes the date that any given vulnerability was initially
discovered hard to obtain. We can only know with when
the vulnerability was ﬁrst reported. For the purposes of our
analysis we use the disclosure date as an approximation for
the discovery date. The disclosure date, while later than
the discovery date, is workable for our purposes, since we
are concerned with large-scale phenomena and inter-arrival
times for vulnerability discoveries.

Notably, as Firefox is a frequent attack target and Mozilla
responds quickly, by issuing inter-cycle point releases for
critical and severe vulnerabilities error is as small as it can be
without omniscience of undisclosed vulnerabilities attackers
might have ”on the shelf”.

12583. SECURITY PROPERTIES OF RRC
Software engineering, as exempliﬁed by the still-vibrant
Mythical Man Month [12], presumes new software inevitably
introduces new defects and that over time, those bugs get
found and subsequently either removed or repaired. Thus,
software engineers have understood that software quality
improves with age and that adhering to models such as those
listed in Section 1 saves money [49, 17] while improving
software reliability and functionality. In addition, empirical
studies [29] demonstrate that the majority of software
defects are discovered early in the product’s lifecycle, and
that while the rate of defect discovery is initially high, after
the ﬁrst 3 months the rate drops substantially and remains
consistently low for the remainder of the product’s lifetime.
such as SSE-
CMM [30] and Microsoft’s SDL [28], also presume that
heavy investment in preventing vulnerabilities early in the
software lifecycle is more cost eﬀective, and that ﬁnding
and removing vulnerabilities early in the development
cycle produces more secure code over its lifetime. In 2010,
Aberdeen Group published research [10] conﬁrming that
the total annual cost of application security initiatives
is far outweighed by the accrued beneﬁts organizations
implementing structured programs for security development
and found that they realized a 4x return on their annual
investments in applications security.

Secure Software Engineering models,

’Agile’ programming models, on the other hand, with their
focus on frequent change and rapid delivery of software, can-
not spend the extensive time required to do risk analysis,
threat modeling and external review [52] in the develop-
ment phase. Therefore, with Chrome, Firefox and now Mi-
crosoft [19] releasing new features at a much faster rate, we
might expect to see increases, both in the number of vul-
nerabilities and the rate at which they are discovered and
disclosed. We observe that each new Firefox RRC version to
date has added, on average, 290K new lines of code (LOC),
and that the average LOC removed in each RRC version is
160K.
3.1 Code Bases: RRC versus ESR
Mozilla’s RRC reﬂects the principles of Agile programming.
For example, Nightingale [42] states:

“Rapid release advances our mission in important
ways. We get features and improvements to users
faster. We get new APIs and standards out to
web developers faster.”

While security patches are also included in each new release,
the focus of the program is to deliver new features, not patch
vulnerabilities. In contrast, ESR versions [24] are intended
to remain stable and unchanged after release, except for re-
quired security patches:

is

each ESR,

“Maintenance of
through point
releases,
limited to high-risk/high-impact
security vulnerabilities and in rare cases may
also include oﬀ-schedule releases that address
live security vulnerabilities.”

Table 1 lists the release dates of the RRC versions and their
corresponding ESR point releases. While both RRC and
ESR start from the same codebase, they soon diﬀer sub-
stantially.

New features and new APIs mean new code, which can
aﬀect functionality and maintainability, as well as security.
How many lines of new code are pushed out in Firefox’s
RRC? Table 1 shows the number of lines of code added,
and removed, the total numbers of ﬁles changed between ver-
sions, and the total number of LOC per version since RRC
was instituted. Since the start of RRC, Firefox has added a
minimum of 100k LOC per version, and averages 290k LOC
added, 160k LOC removed, and 3,475 ﬁles changed per ver-
sion. There is a wide variance, but the median LOC added
is 249k. This amounts to an average of 10% of the code-base
changing in some way every 42 days.

These changes are not isolated, but rather appear to have
wide-reaching eﬀects. In a study to determine the maintain-
ability of the Firefox codebase since RRC, Almossawi [2],
found that 12% of ﬁles in Firefox are highly interconnected.
Almossawi also found that making any change to a randomly
selected ﬁle can, on average, directly impact eight ﬁles and
indirectly impact over 1,500 ﬁles. This means that on aver-
age each new RRC version could potentially impact as many
as 30,000 ﬁles.

The diﬀerence between this and the ESR versions is sub-
stantial. Only two of the point releases add more than 10k
LOC and only changes to version 17.0.5 reach anywhere near
the average of the RRC versions (see Table 1).

Does the modiﬁcation of such large amounts of new code
result in a less secure product? If so, there are three things
we would expect to see:

1. An increase in the number of vulnerabilities aﬀecting

each new release (active vulnerabilities);

2. The scope of vulnerabilities should change. That is,
the vulnerabilities discovered should be primarily new
and should aﬀect only the current (and possibly sub-
sequent) versions; and

3. The regular introduction of such code should increase

the rate of vulnerability discovery and disclosure.

In other words, if the current models for general software
defects apply here, the new code should be more vulnerable
than the old code.
3.2 Rapid Release and Software Quality
In this section, we address the three questions on software
quality raised in Section 1.
3.2.1 Does the addition of 250K+ lines of code ev-
ery 42 days markedly increase the number of
vulnerabilities discovered and disclosed?

Almossawi’s research [2] indicated that the defect density
remains constant for releases 5-9 and then rises by a factor of
two in release 12. This ﬁnding is consistent with the current
defect discovery models: the new code does indeed result in
more defects, but not overwhelmingly more. Certainly this
means that the quality of the code is not getting worse. But
what about vulnerabilities? A plot of the cumulative totals
from version to version shows that the numbers of active
vulnerabilities being discovered and disclosed remains fairly
constant (see Figure 1) for both RRC and ESR. Looking at
the ratio of total vulnerabilities between versions (see Fig-
ure 2) for RRC we see that much of the graph is nearly
ﬂat and it is only going up by less than a factor of two at
its maximum. Overall, the total number of active vulnera-
bilities disclosed per LOC in each Firefox version since the

1259Version
4
5
6
7
8
9
10
10.0.1
10.0.2
11
12
13
13.0.1
14
14.0.1
15
15.0.1
16
16.0.1
16.0.2
-
17
17.0.1
-
18
18.0.1
18.0.2
19
19.0.1
19.0.2
20

Release

Date

-
-
-
-
-
-
1/31/12
2/10/12
2/16/12
3/13/12
4/24/12
6/5/12
6/15/12
7/17/12
7/17/12
8/28/12
9/6/12
10/9/12
10/11/12
10/26/12
-
11/20/12
11/30/12
-
1/8/13
1/18/13
2/5/13
2/19/13
2/27/13
3/7/13
4/2/13

LOC
Added
157.4k
164k
142k
124k
109k
159k
491k
-
-
254k
245k
133k
-
265k
-
383k
-
608k
-
-
-
271k
-
-
820k
-
-
193k
-
-
252k

RRC

LOC

Removed
710k
161k
164k
120k
90k
90k
282k
-
-
203k
190k
85k
-
88k
-
280k
-
85k
-
-
-
177k
-
-
385k
-
-
146k
-
-
163k

LOC

∆
230k
325k
306k
243k
199k
250k
773k
-
-
457k
436k
218k
-
354k
-
664k
-
693k
-
-
-
448k
-
-
120.4k
-
-
339k
-
-
415k

Total
LOC
362.1k
362.4k
360.6k
361.0k
363k
368.7k
386k
-
-
390.2k
395k
399.1k
-
414.6k
-
422.6k
-
467.5k
-
-
-
475.3k
-
-
512k
-
-
515.6k
-
-
523.2k

Files

∆

5300
1700
2100
2000
1700
2100
4000
-
-
2000
2500
2300
-
2200
-
9000
-
2800
-
-
-
5400
-
-
7700
-
-
3700
-
-
2700

Version
-
-
-
-
-
-
10
10.0.1
10.0.2
10.0.3
10.0.4
10.0.5
-
10.0.6
-
10.0.7
-
10.0.8
10.0.9
10.0.10
10.0.11
17.0
17.0.1
10.0.12
17.0.2
-
-
17.0.3
-
17.0.4
17.0.5

Release

Date

-
-
-
-
-
-
1/31/12
2/10/12
2/16/12
3/13/12
4/24/12
6/5/12
-
7/17/12
-
8/28/12
-
10/9/12
10/12/12
10/26/12
11/20/12
11/20/12
11/30/12
1/8/13
1/8/13
-
-
2/19/13
-
3/7/13
4/2/13

ESR

LOC
Added
-
-
-
-
-
-
-
29
7
2,510
12,314
1,070
-
1,182
-
605
-
535
23
124
1,151
-
126
2,585
2,092
-
-
1,204
-
4
67,142

LOC

Removed
-
-
-
-
-
-
-
7
3
1,782
7,066
528
-
514
-
216
-
165
10
20
316
-
27
260
1,076
-
-
440
-
4
61,198

LOC

∆

-
-
-
-
-
-
-
36
10
4,292
19,380
1,598
-
1,696
-
821
-
700
33
144
1,467
-
153
2,845
3,168
-
-
1,644
-
8
128,340

Total
LOC

-
-
-
-
-
-

386k
386k
386k
386k
386.4k
386.4k

-

386.5k

-

386.5k

-

386.6k
386.6k
386.6k
386.7k
475.3k
475.4k
386.8k
475.4k

-
-

475.5k

-

475.5k
475.7k

Table 1: RRC changes from the previous version, and total LOC per version

advent of rapid release mirrors the defect discovery. Similar
to defects, there is no signiﬁcant jump in the number of vul-
nerabilities disclosed. This lack of a signiﬁcant rise in the
vulnerability density becomes even more apparent when we
compare the number of active vulnerabilities found aﬀect-
ing RRC (465) and ESR (420) during the same period. It
is surprising to note how close the totals are, because the
magnitude of code changes in RRC is so much greater than
in ESR in the same time frame.

This means that, contrary to expectations, the large
volume of code added does not appear to contain more than
its share of vulnerabilities.

3.2.2

Is the scope of disclosed vulnerabilities con-
ﬁned to RRC?

If the vulnerabilities found in the current RRC version result
from new code added, we ought to ﬁnd that most of these are
new vulnerabilies and therefore ones that do not aﬀect code
shared with ESR versions. However, this is not the case. As
stated above, during the active lifetimes of ESR versions 10
and 17, only a few new RRC vulnerabilities were disclosed,
but, more importantly, if we compare the 465 total RRC
vulnerabilities to the 420 in ESR, all but 45 have the same
BugID aﬀecting both RRC and ESR. In other words, the
overwhelming majority of active vulnerabilities disclosed in

Firefox RRC also aﬀect ESR. This means that the 24 ESR
point releases, which average 4,700 LOC code added per
release, are aﬀected by nearly 90% of the vulnerabilities that
aﬀect the concurrent RRC versions which average more than
290K LOC added per release!

This does not mean that the new code in RRC does not
contain new vulnerabilities, but rather, that 90% of the vul-
nerabilities disclosed in the RRC versions released during
the lifetime of each ESR version must be in the older, shared
code. As we can see in Table 2 very few vulnerabilities af-
fecting each RRC version actually originate in those RRC
versions. Of the 617 vulnerabilities disclosed in Firefox since
the inception of RRC, 32 of them do not aﬀect any of the
RRC versions. These vulnerabilities only aﬀect the baseline
code originating in or before version 4, but were not found
until after RRC was adopted.

The implications of this for ESR, and software engineering
more generally, are substantial. The eﬀective lifetime of the
ESR versions is four times longer than for RRC. No new
features are added after its initial release. It is only changed
to patch critical security bugs. Yet, it is still vulnerable to
90% of the same vulnerabilities that aﬀect the RRC versions.
This raises concerns about the security of code over time,
and the impact on security of code reuse.

1260Figure 1: Cumulative total vulnerabilities aﬀecting RRC and corresponding ESR versions during the same 6-week period

Figure 2: The ratio of vulnerabilities from version to version

0	  50	  100	  150	  200	  250	  300	  350	  400	  450	  500	  Cumula&ve	  Vulnerabili&es	  of	  Rapid	  Release	  and	  Extended	  Release	  versions	  of	  Firefox	  Cumula-veESR	  Cumula-veRRC	  0	  0.5	  1	  1.5	  2	  2.5	  5	  6	  7	  8	  9	  10	  11	  12	  13	  14	  15	  16	  17	  18	  19	  Total	  Vulnerabili.es:	  Current	  Version/Previous	  Version	  Version	  Ra.o	  of	  Vulnerabili.es	  Between	  RRC	  Versions	  1261Version Total Baseline Regressive New
-
4
-
5
6
14
11
7
1
8
-
9
1
10
11
-
12
2
-
13
-
14
15
-
1
16
17
-
-
18
35
19
20
-

184
171
149
146
144
118
47
89
55
42
-
-
-
-
-
65
65

476
432
418
403
385
358
271
312
270
255
159
159
127
65
35
101
65

292
261
255
246
240
240
223
223
213
213
159
159
126
65
35
1
-

Table 2: Counts of vulnerabilities by type aﬀecting RRC
(correspondence between RRC versions 10+ and ESR ver-
sions 10 and 17 is given in Table 3). Totals are not unique,
as a single vulnerability may aﬀect multiple versions

Version Total Baseline Regressive New
1
10
10.0.1
-
-
10.0.2
-
10.0.3
10.0.4
-
-
10.0.5
10.0.6
-
-
10.0.7
-
10.0.8
10.0.9
-
-
10.0.10
-
10.0.11
-
10.0.12
17
-
-
17.0.1
17.0.2
-
17.0.3
-
-
17.0.4
-
17.0.5
17.0.6
-

286
318
360
335
294
268
237
188
163
162
139
98
-
135
110
79
61
47
30
28

351
318
360
335
294
268
237
188
163
162
139
98
-
170
145
114
96
81
46
28

64
-
-
-
-
-
-
-
-
-
-
-
-
35
35
35
35
34
16
-

Table 3: Counts of vulnerabilities by type aﬀecting ESR.
Totals are not unique, as a single vulnerability may aﬀect
multiple versions

3.2.3 Are the RRC vulnerabilities easier to ﬁnd?
With traditional defect and vulnerability discovery models,
the expectation is that the ‘low-hanging fruit’ vulnerabilities
in new code are found and patched quickly [45, 1].

Looking at traditional non-RRC software, Clark, et al [13]
suggested that these models do not accurately represent the
early lifecycle of vulnerability disclosure. Instead, there ap-
pears to be a relatively long period before the ﬁrst vulnera-
bility in new software is disclosed, after which the rate of vul-
nerability disclosure in that version of code increases. The
authors speculated that this period corresponds to the at-
tacker’s learning curve.

If new code, released without a traditionally long code
review process (as in RRC) is bad for security, then the
vulnerabilities disclosed should not only be new, but found
quickly (i.e., they should be low-hanging fruit.) We should
also see the rate of vulnerability disclosure for vulnerabilities

Pre-RRC

Post-RRC

Release Date Total Release Date Total
29
38
35
32
20
29
24
24
59
1
-
42
54
-
37
46
76
1
35

5/1/11
6/21/11
8/16/11
9/27/11
11/8/11
12/20/11
1/31/12
3/13/12
4/24/12
6/15/12
6/26/12
7/17/12
8/28/12
9/6/12
10/9/12
11/19/12
1/8/13
2/19/13
4/2/13

2/3/09
3/18/09
4/30/09
6/12/09
7/25/09
9/6/09
10/19/09
12/1/09
1/13/10
2/25/10
4/9/10
5/22/10
7/4/10
8/16/10
9/28/10
11/10/10
12/23/10
2/4/11
3/19/11

26
30
41
33
9
20
32
32
14
29
1
20
26
25
27
22
-
24
2

Table 4: Counts of vulnerabilities disclosed every 6 weeks,
in the 18 6-week periods preceding the switch to RRC and
in the 18 periods following.

introduced in the new code increase roughly in proportion
to the LOC added. If, on the other hand, it takes time for
an attacker to become familiar with the new code, then the
vulnerabilities should take longer to ﬁnd and those disclosed
will be primarily from code introduced in older versions.

Table 2 lists the total number of vulnerabilities disclosed
that aﬀect each rapid release version. For each version, we
list the total number of those that aﬀect the baseline ver-
sion, the total number that are regressive, (also aﬀect earlier
versions), and the total number newly introduced. Table 3
lists the corresponding data for the ESR versions.

On average, across all the RRC versions (5-20), approxi-
mately 75% of the vulnerabilities aﬀecting each RRC version
are baseline. A further 22% of them are regressive. This
means that for any version, on average, 97% of the vulnera-
bilities disclosed since RRC was implemented were not found
in the new code while it was the current version.

Accounting for the fact that RRC versions 5.0-9.0 were
released before the release of the ﬁrst ESR version, from
the release of version 5.0 up to 20.0, a total of 617 active
vulnerabilities were disclosed. Of those, only 16% are new
vulnerabilities (ones which originate in RRC source code)
across all 15 versions studied. Looking only at these new
vulnerabilities, we see that fewer than half (41.5%) of them
were disclosed during the current lifetime of the originating
version. In other words, while vulnerabilities are found in
the code that is introduced each RRC iteration, the over-
whelming majority of them are not found during the 6-week
period following their initial release. As this is written, even
in the worst case, version 19, with 35 original vulnerabilities,
70% of were not disclosed until version 21, released 12 weeks
later.

Table 4 lists the number of vulnerabilities disclosed in
Firefox in the 6 week period preceding and following the
change to the RRC; these values are calculated by time pe-
riod in which they were disclosed, without regard to version
aﬀected. On average, there were 22 vulnerabilities disclosed

1262every 6 weeks in the two years preceding the change over
to RRC and 30 vulnerabilities disclosed every 6 weeks after.
However, there is a high variance, with no vulnerabilities
found in some periods, and as many as 70 in others. At
ﬁrst blush, this increase in the rate of disclosure might seem
to indicate that RRC vulnerabilities are low-hanging fruit.
However, from Table 2, most of the RRC vulnerabilities are
either baseline or regressive, and therefore in code that had
been available for a longer period of time (rather than rel-
atively unfamiliar new code), further supporting the model
of an attacker learning curve [31, 25, 13].

Version Total Baseline Regressive New
5
5.0.1
6
6.0.1
6.0.2
7
7.0.1
8
8.0.1
9
9.0.1
10
10.0.1
10.0.2
11
12
13
13.0.1
14
14.0.1
15
15.0.1
16
16.0.1
16.0.2
17
17.0.1
18
18.0.1
18.0.2
19
19.0.1
19.0.2

38
38
38
37
37
37
15
37
36
36
14
13
13
13
14
13
11
8
9
8
9
4
2
2
2
2
1
1
1
-
4
4
1

19
19
19
18
18
18
12
18
18
18
12
12
12
12
12
10
10
8
9
8
9
4
2
2
2
2
1
1
1
-
-
-
-

19
19
19
19
19
19
3
19
18
18
2
1
1
1
2
1
1
-
-
-
-
-
-
-
-
-
-
-
-
-
1
4
1

-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
2
-
-
-
-
-
-
-
-
-
-
-
-
-
-
3
-
-

Table 5: Count by type of RRC vulnerabilities that do not
aﬀect ESR (correspondence between RRC versions 10 or
greater and ESR versions 10 and 17 is given in Tables 2
and 3). Totals are not unique, as a single vulnerability may
aﬀect multiple versions

Lastly, we look at those vulnerabilities that were intro-
duced by new code in RRC, that do not aﬀect the corre-
sponding ESR version. How quickly were they discovered
and disclosed? As we see in Table 5, of the 45 vulnerabili-
ties that aﬀect only RRC and do not aﬀect ESR code, only
5 (2 in version 12.0 and 3 in version 19.0) actually originate
in the newly released versions. More importantly, only these
5 were disclosed during the 6 weeks that that version was
current. While the new code surely contains vulnerabilities
they are not being found and disclosed while the version in
which they originate is current.

We have shown that Firefox’s RRC strategy did not in-
crease the rate of vulnerability discovery and disclosure and,
that the vulnerabilities disclosed while a particular RRC ver-

sion was current were not low-hanging fruit. It does indeed
appear that during the RRC lifecycle, the time to ﬁnd vul-
nerabilities and learn how to exploit them in new code com-
pensates for the presumed increase in the density of vulner-
abilities in immature code.
4. RELATED WORK
Our work involves the security impacts of software devel-
opment practices, analysis of these practices in the context
of the Firefox web browser, and lifecycle issues for software
security. We discuss related work in each of these areas.
4.1 Software development
Previous work [12, 46, 3, 13] has addressed the eﬀects of de-
velopment practices on the quality and security of software.
Woody [52] surveyed Agile developers about the impact
of security engineering activities on software development
within an Agile approach. Notably, the survey found that
many industry-standard frameworks, including:

1. the design requirements, threat modeling, and code re-
view recommended practices in Microsoft’s SDL’s [18],
2. the risk analyses and external review recommended in

Cigital Touchpoints [35], and

3. the risk analyses, critical assets and UMLSec in the
Common Criteria for Information Technology Secu-
rity [20],

are at least partially incompatible with the rapid delivery
approach.

Seacord [47] notes that the traditional model of patch-
and-install is problematic as ”patches themselves contain se-
curity defects. The strategy of responding to security defects
is not working. There is a need for a prevention and early
security defect removal strategy.” Indeed, this paper directly
addresses this concern by acknowledging that the changes to
the Firefox codebase with each release contain vulnerabili-
ties that, while introduced by this model of rapid releases,
may be eﬀectively mitigated by these same large changes in
subsequent releases.

Bessey et al. [6] discuss the prevailing attitudes towards
software upgrades in terms of the number of bugs generated
by each release. They assert that users want

”diﬀerent input (modiﬁed code base) + diﬀerent
function (tool version) = same result”,

highlighting the delicate balancing act in traditional models
of software development between the users’ desire for new
features and the impulse to squash as many bugs as possible
in existing code. We have presented our hypothesis on this
tradeoﬀ by showing that a rapidly churning codebase (the
“moving targets” of the paper title) may serve to mitigate se-
curity ﬂaws, quickly deprecating code that introduced them,
while providing new features to users to maintain market
share.

Ozment and Schechter’s [46] study of vulnerabilities in
OpenBSD focused on the eﬀect of slow, monolithic code
changes on the introduction of new vulnerabilities. In this
paper we have sought to analyze the impact of a rapidly
shifting codebase and Agile programming methodology on
vulnerability discovery. Ozment and Schechter did ﬁnd that
baseline (they use “foundational”) vulnerabilities made up
the vast majority of all security ﬂaws. Our analysis indi-
cates that Firefox RRC shares this same property.

12634.2 Firefox Software Engineering
Firefox has been the focus of prior research concerning soft-
ware quality on account of its (relatively) long history, large,
open source codebase, active developer community and mas-
sive user base. Khomh, et al. [33] examined the eﬀect of the
rapid release model on the abstract ’quality’ of Firefox, us-
ing concrete metrics such as the number of bugs reported
after release, median daily crash count and median uptime.
Their study seeks to tackle entirely diﬀerent questions than
our approach; we are concerned with the eﬀects of changing
a signiﬁcant proportion of the codebase every six weeks on
vulnerability discovery.

Almossawi’s [2] work deals with the maintainability of
Firefox since the start of the RRC model from the point
of view of metrics such as cyclomatic complexity [30], inter-
module dependencies, and defect density. Our work serves
to compliment Almossawi’s analysis by addressing the im-
pact of this model of development on security ﬂaws.
4.3 Lifecycle issues
Arbaugh, et al.’s [3] foundational work on vulnerability life-
cycles demonstrated that the usable lifetime of vulnerabili-
ties is far longer than expected. They concluded that “Win-
dows of Vulnerability” exist, during which software is more
likely to be compromised. We have looked at an earlier point
in the lifecycle, and our data regarding when vulnerabilities
are discovered and the existence of a learning curve are con-
sistent with Arbaugh, et al.’s [3] data and conclusions.

Jonsson and Olovsson [31] tested the eﬀect an attacker’s
knowledge and experience had on successfully compromising
a system. Assigning students to attack a University com-
puter system, they measured number of successful breaches,
rate of breach and experience level. They concluded that
there appears to be a learning curve that disadvantages the
less experienced attacker.

Gopalakrishna and Spaﬀord [25] presented a trend analy-
sis of vulnerabilities reported on Bugtraq, CVE and ICAT.
They speculated that the increased rate of discovery of vul-
nerabilities of the same type in a piece of software was the
result of a learning period. They reasoned that this ’learn-
ing’ was the period of time required for a given piece of
software to gain a ”critical-mass” of users before bugs are
discovered.

However, as Ozment [45] points out, this incorrectly as-
sumes that some ﬁxed proportion of the total user popu-
lation are looking for vulnerabilities. Ozment conjectured
scenarios in which an attacker discovers a vulnerability or
reads about the details of one, and applies these “lessons
learned” to a similar domain by attempting an attack of a
similar type. This observation is the contrapositive to the
beneﬁts of rapid releases we have proposed in this paper:
the usefulness of these “lessons learned” is minimized as the
section of the codebase relevant to the type of vulnerability
in question may have already been deprecated by the time
the attacker applies this learning. Indeed, this is further sup-
ported by the Bug Bounty ﬁndings presented by Coates [15],
wherein the vast majority of ﬂaws reported fall into a small
set of classes (e.g., CSRF and XSS bugs account for 70% of
those reported).

Clark et al. [13] posited the existence of a grace period
(a “honeymoon”) enjoyed by software immediately following
its release, before attackers have time to adapt their tools
and methodologies to the new target. They suggested that

this “Honeymoon Eﬀect” was due to a learning curve faced
by potential adversaries after a new release that has to be
overcome before vulnerabilities are discovered, independent
of any security practices undertaken during the development
process.

5. CONCLUSION

Intuition suggests a tension between the rapid deployment
of new software features and the avoidance of software de-
fects, particularly those aﬀecting security. The rapid release
strategy of Firefox, in which new software releases, with new
features, are rolled out on an aggressive schedule, seems as
if it could only come at the expense of security. Users con-
cerned with security, we might assume, would be better oﬀ
eschewing the latest features in favor of more mature, sta-
ble releases. ”Agile programming”, particularly in an appli-
cation as exposed as a web browser, should be a security
disaster.

At least with respect to vulnerabilities disclosed during
each Firefox release’s lifecycle, based on our data-driven
study, this intuition appears to be wrong. Vulnerabilities
are disclosed in the older code at least as often as they are
in the newer code. This is both surprising and encouraging
news. It suggests that during the active lifecycle, the adver-
sary’s ability to discover security defects is dominated less
by the intrinsic quality of the code and more by the time re-
quired to familiarize themselves with it. It suggests that the
Firefox rapid-release cycles expose the software to a shorter
window of vulnerability [3]. Frequent releases of new fea-
tures appear to have provided the Firefox developers with
new grace periods or second honeymoons (using the termi-
nology of Clark, et al. [13]). While there may also be other
factors aﬀecting vulnerability discovery which are changing
over the duration of software evolution we studied, it is clear
that the net eﬀect, seen in our data, has been the attenua-
tion of the attacker.

We chose the Firefox browser as the basis for our study
as it was originally architected using the traditional devel-
opment model and switched to rapid-release midstream. It
will be interesting to see if other software systems, includ-
ing those that have been designed and developed using only
Agile methods share the same properties. It will also be in-
teresting to see what eﬀect the switch to silent auto-updates
has had on the vulnerability life-cycle. However, the dataset
that we integrated for Firefox with its large code-base, and
large user-base, coupled with its prominence as an attack
target is strongly suggestive that the rapid release strategy
has signiﬁcant and unexpected security advantages in real
world systems.

Even while generalization remains an open question, in
Firefox, the unexpected beneﬁt of frequent large code re-
leases is a lengthening of the attacker’s learning curve. The
ﬁndings reported here further support the ideas that famil-
iarity with a codebase is a useful heuristic for determining
how quickly vulnerabilities will be discovered and, conse-
quently, that software reuse (exactly because it is already
familiar to attackers) can be more harmful to software secu-
rity than beneﬁcial.

Our data and analysis suggest that the pattern exhibited
by vulnerability disclsure in Firefox is the result of would-
be attackers having to re-learn and re-adapt their tools in
response to a rapidly changing codebase and is consistent

1264with a “Honeymoon Eﬀect” [13]. These results should lead
software developers to question conventional software engi-
neering wisdom when security is the goal.

[11] Frederick P. Brooks. The Mythical Man-Month:

Essays on Software Engineering, 20th Anniversary
Edition. Addison-Wesley Professional, August 1995.

6. ACKNOWLEDGMENTS
This work is partially supported by MURI grant FA9550-12-
1-0400 “Science of Cyber Security: Modeling, Composition,
and Measurement”, administered by the U.S. Air Force un-
der Grant FA9550-08-1-0352. This work is also partially sup-
ported by the Defense Advanced Research Project Agency
(DARPA) and Space and Naval Warfare Systems Center Pa-
ciﬁc under Contract No. N66001-11-C-4020. Any opinions,
ﬁndings and conclusions or recommendations expressed in
this material are those of the author(s) and do not neces-
sarily reﬂect the views of the Defense Advanced Research
Project Agency and Space and Naval Warfare Systems Cen-
ter Paciﬁc.

7. REFERENCES
[1] O.H. Alhamzi and Y.K. Malaiya. Application of

vulnerability discovery models to major operating
systems. IEEE Transactions on Reliability, 57:14–22,
2008.

[2] Ali Almossawi. How maintainable is the Firefox

codebase?, May 2013.
http://almossawi.com/firefox/prose/.

[3] William A. Arbaugh, William L. Fithen, and John

McHugh. Windows of vulnerability: A case study
analysis. Computer, 33(12):52–59, 2000.

[4] Baker, Mitchell. Mozilla Blog.

http://blog.lizardwrangler.com/2011/08/25/
rapid-release-process/.

[5] Kent Beck, Mike Beedle, Arie van Bennekum, Alistair
Cockburn, Ward Cunningham, Martin Fowler, James
Grenning, Jim Highsmith, Andrew Hunt, Ron Jeﬀries,
Jon Kern, Brian Marick, Robert C. Martin, Steve
Mellor, Ken Schwaber, Jeﬀ Sutherland, and Dave
Thomas. Manifesto for Agile Software Development,
2001. http://www.agilemanifesto.org/.

[6] Al Bessey, Ken Block, Ben Chelf, Andy Chou, Bryan

Fulton, Seth Hallem, Charles Henri-Gros, Asya
Kamsky, Scott McPeak, and Dawson Engler. A few
billion lines of code later: using static analysis to ﬁnd
bugs in the real world. Communications of the ACM,
53(2):66–75, 2010.

[7] Konstantin Beznosov and Philippe Kruchten. Towards

agile security assurance. In Proceedings of the 2004
Workshop on New Security Paradigms, pages 47–54.
ACM, 2004.

[8] B. W. Boehm. A spiral model of software development
and enhancement. IEEE Computer, 20(5):43–57, May
1985.

[9] Barry Boehm, Bradford Clark, Ellis Horowitz, Chris

Westland, Ray Madachy, and Richard Selby. Cost
models for future software life cycle processes:
COCOMO 2.0. Annals of Software Engineering,
1:57–94, 1995.

[10] Brink, DerekA. Security and the Software

Development Lifecycle: Secure at the Source.
download.microsoft.com/download/9/D/4/
9D403333-C4F6-4770-A330-89661BE545CF/Aberdeen_
SecureSource.pdf.

[12] Frederick P. Brooks. The Mythical Man-Month:

Essays on Software Engineering, 20th Anniversary
Edition. Addison-Wesley Professional, August 1995.
http://www.amazon.ca/exec/obidos/redirect?tag=
citeulike09-20&amp;path=ASIN/0201835959.

[13] Sandy Clark, Stefan Frei, Matt Blaze, and Jonathan
Smith. Familiarity breeds contempt: the honeymoon
eﬀect and the role of legacy code in zero-day
vulnerabilities. In Proceedings of the 26th Annual
Computer Security Applications Conference, ACSAC
’10, pages 251–260, New York, NY, USA, 2010. ACM.

[14] Peter Coad, Eric LeFebrve, and Jeﬀ De Luca.

Feature-driven development. Java Modeling in Color
with UML, pages 182–203, 1999.

[15] Michael Coates. Security Evolution - Bug Bounty
Programs for Web Applications, September 2011.
http://www.slideshare.net/michael_coates/
bug-bounty-programs-for-the-web.

[16] Kieran Conboy. Toward a conceptual framework of

agile methods: a study of agility in diﬀerent
disciplines. In Extreme Programming And Agile
Methods - XP/ Agile Universe 2004, Proceedings,
pages 37–44. ACM Press, 2004.

[17] Forrester Consulting. State of Application Security:
Immature Practices Fuel Ineﬃciencies, but Positive
ROI Is Attainable - A Forrester Consulting Thought
Leadership Paper Commissioned by Microsoft. 2011.
http://www.microsoft.com/en-us/download/
details.aspx?id=2629.

[18] Microsoft Corporation. Microsoft Security

Development Lifecycle for Agile. 2009.
http://www.microsoft.com/security/sdl/
discover/sdlagile-onetime.aspx.

[19] Microsoft Corporation. http://www.microsoft.com/
en-us/news/speeches/2013/06-26build2013.aspx,
2013.

[20] Common Criteria. Common Criteria for Information

Technology Security Evaluation. Technical report,
September 2012.

[21] Michael A. Cusumano and Richard W. Selby. How
Microsoft builds software. Communications of the
ACM, 40:53–61, June 1997.

[22] CVE. Common vulnerabilities and exposures.

http://cve.mitre.org, 2008.

[23] M. Finifter, D. Akhawe, and D. Wagner. An Empirical

Study of Vulnerability Reward Programs. In 22nd
USENIX Security Symposium, 2013.

[24] Mozilla Foundation. Mozilla ﬁrefox esr overview, 2014.

https://www.mozilla.org/en-US/firefox/
organizations/faq/.

[25] Rajeev Gopalakrishna and Eugene H. Spaﬀord. A

trend analysis of vulnerabilities. CERIAS Tech Report
2005-05, May 2005.

[26] Duncan Harris. Oracle Software Security Assurance.
Technical report, 2014. http://www.oracle.com/us/
support/assurance/overview/index.html.

1265[27] Jim Highsmith. Adaptive software development: a

[41] John D. Musa, Anthony Iannino, and Kasuhira

collaborative approach to managing complex systems.
Addison-Wesley, 2013.

Okumoto. Software Reliability: Measurement,
Prediction, Application. McGraw-Hill, 1987.

[28] Michael Howard and Steve Lipner. The Security

[42] Johnathan Nightingale. Mozilla blog post future

Development Lifecycle. Microsoft Press, May 2006.

[29] Pankaj Jalote, Brendan Murphy, and Vibhu Saujanya

releases, 2011. https://blog.mozilla.org/
futurereleases/2011/07/19/every-six-weeks/.

Sharma. Post-release reliability growth in software
products. ACM Trans. Softw. Eng. Methodol.,
17(4):1–20, 2008.

[30] George Jelen. Sse-cmm security metrics. In NIST and

CSSPAB Workshop, 2000.

[31] E. Jonsson and T. Olovsson. A quantitative model of

the security intrusion process based on attacker
behavior. IEEE Transactions on Software
Engineering, 23(4):235–245, Apr 1997.

[32] Hossein Keramati and S-H Mirian-Hosseinabadi.

Integrating software development security activities
with agile methodologies. In Computer Systems and
Applications, 2008. AICCSA 2008. IEEE/ACS
International Conference on, pages 749–754. IEEE,
2008.

[33] Foutse Khomh, Tejinder Dhaliwal, Ying Zou, and

Bram Adams. Do Faster Releases Improve Software
Quality? An Empirical Case Study of Mozilla Firefox.
In Mining Software Repositories, 2012 9th Working
Conference, Kingston, Ontario, Canada, June 2012.
[34] Anthony Laforge. Release Early, Release Often, July

2010. http://blog.chromium.org/2010/07/
release-early-release-often.html.

[35] Gary McGraw. Software Security Touchpoint:

Architectural Risk Analysis. Technical report, 2010.
http://www.cigital.com/presentations/ARA10.pdf.
[36] Gary McGraw and Brian Chess. The building security
in maturity model(bsimm). In Proceedings of the 18th
USENIX Security Symposium (USENIX Security ’09),
Montreal, Canada, August 2009.

[37] J.D. Meier, Alex Mackman, Blaine Wastell, Prashant

Bansode, Andy Wigley, and Kishore Gopalan.
Security Guidelines for .NET Framework Version 2.0.
Technical report, October 2005. http://msdn.
microsoft.com/en-us/library/aa480477.aspx.

[38] Mozilla. Bugzilla@Mozilla.

https://bugzilla.mozilla.org/, September 2013.

[39] Mozilla. Mozilla Foundation Security Advisories.
https://www.mozilla.org/security/announce/,
September 2013.

[40] John D. Musa. A theory of software reliability and its

application. IEEE Transactions on Security
Engineering, SE-1:312–327, September 1975.

[43] NIST. National Vulnerability Database.

http://nvd.nist.gov, 2008.

[44] Department of Homeland Security. SECURITY IN
THE SOFTWARE LIFECYCLE: Making Software
Development Processes– and Software Produced by
Them– More Secure. 2006.
http://resources.sei.cmu.edu/asset_files/
WhitePaper/2006_019_001_52113.pdf.

[45] Andy Ozment. Improving vulnerability discovery

models. In QoP ’07: Proceedings of the 2007 ACM
Workshop on Quality of Protection, pages 6–11, New
York, NY, USA, 2007. ACM.

[46] Andy Ozment and Stuart E. Schechter. Milk or wine:

does software security improve with age? In
USENIX-SS’06: Proceedings of the 15th USENIX
Security Symposium, Berkeley, CA, USA, 2006.
USENIX Association.

[47] Robert C. Seacord. Secure Coding in C and C++.

Addison-Wesley Professional, June 2008.

[48] Mikko Siponen, Richard Baskerville, and Tapio

Kuivalainen. Integrating security into agile
development methods. In System Sciences, 2005.
HICSS’05. Proceedings of the 38th Annual Hawaii
International Conference on, pages 185a–185a. IEEE,
2005.

[49] Gregory Tassey. The economic impacts of inadequate

infrastructure for software testing. 2002.

[50] John Viega. Building Security Requirements with

CLASP. In Proc. ACM SESS, pages 1–7, 2005.

[51] Jaana W¨ayrynen, Marine Bod´en, and Gustav

Bostr¨om. Security engineering and extreme
programming: An impossible marriage? In Extreme
programming and agile methods-XP/Agile Universe
2004, pages 117–128. Springer, 2004.

[52] Carol Woody. Agile security review of current research

and pilot usages. SEI Library White Paper, 2013.
http://resources.sei.cmu.edu/library/

asset-view.cfm?assetid=70232.

1266