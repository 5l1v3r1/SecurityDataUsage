WiFi, LTE, or Both? Measuring Multi-Homed Wireless

Internet Performance

Shuo Deng, Ravi Netravali, Anirudh Sivaraman, Hari Balakrishnan

{shuodeng, ravinet, anirudh, hari}@csail.mit.edu

MIT Computer Science and Artiﬁcial Intelligence Lab

Cambridge, Massachusetts, U.S.A.

ABSTRACT
Over the past two or three years, wireless cellular networks have be-
come faster than before, most notably due to the deployment of LTE,
HSPA+, and other similar networks. LTE throughputs can reach
many megabits per second and can even rival WiFi throughputs in
some locations. This paper addresses a fundamental question con-
fronting transport and application-layer protocol designers: which
network should an application use? WiFi, LTE, or Multi-Path TCP
(MPTCP) running over both?

We compare LTE and WiFi for transfers of different sizes along
both directions (i.e. the uplink and the downlink) using a crowd-
sourced mobile application run by 750 users over 180 days in 16
different countries. We ﬁnd that LTE outperforms WiFi 40% of the
time, which is a higher fraction than one might expect at ﬁrst sight.
We measure ﬂow-level MPTCP performance and compare it with
the performance of TCP running over exclusively WiFi or LTE
in 20 different locations across 7 cities in the United States. For
short ﬂows, we ﬁnd that MPTCP performs worse than regular TCP
running over the faster link; further, selecting the correct network
for the primary subﬂow in MPTCP is critical in achieving good
performance. For long ﬂows, however, selecting the proper MPTCP
congestion control algorithm is equally important.

To complement our ﬂow-level analysis, we analyze the trafﬁc
patterns of several mobile apps, ﬁnding that apps can be categorized
as “short-ﬂow dominated” or “long-ﬂow dominated”. We then record
and replay these patterns over emulated WiFi and LTE links. We ﬁnd
that application performance has a similar dependence on the choice
of networks as ﬂow-level performance: an application dominated
by short ﬂows sees little gain from MPTCP, while an application
with longer ﬂows can beneﬁt much more from MPTCP — if the
application can pick the right network for the primary subﬂow and
the right choice of MPTCP congestion control.
CATEGORIES AND SUBJECT DESCRIPTORS
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network Management; C.2.1 [Computer-Communication
Networks]: Network Architecture and Design—Wireless Commu-
nication; C.4 [Performance of System]: Measurement techniques,
Performance attributes
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright © 2014 ACM  978-1-4503-3213-2/14/11…$15.00. 
http://dx.doi.org/10.1145/2663716.2663727.

KEYWORDS
Multi-Network, Mobile Device, LTE, Multi-Path TCP

1.

INTRODUCTION

Access to WiFi and cellular wireless networks are de rigueur
on mobile devices today. With the emergence of LTE, cellular
performance is starting to rival the performance of WiFi. Moreover,
when WiFi signal quality is low or in crowded settings, the anecdotal
experience of many users is that cellular performance may in fact be
considerably better than WiFi performance.

But just how good are LTE and WiFi networks in practice and
how do they compare with each other? Should applications and
transport protocols strive to select the best network, or should they
simply always use Multi-Path TCP (MPTCP) [21]? This paper seeks
to answer these questions empirically.

To answer these questions, we implemented a crowd-sourced
network measurement tool (Section 2) to understand the ﬂow-level
performance of TCP over WiFi and LTE in the wild from 16 different
countries over a 6-month period, encompassing 3624 distinct 1-
MegaByte TCP ﬂows. We used this data to measure transfer times
for different amounts of data transferred.

MPTCP isn’t widely deployed yet on most phones1. As a result,
we manually measured ﬂow-level MPTCP performance and com-
pared it with the performance of TCP running over exclusively WiFi
or LTE in 20 different locations, in 7 cities in the United States (Sec-
tion 3). Finally, to complement our empirical ﬂow-level analysis, we
used an existing record-and-replay tool to analyze (Section 4) and
run (Section 5) mobile apps on emulated cellular and WiFi links,
using it to study the impact of network selection on application
performance.

Our key ﬁndings are as follows:
1. Cellular networks outperform WiFi around 40% of the time in
our data set (Figure 3), a proportion considerably higher than
we had hypothesized.

2. For short ﬂows (100 KB or lower), MPTCP performs worse
than TCP (Figure 7b). Further, it is crucial to select the proper
network for the primary MPTCP subﬂow2. For instance, on
a 10 KB ﬂow, we found that the choice of the network for
the primary subﬂow can affect MPTCP throughput by upto
60% (Figure 8). For long ﬂows, selecting the proper conges-
tion control algorithm is also important: for a 1 MB ﬂow, for
instance, modifying only the congestion control algorithm,
while keeping the network used by the primary subﬂow ﬁxed
changes MPTCP throughput by 34% (Figures 13 and 14). On
the other hand, modifying only the network used by the pri-

1The Apple iOS is an exception [13].
2For a description of subﬂow and other MPTCP-related terms, we
refer the reader to Section 3.1

181Figure 1: Cell vs WiFi User Interface.

mary subﬂow, while keeping the congestion-control algorithm
ﬁxed, changes throughput by 25%. (Figure 14)

3. Mobile app trafﬁc patterns largely fall into two groups (Fig-
ure 17). We refer to apps that tend to open several connections,
each transferring small amounts of data, as short-ﬂow dom-
inated apps, and we refer to apps that have fewer number
of connections but transfer large amounts of data on each as
long-ﬂow dominated apps.

4. For short-ﬂow dominated apps, MPTCP does not outperform
the best conventional “single-path” TCP (over either Wi-Fi
or LTE) (Figures 18 and 19). However, it is important to
choose the correct network for standard TCP. Our emulation
shows that selecting the proper network for single-path TCP
can reduce response time by 50% compared to the minimum
of the single-path TCP throughputs on LTE and WiFi. On the
other hand, using MPTCP reduces application response time
by only 35%.

5. For long-ﬂow dominated apps, MPTCP does help markedly,
provided the appropriate congestion-control algorithm is used
and the two links have roughly comparable speeds: our emula-
tion shows that using single path TCP with the correct choice
of network reduces application response time by 42%, while
using MPTCP with the proper congestion control can also
reduce response time by about 50% (Figures 20 and 21).

Our crowd-sourced network measurement tool, Cell vs WiFi, is
available for Android in the Google Play Store. All our measurement
data and analysis tools are available at http://web.mit.edu/
cell-vs-wifi/.

2. CELL VS WIFI MEASUREMENT

In September 2013, we published an Android app on Google Play,
called Cell vs WiFi (http://web.mit.edu/cell-vs-wifi).
Cell vs WiFi measures end-to-end WiFi and cellular network per-
formance and uses these measurements to tell smartphone users if
they should be using the cellular network or WiFi at the current time
and location. The app also serves as a crowd-sourced measurement
tool by uploading detailed measurement data to our server including
packet-level traces. Over a nine-month period since the app was
published, it attracted over 750 downloads. We collected over 10
GB of measurement data from 3632 distinct TCP connections over
this duration from these users.
2.1 Cell vs WiFi App

Figure 1 shows the user interface of Cell vs WiFi. Users can
choose to measure network performance periodically, or once per
click. Users can also set an upper bound on the amount of cellular

Figure 2: Cell vs WiFi: single measurement collection run.

data that the app can consume; especially for devices on a limited
cellular data plan.

The ﬂow chart in Figure 2 shows a single measurement-collection
run. When the user clicks the Start button or the pre-set periodic
measurement timer expires, one run of measurement collection starts,
shown as Step 1 in the ﬁgure. If WiFi is available and the phone
successfully associates with an Access Point (AP), Cell vs WiFi
collects packet-level tcpdump traces for a 1 Mbyte TCP upload and
a 1 Mbyte TCP download between the mobile device and our server
at MIT.

After measuring WiFi, Cell vs WiFi turns off the WiFi interface
on the phone and attempts to automatically connect to the cellular
network. If the user has turned off the cellular data network, Cell vs
WiFi aborts the cellular measurement. If Cell vs WiFi successfully
connects to the cellular network, then in Step 3 , it collects a similar
set of packet-level tcpdump traces for both an upload and a download.
Once both WiFi and cellular network measurements are ﬁnished,
in Step 4 , Cell vs WiFi uploads the data collected during this
measurement run, together with the user ID (randomly generated
when a smartphone user uses the app for the ﬁrst time), and the
phone’s geographic location, to our server at MIT.

More information about Cell vs WiFi can be found at http:

//web.mit.edu/cell-vs-wifi.

① Start Measurement WiFi on? No Turn WiFi on WiFi Associated? No Scan and Associate Success? Yes ② Measure WiFi Yes Yes Turn WiFi off Cellular Available? No ③ Measure Cellular Networks Yes WiFi Available? Turn WiFi on Yes No ④ Upload Data No 1822.2 Results

Location Name
US (Boston, MA)

Israel

US (Portland)

Estonia

South Korea
US (Orlando)
US (Miami)
Malaysia

Brazil

Germany

Spain

Thailand (Phichit)
US (New York)

Japan
Sweden

Thailand (Chiang Mai)

US (Chicago)

Hungary

Italy

US (Salt Lake City)

Colombia

US (Santa Fe)

(Lat, Long)
(42.4, -71.1)
(31.8, 35.0)
(45.6, -122.7)
(59.4, 27.4)
(37.5, 126.9)
(28.4, -81.4)
(26.0, -80.2)
(4.24, 103.4)
(-23.6, -46.8)
(52.5, 13.3)
(28.0, -16.7)
(16.1, 100.2)
(40.9, -73.8)
(36.4, 139.3)
(59.6, 18.6)
(18.8, 99.0)
(42.0, -88.2)
(47.4, 16.8)
(44.2, 8.3)

(40.8, -111.9)
(7.1, -70.7)
(35.9, -106.3)

# of Runs
884
276
164
124
108
92
84
76
56
40
40
40
24
16
16
16
16
8
8
8
4
4

LTE %
10%
55%
45%
71%
66%
35%
52%
68%
4%
20%
80%
80%
33%
25%
0%
75%
25%
0%
0%
0%
0%
0%

Table 1: Geographical coverage and diversity of the crowd-sourced
data collected from 16 countries using Cell vs WiFi, ordered by
number of runs collected. The last column shows the percentage of
runs where LTE throughput is higher than WiFi

Cell vs WiFi collected network-performance data from locations
in ﬁve continents: North America, South America, Europe, Africa,
and Asia. We observed that some users use this app to measure only
WiFi or LTE performance, but not both. We do not consider these
measurement runs in this section because our goal is to compare
LTE and WiFi performance at nearly the same place and time. To
ensure that we only measure performance of LTE or an equivalent
high-speed cellular network, such as HSPA+, we use the Android
network-type API [2] and pick only those measurement runs that
used LTE or HSPA+. When using the term LTE in this section, we
mean LTE/HSPA+. After these ﬁltering steps, our dataset contains
over 1606 complete runs of measurement, i.e., both LTE and WiFi
transfers in both directions.

In Table 1, we group nearby runs together using a k-means clus-
tering algorithm, with a cluster radius of r = 100 kilometers; i.e.,
all runs in each group are within 200 kilometers of each other. For
each location group, we also list the percentage of measurement runs
where LTE has higher throughput than WiFi.

Figure 3 shows the CDF of difference in throughput between
WiFi and LTE on the uplink and the downlink. We can see that
the throughput difference can be larger than 10 Mbits/s in either
direction. The grey region shows 42% (uplink) and 35% (downlink)
of the data samples whose LTE throughput is higher than WiFi
throughput. If we combine uplink and downlink together, 40% of
the time LTE outperforms WiFi. Figure 4 shows the CDF of ping
RTT difference between LTE and WiFi. During our measurement,
we send 10 pings and take the average RTT value. The shaded area
shows that in 20% of our measurement runs, LTE has a lower ping
RTT than WiFi, although the cellular network is commonly assumed
to have higher delays.

(a) Uplink

(b) Downlink

Figure 3: CDF of difference between WiFi and LTE throughput. The
grey region shows 42% (uplink) and 35% (downlink) of the data
samples whose LTE throughput is higher than WiFi throughput.

The simple network selection policy used by mobile devices today
forces applications to use WiFi whenever available. However, our
measurement results indicate that a more ﬂexible network selection
policy will improve the network performance of mobile applica-
tions.

3. MPTCP MEASUREMENTS

When WiFi and cellular networks offer comparable performance,
or when each varies signiﬁcantly with time, it is natural to use
both simultaneously. Several schemes transmitting data on multiple
network interfaces have been proposed in the past [22, 17, 15, 21].
Among these, the most widespread is MPTCP [21]. MPTCP can be
used in two modes [16]: Full-MPTCP mode, which transmits data
on all available network interfaces at any time and Backup mode,
which transmits data on only one network interface at a time, falling
back to the other interface only if the ﬁrst interface is down. Unless
stated otherwise, all experiments in this section use MPTCP in Full-
MPTCP mode. For completeness, we compare the two modes in
Section 3.6. We use a modiﬁed version of Cell vs WiFi to carry out
MPTCP measurements. We observe the following:

1. We ﬁnd that MPTCP throughput for short ﬂows depends sig-
niﬁcantly on the network selected for the primary subﬂow3 in
MPTCP: for example, changing the network (LTE or WiFi)

3We deﬁne subﬂows in Section 3.1

00.20.40.60.81.0-15-10-5 0 5 10 15 20 25CDFTput(WiFi) - Tput(LTE) (mbps)00.20.40.60.81.0-15-10-5 0 5 10 15 20 25CDFTput(WiFi) - Tput(LTE) (mbps)183Figure 4: CDF of the difference between average Ping RTT with
WiFi and LTE. The grey region shows 20% of the data samples
whose LTE RTT is lower than WiFi RTT.

for the primary subﬂow changes the average throughput of a
10 KByte ﬂow by 60% in the median (Figure 8 in Section 3.4).
2. For long ﬂows, selecting the proper congestion control algo-
rithm is also important. For example, using different congestion-
control algorithms (coupled or decoupled) changes the aver-
age throughput of a 1 MByte ﬂow by 34% in the median
(Figure 13 in Section 3.5).

3. MPTCP’s backup mode is typically used for energy efﬁciency:
keeping fewer interfaces active reduces energy consumption
overall. However, we ﬁnd that for MPTCP in Backup Mode,
if LTE is set to the backup interface, very little energy can be
saved for ﬂows that last shorter than 15 seconds (Section 3.6).

3.1 MPTCP Overview

MPTCP initiates a connection in a manner similar to regular
TCP: it picks one of the available interfaces and establishes a TCP
connection using a SYN-ACK exchange with the server over that in-
terface. Every TCP connection that belongs to a MPTCP connection
is called an MPTCP subﬂow. The ﬁrst established subﬂow is called
the primary subﬂow.

We used the Linux MPTCP implementation for our measure-
ments [14] (Ubuntu Linux 13.10 with Kernel version 3.11.0, with
the MPTCP Kernel implementation version v0.88). In this imple-
mentation, MPTCP initiates the primary subﬂow on the interface
used as the default route on the machine. Once the primary subﬂow
is established, if there are other interfaces available, MPTCP creates
an additional subﬂow using each new interface, and combines the
new subﬂow with the existing subﬂows on the same MPTCP con-
nection.4 For example, a mobile device can establish an MPTCP
primary subﬂow through WiFi to the server, and then add an LTE
subﬂow to the server. To terminate the connection, each subﬂow
is terminated using four-way FIN-ACKs, similar to TCP. In Sec-
tion 3.4, we study the effect of choosing different interfaces for the
primary subﬂow on MPTCP performance.

There are two kinds of congestion-control algorithms used by
MPTCP: decoupled and coupled. In decoupled congestion control,
each subﬂow increases and decreases its congestion window inde-
pendently, as if they were independent TCP ﬂows [5]. In coupled
congestion control, each subﬂow in an MPTCP connection increases

4For simplicity, here we only explain how MPTCP works when the
server is single-homed (like the server in our experiments), and the
client alone is multi-homed.

Figure 5: Setup of MPTCP measurement.

its congestion window based on ACKs both from itself and from
other subﬂows [21, 10] in the same MPTCP connection. In Sec-
tion 3.5, we compare the coupled and decoupled algorithms and ﬁnd
that using different congestion-control algorithms has less impact
on throughput compared with selecting the correct interface for pri-
mary subﬂows for short ﬂows. However, for long ﬂows, changing
congestion-control algorithms results in a substantial throughput
difference.

3.2 Measurement Setup

Figure 5 shows the MPTCP measurement setup. The MPTCP
Client is a laptop running Ubuntu 13.10 with MPTCP installed. We
tethered two smartphones to the laptop, one in “airplane” mode with
WiFi enabled, and the other with WiFi disabled but connected to LTE
(either the Verizon or the Sprint LTE network). The MPTCP server
is located at MIT, with a single Ethernet interface, also running
Ubuntu 13.10 with MPTCP installed.

We installed a modiﬁed version of Cell vs WiFi on both phones.
The phone with WiFi enabled only measures WiFi performance, i.e.,
Step 2 in Figure 2. The phone connected to LTE only measures
cellular network performance, i.e., Step 3 in Figure 2.

The experimental setup also allows us to measure the energy
consumption separately for each interface, which we present in
Section 3.6.

Each measurement run comprises the following:
1. Single path TCP upload and download using modiﬁed Cell vs

2. Single path TCP upload and download using modiﬁed Cell vs

WiFi through LTE.

WiFi through WiFi.

3. MPTCP upload and download in Full-MPTCP mode with

4. MPTCP upload and download in Full-MPTCP mode with

LTE as the primary subﬂow.

WiFi as the primary subﬂow.

We conducted the measurements at 20 different locations on the
east and west coasts of the United States, shown in Table 2. At
each city, we conduct our measurement at places where people
would often use mobile devices: cafes, shopping malls, university
campuses, hotel lobbies, airports, and apartments. At 7 of the 20
locations, we measured both Verizon and Sprint LTE networks, using
both MPTCP congestion-control algorithms: decoupled and coupled.
At the other 13 locations, we were able to measure only the Verizon
LTE network with coupled congestion control.

In Figure 6, we compare the WiFi and LTE throughput distribu-
tions for the data we collected at these 20 locations and the data
collected from Cell vs WiFi in Section 2. We can see that for both
upload and download, the “20-Location” CDF curves are close to
the CDF curve from Section 2, implying that the 20 locations that
were selected have similar variability in network conditions as the

 0 0.2 0.4 0.6 0.8 1-400-200 0 200 400CDFRTT(WiFi) - RTT(LTE) (ms)184(a) Uplink

(b) Downlink

Figure 6: CDF for WiFi and LTE throughput measured using regular TCP at 20 locations (shown as “20-Location”) comparing with the CDF
in Figure 3(shown as “App Data”).

Description
University Campus, Indoor
University Campus, Outdoor
Cafe, Indoor
Downtown, Outdoor
Apartment, Indoor
Cafe, Indoor
Shopping Mall, Indoor
Subway, Outdoor
Airport, Indoor
Apartment, Indoor
Cafe, Indoor
Downtown, Outdoor
Store, Indoor

ID City
1 Amherst, MA
2 Amherst, MA
3 Amherst, MA
4 Amherst, MA
5 Amherst, MA
6 Boston, MA
7 Boston, MA
8 Boston, MA
9 Boston, MA
10 Boston, MA
11 Boston, MA
12 Boston, MA
13 Boston, MA
14
15
16
17
18 Washington, D.C. Hotel Room, Indoor
Hotel Room, Indoor
19
20
Hotel Room, Indoor

Princeton, NJ
Philadelphia, PA

Santa Babara, CA Hotel Lobby, Indoor
Santa Babara, CA Hotel Room, Indoor
Santa Babara, CA Conference Room, Indoor
Los Angeles, CA

Airport, Indoor

Table 2: Locations where MPTCP measurements were conducted

Cell vs WiFi dataset. For simplicity, in the rest of Section 3, we only
show results of downlink ﬂows from the server to the client.

3.3 TCP vs. MPTCP

A natural question pertaining to MPTCP is how the performance
of MPTCP compares with the best “single-path” TCP performance
achievable by an appropriate choice of networks alone. To answer
this, we look at all four MPTCP variants (two congestion-control
algorithms times two choices for the network used by the primary
subﬂow) and both single-path TCP variants (WiFi and LTE) as a
function of ﬂow size. Figure 7 illustrates two qualitatively different
behaviors.

Figure 7a shows a case where the performance of MPTCP is
always worse than the best single-path TCP regardless of ﬂow size.

Figure 8: CDF of relative difference between MPTCPLT E and
MPTCPWiFi, for different ﬂow sizes. The median relative differ-
ence for each ﬂow size: 60% for 10 KBytes, 49% for 100 KBytes
and 28% for 1MByte. Thus, throughput for smaller ﬂow sizes is
more affected by the choice of the network for the primary subﬂow.

This occurs in a particularly extreme scenario where a large disparity
in link speeds between the two networks (LTE and WiFi) leads to
degraded MPTCP performance irrespective of ﬂow size. On the
other hand, Figure 7b shows an alternative scenario where MPTCP
is better than the best single-path TCP at larger ﬂow sizes. In both
cases, however, picking the right network for single-path TCP is
preferable to using MPTCP for smaller ﬂows. These results suggest
that it may not always be advisable to use both networks, and an
adaptive policy that automatically picks the networks to transmit
on and the transport protocol to use would improve performance
relative to any static policy.
3.4 Primary Flow Measurement

We then study how the choice of the network for the primary sub-
ﬂow can affect MPTCP throughput for different ﬂow sizes. To show
this quantitatively, we calculate the relative throughput difference
as:

00.20.40.60.81.0-15-10-5 0 5 10 15 20 25CDFTput(WiFi) - Tput(LTE) (mbps)App Data20-Location00.20.40.60.81.0-15-10-5 0 5 10 15 20 25CDFTput(WiFi) - Tput(LTE) (mbps)App Data20-Location 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)10 KB100 KB1 MB185(a) MPTCP performs worse than single TCP.

(b) MPTCP performs better than single TCP.

Figure 7: MPTCP throughput vs single path TCP throughput at 2 representative locations. Figure 7a shows a case where MPTCP throughput is
lower than the best throughput of single path TCP. Figure 7b shows a case where MPTCP throughput (in this case, MPTCP(WiFi, decoupled))
is higher than that of single-path TCP for large ﬂow sizes.

|MPTCPLT E−MPTCPWiFi|

MPTCPWiFi

.

Here, MPTCPLT E is the throughput achieved by MPTCP using
LTE for the primary subﬂow, and MPTCPWiFi is the throughput
achieved by MPTCP using WiFi for the primary subﬂow (in this
subsection, we only run MPTCP using decoupled congestion con-
trol). Figure 8 shows the CDF of the relative throughput difference
for three ﬂow sizes: 10 KBytes, 100 KBytes, and 1 MBytes. We
see that using different networks for the primary subﬂow has the
greatest effect on smaller ﬂow sizes.

3.4.1 MPTCP Throughput Evolution Over Time

To understand how using different networks for the primary sub-
ﬂow affects MPTCP throughput evolution over time, we collected
tcpdump traces at the MPTCP Client during the measurement.
From the traces, we calculate the average throughput from the time
the MPTCP session is established, to the current time t. In Figure 10
and 9, we plot the average throughput as a function of time. Each sub
ﬁgure shows the throughput of the entire MPTCP session (shown
as MPTCP) and the throughput of the individual WiFi and LTE
subﬂows.

Figure 9 shows traces collected at a location where LTE has much
higher throughput than WiFi. At time 0, the client sent the SYN
packet to the server. In Figure 9a, it took the client 1 second to
receive the SYN-ACK packet from the server over WiFi. MPTCP
throughput is the same as the throughput of the WiFi subﬂow un-
til the LTE subﬂow is established. Because LTE has much higher
throughput at this location and time, once the subﬂow is established
on LTE, it quickly increases its throughput (and therefore MPTCP’s
throughput). By contrast, in Figure 9b, the client receives the SYN-
ACK faster, and MPTCP throughput increases more quickly because
the ﬁrst subﬂow is on the higher-throughput LTE network. Because
of the smaller SYN-ACK RTT and higher throughput on the ﬁrst
primary subﬂow, the MPTCP connection using LTE for the pri-
mary subﬂow (Figure 9b) has a higher average throughput than the
MPTCP connection using WiFi for the primary subﬂow (Figure 9a).
Similarly, Figure 10 shows traces collected at a location where
WiFi has higher throughput than LTE. Here, using WiFi as the
primary subﬂow for MPTCP results in higher throughput.

3.4.2 MPTCP Throughput as a Function of Flow Size

Figures 11a and 12a show how MPTCP throughput changes as the
ﬂow size increases. The ﬂow size is measured using the cumulative
number of bytes acknowledged in each ACK packet received at the
MPTCP client. Figures 11b and 12b show the relative throughput
ratio change as ﬂow size increases. The relative throughput ratio is
deﬁned as:

MPTCPLT E
MPTCPWiFi

.

Although the absolute value of the difference in throughputs is
smaller for small ﬂow sizes (Figures 11a and 12a), the relative
throughput ratio, is larger (Figure 11b and 12b). Thus, for a connec-
tion with a given ﬂow size, using the correct interface for MPTCP
primary subﬂow can reduce the ﬂow completion time, and the rela-
tive reduction can be signiﬁcant for smaller ﬂow sizes. For example,
in Figure 11a, the absolute throughput difference between LTE and
WiFi is 0.5 mbps for a 100 KB ﬂow, and about 3 mbps for a 1 MB
ﬂow. But in Figure 11b, the relative throughput ratio is 2.2x for 100
KB ﬂow, larger than the 1.5x for a 1 MB ﬂow.
3.5 Coupled and Decoupled Congestion Control

To understand how the choice of congestion-control algorithm
within MPTCP affects its throughput, at 7 of the 20 locations, we
measured the following different MPTCP conﬁgurations on the
Verizon LTE network and each location’s dominant WiFi network:

1. LTE for primary subﬂow, coupled congestion control.
2. LTE for primary subﬂow, decoupled5 congestion control.
3. WiFi for primary subﬂow, coupled congestion control.
4. WiFi for primary subﬂow, decoupled congestion control.
At each location, we measured 10 runs for each of the 4 conﬁgu-
rations, along both the uplink and the downlink. Thus, each of the
four conﬁgurations has 140 data points ((10 + 10)× 7).

To quantify the throughput difference between conﬁgurations, we

compute:

rnetwork =

|MPTCPLT E,coupled−MPTCPWiFi,coupled|

MPTCPWiFi,coupled

, or

5Here, the decoupled congestion control uses TCP Reno for each
subﬂow.

 0 1 2 3 4 5 6 7 8 9 10 1 10 100 1000Throughput (mbps)Flow Size (KB)LTEWiFiMPTCP(LTE, Decoupled)MPTCP(WiFi, Decoupled)MPTCP(LTE, Coupled)MPTCP(WiFi, Coupled) 0 1 2 3 4 5 6 7 8 9 10 1 10 100 1000Throughput (mbps)Flow Size (KB)LTEWiFiMPTCP(LTE, Decoupled)MPTCP(WiFi, Decoupled)MPTCP(LTE, Coupled)MPTCP(WiFi, Coupled)186(a) Using WiFi for the primary subﬂow

(b) Using LTE for the primary subﬂow

Figure 9: MPTCP throughput over time, measured at a location where LTE has higher throughput than WiFi. MPTCP throughput grows faster
over time when using LTE for the primary subﬂow.

(a) Using WiFi for the primary subﬂow

(b) Using LTE for the primary subﬂow

Figure 10: MPTCP throughput over time, measured at a location where WiFi has higher throughput than LTE. MPTCP throughput grows faster
over time when using WiFi for the primary subﬂow.

rnetwork =

|MPTCPLT E,decoupled−MPTCPWiFi,decoupled|

MPTCPWiFi,decoupled

.

Here, rnetwork is the relative throughput difference when using
different networks for primary subﬂow. MPTCPn,c is the throughput
measured when using network n for primary subﬂow and using
congestion control algorithm c. We also compute:

rcwnd =
rcwnd =

|MPTCPLT E,decoupled−MPTCPLT E,coupled|
|MPTCPWiFi,decoupled−MPTCPWiFi,coupled|

MPTCPLT E,coupled

, or

.

MPTCPWiFi,coupled

Here, rcwnd is the relative throughput difference when using dif-

ferent congestion-control algorithms.

Figure 13 shows the CDF of the relative throughput difference be-
tween using coupled and decoupled congestion control for three ﬂow
sizes: 10 KBytes, 100 KBytes, and 1 MByte. The rightmost CDF
curve corresponds to the relative difference for 1 MByte, while the

left-most one is for 10 KBytes. Thus, using different congestion con-
trol algorithms has a greater effect on larger ﬂow sizes. In Figure 14,
a pair-wise comparison between using different networks (labeled
with“Network”) and using different congestion control algorithms
(labeled with “CC”) for each ﬂow size shows the following:

1. For small ﬂow sizes, throughput is more affected by the choice
of network for the primary subﬂow. For example, in Fig-
ure 14a and 14b, “Network” is to the right of “CC”.

2. For large ﬂow sizes, throughput is more affected by the choice
of congestion control (decoupled or coupled) algorithms. For
example: in Figure 14c, “CC” is to the right of “Network”.
However, the choice of network for the primary subﬂow is
also important.

In practice, selecting the best network for the primary subﬂow
is more feasible than changing congestion control algorithms for
each MPTCP connection, since the primary ﬂow can be deﬁned
solely by the MPTCP endpoint initiating the connection, while the
congestion-control algorithm requires support at both endpoints.

 0 0.5 1 1.5 2 2.5 3 0 0.5 1 1.5 2Tput (mbps)Time (second)LTEWiFiMPTCP 0 1 2 3 4 5 6 7 0 0.5 1 1.5 2Tput (mbps)Time (second)LTEWiFiMPTCP 0 1 2 3 4 5 6 0 0.5 1 1.5 2Tput (mbps)Time (second)LTEWiFiMPTCP 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 0 0.5 1 1.5 2Tput (mbps)Time (second)LTEWiFiMPTCP187(a) Absolute throughput difference: larger difference between WiFi and LTE
for larger ﬂow sizes.

(b) Relative throughput ratio: larger difference between WiFi and LTE for
smaller ﬂow sizes.

Figure 11: Absolute throughput difference and relative throughput ratio as a function of ﬂow size when LTE has higher throughput than WiFi.

(a) Absolute throughput difference: larger difference between WiFi and LTE
for larger ﬂow sizes.

(b) Relative throughput ratio: larger difference between WiFi and LTE for
smaller ﬂow sizes.

Figure 12: Absolute throughput difference and relative throughput ratio as a function of ﬂow size when WiFi has higher throughput than LTE.

3.6 Full-MPTCP and Backup Mode

In Sections 3.4 and 3.5, all measurements were done using Full-
MPTCP mode, since our focus was on how MPTCP’s throughput
changes under different conﬁgurations, when all paths are fully
utilized. Backup Mode is an MPTCP mode where only a subset
of paths are used to save energy, especially on power-constrained
mobile devices. In this section, we ﬁrst show how Backup Mode
differs from Full-MPTCP at the per-packet level. Then we discuss
the energy efﬁciency of both Full-MPTCP and Backup Mode.
3.6.1 Packet-Level Behavior of Full-MPTCP and Backup

Mode

Figure 15 shows the packet-transmission pattern over time for a
long ﬂow employing MPTCP, using Full-MPTCP and Backup Mode.
We use tcpdump at the MPTCP client to log packet transmission
and ack reception times. In Figure 15, we plot a vertical line at time
t if there is a packet sent or ack received at time t in the tcpdump
trace. t = 0 is the time when the ﬁrst SYN packet is sent.

Each sub-ﬁgure contains the packet-transmission patterns on both

the WiFi and LTE interfaces for one MPTCP ﬂow. Sub-ﬁgures
on the left column are packet transmission (sending and receiving)
patterns captured when using LTE for the primary subﬂow, while
sub-ﬁgures on the right are for using WiFi for the primary subﬂow.
Figures 16a and 16b show that in Full-MPTCP mode, packets are
transferred through both WiFi and LTE during the entire MPTCP
connection.

Figures 15c and 15d illustrate the backup mode where one network
is set to be the backup interface. For example, in Figure 15c, when
WiFi is set to backup, we only see the SYN and SYN ACK packets
transferred during the 3-way handshake procedure at t = 1, when the
connection establishes a WiFi subﬂow, as well as FIN and FIN-ACK
packets at t = 19, when the connection ends. A similar pattern is
shown in Figure 15d, when LTE is set to be the backup interface.

Figures 15e and 15f show packet transmissions in backup mode,
when the primary network is disabled mid-ﬂow. We disable the
interface by setting the interface to “multipath off” in iproute. In
Figure 15e, WiFi is set to backup. When the connection starts, it

 0 1 2 3 4 5 6 0 200 400 600 800 1000Throughput (mbps)Flow size (KB)MPTCP(LTE)MPTCP(WiFi) 0 0.5 1 1.5 2 2.5 3 0 200 400 600 800 1000Throughput RatioFlow size (KB)MPTCP(LTE)MPTCP(WiFi) 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 0 200 400 600 800 1000Throughput (mbps)Flow size (KB)MPTCP(LTE)MPTCP(WiFi) 0 0.5 1 1.5 2 0 200 400 600 800 1000Throughput RatioFlow size (KB)MPTCP(LTE)MPTCP(WiFi)188(a) 10 KB

(b) 100 KB

(c) 1 MB

Figure 14: CDF of relative difference for using different networks for primary subﬂow (labeled as “Network”) vs using different congestion
control algorithms (labeled as “CC”), across 3 ﬂow sizes. Median values for CC curves: 16% for “10 KB”, 16% for “100 KB”, and 34% for “1
MB”. Thus, using different congestion control algorithms has more impact on larger ﬂows. Median values for Network curves: 60% for “ 10
KB”, 43% for “100 KB” , and 25% for “1 MB”. Thus, using a different network for the primary subﬂow has the greatest impact on smaller
ﬂows.

3.6.2 Energy Efﬁciency in Backup Mode

As shown in Figure 15c and 15d, if MPTCP is set to Backup Mode,
the backup interface still transfers SYN and FIN packets when a
connection starts and ends. In Figure 16, we show that in certain con-
ﬁgurations, these SYN/FIN packets can consume excessive amounts
of energy on a mobile device. Here, we measure the power level of
the tethered phones using a power monitor [12], when each phone
serves as the backup or non-backup interface. In all sub-ﬁgures of
Figure 16, the base power consumed is 1 Watt. This is the power
consumed when the network interfaces are not active. It is the total
power consumed by the other parts of the phone, such as the screen
and the CPU.

Figure 16a shows the power level of LTE when it is actively
transmitting data, i.e., WiFi is set as a backup interface. Similarly,
Figure 16b shows the power level of WiFi when it is active. We
can see that the WiFi power level is much lower than that of LTE.
Also, in Figure 16a, after the FIN packet is sent, there is a 15-second
period in which the LTE power level stays at 2 Watts, instead of the
1-Watt base power level. The energy consumed in this 15-second
period is called the “Tail Energy” [3, 7].

Figures 16c and 16d show the power level when WiFi or LTE is
set to be the backup interface. In Figure 16d, the energy consumed
by WiFi is negligible. However, in Figure 16c, when a SYN or a FIN
packet is transmitted through LTE, the power level stays high for
about 15 seconds due to the “Tail Energy” effect. Thus, even if only
SYN and FIN packets are transferred through LTE, the LTE interface
still consumes an excessive amount of energy. For ﬂows shorter than
15 seconds, little energy can be saved if the LTE interface is set to
be the backup interface. To actually reduce energy consumption in
this case, fast dormancy [9] should be used to quickly put the LTE
interface in the low-power mode after a SYN and FIN. Alternatively,
the Backup Mode should be implemented in a break-before-make
manner. Prior work [16] has proposed Single-Path Mode, which
establish a new MPTCP subﬂow only after the current subﬂow is
inactive, at the expense of two more round-trip times compared with
the current Backup Mode.

4. MOBILE APP TRAFFIC PATTERNS

So far, our measurements have looked at the ﬂow-level perfor-
mance of TCP over WiFi or LTE, and of MPTCP over both WiFi and
LTE. We next turn to how the choice of networks for a multi-homed
mobile device affects application-level performance as perceived by

Figure 13: CDF of relative difference between MPTCPcoupled and
MPTCPdecoupled, for different ﬂow sizes. The median relative dif-
ference for each ﬂow size: 16% for 10 KBytes, 16% for 100 KBytes
and 34% for 1MByte. Thus, throughput for larger ﬂow sizes is most
affected by the choice of congestion control.

transfers data through LTE. At t = 7, we disable LTE, so no data
can be transferred over that interface. We see that the subﬂow over
WiFi is brought up and transfers data until the ﬂow ends. A similar
behavior is seen in Figure 15f.

In Figures 15g and 15h, we disable one network by unplugging the
USB cable connecting the phone to the laptop instead of disabling
it using iproute. Interestingly, we observe different behaviors in
this experiment. Figure 15h shows that when LTE is set to backup
and we unplug WiFi in the middle of the transfer (at t = 6), the
LTE path is brought up immediately to ﬁnish transferring the rest
of the data. This behavior is similar to when WiFi was disabled
by changing iproute. However, in Figure 15g, when WiFi is
set to backup and we unplug the LTE network in the middle of
the transfer (at t = 3), the client only transfers one TCP Window
Update packet to the server through the WiFi subﬂow and then
halts. At t = 68, we re-connect the phone with the laptop. Then the
connection resumes, transfers the rest of the data through the LTE
subﬂow, and ends the session by sending FIN packets on both path.
The reason why disabling paths by physically disconnecting them
can cause different behaviors from disabling them in software is still
under investigation.

 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)10 KB100 KB1 MB189(a) Full-MPTCP, using LTE for
primary subﬂow.

(b) Full-MPTCP, using WiFi for
primary subﬂow.

(a) LTE power level when used for
non-backup subﬂow.

(b) WiFi power level when used
for non-backup subﬂow.

(c) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.

(d) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.

(e) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.
Then set LTE to “multipath off” at
t = 9 sec.

(f) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.
Then set WiFi to “multipath off” at
t = 11 sec.

(g) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.
Unplug LTE at t = 3 sec. But WiFi
does not continue transferring the
rest of the data. Plug LTE back at
t = 68 sec.

(h) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.
Unplug WiFi at t = 6 sec.

Figure 15: Full-MPTCP and Backup Mode.

a mobile app that uses one or more of these networks. To measure
performance at the level of a mobile app, we ﬁrst record (Section 4.1)
and analyze trafﬁc (Section 4.2) originating from a mobile app, and
then replay it under emulated link conditions (Section 5).
4.1 Record-Replay Tool

Mahimahi [11] is a record-and-replay tool that can record and
replay client-server interactions over HTTP. Mahimahi’s Record-
Shell is a UNIX shell that records HTTP trafﬁc and stores it as
a set of request-response pairs. Later, during replay, Mahimahi’s
ReplayShell—another modiﬁed UNIX shell—matches incoming
requests to stored requests, ignoring time-sensitive ﬁelds in the re-
quest header (eg. If-Modiﬁed-Since) that have likely changed since
recording.

Mahimahi also includes shells to emulate network delays and
ﬁxed-rate and variable-rate network links using packet-delivery

(c) LTE power level when used for
backup subﬂow.

(d) WiFi power level when used
for backup subﬂow.

Figure 16: Power level for LTE and WiFi when used as non-backup
subﬂow. LTE has a much higher power level than WiFi in non-
backup mode. LTE also consumes excessive amount of energy even
in backup mode.

traces. We extend these capabilities and develop a new shell, Mp-
Shell, to emulate multiple links along with their associated link
delays. This allows us to mimic a multi-homed mobile phone that
can use both cellular and WiFi links. We use a trace-driven approach,
as Mahimahi does, to emulate both the cellular and WiFi links.

Because Mahimahi is agnostic to the speciﬁc client or server that
generates the HTTP trafﬁc, we use it to record all HTTP trafﬁc to and
from a mobile app running inside an Android emulator. Later, using
ReplayShell and MpShell, we run the same mobile app within the
Android emulator under appropriately emulated network conditions.
This enables us to evaluate how MPTCP—or any other multipath-
capable transport—affects application performance of a real mobile
app.

4.2 Trafﬁc Patterns of Mobile Apps

Figure 17 shows typical trafﬁc patterns we observed across differ-
ent mobile apps run inside RecordShell. We observe that apps tend
to initiate multiple TCP connections when launched or in response
to a user interaction. Most of these connections only transfer a small
amount of data (eg. connection ID 2 in Figure 17c). Some connec-
tions, such as connection ID 2 in Figure 17a, persist after small data
transfers.

A few connections, such as connection ID 30 in Figure 17d and
connection ID 8 in Figure 17f, transfer signiﬁcant amounts of data,
lasting several seconds. The ﬁrst example (ID 30) occurred when
the user clicked a link to play a movie trailer. The app downloaded
the entire trailer in one HTTP request. The second example (ID 8)
occurred when the user clicked a PDF ﬁle in their Dropbox folder
and the app downloaded the whole ﬁle.

In summary, we can categorize app trafﬁc patterns as short-ﬂow
dominated and long-ﬂow dominated. short-ﬂow dominated apps
have only short connections or long-lived connections with little
data transferred. long-ﬂow dominated apps have one or multiple
long-lasting ﬂows transferring large amounts of data.

5. MOBILE APP REPLAY

We feed the app trafﬁc patterns described in Section 4 into Mahi-
mahi’s ReplayShell for subsequent replay. To accurately emulate
different network conditions, we use the recorded single-path TCP
packet traces on both WiFi and LTE as a proxy for the true packet-

LTE 0 5 10 15 20Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiLTE 0 10 20 30 40 50Time (sec)WiFiLTE 0 5 10 15 20 25 30 35 40 45Time (sec)WiFiLTE 0 5 10 15 20 25 30 35Time (sec)WiFiLTE 0 10 20 30 40 50 60 70 80 90Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYN190(a) CNN launch.

(b) CNN click.

(c) IMDB launch.

(d) IMDB click.

(e) Dropbox launch.

(f) Dropbox click.

Figure 17: Trafﬁc patterns for app launching and user interacting. Figures 17d and 17f show the “long-ﬂow dominated’ trafﬁc pattern, the other
ﬁgures show the “short-ﬂow dominated” pattern.

 0 5 10 15 20 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 5 10 15 20 25 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 2 4 6 8 10 12 14 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 5 10 15 20 25 30 35 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 1 2 3 4 5 6 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 2 4 6 8 10 12 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps191Figure 18: CNN app-response time under different network condi-
tions.

Figure 19: CNN normalized app-response reduction by different
oracle schemes.

delivery trace for WiFi and LTE6. We use these TCP traces to emu-
late the WiFi and LTE links within MpShell. We emulate 20 distinct
network conditions using the WiFi and LTE TCP data previously
collected at 20 locations (Section 3.2).

We present results from replaying two trafﬁc patterns. We refer
to the ﬁrst as the short-ﬂow dominated app where, as shown in
Figure 17a (CNN launch), an app initiates several connections but
only transfers a small amount of data on each connection. We refer
to the second as the long-ﬂow dominated app, where, as shown in
Figure 17f (Dropbox user click), an app initiates several connec-
tions and transfers a large amount of data for a few seconds over a
small subset of the connections. We run each app pattern over the
20 different network conditions (we only show the results from 4
representative conditions due to space limitations). For each network
condition, we emulate 6 conﬁgurations:

1. WiFi-TCP: Single-path TCP running on WiFi.
2. LTE-TCP: Single-path TCP running on LTE.
3. MPTCP-Coupled-WiFi: MPTCP with coupled congestion

control using WiFi for the primary subﬂow.

4. MPTCP-Coupled-LTE: MPTCP with coupled congestion con-

trol using LTE for the primary subﬂow.

5. MPTCP-Decoupled-WiFi: MPTCP with decoupled conges-

tion control using WiFi for the primary subﬂow.

6. MPTCP-Decoupled-LTE: MPTCP with decoupled congestion

control using LTE for the primary subﬂow.

Using tcpdump during the emulation, we collect the timestamp
at the start and end of each HTTP connection. Then we calculate
the app response time: the time between the start of the ﬁrst HTTP
connection and the end of the last HTTP connection7.

5.1 Short-Flow Dominated App Replay

Figure 18 shows the app-response time for the CNN app launching
in different conﬁgurations under different network conditions. For
clarity, we only show the emulation results for 4 representative

6This approach does underestimate the true packet-delivery trace of
the underlying network because TCP takes a ﬁnite duration to reach
the link capacity due to Slow Start.
7This metric doesn’t account for computation time that might be
spent in the app itself after the last HTTP connection ends, but this
is impossible to measure without instrumenting or rewriting existing
applications to report these numbers.

network conditions out of the 20 we emulated; results for other
conditions are similar.

Network Condition IDs 1 and 2 emulate locations where WiFi
has a much higher bulk TCP throughput than LTE, and in Network
Condition IDs 3 and 4, LTE outperforms WiFi. In Figure 18, we
observe that:

1. Selecting the proper network to transmit for single-path TCP
signiﬁcantly affects app-response time. For example, in Net-
work Condition 1, the app response time for WiFi-TCP is 2.7
seconds while LTE-TCP has an app response time of 5.5 sec-
onds, implying that using the proper network for single-path
TCP can reduce the app response time by about 2.0x. For a
network condition in which LTE has better performance, such
as Network Condition ID 4, the app-response times for TCP
over WiFi (shown as “TCP-WiFi” in Figure 18) and TCP over
LTE (shown as “TCP-LTE” in Figure 18) are 7.2 seconds and
2.8 seconds, respectively. In this case, using LTE can reduce
the app response time by 2.6x.

2. Using MPTCP does not provide much improvement for the
short-ﬂow dominated app pattern. For instance, in Network
Condition 1, MPTCP-Coupled-LTE and MPTCP-Decoupled-
LTE have app response times of 5.3 and 4.0, respectively.
Compared to TCP over LTE, these MPTCP schemes only
reduce the app response time by 4% and 15%, much smaller
improvements than the 2x improvement seen when using TCP
over WiFi compared to TCP over LTE.

In summary, Figure 18 shows that the choice of network for the
primary subﬂow has a strong impact on app response time. This
result is consistent with the results we show in Section 3.5.

We also study the extent to which app response times can be
reduced if we had access to an optimal network selection algorithm:
an oracle that knew the right network to use, given a particular
congestion control strategy (coupled vs decoupled) and another
oracle that knew the right congestion control strategy to use given
a particular choice for the network used by the primary subﬂow.
Figure 19 shows the app-response time with different oracle schemes,
averaged across all 20 network conditions and normalized by the
app-response time with single-path TCP over WiFi (the default on
Android today). The oracle schemes are:

1. Single-Path-TCP Oracle: Uses single-path TCP and knows

which network minimizes app response time.

2. Decoupled-MPTCP Oracle: Uses MPTCP decoupled conges-

 0 2 4 6 8 10 1234App Response Time (sec)Network Condition IDWiFi-TCPLTE-TCPMPTCP-Coupled-WiFiMPTCP-Coupled-LTEMPTCP-Decoupled-WiFiMPTCP-Decoupled-LTE 0 0.2 0.4 0.6 0.8 1Normalized App Response TimeWiFi-TCPSingle-Path-TCP OracleDecoupled-MPTCP OracleCoupled-MPTCP OracleMPTCP-WiFi-Primary OracleMPTCP-LTE-Primary Oracle192In Figure 20, Network Condition IDs 1 and 2 emulate places
where WiFi has a much higher TCP throughput than LTE, and Net-
work Condition IDs 3 and 4 represent places where LTE outperforms
WiFi. We observe that:

1. Using MPTCP helps to reduce app response-time. For exam-
ple, at Network Condition 1, when using single-path TCP, the
app response time is 10 seconds for WiFi and 15 seconds for
LTE. When using MPTCP, the app response time is 5 seconds.
2. Selecting the proper network is important: for example, at
Network Condition ID 2, the app response time for MPTCP-
Coupled-WiFi is 8 seconds, but if LTE is used for the primary
ﬂow, response time increases to 14 seconds.

3. Selecting the proper congestion control algorithm also affects
app response time. For example, at Network Condition ID 1,
when using LTE for the primary subﬂow, the app response
time for coupled congestion control is 4 seconds, while the re-
sponse time with decoupled congestion control is 13 seconds.

In Figure 21, we can see that:
1. MPTCP Oracles reduce the app response time by up to 50%,
while the Single-Path-TCP Oracle only reduces app response
time by 42%. So using MPTCP can help improve performance
for “long-ﬂow dominated” apps.

2. For MPTCP Oracles, both selecting the proper network for the
primary ﬂow and selecting the appropriate congestion control
can reduce the normalized app response time by about 50%,
implying that both mechanisms are almost equally beneﬁcial
to “long-ﬂow dominated” apps.

6. RELATED WORK

We discuss related work under two headings: prior work compar-

ing WiFi with cellular network performance and Multi-Path TCP.
6.1 WiFi-Cellular Comparison

Several prior papers compare cellular network performance with
WiFi. Sommers et al. [20] analyzed crowd-sourced data from
SpeedTest.net. Each data sample represents one run of a TCP
upload/download test triggered by a mobile phone user, when the
phone is connected to the Internet through either WiFi or a cellular
network. We also collect our data in a crowd-sourced manner. How-
ever, our mobile app, Cell vs WiFi, measures both WiFi and cellular
network performance on the same device at (almost) the same time.
Thus, our dataset reﬂects the performance difference observed from
a single device at almost the same time. Deshpande et al. [8] mea-
sured both 3G and WiFi performance simultaneously using a single
device, but their measurement was focused on a vehicular setting
and they only measured 3G, not LTE. Our dataset focuses on LTE
measurements instead. In our app, we used an activity-recognition
API provided by Google [1], which shows that most of our measure-
ments happen when users are still. Moreover, our data is collected
in a crowd-sourced manner, allowing it to capture a wide diversity
of conditions.
6.2 Multi-Path TCP

Multipath TCP (MPTCP) [21], and its recent implementation
in iOS 7 [13] allow a single TCP connection to use multiple paths.
MPTCP provides TCP’s reliable, in-order bytestream abstraction
while taking advantage of multiple paths for increased through-
put and fault tolerance. Previous work has looked at MPTCP in a
mobile context: Raiciu et al. studied mobility with MPTCP [19].
Pluntke et al. designed a scheduler that picks radio interfaces with
a view to reduce mobile energy consumption [18]. Paasch et al.
proposed different MPTCP modes to be used by mobile devices
for Mobile/WiFi handover [16]. Barlow-Bignell et al. [4] studied
MPTCP performance in the presence of WiFi interference where

Figure 20: Dropbox app-response time under different network
conditions.

Figure 21: Dropbox normalized app-response reduction by different
oracle schemes.

tion control and knows which network to use for the primary
subﬂow to minimize app response time.

3. Coupled-MPTCP Oracle: Uses MPTCP coupled congestion
control and knows which network to use for the primary sub-
ﬂow to minimize app response time.

4. MPTCP-WiFi-Primary Oracle: Uses MPTCP with WiFi for
primary subﬂow and knows which congestion-control algo-
rithm to use to minimize app response time.

5. MPTCP-LTE-Primary Oracle: Uses MPTCP with LTE for pri-
mary subﬂow and knows which congestion-control algorithm
to use to minimize app response time.

We can see in Figure 19 that the 50% reduction in app response
time with Single-Path-TCP Oracle is the most substantial, while
the reductions with the MPTCP Oracles range from 15% to 35%.
This suggests that MPTCP does not reduce app response time as
signiﬁcantly as selecting the right network for single-path TCP does.

5.2 Long-ﬂow Dominated App Replay

Figures 20 and 21 show emulation results for the long-ﬂow dom-
inated trafﬁc pattern, using the same data analysis methods and
oracles as used in the previous subsection.

010203040 1234App Response Time (sec)Network Condition IDWiFi-TCPLTE-TCPMPTCP-Coupled-WiFiMPTCP-Coupled-LTEMPTCP-Decoupled-WiFiMPTCP-Decoupled-LTE 0 0.2 0.4 0.6 0.8 1Normalized App Response TimeWiFi-TCPSingle-Path-TCP OracleDecoupled-MPTCP OracleCoupled-MPTCP OracleMPTCP-WiFi-Primary OracleMPTCP-LTE-Primary Oracle193multiple devices connected to the same AP could interfere with each
other if they transmitted packets simultaneously. Closest to our work
is the work of Chen et al., who measured MPTCP performance over
cellular networks and WiFi [6]. Their measurement focuses on using
different number of subﬂows, and ﬁne-grained statistics, such as
out-of-order delivery and round trip times. Instead, our focus is on
studying the choice of networks for the primary subﬂow, the choice
of congestion-control modes, MPTCP’s energy consumption, and
MPTCP’s effect on higher-level metrics such as ﬂow completion
times and app-response times.
7. CONCLUSION AND FUTURE WORK

We presented a measurement study of single-path TCP and MPTCP
over LTE and WiFi networks. For single-path TCP, we found that
LTE outperforms WiFi 40% of the time – a higher fraction than
one might expect at ﬁrst sight. We also ﬁnd that MPTCP offers no
appreciable beneﬁt over TCP for shorter ﬂows, but it does improve
performance for longer ﬂows. For MPTCP, we found that, especially
for short ﬂows, it is crucial to select the correct network for the
primary subﬂow. For long ﬂows, it is equally important to select the
proper congestion control algorithm. To understand how TCP and
MPTCP over LTE and WiFi can affect mobile app performance, we
analyzed mobile apps’ trafﬁc patterns and categorized apps as either
short-ﬂow dominated or long-ﬂow dominated. For each category, we
emulated app trafﬁc patterns and the results we observed match our
MPTCP measurement ﬁndings.

Our ﬁndings also bring up new research questions: how can we
automatically decide when to use single path TCP and when to use
MPTCP? How should we decide which network to use for TCP, or
which network to use for a subﬂow with MPTCP? We think these are
non-trivial questions due to the high mobility of devices and rapidly-
changing network conditions. Also, with energy consumption being
a major concern for mobile devices, how can we make the decisions
when trying to minimize energy consumption? We plan to explore
each of these future directions.
8. ACKNOWLEDGMENTS

We are grateful to the IMC reviewers, and our shepherd, Dr. Ar-
naud Legout in particular, for many helpful comments. We thank
Katrina LaCurts, Lenin Ravindranath, and Amy Ousterhout for their
thoughtful suggestions. This work was also supported in part by
NSF grants 1407470 and 1161964. We also thank the members
of the MIT Center for Wireless Networks and Mobile Computing
(Wireless@MIT), including Amazon.com, Cisco, Google, Intel, Me-
diatek, Microsoft, ST Microelectronics, and Telefonica, for their
support.
REFERENCES
[1] Recognizing the user’s current activity.

http://

developer.android.com/training/location/
activity-recognition.html.

[2] Android telephony manager api. http://developer.

android.com/reference/android/telephony/
TelephonyManager.html.

[3] N. Balasubramanian, A. Balasubramanian, and A. Venkatara-
mani. Energy consumption in mobile phones: a measurement
study and implications for network applications. In IMC, 2009.
J. Barlow-Bignell, C. da Silva, J. Gjengset, and P. Oliha. Wire-
less interference and multipath tcpreducing 3g energy con-
sumption on mobile devices, 2013.

[4]

[5] S. Barré, C. Paasch, and O. Bonaventure. Multipath tcp: from
theory to practice. In NETWORKING 2011, pages 444–457.
Springer, 2011.

[6] Y.-C. Chen, Y. Lim, R. J. Gibbens, E. M. Nahum, R. Khalili,
and D. Towsley. A measurement-based study of multipath tcp
performance over wireless networks. In IMC, 2013.

[7] S. Deng and H. Balakrishnan. Trafﬁc-aware techniques to
reduce 3g/lte wireless energy consumption. In Proceedings
of the 8th international conference on Emerging networking
experiments and technologies, pages 181–192. ACM, 2012.

[8] P. Deshpande, X. Hou, and S. R. Das. Performance compar-
ison of 3g and metro-scale wiﬁ for vehicular network access.
In Proceedings of the 10th ACM SIGCOMM conference on
Internet measurement, pages 301–307. ACM, 2010.

[9] UE "Fast Dormancy" behavior, 2007. 3GPP discussion and

decision notes R2-075251.

[10] R. Khalili, N. Gast, M. Popovic, U. Upadhyay, and J.-Y.
Le Boudec. Mptcp is not pareto-optimal: performance issues
and a possible solution. In CoNEXT, 2012.

[11] Mahimahi. http://mahimahi.mit.edu.
[12] Monsoon power monitor.

http://www.msoon.com/

LabEquipment/PowerMonitor/.

[13] Apple ios 7 surprises as ﬁrst with new multipath tcp connec-
tions. http://www.networkworld.com/news/2013/091913-ios7-
multipath-273995.html.

[14] Multipath

linux
http://www.multipath-tcp.org/.

tcp

-

kernel

implementation.

[15] S. Nirjon, A. Nicoara, C.-H. Hsu, J. Singh, and J. Stankovic.
MultiNets: Policy Oriented Real-Time Switching of Wireless
Interfaces on Mobile Devices. In RTAS, 2012.

[16] C. Paasch, G. Detal, F. Duchene, C. Raiciu, and O. Bonaven-
ture. Exploring mobile/wiﬁ handover with multipath tcp. In
CellNet, 2012.

[17] C. E. Perkins. Mobile ip. Communications Magazine, IEEE,

1997.

[18] C. Pluntke, L. Eggert, and N. Kiukkonen. Saving mobile device

energy with multipath tcp. In MobiArch, 2011.

[19] C. Raiciu, D. Niculescu, M. Bagnulo, and M. J. Handley. Op-

[20]

portunistic mobility with multipath tcp. In MobiArch, 2011.
J. Sommers and P. Barford. Cell vs. wiﬁ: on the performance
of metro area mobile connections. In IMC, 2012.

[21] D. Wischik, C. Raiciu, A. Greenhalgh, and M. Handley. De-
sign, implementation and evaluation of congestion control for
multipath tcp. In NSDI, 2011.

[22] X. Zhao, C. Castelluccia, and M. Baker. Flexible network

support for mobility. In MobiCom, 1998.

194