MEMS Gyroscopes as Physical Unclonable Functions

Oliver Willers,

Christopher Huth
Research and Advance

Engineering

Robert Bosch GmbH
Stuttgart, Germany
{Oliver.Willers,

Christopher.Huth}
@de.bosch.com

Jorge Guajardo

Research and Technology

Center

Robert Bosch LLC
Pittsburgh, USA

Jorge.GuajardoMerchan

@bosch.com

Helmut Seidel

Chair of Micromechanics,
Microﬂuidics/Microactuators

Saarland University

Saarbrücken, Germany
seidel@lmm.uni-

saarland.de

ABSTRACT
A key requirement for most security solutions is to provide
secure cryptographic key storage in a way that will easily
scale in the age of the Internet of Things. In this paper, we
focus on providing such a solution based on Physical Unclon-
able Functions (PUFs). To this end, we focus on microelec-
tromechanical systems (MEMS)-based gyroscopes and show
via wafer-level measurements and simulations, that it is fea-
sible to use the physical and electrical properties of these
sensors for cryptographic key generation. After identifying
the most promising features, we propose a novel quantiza-
tion scheme to extract bit strings from the MEMS analog
measurements. We provide upper and lower bounds for the
minimum entropy of the derived bit strings and fully analyze
the intra- and inter-class distributions across the operation
range of the MEMS device. We complement these mea-
surements via Monte-Carlo simulations based on the distri-
butions of the parameters measured on actual devices. We
also propose and evaluate a complete cryptographic key gen-
eration chain based on fuzzy extractors. We derive a full en-
tropy 128-bit key using the obtained min-entropy estimates,
requiring 1219 bits of helper data with an (authentication)
failure probability of 4 · 10−7.
In addition, we propose a
dedicated MEMS-PUF design, which is superior to our mea-
sured sensor, in terms of chip area, quality and quantity of
key seed features.

Keywords
Hardware security; IoT security; Mobile security and privacy

1.

INTRODUCTION

In 1991, Mark Weisser [1] set out the vision of ubiqui-
tous computation, which promised to make our interaction
with things to be seemless. Today, this vision has already
started to become reality through modern technologies that

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978295

allow for electronic systems to be embedded practically ev-
erywhere with applications ranging from smart homes, to
connected vehicles and smart factories. More speciﬁcally,
ubiquitous computation has been made tangible in the con-
cept of the Internet of Things (IoT), which by some esti-
mates is expected to surpass 50 billion devices by 2020 [2].
Regardless of the exact numbers, it is widely acknowledged
that to make the IoT a success the security of this super
large distributed systems will have to be guaranteed and
the privacy of the collected data protected.

The Internet of Things, made possible through the wide
deployment of embedded devices, diﬀers signiﬁcantly from
”classical” systems, such as desktop (networked) PCs, in var-
ious aspects, which include: severe computational, memory,
and power constraints, lack of advanced user interfaces, an
increased vulnerability with respect to physical or network
attacks, and as mentioned previously, their tendency to col-
lect potentially highly privacy sensitive data. Until recently,
there has been an inclination to assume the inability to pro-
vide strong hardware security guarantees. However, this is
starting to change with new device architectures such as
those presented in [3, 4, 5], which aim to provide more fun-
damental security properties for embedded devices. In this
paper, we continued this line of work and we focus our at-
tention on an even more constrained type of device, MEMS-
based sensor devices, which are widely deployed today in
smart phones, automotive applications (e.g., crash detec-
tion, airbag deployment), environmental condition assess-
ment, pressure measurements, etc. and for which security
solutions have been until now overlooked.

As a starting point in the study security for MEMS sen-
sors, we look at how to provide secure cryptographic key
storage in such devices in a cheap and intrinsic manner,
as keeping cryptographic keys secure is the basis for many
higher level security mechanisms such as attestation, secure
boot as well as any other cryptographic operation which
might require a secret or private key (e.g., encryption, sig-
natures, message authentication generation, etc.).
In par-
ticular, we look at the feasibility of creating a Physical Un-
clonable Function based on the physical properties of MEMS
devices themselves. PUFs have received a lot of attention
(see e.g., [6, 7, 8, 9, 10]) as a technology for secure key stor-
age. One of PUF’s main advantages is that the device does
not need to store secrets in non-volatile memory but rather
it can generate the cryptographic key whenever it needs to

591process secrets and destroys it afterward, making the job of
an attacker with physical access to the device more diﬃcult1.
While the possibility of deriving a ﬁngerprint from MEMS-
based devices has been explored in previous work[14], the
feasibility of deriving a cryptographic key from MEMS char-
acteristics is a more challenging undertaking and to the best
of our knowledge, we are the ﬁrst to propose such a design.
As with many PUFs, a MEMS-based PUF has the following
requirements: the cryptographic key should be unique per
device (similar to a ﬁngerprint), (ii) the cryptographic key
should be reproducible across the whole range of environ-
mental conditions for which the device is designed, (iii) the
cryptographic key should be hard to replicate even for the
manufacturer of the device, (iv) the PUF properties should
be hard to model and therefore a mathematical model that
predicts the PUF responses should be infeasible to obtain,
and (v) it is desirable that the particular PUF has tamper
resistance or tamper evidence properties. In this paper2, we
show that MEMS gyroscopes can be used to this end and,
moreover, we show via experimental evidence on actual de-
vices and simulations that requirements (i)-(iv) are met by
our design. Furthermore, we present and simulate a fully
functional MEMS device speciﬁcally designed for PUF ap-
plications, which has smaller size than other gyroscopes and
has more variation (allowing for the derivation of more full
entropy bits). In short, our contributions are as follows:

• Physical Modelling: In contrast to previous work,
which use the response of MEMS accelerometers and
derive signal processing features suitable for identiﬁ-
cation, we identify suitable properties (mechanical and
electrical) of the MEMS gyroscopes and show that they
can be used to derive a robust bit string suitable for
cryptographic key generation,
• Key Derivation: We propose a quantization method
to derive binary keys from analog sensor data inspired
by a method described by Chang et al. [15]. Then,
we analyze via multiple methods the amount of en-
tropy that such binary strings carry. We also include
min-entropy estimations, which are more conservative
than state-of-the-art entropy estimations3. We pro-
vide several helper data [16, 17] parameters for robust
key extraction across a temperature range of 65 ◦C,
with probabilities of failure less than 10−6. We also
give a speciﬁc fuzzy extractor construction to create a
uniformly distributed random 128-bit key.
• Uniqueness and Robustness: We analyze the intra-
and inter-class distributions induced by our key deriva-
tion procedure from 70 diﬀerent physical MEMS sen-
sors and verify the behavior of such distributions via
Monte-Carlo simulations of the MEMS behavior using
variability parameters measured on physical MEMS
sensors. This analysis includes the variability due to
repeated measurements and environmental conditions,
most prominantly, temperature.

1The fact that memory is susceptible to invasive attacks has
been demonstrated in [11, 12, 13].
2Full version of the paper: https://eprint.iacr.org/2016/261
3In the PUF literature, it is standard to use the Context
Tree Weighing (CTW) compression algorithm to estimate
entropy of the PUF responses. We use CTW as an upper
bound on the entropy of the MEMS-PUF responses but use
the more conservative min-entropy estimations provided by
the NIST tests for our ﬁnal helper data sizes.

• Optimized MEMS for PUF Applications: We
present a completely new MEMS design, which has
been optimized to increase variability and thus, the
ability to create unique/robust keys
1.1 Organization of the Paper

We begin by providing basic background on MEMS tech-
nology and explaining features of MEMS gyroscopes, their
potential for PUFs and causes of variations in Section 2. In
Section 3, we show how a MEMS-PUF should be included
in a package, to withstand probing attacks. We then explain
our requirements for robustness and uniqueness in Section 4,
how we quantize the features, how our measurements are set
up and the results for the most promising parameters. From
the learned insights, we then can simulate additional devices
in Section 5. This allows to verify that the simulations are
consistent with the measured data. In Section 6, we provide
upper and lower bounds for the min-entropy of the MEMS-
PUF responses for both measured and simulated data. In
Section 7, we describe the last step in the key generation pro-
cess, namely, information reconciliation via error correcting
codes and randomness extraction. Note that our construc-
tions tend to require less public helper data (measured in
bits) than recently published fuzzy extractor schemes, in
spite of our constructions based on very conservative min-
entropy estimations. We propose a dedicated MEMS-PUF
design in Section 8. We conclude this article in Section 9.

2. MEMS BACKGROUND

MEMS sensors are silicon based devices which combine
a microcontroller with a microelectromechanical structure
used to measure a variety of diﬀerent physical quantities
ranging from acceleration and yaw rate to magnetic ﬁelds,
pressure, humidity, etc. In this work, we focus on MEMS
gyroscopes which have a very complex structure providing a
large number of mechanical as well as electrical properties.
MEMS gyroscopes are sensors for measuring the yaw rate
and they typically consist of a combination of one or several
oscillating spring-mass systems.

The detecting axis depends on the moving direction of an
oscillating mass. Hence, one oscillating spring-mass system
typically exists for each detecting axis. This means that the
number of diﬀerent spring-mass systems depends basically
on the number of sensitive axis. In this work, an experimen-
tal 3-channel gyroscope design manufactured with standard
MEMS fabrication processes was investigated. For further
background on gyroscopes and fabrication processes we refer
the reader to [18, 19].
2.1 MEMS Parameters

MEMS sensors oﬀer many measurable mechanical as well
as electrical parameters depending on the sensor type, which
can be used to derive a suitable unique identiﬁer and, after
some processing, a secure cryptographic key.
In the case
of MEMS gyroscopes, fundamental mechanical parameters
include the diﬀerent resonant frequencies of the microelec-
tromechanical structure. Because of the high complexity of
the structure, a large number of frequency modes exist. An-
other interesting mechanical parameter are the quadrature
signals that are a measure for the asymmetries of the sensor
structure. As the manufacturing process is subjected to vari-
ations, the actual physical structures, i.e., springs, masses

592and electrode gaps, diﬀer slightly from the ideal case by dif-
ferent types of asymmetries. This results in a deﬂection of
the moving directions and produces an error signal called
the quadrature signal - which can be detected by electrodes
in a capacitive manner. Furthemore, an important feature
are the quality factors. However, we do not describe them in
detail because they have not been proven to be suitable as
PUF parameter in our evaluation. Additionally, there are a
lot of electrical parameters. These are the capacitances and
resistances that are induced between the diﬀerent electrodes
which are needed for driving and measuring the sensor.
2.2 Causes for Parameter Variability

Although, it is diﬃcult to determine all factors for the
variability of the MEMS parameters, several of them are
well-known and understood.
In what follows, we provide
a short overview of these factors and explain their impact
on parameter variation. A main factor are the geometric
dimensions (width and thickness of the structures) that vary
in a small range caused by the nature of the etching process.
This includes a variation of the beam width of the springs
which changes the spring rigidity. This, in turn, leads to
a shift of the resonant frequencies.
In addition, it aﬀects
the electrical parameters as well because it changes the gaps
between the electrodes and the eﬀective area of electrodes.
As mentioned previously, asymmetries cause slight vari-
ations of the behavior from the ideal case generating the
quadrature signal. These asymmetries have four sources:

• A diﬀerence of the side wall angles, causing a diﬀerent
deviation from the rectangular beam geometry of side
walls that results in an out-of-plane force component.
• A local variation of the structure width that aﬀects the
• An imbalance of the inertial masses.
• The inﬂuence of mechanical stress caused by packag-
ing, temperature and bending of the Printed Circuit
Board (PCB) after soldering.

rigidities of the springs slightly diﬀerent.

Note that MEMS sensors are actually designed and man-
ufactured with the objective of minimal parameter varia-
tions. In principle, an ampliﬁcation of the variation is easy
to achieve and this is likely to result in an increase in the
number of bits extracted from a particular parameter. This
could be used for the creation of a dedicated MEMS struc-
ture to increase signiﬁcantly the number of derivable bits.
3. MEMS-BASED PUF

MEMS sensors have an unique ﬁngerprint based on in-
herent variability in silicon manufacturing processes. Since
MEMS sensors are present in numerous applications, adding
secure key storage capabilities would provide an additional
value, making them enhanced sensors. This means there
would be no need for additional devices solely for the pur-
pose of key storage. Furthermore, considering resilience to
diﬀerent kinds of attacks, MEMS-PUFs oﬀer several advan-
tages. MEMS sensors are very complex entities with many
very diﬀerent features and the behavior is hard to model.
Considering invasive attacks, a read-out is expected to be
diﬃcult, or in some cases even infeasible. The reason for this
is that tampering with a MEMS or even with the mold pack-
age changes the properties of the MEMS and thus the key,
e.g., by changing the stress conditions inserted by the pack-
aging process or by changing the internal pressure. Hence,

Figure 1: Schematic composite of MEMS sensor and
ASIC in a system in package (SIP).

MEMS could provide a tamper-proof PUF without any over-
head which was identiﬁed as a major future research topic
in [20].

Fig. 1 shows schematically an usual example for a system
in package with a MEMS sensor and an ASIC that are en-
cased by a mold package. MEMS and ASIC are placed on
the same level, connected by wire bonds and placed on a
PCB substrate with a Ball Grid Array for the electrical con-
tacts to the environment. Alternatively, MEMS and ASIC
could also be stacked vertically and connected by through-
silicon vias [19]. This would make it infeasible to tap the
wires between the MEMS and the ASIC. For high secu-
rity applications, it is recommended to carry out all security
relevant operations for authentication or encryption on the
ASIC. In this case, the secret key would never leave the
package in order to make it infeasible for an attacker to get
access to security-critical information.

On the basis of the above-mentioned assumptions, such a
system would possess similar security properties as a hard-
ware security module (HSM) [21] or a trusted platform mod-
ule (TPM) [22]. This could also be further enhanced by the
development, e.g., of speciﬁc package concepts, increasing
system’s security. Moreover, new MEMS concepts could be
designed for the use as dedicated PUFs only.

4. SUITABLE FEATURES

In order to identify suitable features for the use as a PUF,
we should identify the requirements that a feature has to
fulﬁll. These can be derived in principle from the PUF def-
inition.

• Uniqueness. Based on the used parameters, it must
be possible to identify the device uniquely. Measured
variability of the used parameters has to be inherent in
the system. The particular value of a parameter must
not be controllable even by the manufacturer in order
for copying attacks to become infeasible.
• Robustness. The parameters should be stable even
when aﬀected by diﬀerent environmental conditions,
i.e., temperature, humidity, aging.

• High Bit Entropy.

In case of using several parame-
ters to derive the ﬁnal response, it is desirable that
the correlation among the parameters be as small as
possible4. This is important because, the stronger pa-
rameters correlate, the less entropy they oﬀer for the
extracted cryptographic key.
4.1 Quantization Scheme

The generation of a binary key from the measured values
requires a quantization procedure beforehand. The general
problem of converting such analog measured values into bi-
nary strings is also known in the ﬁeld of biometrics. Thus,
4In the optimal case, the parameters should be independent
of each other.

MEMSASICMoldPackage593Figure 2: Quantization scheme for one parameter.

a procedure is developed that is inspired by a method de-
scribed by Chang et al. [15]. There, the authors proposed a
procedure for cryptographic key generation from biometric
features and veriﬁed it, as it applies to human face recogni-
tion. The modiﬁed procedure used in this work is explained
below. Fig. 2 shows an example for the quantization scheme
for a Gaussian distributed parameter.

The basic factors for this procedure are the mean value µ,
the standard deviation σglobal of the global distribution of a
parameter calculated from all devices and the local variation
V (cid:48) which can be interpreted as the robustness of a parameter
aﬀected by temperature and measurement noise. Ideally, the
cumulative distribution function for a normal distribution
with mean µ and deviation σglobal is given by Equation (1).
The global distribution is divided into several ranges Ai
with an equal probability of occurence until the whole distri-
bution is covered with a very high probability (6− σ). Each
range has a left bound Ai,l and a right bound Ai,r. Initially,
the width of the ranges A1 to the left and right of the global
mean value µ are deﬁned based on the value for V (cid:48). After-
wards, additional ranges A2, . . . An are determined so that
each range occurs with the same probability, Equation (2).

(cid:90) x

1
σglobal

√
2π

F (x) =

dt
F (Ai,r) − F (Ai,l) = F (Ai+1,r) − F (Ai+1,l)

−∞

σglobal

− 1
2 (

e

t−µ

)2

(1)

(2)

A bit combination is assigned to each range. The number
of bits that can be derived from a parameter in this way can
be calculated by log2(2 × n). This procedure is carried out
for all parameters and the key parts are concatenated to the
cryptographic key seed.
4.2 Experimental Setup

We measured the sensors directly on the silicon wafer
(wafer-level) with laboratory equipment using an electrical
measurement method. The mechanical parameters were de-
termined in a way that is described comprehensively in [23]
by measuring the ground current (ﬂowing through the mov-
able masses) using an impedance analyzer 4294A by Agilent
Technologies. The resistances and capacitances were mea-
sured with the impedance analyzer as well. We used the
probe station PA 200 by S¨uss Micro Tec which enables to
measure a large number of sensors on wafer-level fully auto-
mated and the setting of temperature by a heatable chuck.
Furthermore, the test equipment consists of a multiplexer
probe card for driving and measuring on the diﬀerent elec-

Figure 3: Percentage distribution of correlation co-
eﬃents ρ between the used parameters.

tordes. For contacting the sensor pads, a device with several
contact probes is mounted on the probe card.

The device under investigation was a 3-axis gyroscope ex-
perimental design. We measured all parameters that are
mentioned in Section 2.1 for each channel. As a result we
had a large number of parameters for each of the 70 sensors
under test. For each sensor, we repeated the measurements
at least 20 times at room temperature (RT) and at 85 ◦C to
determine the repeatability of the measurements. The mea-
surements at 85 ◦C had as main aim to verify the robustness
of the parameters at higher temperature.
4.3 Parameter Measurement Results

As a result of the repeated measurements and the temper-
ature variation, we can describe the parameter robustness as
a combination of a Gaussian distributed factor fnoise which
is based on measurement noise and a temperature depen-
dent shift factor fshif t. Thus, the local variation V (cid:48) of a
parameter can be estimated from a measured value V and
this two factors in the following way:

(cid:48)

V

(T ) = fnoiseV + fshif t(T )

(3)

Hence, the maximum local variation V (cid:48)
max occurs in case of
the maximum temperature range (from RT to 85 ◦C) and
an additive eﬀect of the factors fnoise and fshif t.
Initially, we identify basic suitable parameters regarding
the ratio τ of the maximum local variation V (cid:48)
max to the
global variation σglobal for each parameter. The ratio τ =
V (cid:48)
max/σglobal should be signiﬁcantly smaller than 1 and it
determines the number of bits that can be derived from a
parameter in a robust manner.

As mentioned above (Section 2.2), major inﬂuence factors
on the parameter variability on diﬀerent sensors are the vari-
ation of the geometric dimensions. Especially, the edge loss
which depends essentially on the position of the sensor on
the wafer plays a major role. For this reason, some of the
parameters are strongly correlated with this factor. Because
many measurement variables depend on them in a similar
way, an appropriate measure to reduce this dependency is to
calculate ratios. Thus, other eﬀects become more important
such as small local diﬀerences on a sensor in the widths of
the springs, for example.

Regarding the frequency modes, the use of ratios provides
an additional advantage. The frequency modes are shift-
ing with temperature due to the temperature dependence
of the Young’s modulus. Thus, all frequency modes them-
selves vary about temperature with an approximately con-

101100001000011010110111A1A1A2A2A3A3AnAn……global distributionofa parameter (global)6-sigma-6-sigma0 < ρ < .1418%.14 < ρ < .2821%.28 < ρ < .4214%.42 < ρ < .5710%.57 < ρ < .718%.71 < ρ < .8510%.85 < ρ < 119%594Table 1: Dependence of the number of derivable bits
on the correlation upper limit ρmax.

ρmax
bits

.50
30

.62
30

.74
38

.86
63

.98
138

stant factor. Hence, the the temperature inﬂuence can be
signiﬁcantly reduced by calculating ratios.

As a ﬁrst result of the measurements, we can deﬁne the
following parameters as potentially appropriate (in brackets
is the number of diﬀerent parameters of a particular type):

• frequency modes (9),
• capacitances (6),
• quadrature signals (2).

Whereby, the τ -values are in a range smaller than 0.1 for
the ratios of frequency modes and the quadrature signals
and they increase up to 0.57 for the ratios of capacitances
that is mainly caused by their relatively low σglobal-values.
In terms of cryptographic key generation, the consider-
ation of the correlation between the parameters is of fun-
damental importance. Especially due to the fact that we
calculate all possible ratios of the frequency modes and the
capacitances, there is some correlation between the param-
eters. Thus, we determine the correlations between all suit-
able parameters.
The correlation coeﬃcient RX,Y between two parameters X
and Y with N measurement values is calculated by equa-

(cid:18)Cov(X, X) Cov(X, Y )

(cid:19)

tion (4), whereas C =

Cov(Y, X) Cov(Y, Y )

is the co-

variance matrix. The covariance Cov(X, Y ) of X and Y is
given by Equation (5).

RX,Y =

Cov(X, Y ) =

CX,Y

(cid:112)CX,X CY,Y
N(cid:88)

1

N − 1

i=1

(Xi − µX )(Yi − µY )

(4)

(5)

Fig. 3 shows the percentage distribution of correlation co-
eﬃcients ρ between the used parameters. The stronger the
parameters correlate, the less entropy they add to the key.
For this reason we deﬁne an upper limit ρmax for the cor-
relation coeﬃcients that we accept. Parameters that are
stronger correlated than this upper limit were rejected.
The choice of this limit aﬀects the number of bits that can
be derived in total. Table 1 shows the dependence of the
number of bits on ρmax. To analyze the eﬀect of ρmax, we
vary them in steps and estimate the entropy of the extracted
keys by diﬀerent methods (see Section 6).

5. SIMULATING PUF RESPONSES

In order to generate an arbitrarily number of keys we make
Monte-Carlo simulations. Based on this, we are able to gen-
erate keys from both diﬀerent sensors and the key from a
single sensor multiple times.
5.1 PUF Responses from Different Sensors

The simulation of PUF responses from diﬀerent sensors
allows us to test if the results of the entropy estimation are
aﬀected from the limited length of our measured bit streams.
For the simulation we assume that all of the parameters are
Gaussian distributed. Then, we have to consider the mean

Table 2: BRRmax for diﬀerent values of ρmax with the
associated probabilities P (BRR > BRRmax).
BRRmax

BRRmax

P

P

P

ρmax BRRmax
.50
.62
.74
.86
.98

9
9
10
11
19

3.19e-6
1.26e-6
9.05e-7
8.83e-7
3.44e-6

10
10
11
12
20

4.18e-7
1.48e-7
1.18e-7
1.29e-7
9.39e-7

11
11
12
13
21

5.02e-8
1.61e-8
1.42e-8
1.74e-8
2.45e-7

value µ and the standard deviation σglobal of the global dis-
tribution of the parameters and the correlation matrix R
that contains the correlation coeﬃcients between all param-
eters determined by our measurements. The procedure is as
follows:

• generation of a normally distributed random number
matrix Z with dimensions (number of keys i, number
of parameters j)

• Cholesky decomposition of the correlation matrix
• multiplying matrix Z with G to receive the normally
distributed random number matrix ZR considering the
correlations of R ZR = ZG
• generation of matrix PM C (i, j) with parameter values

R = GGT

PM C (i, j) = µ(j) + σglobal(j)ZR(i, j)

5.2 Maximal Bit Error Rate Estimation

The estimation of a maximal Bit Error Rate (BRRmax)
is of great signiﬁcance. The BRR denotes the diﬀerence be-
tween two keys of the same device generated at diﬀerent
times or environmental conditions (e.g., diﬀerent tempera-
tures) and it is also known as the intra distance which is a
measure for the robustness of a key. The BRR should be
preferably 0, however, due to the noisy nature of physical
measurements, this is not always achieved in practice.

Because of PUF variability across diﬀerent environmental
conditions and measuring inaccuracy, when a PUF is chal-
lenged a noisy response is obtained. In applications where
the PUF response is used as a cryptographic key a noisy re-
sponse is not acceptable. To solve this problem, algorithms
known as fuzzy extractors leverage non-secret helper data
to work around the noisy nature of physical measurements
typical of PUF applications (see Section 7). However, such
a bit error correction results in an entropy loss and means
a reduced key length. The amount of reduction depends on
the number of bit-ﬂips that have to be corrected. This has
to be assessed by the BRRmax estimation.

In order to be able to estimate the robustness of a param-
eter, we repeated our measurements multiple times and at
85 ◦C. As we can describe the variability by Equation (3), we
carry out a Monte-Carlo simulation to determine the prob-
abilities for dedicated bit error rates. Therefore, we create
a normally distributed random number matrix Z with di-
mensions (number of keys i, number of parameters j) to
receive the local variation of the parameters for a device
V (cid:48)(i, j)(T ) = fnoiseZ(j)V (i, j) + fshif t(j)(T ).

We estimate the BRRmax for diﬀerent values of ρmax with
the associated probabilities P (BRR > BRRmax) for a BRR
above BRRmax. The probabilities are calculated from a
Poisson distribution ﬁt (see Fig. 4). The results are pre-
sented in Table 2. The values of each row are based on
10,000 keys created by the Monte-Carlo simulation.

595(a) ρmax = .62.

(b) ρmax = .74.

(c) ρmax = .86.

Figure 4: Inter and intra Hamming distance distributions of measured data.

6. ENTROPY ESTIMATION

An important aspect PUFs should show, besides robust-
ness, is randomness. This means that given all responses
from all PUF devices, an attacker should have a negligible
chance of estimating a future response of a PUF. Also the
bits in a response should be random and unpredictable, so
that chances for two responses from two diﬀerent PUFs to
be ”close” are negligible small. In order to assess the ran-
domness of our PUF design, we use the following methods:

Inter and Intra Hamming Distances.

To evaluate the potential of physical properties for PUF
applications, the ability to uniquely identify each instance
is essential. This can be formally deﬁned by the concept
of inter and intra Hamming distances. The inter distance
HDinter depicts the diﬀerence between two keys of diﬀerent
sensors and it is a measure for key uniqueness. The intra
distance HDintra denotes the diﬀerence between two keys
of the same sensor generated at diﬀerent times or environ-
mental conditions (e.g., diﬀerent temperatures). The intra
distance is a measure for the robustness of a key and deter-
mines directly the number of bit-ﬂips. An ideal PUF yields
a HDintra = 0% and HDinter = 50%.

CTW Compression.

We try to compress our responses with CTW, a lossless
compression algorithm [24, 25, 26]. This method is optimal
for stationary ergodic sources and gives an optimal compres-
sion. The resulting compression on bit strings is often used
to estimate the entropy rate [27]. The idea is that bit se-
quences with full entropy cannot be compressed, meaning
if a lossless compression is possible, then our responses do
not have full entropy. Thus, CTW gives an upper bound on
entropy.

NIST Randomness Test.

We test the PUF responses with the NIST randomness
test suite [28]. Upon passing these tests this would indicate
full entropy with high probability. We conﬁgured each test
in NIST SP800-22 in the same manner as in [29], meaning
the signiﬁcance level of each test is set to 1%, so that 99%
of the test samples pass if the input was truly random. Let
the number of samples be n and the probability of passing
each test is p, then the number of passing samples follow

is then deﬁned as p(cid:48) = p ± 3(cid:112)p(1 − p)/n. Also the NIST

a binomial distribution. The value p(cid:48) of observed passings

tests yield a P-value, generated by a χ2 test, which indicates
randomness on an uniformly distributed assumption if the
P-value is ≥ 0.0001.
In order to pass a NIST test both
conditions must be fulﬁlled – the proportion of passed tests
should exceed the threshold deﬁned above and the P-value
should be above 0.0001.

NIST Min-Entropy Estimation.

Since CTW only gives us an upper bound on entropy and
the NIST randomness test suite yield test results for full
entropy or not, we try to estimate the min-entropy with
tests mentioned in NIST’s special publication 800-90B [30],
indicating a lower bound of entropy for our purposes.

Our source is not independent and identically distributed
(non-IID), because we have seen so far in the previous sec-
tions that there are correlations in the bit strings. So, we
tested our PUF responses with the following ﬁve estimations
for non-IID sources [30]. Each test yields an estimation on
min-entropy and the overall estimated min-entropy is the
minimum of these ﬁve values. The tests are conﬁgured with
a conﬁdence level of 95%.

Collision Test: The collision test measures the mean
time to the ﬁrst collision in a dataset. Based on these colli-
sion times, the collision statistic tries to estimate the prob-
ability of the most-likely state. For biased noise sources
toward an output or state the test will result in a low en-
tropy estimate, say when there is a short mean time until
a collision. Longer mean times on collisions end up with in
higher entropy estimates.

Partial Collection Test: The partial collection test
computes the entropy of a dataset based on how many dis-
tinct values in the output space are observed. Low entropy
estimates are output for datasets that contain a small num-
ber of distinct symbols, and high entropy estimates are the
output when the bit strings diversify quickly.

Markov Test:

The Markov test consists of diﬀerent
Markov processes, from ﬁrst-order up to nth-order. In a ﬁrst-
order Markov process, the output state depends only on the
current state and in an nth-order Markov process, the out-
put state depends on the current and all previous n-1 states.
To detect dependencies, the test builds a Markov model to
be used as a template for a given source. The min-entropy
estimates result from measuring the dependencies between

596Table 3: CTW compression rates on real sensor mea-
surements for diﬀerent upper correlation limits ρmax.
The data show an uncompressability, due to their
small size and is mentioned for veriﬁcation.

ρmax

.50
.53
.56
.59
.62
.65
.68
.71
.74
.77
.80
.83
.86
.89
.92
.95
.98

(bytes)

Size uncomp.
to compressed
148 → 165
164 → 181
164 → 181
164 → 181
164 → 181
192 → 209
254 → 272
254 → 272
295 → 313
331 → 349
292 → 309
413 → 432
451 → 470
496 → 515
605 → 624
645 → 664
978 → 998

compression rate
of measurements

(bits/byte)

compression rate

random ﬁle
(bits/byte)

8.25676
8.22561
8.22561
8.22561
8.22561
8.20312
8.16929
8.16929
8.15254
8.12991
8.13356
8.12107
8.11973
8.10282
8.0843
8.08062
8.05828

8.23649
8.18902
8.18902
8.18902
8.18902
8.18229
8.14173
8.14173
8.13559
8.12085
8.13356
8.10412
8.10200
8.09476
8.08099
8.07752
8.05419

Compression Test:

consecutive outputs from the noise source. Thereby the es-
timates are not based on an estimate of min-entropy per
output, but on the entropy present in any chain of outputs.
The compression test estimates
the entropy rate by compressing the input data set. As
compression method the Maurer Universal Statistic [31] is
used. It generates a dictionary of values, and then computes
the average number of samples required to write an output
based on the dictionary.

Frequency Test: The frequency statistic models the
probability distribution of the given data set. The entropy
estimation is based on the occurrence of the most-likely sym-
bol.

6.1 Entropy Estimation of Measured Data

We estimated the entropy of the responses with diﬀerent
upper correlation limits ρmax from the 70 measured sensors.

Inter and Intra Hamming Distances.

Fig. 4 shows the inter and intra Hamming distance dis-
tributions of the measured data for three diﬀerent values of
ρmax. The inter distance distribution is ﬁtted by a normal
distribution. The mean of the ﬁt is close to 50%. The intra
distance distribution is based on the Monte Carlo simulation
(10,000 runs) that we explained in Section 5.2. To be able
to identify a sensor securely, it is important that the intra
and inter distance distributions overlap just with negligible
probability, which is the case here. The best result do we
receive for ρmax = .86.

CTW Compression.

The compression method was conﬁgured with a tree depth
of 6 and we used a Krichevski-Troﬁmov estimator [24]. It
is important to note, that CTW compression does not work
eﬃciently with the small sizes we give here as input, so all
resulting compression rates are above 100%. Still, would the
bit strings have major statistical defects, then a compression
would be possible even with these small input sizes. For the
purpose of veriﬁcation we also tried to compress truly ran-
dom bits with the same input sizes as our responses, yielding

similar results. Therefore, our bit strings show an uncom-
pressability. The results can be found in Table 3.

NIST Randomness Test.
We used the NIST randomness tests as described in Sec-
tion 6 on our bit strings. The minimum pass p(cid:48) rate for
each statistical test is approximately 8, because we chose
our number of samples n = 10. The results indicate a high
entropy in our bit strings, since all tests up to ρmax = 0.95
are passed. Nevertheless, the tests are not meaningful be-
cause the input size to these tests is very small.

NIST Min-Entropy Estimation.

Due to short overall bit strings we derived from our mea-
surements, the NIST Min-Entropy Estimation gave no valid
results. So we omit these tests in this section.

6.2 Entropy Estimation on Simulated PUF Re-

sponses

We estimated the entropy of bit strings, which oﬀspring
from our real sensor measurements. However, the gener-
ated bit strings are not long enough to generate meaningful
results on entropy estimation. Therefore, we repeat the en-
tropy estimation on simulated data, too. For a conservative
estimate we choose the minimum of our estimated entropy
value for further constructions. We also validated our es-
timations by concatenating and partly replacing simulated
bits with real measurement bits, yielding the same results.

Inter and Intra Hamming Distances.

Fig. 5 shows the inter and intra Hamming distance distri-
butions of the simulated data (1,000 runs for both intra and
inter distances) for the same values of ρmax. The results are
comparable to those from the measured data.

CTW Compression.

Again, we conﬁgured the compression method with a tree
depth of 6 and we used a Krichevski-Troﬁmov estimator [24].
The compression rate is given in bits per byte, meaning that
bit strings with full entropy result in a compression rate of 8
bits/byte. Our compression results indicate, that the quan-
tized bit strings up a correlation upper limit ρmax of 0.71
have nearly full entropy. With an increasing ρmax the com-
pression rate drops. CTW compression gives us an upper
bound on entropy, meaning the entropy of our bit strings
can be less, but not more. This bound is also given in Fig. 6.

NIST Randomness Test.

We used the NIST randomness tests as described in Sec-
tion 6 on our simulated bit strings. The minimum pass rate
p(cid:48) for each statistical test is approximately 96, because we
chose our number of samples n = 100. However, most of the
NIST randomness tests failed, so we omit the actual results
at this place. We hypothesize the reasons are that our bit
strings do not have full entropy, but nearly full entropy and
that the random number generator used for generating the
simulated bit strings is not truly random itself.

NIST Min-Entropy Estimation.

The ﬁve tests for a min-entropy estimation were conﬁg-
ured to analyze 8-bit symbols, to have a comparable symbol
size as the CTW compression. Four tests gave invalid re-

597(a) ρmax = .62.

(b) ρmax = .74.

(c) ρmax = .86.

Figure 5: Inter and intra Hamming distance distributions of simulated data.

sults, so they are not included in Fig. 6. We also veriﬁed the
estimated min-entropy values with a symbol size of 16 bits,
where all results were valid, and the estimations were similar
to the 8-bit symbol tests. However, our results show that
the Markov test always produces the lowest min-entropy es-
timate, so the other tests do not come into account anyway.
The results for an estimated min-entropy give us an es-
timated lower bound on entropy of our bit strings. Fig. 6
shows the upper and lower bounds on entropy depending on
the chosen upper correlation limit ρmax as a combined result
of CTW compression and min-entropy estimation.

7. KEY DERIVATION

Fuzzy Extractors [17] can be used to extract the same
cryptographic keys from correlated measurements, i.e. noisy
PUF measurements. The keys are generated in an enroll-
ment phase and, when the PUFs are in the ﬁeld, can be re-
constructed with a previously generated helper data P . The
helper data leaks minimum information about the key [17],
and therefore it can be stored in external memory on the
PUF device itself or can be transmitted over the internet.
Our construction can be easily adapted to be secure against
an active attacker on the helper data. With a robust fuzzy
extractor [32] we would introduce a message authentication
code (MAC), which can be used to authenticate the helper
data.

The correctness property of fuzzy extractors states that
the construction outputs the exact same key if the distance
between two measurements w and w(cid:48) is smaller than some
error t, denoted as dis(w, w(cid:48)) ≤ t.
7.1 Error Correction

We choose the syndrome construction from [17] to recon-
cile our measurements w and w(cid:48) and followed the idea of [33]
to get parameters for our setting. For example, the setting
with ρmax = 0.86 we use a [n = 63, k = 10, t = 13]-BCH
code, capable of correcting 13 errors in a 63-bit code word.
The entropy loss of this construction to an eavesdropper is
at most n − k = 53 bits. The extracted message has 10 bits
after error correction.

We optimized the quantization process, so that the result-
ing response w has at most t = 13 errors with a probability
of 1.74 · 10−8, as given in Table 2. For a cryptographic 128-
bit key, we need to combine the min-entropy results from

Fig. 6 and the chosen code, so that we need

(cid:24) length key/min-entropy rate

(cid:25)

(cid:24) 128/0.5725

(cid:25)

= 23

=

length message

10

PUF responses. This means the overall PUF response, con-
catenated from 23 sensors, has a length of 23 · 63 = 1449
bits and that our overall helper data P has a length of
23 · 53 = 1219 bits. Putting it all together, we receive an
overall authentication failure, due to decoding failure, with
a probability of 1 − (1 − 1.74 · 10−8)23 = 4.00 · 10−7. This is
less than the common quality standard of at most one failure
per one million uses. Note that although our responses do
not have full entropy, our parameters are an improvement
(in terms of the number of bits required) compared to [33]
while having roughly the same false rejection rate.
7.2 Randomness Extraction

To meet the NIST requirements for extractors we would
have needed to double the MEMS-PUFs to sample double
the input entropy relative to the output. So, to generate a
strong key, we ﬁnally hash our corrected codeword along-
side a public seed with a strong extractor. The lightweight
spongent hash function [34] seems to be a perfect candidate
for a resource-constrained sensor device. In particular, our
construction uses spongent-128/256/128, which has full
preimage and second-preimage security. To carry on with
the previous example, we input the corrected 1449-bit code
word, containing 131 bits of entropy, to our extractor. The
public uniform random seed has 256 bits, following H˚astad
et al. [35] and Aysu et al. [36], to derive a ﬁnal 128-bit key.

8. DEDICATED MEMS-PUF DESIGN

We showed that there are several sensors necessary to de-
rive a 128-bit key based on our used parameters. This could
be possible in applications in which several sensors are avail-
able (e.g., 9-degrees-of-freedom sensor node). Another op-
tion is to design a speciﬁc MEMS element for security pur-
poses only. Such a dedicated MEMS-based PUF could be
realized in an area saving manner and it can be optimized
providing at least the same number of suitable properties
for the use as PUFs as an usual gyroscope. Furthermore,
the structures of such a speciﬁc MEMS could be designed
in a way that increase the variability of the properties to
derive more bits from a single parameter. One example is
the use of the minimum beam width for the springs in order

598Figure 6: Entropy upper and lower bounds as function of correlation coeﬃcient. The upper bound is the
CTW compression rate and the lower bound is the min-entropy estimation result.

to increase the percentage inﬂuence of the beam width vari-
ation. The aim of increasing variability could be achieved
by measures in the manufacturing process as well because
this is optimized actually to keep variations at a minimum.
Fig. 7 illustrates our proposal for a dedicated MEMS-
based PUF concept. It is a 3-masses oscillator that is free
to move in all spatial dimensions. The masses are linked
by doubling U-springs which are very sensitive to asymme-
tries that should increase the quadrature signals and the
whole structure is suspended by four doubling U-springs at
the outside corners. The system can be driven and mea-
sured by the electrode pairs CPX/CNX, CPY/CNY in case
of in-plane movements and CPZ/CNZ in case of out-of-plane
movements with respect to the potential of the masses (CM).
The structure contains twelve frequency modes. Three
frequency modes are based on in-plane movements in y di-
rection and three ones in x direction. Furthermore, there are
six frequency modes for out-of-plane movements. Three fre-
quency modes for translational motions and three frequency
modes for rotational motions. We are able to drive and mea-
sure all of these modes. The mechanical structure is designed
in a way that the usable frequency modes are close together.
This is in contrast to the structure of a MEMS gyroscope
where the focus is on the drive and detection modes and all
further frequency modes are shifted as far as possible away
from them. Additionally, there are two quadrature signals
for each frequency mode and six pairs of electrodes, i.e., the
design provides in total 12 frequency modes, 24 quadrature
signals and 6 electrical capacitances.

To estimate the number of bits that could be derived from
our structure, we carry out FEM-simulations using AN-
SYS to calculate the frequency modes. Subsequently, we
determine the capacitances between the electrodes and the
quadrature signals with a reduced order model developed by
Gugel [37] which is based on the principle of modal super-
position. This method transmits the equation of motion (6)
used in the FEM-analysis to a description of the system with
reduced complexity solving the eigenvalue problem (-ω2
i M +
K)ϕi = 0 with the eigenvectors ϕi and the eigenvalues ωi.
As a result, we receive the transformation matrix Φ includ-
ing the eigenvectors ϕi. M is the mass matrix, K is the
stiﬀness matrix and D is the damping matrix. Equation (9)
describes the system in the modal space with the deﬂections
q whereby x = Φq.

M ¨x + D ˙x + Kx = F
M Φ¨q + DΦ ˙q + KΦq = F

ΦT M Φ¨q + ΦT DΦ ˙q + ΦT KΦq = ΦT F

˜M ¨q + ˜D ˙q + ˜Kq = ˜F

(6)
(7)

(8)

(9)

For simulations, we consider the following aspects of man-
ufacturing process-related variations assuming typical pro-
cess tolerances that can be found in [19]:

• geometric dimensions (structure width and thickness),
• slight diﬀerences of the beam widths locally on the legs
• pressure inside the cavity,
• diﬀerences in side wall inclination.

of the U-springs,

We make 1,000 simulations of the design to estimate the
key length that can be derived from the structure depending
on the correlation upper limit. For the key generation proce-
dure, we assume the same measurement accuracies and tem-
perature dependencies as determined by the measurements
of gyroscopes in previous sections. Table 4 shows that as
expected, it is possible to derive more bits than from the
investigated gyroscopes. Note that we consider for these
simulations only changes to the MEMS design. A further
lengthening of the key can be easily achieved by worsening
of the manufacturing process. Furthermore, due to the small
dimensions of the structure it is conceivable to combine sev-
eral of these structures in one unit concatenating their keys
or to add such a structure to existing MEMS sensors for key
storage purposes.

9. CONCLUSION

MEMS sensors exhibit great potential for the generation
of cryptographic keys. In this work, we show that MEMS
gyroscopes, which have been developed for a broad range of
capabilities, can be used to derive a high entropy crypto-
graphic key. We identify properties of MEMS gyroscopes,
suitable for PUF applications by a large number of measure-
ments on wafer-level. In order to quantize the measurement
values, we propose for an appropriate procedure. We verify
the uniqueness and reliability of the generated bit strings.
Furthermore, we estimate upper and lower bounds on the
entropy of these bit strings and show how to implement a

02468CTW compression rateCollision testPartial collection testMarkov testCompression testFrequency testρmaxEntropy (bits/byte)599Table 4: Number of derivable bits depending on the
correlation upper limit ρmax.

ρmax
bits

.50
62

.62
73

.74
89

.86
110

.98
199

sors. The design and the manufacturing process can be op-
timized to increase variability and thus deriving more bits
per parameter. Moreover, such a speciﬁc design can be opti-
mized so that it provides more suitable parameters for PUF
applications than a standard MEMS sensor. Therefore a
dedicated MEMS-PUF would present an excellent candidate
for high security applications. Due to the small size of such
an element, it is also conceivable to add this structure to a
MEMS sensor without making them signiﬁcantly larger or
aﬀecting its functionality.

Besides the construction of an actual PUF, estimation on
min-entropy is an open research direction. State-of-the-art
estimations, e.g., CTW compression, focus on giving an up-
per bound of entropy, leaving the problem of possible less
entropy open. Clearly, for high security applications a sound
estimate of the enclosed lower entropy bound should be
given.
9.2 Related Work

PUFs have been divided into two categories depending on
the number of their uncorrelated CRPs. These two cate-
gories are strong and weak PUFs (also called obfuscating
PUFs [38]), originally introduced in [9] and further devel-
oped in [38, 39]. The deﬁned model by R¨uhrmair et al. [38]
postulates that an attacker has access to an oracle, which
replies to a challenge Ci with the same response Ri as the
real system. Thus, concepts that protect the access to the
PUF are not taken into account, although they would lead to
increased security. Examples include concepts such as con-
trolled PUFs which protect the access to the PUF with pre-
and postprocessing steps [10]. A strong PUF has so many
CRPs that an attacker cannot measure all of them during a
limited time period. Furthermore, it should be infeasible to
build a digital model that would allow an attacker to come
up with the right response on a randomly chosen challenge.
In authentication applications, a strong PUF has the ad-
vantage that the response of the system can be transmitted
without any additional security because each CRP is only
used once.

A promising candidate for an electrical strong PUF was
the class of Arbiter PUFs. They generate responses by ex-
ploiting delay information of, e.g., two identical constructed
paths of ICs [8]. Such an Arbiter PUF has a multi-bit in-
put and computes a 1-bit output. By concatenating the re-
sponses, corresponding to diﬀerent challenges, a unique key
is extracted. Variations of the Arbiter PUF presented in the
literature include the XOR Arbiter PUF [8], the Lightweight
PUF [40] and the Feed Forward Arbiter PUF [7], which aim
for a higher security level than the original Arbiter PUF.
However, it has been shown several times that it is possible
to model the Arbiter PUFs behavior based on a given set of
CRPs by machine learning techniques [41, 42].

Weak PUFs have only few CRPs, or in some cases, just
one. Hence, the key needs to be protected against unau-
thorized access. A popular candidate from this PUF class is
the SRAM PUF, introduced by Guajardo et al. [9]. This ap-
proach utilizes the power-up behavior of SRAM cells, where

Figure 7: Dedicated MEMS-PUF design.

fuzzy extractor to derive a full entropy key from the most
conservative entropy estimations. Based on error correc-
tion and randomness extraction we display the number of
required devices for a 128-bit key generation from MEMS
gyroscopes. Additionally, we present a dedicated MEMS-
PUF design, solely for usage as a primitive in security ap-
plications. This design is optimized in terms of potential
features and chip area, allowing us to derive a full entropy
128-bit key from just a few of such structures, while still
being able to ﬁt in a single unit.
9.1 Limitations and Further Research

In this work, we showed that deriving a cryptographic key
from a MEMS is feasible. However, we are still in need to
extract more bits from the MEMS structure itself, enhanc-
ing following steps in the key generation process. Regarding
the implementation of MEMS-based PUFs in sensor systems
and the achievement of a further key lengthening, two ap-
proaches are possible.

• Use of several existent MEMS sensors in a sensor sys-
tem, e.g., 9 degree-of-freedom sensor nodes, and add-
up of cryptographic key seeds which can be derived
from the individual sensors.
• Development of a speciﬁc MEMS-based PUF design,

optimized for PUF applications.

The ﬁrst approach provides an additional value for ex-
isting sensors and aims at its enhancement. This requires
further investigations of MEMS sensors. On one hand, there
could be more suitable parameters than that we have actu-
ally measured. For example in case of gyroscopes, there
should be more frequency modes existent than nine. Addi-
tionally, it is possible to measure a quadrature signal for each
frequency mode but we measured just two, because of con-
straints on the measurement setup. Especially, the quadra-
ture signals are potentially able to lengthen the derivable
keys, because they can be used to extract proportionally
many bits and show little correlation with other parame-
ters. On the other hand, investigations of diﬀerent MEMS
sensors have to be done. Besides, further tests should be
carried out to analyze the reliability of diﬀerent parameters.
For example, these could be tests on packaged devices as
mechanical stress tests and aging tests.

The second approach aims at the development of a ded-
icated MEMS-PUF which can beneﬁt from the experiences
gained from investigations on diﬀerent existing MEMS sen-

600the bi-stable memory cells tend to either the same bit value
with high probability or a random bit. The PUF is formed
out of SRAM cells, which behave in a robust manner on
power up. SRAM-based PUFs can deliver a large number
of bits, with the size of an SRAM array as the only limit,
and the memory cells do not correlate with each other. Ad-
vantageously, SRAM cells are inherent in most semiconduc-
tor devices. Hence, it does not require additional devices
or modiﬁcations in the manufacturing process. However, it
has been already shown that it is possible to read out SRAM
PUFs by invasive and semi-invasive attacks [43]. Further-
more, Helfemeier et al. produced a physical clone of a SRAM
PUF [44].

Note that weak and strong PUFs aim at diﬀerent pur-
poses. Strong PUFs could be compared with a physical hash
function, whereas weak PUFs are used for safeguard a secret
key [45].

Until now, MEMS-based PUFs have received little atten-
tion, unlike Arbiter or SRAM PUFs. The ﬁrst MEMS-based
PUF was proposed by Rosenfeld et al. [46]. Their method
uses an array of on-chip photodiodes and a translucent coat-
ing. The transmittance of the coating is not uniform and
causes variations of the measured light level. The key is
generated by the variations between the amounts of light
sensed by the photodiodes.

Another work focused on MEMS is from Aysu et al. [14].
They used the deviations of an accelerometer’s self-test and
oﬀset values for a low-cost device authentication. However,
they stated that their keys do not achieve the uniqueness as
the keys of, e.g., SRAM PUFs.

10. REFERENCES
[1] M. Weiser, “The computer for the 21st

century-scientiﬁc american special issue on
communications,” Computers, and Networks, 1991.
[2] D. Evans, “The internet of things — how the next
evolution of the internet is changing everything,”
CISCO white paper, vol. 1, p. 14, 2011.

[3] K. Eldefrawy, G. Tsudik, A. Francillon, and D. Perito,

“SMART: secure and minimal architecture for
(establishing dynamic) root of trust,” in 19th Annual
Network and Distributed System Security Symposium,
NDSS 2012, San Diego, California, USA, February
5-8, 2012, The Internet Society, 2012.

[4] F. F. Brasser, B. E. Mahjoub, A. Sadeghi,

C. Wachsmann, and P. Koeberl, “Tytan: tiny trust
anchor for tiny devices,” in Proceedings of the 52nd
Annual Design Automation Conference, San
Francisco, CA, USA, June 7-11, 2015, pp. 34:1–34:6,
ACM, 2015.

[5] N. Asokan, F. F. Brasser, A. Ibrahim, A. Sadeghi,

M. Schunter, G. Tsudik, and C. Wachsmann, “SEDA:
scalable embedded device attestation,” in Proceedings
of the 22nd ACM SIGSAC Conference on Computer
and Communications Security, Denver, CO, USA,
October 12-6, 2015, pp. 964–975, 2015.

[6] B. Gassend, D. E. Clarke, M. van Dijk, and

S. Devadas, “Silicon physical random functions,” in
Proceedings of the 9th ACM Conference on Computer
and Communications Security, CCS 2002,
Washington, DC, USA, November 18-22, 2002
(V. Atluri, ed.), pp. 148–160, ACM, 2002.

[7] J. Lee, D. Lim, B. Gassend, G. Suh, M. van Dijk, and

S. Devadas, “A technique to build a secret key in
integrated circuits for identiﬁcation and
authentication applications,” in VLSI Circuits, 2004.
Digest of Technical Papers. 2004 Symposium on,
pp. 176–179, June 2004.

[8] G. Suh and S. Devadas, “Physical unclonable functions

for device authentication and secret key generation,”
in Design Automation Conference, 2007. DAC ’07.
44th ACM/IEEE, pp. 9–14, June 2007.

[9] J. Guajardo, S. Kumar, G.-J. Schrijen, and P. Tuyls,

“Fpga intrinsic pufs and their use for ip protection,” in
Cryptographic Hardware and Embedded Systems -
CHES 2007 (P. Paillier and I. Verbauwhede, eds.),
vol. 4727 of Lecture Notes in Computer Science,
pp. 63–80, Springer Berlin Heidelberg, 2007.

[10] B. Gassend, M. V. Dijk, D. Clarke, E. Torlak,

S. Devadas, and P. Tuyls, “Controlled physical random
functions and applications,” ACM Trans. Inf. Syst.
Secur., vol. 10, pp. 3:1–3:22, Jan. 2008.

[11] D. Samyde, S. P. Skorobogatov, R. J. Anderson, and

J. Quisquater, “On a new way to read data from
memory,” in Proceedings of the First International
IEEE Security in Storage Workshop, SISW 2002,
Greenbelt, Maryland, USA, December 11, 2002,
pp. 65–69, IEEE Computer Society, 2002.

[12] S. P. Skorobogatov, “Data remanence in ﬂash memory

devices,” in Cryptographic Hardware and Embedded
Systems - CHES 2005, 7th International Workshop,
Edinburgh, UK, August 29 - September 1, 2005,
Proceedings (J. R. Rao and B. Sunar, eds.), vol. 3659
of Lecture Notes in Computer Science, pp. 339–353,
Springer, 2005.

[13] J. A. Halderman, S. D. Schoen, N. Heninger,

W. Clarkson, W. Paul, J. A. Calandrino, A. J.
Feldman, J. Appelbaum, and E. W. Felten, “Lest we
remember: cold-boot attacks on encryption keys,”
Commun. ACM, vol. 52, no. 5, pp. 91–98, 2009.

[14] A. Aysu, N. F. Ghalaty, Z. Franklin, M. P. Yali, and

P. Schaumont, “Digital ﬁngerprints for low-cost
platforms using MEMS sensors,” in Proceedings of the
Workshop on Embedded Systems Security, WESS ’13,
(New York, NY, USA), ACM, 2013.

[15] Y.-J. Chang, W. Zhang, and T. Chen,

“Biometrics-based cryptographic key generation.,” in
IEEE International Conference on Multimedia and
Expo (ICME), vol. 3, 2004.

[16] J. M. G. Linnartz and P. Tuyls, “New shielding

functions to enhance privacy and prevent misuse of
biometric templates,” in Audio-and Video-Based
Biometrie Person Authentication, 4th International
Conference, AVBPA 2003, Proceedings (J. Kittler and
M. S. Nixon, eds.), vol. 2688 of LNCS, pp. 393–402,
Springer, June 9-11, 2003.

[17] Y. Dodis, L. Reyzin, and A. Smith, “Fuzzy extractors:

How to generate strong keys from biometrics and
other noisy data,” in Advances in cryptology-Eurocrypt
2004, pp. 523–540, Springer, 2004.

[18] N. Yazdi, F. Ayazi, and K. Najaﬁ, “Micromachined

inertial sensors,” Proceedings of the IEEE, vol. 86,
pp. 1640–1659, Aug 1998.

[19] V. Lindroos, M. Tilli, A. Lehto, and T. Motooka,

601Handbook of Silicon Based MEMS Materials and
Technologies. Elsevier Inc., 2010.

[20] U. R¨uhrmair, S. Devadas, and F. Koushanfar,
Introduction to Hardware Security and Trust,
ch. Security Based on Physical Unclonability and
Disorder, pp. 65 – 102. Springer, 2012.

[21] M. Wolf and T. Gendrullis, “Design, implementation,

and evaluation of a vehicular hardware security
module,” in Information Security and Cryptology -
ICISC 2011 (H. Kim, ed.), vol. 7259 of Lecture Notes
in Computer Science, pp. 302–318, Springer Berlin
Heidelberg, 2012.

[22] T. Morris, “Trusted platform module,” in Encyclopedia

of Cryptography and Security, pp. 1332–1335,
Springer, 2011.

[23] A. Cigada, E. Leo, and M. Vanali, “Electrical method
to measure the dynamic behaviour and the quadrature
error of a MEMS gyroscope sensor,” Sensors and
Actuators A: Physical, vol. 134, no. 1, pp. 88 – 97,
2007. International Mechanical Engineering congress
and Exposition 2005IMECE 2005American Society of
Mechanical Engineering International Mechanical
Engineering Congress and Exposition.

[24] F. M. Willems, Y. M. Shtarkov, and T. J. Tjalkens,

“The context-tree weighting method: basic
properties,” Information Theory, IEEE Transactions
on, vol. 41, no. 3, pp. 653–664, 1995.

[25] F. M. Willems, Y. M. Shtarkov, and T. J. Tjalkens,

“Context weighting for general ﬁnite-context sources,”
IEEE transactions on information theory, vol. 42,
no. 5, pp. 1514–1520, 1996.

[26] T. Ignatenko, G.-J. Schrijen, B. Skoric, P. Tuyls, and

F. Willems, “Estimating the secrecy-rate of physical
unclonable functions with the context-tree weighting
method,” in Information Theory, 2006 IEEE
International Symposium on, pp. 499–503, IEEE, 2006.

[27] Y. Gao, I. Kontoyiannis, and E. Bienenstock,
“Estimating the entropy of binary time series:
Methodology, some theory and a simulation study,”
Entropy, vol. 10, no. 2, pp. 71–99, 2008.

[28] A. Rukhin, J. Soto, J. Nechvatal, M. Smid, and

E. Barker, “A statistical test suite for random and
pseudorandom number generators for cryptographic
applications,” tech. rep., DTIC Document, 2001.

C. Wachsmann, “Reverse fuzzy extractors: Enabling
lightweight mutual authentication for puf-enabled
rﬁds,” in Financial Cryptography and Data Security,
pp. 374–389, Springer, 2012.

[34] A. Bogdanov, M. Kneˇzevi´c, G. Leander, D. Toz,

K. Varıcı, and I. Verbauwhede, “Spongent: A
lightweight hash function,” in Cryptographic Hardware
and Embedded Systems–CHES 2011, pp. 312–325,
Springer, 2011.

[35] J. H˚astad, R. Impagliazzo, L. A. Levin, and M. Luby,

“A pseudorandom generator from any one-way
function,” SIAM Journal on Computing, vol. 28, no. 4,
pp. 1364–1396, 1999.

[36] A. Aysu, E. Gulcan, D. Moriyama, P. Schaumont, and

M. Yung, “End-to-end design of a puf-based privacy
preserving authentication protocol,” in International
Workshop on Cryptographic Hardware and Embedded
Systems, pp. 556–576, Springer, 2015.

[37] D. Gugel, Ordnungsreduktion in der

Mikrosystemtechnik. PhD thesis, TU Chemnitz, 2009.

[38] U. R¨uhrmair, J. S¨olter, and F. Sehnke, “On the

foundations of physical unclonable functions.”
Cryptology ePrint Archive, Report 2009/277, 2009.

[39] F. Armknecht, R. Maes, A. Sadeghi, O.-X. Standaert,

and C. Wachsmann, “A formalization of the security
features of physical functions,” in Security and Privacy
(SP), 2011 IEEE Symposium on, pp. 397–412, May
2011.

[40] M. Majzoobi, F. Koushanfar, and M. Potkonjak,

“Lightweight secure pufs,” in Computer-Aided Design,
2008. ICCAD 2008. IEEE/ACM International
Conference on, pp. 670–673, Nov 2008.

[41] U. R¨uhrmair, F. Sehnke, J. S¨olter, G. Dror,

S. Devadas, and J. Schmidhuber, “Modeling attacks on
physical unclonable functions,” in Proceedings of the
17th ACM Conference on Computer and
Communications Security, CCS ’10, (New York, NY,
USA), pp. 237–249, ACM, 2010.

[42] U. R¨uhrmair, J. S¨olter, F. Sehnke, X. Xu,

A. Mahmoud, V. Stoyanova, G. Dror, J. Schmidhuber,
W. Burleson, and S. Devadas, “Puf modeling attacks
on simulated and silicon data,” IEEE Transactions on
Information Forensics and Security, vol. 8, no. 11,
pp. 1876–1891, 2013.

[29] V. Van der Leest, G.-J. Schrijen, H. Handschuh, and

[43] D. Nedospasov, J.-P. Seifert, C. Helfmeier, and

P. Tuyls, “Hardware intrinsic security from d
ﬂip-ﬂops,” in Proceedings of the ﬁfth ACM workshop
on Scalable trusted computing, pp. 53–62, ACM, 2010.

[30] E. Barker and J. Kelsey, “Nist draft special

publication 800-90b recommendation for the entropy
sources used for random bit generation,” 2012.

[31] U. M. Maurer, “A universal statistical test for random

bit generators,” Journal of cryptology, vol. 5, no. 2,
pp. 89–105, 1992.

[32] Y. Dodis, J. Katz, L. Reyzin, and A. Smith, “Robust

fuzzy extractors and authenticated key agreement
from close secrets,” in Advances in Cryptology -
CRYPTO 2006, pp. 232–250, Springer, 2006.

[33] A. Van Herrewege, S. Katzenbeisser, R. Maes,

R. Peeters, A.-R. Sadeghi, I. Verbauwhede, and

C. Boit, “Invasive puf analysis,” in Fault Diagnosis and
Tolerance in Cryptography (FDTC), 2013 Workshop
on, pp. 30–38, IEEE, 2013.

[44] C. Helfmeier, C. Boit, D. Nedospasov, and J.-P.

Seifert, “Cloning physically unclonable functions,” in
Hardware-Oriented Security and Trust (HOST), 2013
IEEE International Symposium on, pp. 1–6, June
2013.

[45] U. R¨uhrmair and D. Holcomb, “Pufs at a glance.,” in
Proceedings -Design, Automation and Test in Europe,
DATE, 2014.

[46] K. Rosenfeld, E. Gavas, and R. Karri, “Sensor physical

unclonable functions,” in Hardware-Oriented Security
and Trust (HOST), 2010 IEEE International
Symposium on, pp. 112–117, June 2010.

602