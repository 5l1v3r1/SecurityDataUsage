ZMap: Fast Internet-wide Scanning  

and Its Security Applications

Zakir Durumeric, Eric Wustrow, and J. Alex Halderman, University of Michigan

Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4ZMap: Fast Internet-Wide Scanning and its Security Applications

Zakir Durumeric

University of Michigan

zakir@umich.edu

Eric Wustrow

University of Michigan

ewust@umich.edu

J. Alex Halderman

University of Michigan

jhalderm@umich.edu

Abstract

Internet-wide network scanning has numerous security
applications, including exposing new vulnerabilities and
tracking the adoption of defensive mechanisms, but prob-
ing the entire public address space with existing tools is
both difﬁcult and slow. We introduce ZMap, a modular,
open-source network scanner speciﬁcally architected to
perform Internet-wide scans and capable of surveying
the entire IPv4 address space in under 45 minutes from
user space on a single machine, approaching the theo-
retical maximum speed of gigabit Ethernet. We present
the scanner architecture, experimentally characterize its
performance and accuracy, and explore the security impli-
cations of high speed Internet-scale network surveys, both
offensive and defensive. We also discuss best practices for
good Internet citizenship when performing Internet-wide
surveys, informed by our own experiences conducting a
long-term research survey over the past year.

1

Introduction and Roadmap

Internet-scale network surveys collect data by probing
large subsets of the public IP address space. While such
scanning behavior is often associated with botnets and
worms, it also has proved to be a valuable methodol-
ogy for security research. Recent studies have demon-
strated that Internet-wide scanning can help reveal new
kinds of vulnerabilities, monitor deployment of mitiga-
tions, and shed light on previously opaque distributed
ecosystems [10, 12, 14, 15, 25, 27]. Unfortunately, this
methodology has been more accessible to attackers than to
legitimate researchers, who cannot employ stolen network
access or spread self-replicating code. Comprehensively
scanning the public address space with off-the-shelf tools
like Nmap [23] requires weeks of time or many machines.
In this paper, we introduce ZMap, a modular and open-
source network scanner speciﬁcally designed for perform-
ing comprehensive Internet-wide research scans. A single

mid-range machine running ZMap is capable of scanning
for a given open port across the entire public IPv4 address
space in under 45 minutes—over 97% of the theoreti-
cal maximum speed of gigabit Ethernet—without requir-
ing specialized hardware [11] or kernel modules [8, 28].
ZMap’s modular architecture can support many types of
single-packet probes, including TCP SYN scans, ICMP
echo request scans, and application-speciﬁc UDP scans,
and it can interface easily with user-provided code to
perform follow-up actions on discovered hosts, such as
completing a protocol handshake.

Compared to Nmap—an excellent general-purpose net-
work mapping tool, which was utilized in recent Internet-
wide survey research [10, 14]—ZMap achieves much
higher performance for Internet-scale scans. Experimen-
tally, we ﬁnd that ZMap is capable of scanning the IPv4
public address space over 1300 times faster than the most
aggressive Nmap default settings, with equivalent accu-
racy. These performance gains are due to architectural
choices that are speciﬁcally optimized for this application:
Optimized probing While Nmap adapts its transmis-
sion rate to avoid saturating the source or target networks,
we assume that the source network is well provisioned
(unable to be saturated by the source host), and that the
targets are randomly ordered and widely dispersed (so
no distant network or path is likely to be saturated by
the scan). Consequently, we attempt to send probes as
quickly as the source’s NIC can support, skipping the
TCP/IP stack and generating Ethernet frames directly. We
show that ZMap can send probes at gigabit line speed
from commodity hardware and entirely in user space.

No per-connection state While Nmap maintains
state for each connection to track which hosts have
been scanned and to handle timeouts and retransmis-
sions, ZMap forgoes any per-connection state. Since
it is intended to target random samples of the address
space, ZMap can avoid storing the addresses it has already
scanned or needs to scan and instead selects addresses
according to a random permutation generated by a cyclic

USENIX Association  

22nd USENIX Security Symposium  605

multiplicative group. Rather than tracking connection
timeouts, ZMap accepts response packets with the cor-
rect state ﬁelds for the duration of the scan, allowing it
to extract as much data as possible from the responses it
receives. To distinguish valid probe responses from back-
ground trafﬁc, ZMap overloads unused values in each
sent packet, in a manner similar to SYN cookies [4].

No retransmission While Nmap detects connection
timeouts and adaptively retransmits probes that are lost
due to packet loss, ZMap (to avoid keeping state) always
sends a ﬁxed number of probes per target and defaults
to sending only one. In our experimental setup, we esti-
mate that ZMap achieves 98% network coverage using
only a single probe per host, even at its maximum scan-
ning speed. We believe this small amount of loss will be
insigniﬁcant for typical research applications.

We further describe ZMap’s architecture and implemen-
tation in Section 2, and we experimentally characterize
its performance in Section 3. In Section 4, we investigate
the implications of the widespread availability of fast,
low-cost Internet-wide scanning for both defenders and
attackers, and we demonstrate ZMap’s performance and
ﬂexibility in a variety of security settings, including:
Measuring protocol adoption, such as the transition
from HTTP to HTTPS. We explore HTTPS adoption
based on frequent Internet-wide scans over a year.
Visibility into distributed systems, such as the certiﬁcate
authority (CA) ecosystem. We collect and analyze
TLS certiﬁcates and identify misissued CA certs.

High-speed vulnerability scanning, which could allow at-
tackers to widely exploit vulnerabilities within hours
of their discovery. We build a UPnP scanner us-
ing ZMap through which we ﬁnd 3.4 million UPnP
devices with known vulnerabilities [25].

Uncovering unadvertised services, such as hidden Tor
bridges. We show that ZMap can locate 86% of
hidden Tor bridges via comprehensive enumeration.
High-speed scanning can be a powerful tool in the
hands of security researchers, but users must be careful
not to cause harm by inadvertently overloading networks
or causing unnecessary work for network administrators.
In Section 5, we discuss our experiences performing nu-
merous large-scale scans over the past year, we report on
the complaints and other reactions we have received, and
we suggest several guidelines and best practices for good
Internet citizenship while scanning.

Internet-wide scanning has already shown great poten-
tial as a research methodology [10, 12, 14, 25], and we
hope ZMap will facilitate a variety of new applications by
drastically reducing the costs of comprehensive network
surveys and allowing scans to be performed with very ﬁne
time granularity. To facilitate this, we are releasing ZMap
as an open source project that is documented and pack-
aged for real world use. It is available at https://zmap.io/.

2 ZMap: The Scanner

ZMap uses a modular design to support many types of
probes and integration with a variety of research applica-
tions, as illustrated in Figure 1. The scanner core handles
command line and conﬁguration ﬁle parsing, address gen-
eration and exclusion, progress and performance monitor-
ing, and reading and writing network packets. Extensible
probe modules can be customized for different kinds of
probes, and are responsible for generating probe packets
and interpreting whether incoming packets are valid re-
sponses. Modular output handlers allow scan results to
be piped to another process, added directly to a database,
or passed on to user code for further action, such as com-
pleting a protocol handshake.

We introduced the philosophy behind ZMap’s design in
Section 1. At a high level, one of ZMap’s most important
architectural features is that sending and receiving packets
take place in separate threads that act independently and
continuously throughout the scan. A number of design
choices were made to ensure that these processes share as
little state as possible.

We implemented ZMap in approximately 8,900 SLOC

of C. It was written and tested on GNU/Linux.

2.1 Addressing Probes
If ZMap simply probed every IPv4 address in numerical
order, it would risk overloading destination networks with
scan trafﬁc and produce inconsistent results in the case of
a distant transient network failure. To avoid this, ZMap
scans addresses according to a random permutation of
the address space. To select smaller random samples of
the address space, we simply scan a subset of the full
permutation.

ZMap uses a simple and inexpensive method to traverse
the address space, which lets it scan in a random permuta-
tion while maintaining only negligible state. We iterate
over a multiplicative group of integers modulo p, choos-
ing p to be a prime slightly larger than 232. By choosing
p to be a prime, we guarantee that the group is cyclic and
will reach all addresses in the IPv4 address space except
0.0.0.0 (conveniently an IANA reserved address) once per
cycle. We choose to iterate over (Z/4,294,967,311Z)×,
the multiplicative group modulo p for the smallest prime
larger than 232: 232 + 15.

To select a fresh random permutation for each scan,
we generate a new primitive root of the multiplicative
group and choose a random starting address. Because
the order of elements in a group is preserved by an iso-
morphism, we efﬁciently ﬁnd random primitive roots of
the multiplicative group by utilizing the isomorphism
(Zp−1, +) ∼= (Z∗p,×) and mapping roots of (Zp−1, +)
into the multiplicative group via the function f (x) =n x
where n is a known primitive root of (Z/pZ)×. In our

606  22nd USENIX Security Symposium 

USENIX Association

CLI

 State 

& 

Conﬁg

Validation Generation
Address Generation
Probe Scheduler

ZMap Internet Scanner

Packet 
Generation

Packet 

Transmission

Framework Monitoring

Output Handler

Result Processing

Response 
Interpretation

Receipt & 
Validation

Figure 1: ZMap Architecture — ZMap is an open-source network scanner optimized for efﬁciently performing
Internet-scale network surveys. Modular packet generation and response interpretation components (blue) support
multiple kinds of probes, including TCP SYN scans and ICMP echo scans. Modular output handlers (red) allow users
to output or act on scan results in application-speciﬁc ways. The architecture allows sending and receiving components
to run asynchronously and enables a single source machine to comprehensively scan every host in the public IPv4
address space for a particular open TCP port in under 45 mins using a 1 Gbps Ethernet link.

speciﬁc case, we know that 3 is a primitive root of
(Z/4,294,967,311Z)×.

Because we know that the generators of (Zp−1, +) are
{s|(s, p− 1) = 1}, we can efﬁciently ﬁnd the generators
of the additive group by precalculating and storing the
factorization of p− 1 and checking addresses against the
factorization at random until we ﬁnd one that is coprime
with p− 1 and then map it into (Z∗p,×). Given that there
exist approximately 109 generators, we expect to make
four tries before ﬁnding a primitive root. While this pro-
cess introduces complexity at the beginning of a scan, it
adds only a small amount of one-time overhead.

Once a primitive root has been generated, we can easily
iterate through the address space by applying the group
operation to the current address (in other words, multi-
plying the current address by the primitive root modulo
232 + 15). We detect that a scan has completed when we
reach the initially scanned IP address. This technique
allows the sending thread to store the selected permuta-
tion and progress through it with only three integers: the
primitive root used to generate the multiplicative group,
the ﬁrst scanned address, and the current address.
Excluding Addresses
Since ZMap is optimized for
Internet-wide scans, we represent the set of targets as
the full IPv4 address space minus a set of smaller ex-
cluded address ranges. Certain address ranges need to be
excluded for performance reasons (e.g., skipping IANA
reserved allocations [16]) and others to honor requests
from their owners to discontinue scanning. We efﬁciently
support address exclusion through the use of radix trees, a
trie speciﬁcally designed to handle ranges and frequently

used by routing tables [32, 34]. Excluded ranges can be
speciﬁed through a conﬁguration ﬁle.

2.2 Packet Transmission and Receipt
ZMap is optimized to send probes as quickly as the
source’s CPU and NIC can support. The packet genera-
tion component operates asynchronously across multiple
threads, each of which maintains a tight loop that sends
Ethernet-layer packets via a raw socket.

We send packets at the Ethernet layer in order to cache
packet values and reduce unnecessary kernel overhead.
For example, the Ethernet header, minus the packet check-
sum, will never change during a scan. By generating and
caching the Ethernet layer packet, we prevent the Linux
kernel from performing a routing lookup, an arpcache
lookup, and netﬁlter checks for every packet. An addi-
tional beneﬁt of utilizing a raw socket for TCP SYN scans
is that, because no TCP session is established in the ker-
nel, upon receipt of a TCP SYN-ACK packet, the kernel
will automatically respond with a TCP RST packet, clos-
ing the connection. ZMap can optionally use multiple
source addresses and distribute outgoing probes among
them in a round-robin fashion.

We implement the receiving component of ZMap us-
ing libpcap [17], a library for capturing network trafﬁc
and ﬁltering the received packets. Although libpcap is
a potential performance bottleneck, incoming response
trafﬁc is a small fraction of outgoing probe trafﬁc, since
the overwhelming majority of hosts are unresponsive to
typical probes, and we ﬁnd that libpcap is easily capable
of handling response trafﬁc in our tests (see Section 3).

USENIX Association  

22nd USENIX Security Symposium  607

Upon receipt of a packet, we check the source and des-
tination port, discard packets clearly not initiated by the
scan, and pass the remaining packets to the active probe
module for interpretation.

While the sending and receiving components of ZMap
operate independently, we ensure that the receiver is ini-
tialized prior to sending probes and that the receiver con-
tinues to run for a period of time (by default, 8 seconds)
after the sender has completed in order to process any
delayed responses.

2.3 Probe Modules
ZMap probe modules are responsible for ﬁlling in the
body of probe packets and for validating whether incom-
ing packets are responsive to the probes. Making these
tasks modular allows ZMap to support a variety of prob-
ing methods and protocols and simpliﬁes extensibility.
Out of the box, ZMap provides probe modules to support
TCP port scanning and ICMP echo scanning.

At initialization, the scanner core provides an empty
buffer for the packet and the probe module ﬁlls in any
static content that will be the same for all targets. Then,
for each host to be scanned, the probe module updates this
buffer with host-speciﬁc values. The probe module also
receives incoming packets, after high-level validation by
the scanner core, and determines whether they are positive
or negative responses to scan probes. Users can add new
scan types by implementing a small number of callback
functions within the probe module framework.

For example, to facilitate TCP port scanning, ZMap im-
plements a probing technique known as SYN scanning or
half-open scanning. We chose to implement this speciﬁc
technique instead of performing a full TCP handshake
based on the reduced number of exchanged packets. In
the dominant case where a host is unreachable or does
not respond, only a single packet is used (a SYN from
the scanner); in the case of a closed port, two packets
are exchanged (a SYN answered with a RST); and in the
uncommon case where the port is open, three packets are
exchanged (a SYN, a SYN-ACK reply, and a RST from
the scanner).
Checking Response Integrity
ZMap’s receiving com-
ponents need to determine whether received packets are
valid responses to probes originating from the scanner
or are part of other background trafﬁc. Probe mod-
ules perform this validation by encoding host- and scan-
invocation–speciﬁc data into mutable ﬁelds of each probe
packet, utilizing ﬁelds that will have recognizable effects
on ﬁelds of the corresponding response packets in a man-
ner similar to SYN cookies [4].

For each scanned host, ZMap computes a MAC of the
destination address keyed by a scan-speciﬁc secret. This
MAC value is then spread across any available ﬁelds by

the active probe module. We chose to use the UMAC
function for these operations, based on its performance
guarantees [5]. In our TCP port scan module, we utilize
the source port and initial sequence number; for ICMP,
we use the ICMP identiﬁer and sequence number. These
ﬁelds are checked on packet receipt by the probe module,
and ZMap discards any packets for which validation fails.
These inexpensive checks prevents the incorrect report-
ing of spurious response packets due to background trafﬁc
as well as responses triggered by previous scans. This
design ultimately allows the receiver to validate responses
while sharing only the scan secret and the initial conﬁgu-
ration with the sending components.

2.4 Output Modules

ZMap provides a modular output interface that allows
users to output scan results or act on them in application-
speciﬁc ways. Output module callbacks are triggered
by speciﬁc events: scan initialization, probe packet sent,
response received, regular progress updates, and scan ter-
mination. ZMap’s built-in output modules cover basic use,
including simple text output (a ﬁle stream containing a list
of unique IP addresses that have the speciﬁed port open),
extended text output (a ﬁle stream containing a list of all
packet responses and timing data), and an interface for
queuing scan results in a Redis in-memory database [29].
Output modules can also be implemented to trigger
network events in response to positive scan results, such
as completing an application-level handshake. For TCP
SYN scans, the simplest way to accomplish this is to cre-
ate a fresh TCP connection with the responding address;
this can be performed asynchronously with the scan and
requires no special kernel support.

forge_socket
Some ZMap users may wish to complete
the TCP handshake begun during a TCP SYN scan and
exchange data with the remote host without the extra over-
head of establishing a new connection. While the initial
SYN/SYN-ACK exchange has established a connection
from the destination’s perspective, ZMap bypasses the
local system’s TCP stack and as such the kernel does not
recognize the connection.

In order to allow the scanning host to communicate
over ZMap-initiated TCP sessions, we implemented
forge_socket, a kernel module that allows user processes
to pass in session parameters (e.g. initial sequence num-
ber) using setsockopt. This allows application-level hand-
shakes to be performed using the initial ZMap handshake
and does not require the unnecessary transmission of a
RST, SYN, or SYN-ACK packet that would be required
to close the existing connection and initiate a new kernel-
recognized session. We are releasing forge_socket along
with ZMap.

608  22nd USENIX Security Symposium 

USENIX Association

3 Validation and Measurement

We performed a series of experiments to characterize the
performance of ZMap. Under our test setup, we ﬁnd
that a complete scan of the public IPv4 address space
takes approximately 44 minutes on an entry-level server
with a gigabit Ethernet connection. We estimate that
a single-packet scan can detect approximately 98% of
instantaneously listening hosts, and we measure a 1300 x
performance improvement over Nmap for Internet-wide
scanning, with equivalent coverage.

We performed the following measurements on an HP
ProLiant DL120 G7 with a Xeon E3-1230 3.2 GHz pro-
cessor and 4 GB of memory running a stock install of
Ubuntu 12.04.1 LTS and the 3.2.0-32-generic Linux ker-
nel. Experiments were conducted using the onboard NIC,
which is based on the Intel 82574L chipset and uses the
stock e1000e network driver, or a quad-port Intel Ethernet
adapter based on the newer Intel 82580 chipset and using
the stock igb network driver. For experiments involving
complete TCP handshakes, we disabled kernel modules
used by iptables and conntrack. Experiments comparing
ZMap with Nmap were conducted with Nmap 5.21.

These measurements were conducted using the normal
building network at the University of Michigan Computer
Science & Engineering division. We used a gigabit Eth-
ernet uplink (a standard ofﬁce network connection in our
facility); we did not arrange for any special network con-
ﬁguration beyond static IP addresses. The access layer
of the building runs at 10 gbps, and the building uplink
to the rest of the campus is an aggregated 2× 10 gigabit
port channel. We note that ZMap’s performance on other
source networks may be worse than reported here due to
local congestion.

3.1 Scan Rate: How Fast is Too Fast?
In order to determine whether our scanner and our up-
stream network can handle scanning at gigabit line speed,
we examine whether the scan rate, the rate at which ZMap
sends probe packets, has any effect on the hit rate, the
fraction of probed hosts that respond positively (in this
case, with a SYN-ACK). If libpcap, the Linux kernel, our
institutional network, or our upstream provider are unable
to adequately handle the trafﬁc generated by the scanner
at full speed, we would expect packets to be dropped and
the hit rate to be lower than at slower scan rates.

We experimented by sending TCP SYN packets to
random 1% samples of the IPv4 address space on port
443 at varying scan rates. We conducted 10 trials at each
of 16 scan rates ranging from 1,000 to 1.4 M packets per
second. The results are shown in Figure 2.

We ﬁnd no statistically signiﬁcant correlation between
scan rate and hit rate. This shows that our ZMap setup
is capable of handling scanning at 1.4 M packets per

)
t
n
e
c
r
e
p
(
 

e

t

a
R

 
t
i

H

 1.02
 1.01
 1
 0.99
 0.98
 0.97
 0.96
 0.95
 0.94

Hitrate

1

0

2

5

5

0

0

0

0

0

0

0

1

0

0

0

2

5

0

0

5

0

0

0

1

0

0

0

2

5

0

0

5

0

0

7

5

1

0

1

1

0

0

0

0

0

0

1

2

0

0

1

3

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

1

4

1

5

0

0

0

0

0

0

0

0

0

0

0

0

0

0

Scan Rate (packets per second)

Figure 2: Hit rate vs. Scan rate — We ﬁnd no correla-
tion between hit rate (positive responses/hosts probed)
and scan rate (probes sent/second). Shown are means and
standard deviations over ten trials. This indicates that
slower scanning does not reveal additional hosts.

 89000

 88500

 88000

Hosts Found

d
n
u
o
F
 
s
t
s
o
H
 
e
u
q
n
U

i

 87500

 87000

 86500

 86000

 85500

 85000

 0

 5

 10
 20
Unique SYN Packets Sent

 15

 25

 30

Figure 3: Coverage for Multiple Probes — Discovered
hosts plateau after ZMap sends about 8 SYNs to each. If
this plateau represents the true number of listening hosts,
sending just 1 SYN will achieve about 98% coverage.

 1.02

 1

t

e
a
r
t
i

H

 0.98

 0.96

 0.94

 0.92

2
2:0
0

0
0:0
0

2:0
0

4:0
0

6:0
0

1
2:0
0

1
4:0
0

1
6:0
0

1
8:0
0

2
0:0
0

2
2:0
0

8:0
1
0:0
0
0
Time of Day

Figure 4: Diurnal Effect on Hosts Found — We ob-
served a ±3.1% variation in ZMap’s hit rate depending
on the time of day the scan was performed. (Times EST.)

USENIX Association  

22nd USENIX Security Symposium  609

second and that scanning at lower rates provides no ben-
eﬁt in terms of identifying additional hosts. From an
architectural perspective, this validates that our receiving
infrastructure based on libpcap is capable of processing
responses generated by the scanner at full speed and that
kernel modules such as PF_RING [8] are not necessary
for gigabit-speed network scanning.

3.2 Coverage: Is One SYN Enough?

While scanning at higher rates does not appear to result
in a lower hit rate, this does not tell us what coverage we
achieve with a single scan—what fraction of target hosts
does ZMap actually ﬁnd using its default single-packet
probing strategy?

Given the absence of ground truth for the number of
hosts on the Internet with a speciﬁc port open, we cannot
measure coverage directly. This is further complicated
by the ever changing state of the Internet; it is inherently
difﬁcult to detect whether a host was not included in a
scan because it was not available at the time or because
packets were dropped between it and the scanner. Yet, this
question is essential to understanding whether performing
fast, single-packet scans is an accurate methodology for
Internet-wide surveys.

To characterize ZMap’s coverage, we estimate the num-
ber of hosts that are actually listening by sending multiple,
distinct SYN packets to a large address sample and ana-
lyzing the distribution of the number of positive responses
received compared to the number of SYNs we send. We
expect to eventually see a plateau in the number of hosts
that respond regardless of the number of additional SYNs
we send. If this plateau exists, we can treat it as an esti-
mate of the real number of listening hosts, and we can
use it as a baseline against which to compare scans with
fewer SYN packets.

We performed this experiment by sending 1, 2, 5, 8, 10,
15, 20, and 25 SYN packets to random 1% samples of the
IPv4 address space on port 443 and recording the number
of distinct hosts that sent SYN-ACK responses in each
scan. The results indicate a clear plateau in the number of
responsive hosts after sending 8 SYN packets, as shown
in Figure 3.

Based on the level of this plateau, we estimate that our
setup reaches approximately 97.9% of live hosts using
a single packet, 98.8% of hosts using two packets, and
99.4% of hosts using three packets. The single packet
round-trip loss rate of about 2% is in agreement with pre-
vious studies on random packet drop on the Internet [12].
These results suggest that single-probe scans are sufﬁ-
ciently comprehensive for typical research applications.
Investigators who require higher coverage can conﬁgure
ZMap to send multiple probes per host, at the cost of
proportionally longer running scans.

3.3 Variation by Time of Day
In previous work, Internet-wide scans took days to months
to execute, so there was little concern over ﬁnding the
optimal time of day to perform a scan. However, since
ZMap scans can take less than an hour to complete, the
question as to the “right time” to perform a scan arises.
Are there certain hours of the day or days of the week that
are more effective for scanning than others?

In order to measure any diurnal effects on scanning, we
performed continuous scans of TCP port 443 targeting a
random 1% sample of the Internet over a 24-hour period.
Figure 4 shows the number of hosts found in each scan.
We observed a ±3.1% variation in hit rate dependent
on the time of day scans took place. The highest response
rates were at approximately 7:00 AM EST and the lowest
response rates were at around 7:45 PM EST.

These effects may be due to variation in overall net-
work congestion and packet drop rates or due to a diurnal
pattern in the aggregate availability of end hosts that are
only intermittently connected to the network. In less for-
mal testing, we did not notice any obvious variation by
day of the week or day of the month.

3.4 Comparison with Nmap
We performed several experiments to compare ZMap to
Nmap in Internet-wide scanning applications, focusing on
coverage and elapsed time to complete a scan. Nmap and
ZMap are optimized for very different purposes. Nmap is
a highly ﬂexible, multipurpose tool that is frequently used
for probing a large number of open ports on a smaller
number of hosts, whereas ZMap is optimized to probe a
single port across very large numbers of targets. We chose
to compare the two because recent security studies used
Nmap for Internet-wide surveys [10, 14], and because,
like ZMap, Nmap operates from within user space on
Linux [23].

We tested a variety of Nmap settings to ﬁnd reasonable
conﬁgurations to compare. All performed a TCP SYN
scan on port 443 (-Ss -p 443). Nmap provides several
defaults known as timing templates, but even with the
most aggressive of these (labeled “insane”), an Internet-
wide scan would take over a year to complete. To make
Nmap scan faster in our test conﬁgurations, we started
with the “insane” template (-T5), disabled host discovery
and DNS resolutions (-Pn -n), and set a high minimum
packet rate (--min-rate 10000). The “insane” template
retries each probe once after a timeout; we additionally
tested a second Nmap conﬁguration with retries disabled
(--max-retries 0).

We used ZMap to select a random sample of 1 million
IP addresses and scanned them for hosts listening on
port 443 with Nmap in the two conﬁgurations described
above and with ZMap in its default conﬁguration and in a

610  22nd USENIX Security Symposium 

USENIX Association

Scan Type
Nmap, max 2 probes (default)
Nmap, 1 probe
ZMap, 2 probes
ZMap, 1 probe (default)

Coverage
(normalized)
0.978
0.814
1.000
0.987

Duration Est. Time for
(mm:ss)
45:03
24:12
00:11
00:10

Internet-wide Scan
116.3 days
62.5 days
2:12:35
1:09:45

Table 1: ZMap vs. Nmap Comparison — We scanned 1 million hosts on TCP port 443 using ZMap and Nmap and
averaged over 10 trials. Despite running hundreds of times faster, ZMap ﬁnds more listening hosts than Nmap, due to
Nmap’s low host timeout. Times for ZMap include a ﬁxed 8 second delay to wait for responses after the ﬁnal probe.

second conﬁguration that sends two SYN probes to each
host (-P 2). We repeated this process for 10 trials over a
12 hour period and report the averages in Table 1.

The results show that ZMap scanned much faster than
Nmap and found more listening hosts than either Nmap
conﬁguration. The reported durations for ZMap include
time sent sending probes as well as a ﬁxed 8-second delay
after the sending process completes, during which ZMap
waits for late responses. Extrapolating to the time re-
quired for an Internet-wide scan, the fastest tested ZMap
conﬁguration would complete approximately 1300 times
faster than the fastest Nmap conﬁguration.1
Coverage and Timeouts
To investigate why ZMap
achieved higher coverage than Nmap, we probed a ran-
dom sample of 4.3 million addresses on TCP port 80 and
measured the latency between sending a SYN and receiv-
ing a SYN-ACK from responsive hosts. Figure 5 shows
the CDF of the results. The maximum round-trip time
was 450 seconds, and a small number of hosts took more
than 63 seconds to respond, the time it takes for a TCP

1The extrapolated 1-packet Internet-wide scan time for ZMap is
longer than the 44 minutes we report elsewhere for complete scans,
because this test used a slower NIC based on the Intel 82574L chipset.

1.0

0.8

0.6

0.4

0.2

s
t
s
o
h

 

i

g
n
d
n
o
p
s
e
r
 
f

 

o
F
D
C

0.0

 0

 0.2

 0.4

 0.6

response time (seconds)

 0.8

 1

Figure 5: SYN to SYN-ACK time — In an experiment
that probed 4.3 million hosts, 99% of SYN-ACKs arrived
within about 1 second and 99.9% within 8.16 seconds.

connection attempt to timeout on Linux. 99% of hosts
that responded within 500 seconds did so within about
1 second, and 99.9% responded within 8.16 seconds.

As ZMap’s receiving code is stateless with respect to
the sending code, a valid SYN-ACK that comes back
any time before the scan completes will be recorded as
a listening host. To assure a high level of coverage, the
default ZMap settings incorporate an empirically derived
8-second delay after the last probe is sent before the re-
ceiving process terminates.

In contrast, Nmap maintains timeouts for each probe.
In the Nmap “insane” timing template we tested, the
timeout is initially 250 ms, by which time fewer than 85%
of responsive hosts in our test had responded. Over the
course of a scan, Nmap’s timeout can increase to 300 ms,
by which time 93.2% had responded. Thus, we would
expect a single-probe Nmap scan with these timing values
to see 85–93% of the hosts that ZMap ﬁnds, which is
roughly in line with the observed value of 82.5%.

With Nmap’s “insane” defaults, it will attempt to send a
second probe after a timeout. A response to either the ﬁrst
or second SYN will be considered valid until the second
times out, so this effectively raises the overall timeout to
500–600 ms, by which time we received 98.2–98.5% of
responses. Additional responses will likely be generated
by the second SYN. We observed that the 2-probe Nmap
scan found 99.1% of the number of hosts that a 1-probe
ZMap scan found.

3.5 Comparison with Previous Studies
Several groups have previously performed Internet-wide
surveys using various methodologies. Here we compare
ZMap to two recent studies that focused on HTTPS cer-
tiﬁcates. Most recently, Heninger et al. performed a dis-
tributed scan of port 443 in 2011 as part of a global
analysis on cryptographic key generation [14]. Their
scan used Nmap on 25 Amazon EC2 instances and re-
quired 25 hours to complete, with a reported average of
40,566 hosts scanned per second. A 2010 scan by the EFF
SSL Observatory project used Nmap on 3 hosts and took
3 months to complete [10].

USENIX Association  

22nd USENIX Security Symposium  611

Scan
EFF SSL Observatory [10]
Mining Ps and Qs [14]
ZMap + certiﬁcate fetcher
ZMap + certiﬁcate fetcher

Date
2010/12
2011/10
2012/06
2013/05

Port 443 Open TLS Servers All Certs Trusted Certs
1.46 M
1.96 M
2.95 M
3.27 M

16.2 M
28.9 M
31.8 M
34.5 M

7.7 M
12.8 M
19.0 M
22.8 M

4.0 M
5.8 M
7.8 M
8.6 M

Table 2: Comparison with Prior Internet-wide HTTPS Surveys — Due to growth in HTTPS deployment, ZMap
ﬁnds almost three times as many TLS servers as the SSL Observatory did in late 2010, yet this process takes only
10 hours to complete from a single machine using a ZMap-based workﬂow, versus three months on three machines.

To compare ZMap’s performance for this task, we used
it to conduct comprehensive scans of port 443 and used
a custom certiﬁcate fetcher based on libevent [24] and
OpenSSL [37] to retrieve TLS certiﬁcates from each re-
sponsive host. With this methodology, we were able to
discover hosts, perform TLS handshakes, and collect and
parse the resulting certiﬁcates in under 10 hours from a
single machine.

As shown in Table 2, we ﬁnd signiﬁcantly more TLS
servers than previous work—78% more than Heninger
et al. and 196% more than the SSL Observatory—likely
due to increased HTTPS deployment since those studies
were conducted. Linear regression shows an average
growth in HTTPS deployment of about 540,000 hosts
per month over the 29 month period between the SSL
Observatory scan and our most recent dataset. Despite
this growth, ZMap is able to collect comprehensive TLS
certiﬁcate data in a fraction of the time and cost needed
in earlier work. The SSL Observatory took roughly 650
times as much machine time to acquire the same kind of
data, and Heninger et al. took about 65 times as much.

4 Applications and Security Implications

The ability to scan the IPv4 address space in under an hour
opens an array of new research possibilities, including the
ability to gain visibility into previously opaque distributed
systems, understand protocol adoption at a new resolution,
and uncover security phenomenon only accessible with a
global perspective [14]. However, high-speed scanning
also has potentially malicious applications, such as ﬁnd-
ing and attacking vulnerable hosts en masse. Furthermore,
many developers have the preconceived notion that the
Internet is far too large to be fully enumerated, so the re-
ality of high speed scanning may disrupt existing security
models, such as by leading to the discovery of services
previously thought to be well hidden. In this section, we
use ZMap to explore several of these applications.

4.1 Visibility into Distributed Systems
High-speed network scanning provides researchers with
the possibility for a new real-time perspective into pre-

Organization
GoDaddy.com, Inc.
GeoTrust Inc.
Comodo CA Limited
VeriSign, Inc.
Thawte, Inc.
DigiCert Inc
GlobalSign
Starﬁeld Technologies
StartCom Ltd.
Entrust, Inc.

Certiﬁcates

913,416
586,376
374,769
317,934
228,779
145,232
117,685
94,794
88,729
76,929

(31.0%)
(19.9%)
(12.7%)
(10.8%)
(7.8%)
(4.9%)
(4.0%)
(3.2%)
(3.0%)
(2.6%)

Table 3: Top 10 Certiﬁcate Authorities — We used
ZMap to perform regular comprehensive scans of HTTPS
hosts in order gain visibility into the CA ecosystem. Ten
organizations control 86% of browser trusted certiﬁcates.

viously opaque distributed systems on the Internet. For
instance, e-commerce and secure web transactions inher-
ently depend on browser trusted TLS certiﬁcates. How-
ever, there is currently little oversight over browser trusted
certiﬁcate authorities (CAs) or issued certiﬁcates. Most
CAs do not publish lists of the certiﬁcates they have
signed, and, due to delegation of authority to interme-
diate CAs, it is unknown what set of entities have the
technical ability to sign browser-trusted certiﬁcates at any
given time.

To explore this potential, we used ZMap and our cus-
tom certiﬁcate fetcher to conduct regular scans over the
past year and perform analysis on new high-proﬁle certiﬁ-
cates and CA certiﬁcates. Between April 2012 and June
2013, we performed 1.81 billion TLS handshakes, ulti-
mately collecting 33.6 million unique X.509 certiﬁcates
of which 6.2 million were browser trusted. We found and
processed an average of 220,000 new certiﬁcates, 15,300
new browser trusted certiﬁcates, and 1.2 new CA certiﬁ-
cates per scan. In our most recent scan, we identiﬁed
1,832 browser trusted signing certiﬁcates from 683 orga-
nizations and 57 countries. We observed 3,744 distinct
browser-trusted signing certiﬁcates in total. Table 3 shows
the most proliﬁc CAs by leaf certiﬁcates issued.

612  22nd USENIX Security Symposium 

USENIX Association

Wide-scale visibility into CA behavior can help to
identify security problems [10, 18]. We found two
cases of misissued CA certiﬁcates.
In the ﬁrst case,
we found a CA certiﬁcate that was accidentally issued
to a Turkish transit provider. This certiﬁcate, C=TR,
ST=ANKARA, L=ANKARA, O=EGO, OU=EGO BILGI
ISLEM, CN=*.EGO.GOV.TR, was later found by Google
after being used to sign a Google wildcard certiﬁcate and
has since been revoked and blacklisted in common web
browsers [20].

In the second case, we found approximately 1,300
CA certiﬁcates that were misissued by the Korean Gov-
ernment to government sponsored organizations such as
schools and libraries. While these certiﬁcates had been
issued with rights to sign additional certiﬁcates, a length
constraint on the grandparent CA certiﬁcate prevented
these organizations from signing new certiﬁcates. We
do not include these Korean certiﬁcates in the CA to-
tals above because they are unable to sign valid browser-
trusted certiﬁcates.

4.2 Tracking Protocol Adoption
Researchers have previously attempted to understand the
adoption of new protocols, address depletion, common
misconﬁgurations, and vulnerabilities through active scan-
ning [2, 10, 12, 14, 15, 27]. In many of these cases, these
analyses have been performed on random samples of the
IPv4 address space due to the difﬁculty of performing
comprehensive scans [15, 27]. In cases where full scans
were performed, they were completed over an extended
period of time or through massive parallelization on cloud
providers [10, 14]. ZMap lowers the barriers to entry and
allows researchers to perform studies like these in a com-
prehensive and timely manner, ultimately enabling much
higher resolution measurements than previously possible.

HTTPS Hosts
Unique Certificates
Trusted Certificates
Alexa Top 1 Mil. Domains
E.V. Certificates
Netcraft HTTP Hosts

 1.25

 1.2

s
e
t
a
c
i
f
i
t
r
e
C
 
d
e
t
s
u
r
T

 1.15

 1.1

 1.05

 1

 0.95

0
6/1
2

0
7/1
2

0
8/1
2

0
9/1
2

1
0/1
2

1
1/1
2

1
2/1
2

0
1/1
3

0
2/1
3

0
3/1
3

0
4/1
3

0
5/1
3

Scan Date

Figure 6: HTTPS Adoption — Data we collected using
ZMap show trends in HTTPS deployment over one year.
We observed 19.6% growth in hosts serving HTTPS.

Port

Service
80 HTTP
7547 CWMP
443 HTTPS
21
23 Telnet
22
25
3479
8080 HTTP-alt/proxy

SSH
SMTP
2-Wire RPC

FTP

53 DNS

Hit Rate (%)
1.77
1.12
0.93
0.77
0.71
0.57
0.43
0.42
0.38
0.38

Table 4: Top 10 TCP ports — We scanned 2.15 million
hosts on TCP ports 0–9175 and observed what fraction
were listening on each port. We saw a surprising number
of open ports associated with embedded devices, such as
ports 7547 (CWMP) and 3479 (2-Wire RPC).

To illustrate this application, we tracked the adoption of
HTTPS using 158 Internet-wide scans over the past year.
Notably, we ﬁnd a 23% increase in HTTPS use among
Alexa Top 1 Million websites and a 10.9% increase in
the number of browser-trusted certiﬁcates. During this
period, the Netcraft Web Survey [26] ﬁnds only a 2.2%
increase in the number of HTTP sites, but we observe an
8.5% increase in sites using HTTPS. We plot these trends
in Figure 6.

We can also gain instantaneous visibility into the de-
ployment of multiple protocols by performing many
ZMaps scans of different ports. We scanned 0.05% sam-
ples of the IPv4 address space on each TCP port below
9175 to determine the percentage of hosts that were lis-
tening on each port. This experiment requires the same
number of packets as over 5 Internet-wide scans of a sin-
gle port, yet we completed it in under a day using ZMap.
Table 4 shows the top 10 open ports we observed.

4.3 Enumerating Vulnerable Hosts
With the ability to perform rapid Internet-wide scans
comes the potential to quickly enumerate hosts that suf-
fer from speciﬁc vulnerabilities [2]. While this can be a
powerful defensive tool for researchers—for instance, to
measure the severity of a problem or to track the appli-
cation of a patch—it also creates the possibility for an
attacker with control of only a small number of machines
to scan for and infect all public hosts suffering from a new
vulnerability within minutes.
UPnP Vulnerabilities
To explore these applications,
we investigated several recently disclosed vulnerabilities
in common UPnP frameworks. On January 29, 2013,
HD Moore publicly disclosed several vulnerabilities in
common UPnP libraries [25]. These vulnerabilities ulti-

USENIX Association  

22nd USENIX Security Symposium  613

mately impacted 1,500 vendors and 6,900 products, all of
which can be exploited to perform arbitrary code execu-
tion with a single UDP packet. Moore followed responsi-
ble disclosure guidelines and worked with manufacturers
to patch vulnerable libraries, and many of the libraries
had already been patched at the time of disclosure. De-
spite these precautions, we found that at least 3.4 million
devices were still vulnerable to the problem in February
2013.

To measure this, we created a custom ZMap probe mod-
ule that performs a UPnP discovery handshake. We were
able to develop this 150-SLOC module from scratch in
approximately four hours and performed a comprehen-
sive scan of the IPv4 address space for publicly available
UPnP hosts on February 11, 2013, which completed in
under two hours. This scan found 15.7 million publicly
accessible UPnP devices, of which 2.56 million (16.5%)
were running vulnerable versions of the Intel SDK for
UPnP Devices, and 817,000 (5.2%) used vulnerable ver-
sions of MiniUPnPd.2

Given that these vulnerable devices can be infected
with a single UDP packet [25], we note that these 3.4 mil-
lion devices could have been infected in approximately
the same length of time—much faster than network oper-
ators can reasonably respond or for patches to be applied
to vulnerable hosts. Leveraging methodology similar to
ZMap, it would only have taken a matter of hours from
the time of disclosure to infect every publicly available
vulnerable host.
Weak Public Keys As part of our regular scans of
the HTTPS ecosystem, we tracked the mitigation of the
2008 Debian weak key vulnerability [3] and the weak and
shared keys described by Heninger et al. in 2012 [14].
Figure 7 shows several trends over the past year.

In our most recent scan, we found that 44,600 unique
certiﬁcates utilized factorable RSA keys and are served
on 51,000 hosts, a 20% decrease from 2011 [14]. Four
of these certiﬁcates were browser trusted; the last was
signed in August 2012. Similarly, we found 2,743 unique
certiﬁcates that contained Debian weak keys, of which
96 were browser trusted, a 34% decrease from 2011 [14].
The last browser trusted certiﬁcate containing a Debian
weak key was signed in January 2012. We also observed
a 67% decrease in the number of browser-trusted certiﬁ-
cates that contained default public keys used for Citrix
remote access products [14].

We created an automated process that alerts us to the
discovery of new browser-trusted certiﬁcates containing
factorable RSA keys, Debian weak keys, or default Citrix
keys as soon as they are found, so that we can attempt to
notify the certiﬁcate owners about the vulnerability.

2Moore reported many more UPnP hosts [25] but acknowledges that
his scans occurred over a 5 month period and did not account for hosts
being counted multiple times due to changing IP addresses.

Percentage of Certificates using Factorable RSA Keys

Percentage of Certificates using Debian Weak Keys

Browser Trusted Certificates with Debian Weak Keys

Browser Trusted Certificates with Shared Citrix Key

Browser Trusted Certificates with Factorable RSA Key

 0.62
 0.6
 0.58
 0.56
 0.54
 0.52

 0.06

 0.05

 0.04

 0.03

 140
 130
 120
 110
 100
 90

 15

 10

 5

 5

 4

 3

 2

0
7/1
2

0
9/1
2

1
1/1
2

0
1/1
3

0
3/1
3

0
5/1
3

Scan Date

Figure 7: Trends in HTTPS Weak Key Usage — To
explore how ZMap can be used to track the mitigation
of known vulnerabilities, we monitored the use of weak
HTTPS public keys from May 2012 through June 2013.

4.4 Discovering Unadvertised Services

The ability to perform comprehensive Internet scans im-
plies the potential to uncover unadvertised services that
were previously only accessible with explicit knowledge
of the host name or address. For example, Tor bridges
are intentionally not published in order to prevent ISPs
and government censors from blocking connections to
the Tor network [35]. Instead, the Tor Project provides
users with the IP addresses of a small number of bridges
based on their source address. While Tor developers have
acknowledged that bridges can in principle be found by
Internet-wide scanning [9], the set of active bridges is con-
stantly changing, and the data would be stale by the time
a long running scan was complete. However, high-speed
scanning might be used to mount an effective attack.

614  22nd USENIX Security Symposium 

USENIX Association

USENIX Association  

22nd USENIX Security Symposium  615

Toconﬁrmthis,weperformedInternetwide-scansonports443and9001,whicharecommonportsforTorbridgesandrelays,andappliedasetofheuristicstoiden-tifylikelyTornodes.Forhostswithoneoftheseportsopen,weperformedaTLShandshakeusingaspeciﬁcsetofciphersuitessupportedbyTor’s“v1handshake.”WhenaTorrelayreceivesthissetofciphersuites,itwillrespondwithatwo-certiﬁcatechain.Thesigning(“Certi-ﬁateAuthority”)certiﬁcateisself-signedwiththerelay’sidentitypublickeyandusesasubjectnameoftheform“CN=www.X.com”,whereXisarandomizedalphanu-mericstring.Thispatternmatched67,342hostsonport443,and2,952hostsonport9001.Wecalculatedeachhost’sidentityﬁngerprintandcheckedwhethertheSHA1hashappearedinthepub-licTormetricslistforbridgepoolassignments.Hostswefoundmatched1,170uniquebridgeﬁngerprintsonport443and419uniqueﬁngerprintsonport9001,withacom-binedtotalof1,534uniqueﬁngerprints(somewerefoundonbothports).Fromthebridgepoolassignmentdata,weseetherehavebeen1,767–1,936uniqueﬁngerprintsallo-catedatanygiventimeintherecentpast,whichsuggeststhatwewereabletoidentify79–86%ofallocatedbridgesatthetimeofthescan.TheunmatchedﬁngerprintsintheTormetricslistmaycorrespondtobridgeswemissed,ofﬂinebridges,orbridgesconﬁguredtouseaportotherthan9001or443.InresponsetootherdiscoveryattacksagainstTorbridges[38],theTorprojecthasstartedtodeployobfs-proxy[36],awrapperthatdisguisesclient–bridgecon-nectionsasrandomdatainordertomakediscoverybycensorsmoredifﬁcult.Obfsproxynodeslistenonrandom-izedports,whichservesasadefenseagainstdiscoverybycomprehensivescanning.4.5MonitoringServiceAvailabilityActivescanningcanhelpidentifyInternetoutagesanddisruptionstoserviceavailabilitywithoutanadministra-tiveperspective.Previousstudieshaveshownthatactivesurveying(ICMPechorequestscans)canhelptrackIn-ternetoutages,buttheyhaveeitherscannedsmallsubsetsoftheaddressspacebasedonpreconceivednotionsofwhereoutageswouldoccurorhaveperformedrandomsampling[9,13,31].Highspeedscanningallowsscanstobeperformedatahightemporalresolutionthroughsam-plingorcomprehensively.Similarly,scanningcanhelpserviceprovidersidentifynetworksandphysicalregionsthathavelostaccesstotheirservice.InordertoexploreZMap’spotentialfortrackingser-viceavailability,weperformedcontinuousscansoftheIPv4addressspaceduringHurricaneSandytotrackitsimpactontheEastCoastoftheUnitedStates.WeshowasnapshotofoutagescausedbythehurricaneinFigure8.4.6PrivacyandAnonymousCommunicationTheadventofcomprehensivehigh-speedscanningraisespotentialnewprivacythreats,suchasthepossibilityoftrackinguserdevicesbetweenIPaddresses.Forinstance,acompanycouldtrackhomeInternetusersbetweendy-namicallyassignedIPaddressesbasedontheHTTPScer-tiﬁcateorSSHhostkeypresentedbymanyhomeroutersandcablemodems.ThiswouldallowtrackingcompaniestoextendexistingIP-basedtrackingbeyondthelengthofDHCPleases.Inanotherscenario,itmaybepossibletotracktravelers.In2006Scholzetal.presentedmethodsforﬁngerprintingSIPdevices[30]andotherprotocolsinadvertentlyexposeuniqueidentiﬁerssuchascryptographickeys.Suchfea-turescouldbeusedtofollowaspeciﬁcmobilehostacrossnetworklocations.Theseuniqueﬁngerprints,pairedwithpubliclyavailablenetworkdataandcommercialgeoloca-tiondatabases,couldallowanattackertoinferrelation-shipsandtravelpatternsofaspeciﬁcindividual.TheabilitytorapidlysendasinglepackettoallIPv4ad-dressescouldprovidethebasisforasystemofanonymouscommunication.Ratherthanusingthescannertosendprobes,itcouldbeusedtobroadcastashortencryptedmessagetoeverypublicIPaddress.Inthisscenario,itwouldbeimpossibletodeterminethedesireddestinationhost.Ifthesenderisonanetworkthatdoesnotuseingressﬁltering,itcouldalsospoofsourceaddressestoobscurethesender’sidentity.Thisstyleofcommunica-tioncouldbeofparticularinteresttobotnetoperators,becauseitwouldallowinfectedhoststoremaindormantindeﬁnitelywhilewaitingforinstructions,insteadofpe-riodicallycheckinginwithcommandandcontrolinfras-tructureandpotentiallyrevealingtheirexistence.Figure8:OutagesintheWakeofHurricaneSandy—Weperformedscansofport443acrosstheentireIPv4addressspaceevery2hoursfromOctober29–31,2013totracktheimpactofHurricaneSandyontheEastCoastoftheUnitedStates.Here,weshowlocationswithmorethana30%decreaseinthenumberoflisteninghosts.5 Scanning and Good Internet Citizenship

We worked with senior colleagues and our local network
administrators to consider the ethical implications of high-
speed Internet-wide scanning and to develop a series of
guidelines to identify and reduce any risks. Such scan-
ning involves interacting with an enormous number of
hosts and networks worldwide. It would be impossible
to request permission in advance from the owners of all
these systems, and there is no IP-level equivalent of the
HTTP robots exclusion standard [19] to allow systems
to signal that they desire not to be scanned. If we are to
perform such scanning at all, the most we can do is try to
minimize any potential for harm and give trafﬁc recipients
the ability to opt out of further probes.

High-speed scanning uses a large amount of bandwidth,
so we need to ensure that our activities do not cause ser-
vice degradation to the source or target networks. We
conﬁrmed with our local network administrators that our
campus network and upstream provider had sufﬁcient
capacity for us to scan at gigabit speeds. To avoid over-
whelming destination networks, we designed ZMap to
scan addresses according to a random permutation. This
spreads out trafﬁc to any given destination network across
the length of the scan. In a single probe TCP scan, an
individual destination address receives one 40 byte SYN
packet. If we scan at full gigabit speed, each /24 network
block will receive a packet about every 10.6 seconds (3.8
bytes/s), each /16 network every 40 ms (1000 bytes/s),
and each /8 network every 161 µs (250,000 bytes/s) for
the 44 minute duration of the scan. These trafﬁc volumes
should be negligible for networks of these sizes.

Despite these precautions, there is a small but nonzero
chance that any interaction with remote systems might
cause operational problems. Moreover, users or network
administrators who observe our scan trafﬁc might be
alarmed, in the mistaken belief that they are under at-
tack. Many may be unable to recognize that their systems
are not being uniquely targeted and that these scans are
not malicious in nature, and might waste resources re-
sponding. Some owners of target systems may simply
be annoyed and want our scans to cease. To minimize
the risks from these scenarios, we took several steps to
make it easy for trafﬁc recipients to learn why they were
receiving probes and to have their addresses excluded
from scanning if so desired.

First, we conﬁgured our source addresses to present a
simple website on port 80 that describes the nature and
purpose of the scans The site explains that we are not
targeting individual networks or attempting to obtain ac-
cess to private systems, and it provides a contact email
address to request exclusion from future scans. Second,
we set reverse DNS records for our source addresses to
“researchscanx.eecs.umich.edu” in order to signal that traf-

1. Coordinate closely with local network admins to

reduce risks and handle inquiries.

2. Verify that scans will not overwhelm the local net-

work or upstream provider.

3. Signal the benign nature of the scans in web pages

and DNS entries of the source addresses.

4. Clearly explain the purpose and scope of the scans

5. Provide a simple means of opting out, and honor

in all communications.

requests promptly.

6. Conduct scans no larger or more frequent than is

necessary for research objectives.

7. Spread scan trafﬁc over time or source addresses

when feasible.

Table 5: Recommended Practices — We offer these sug-
gestions for other researchers conducting fast Internet-
wide scans as guidelines for good Internet citizenship.

ﬁc from these hosts was part of an academic research
study. Third, we coordinated with IT teams at our institu-
tion who might receive inquiries about our scan trafﬁc.

For our ongoing Internet-wide HTTPS surveys (our
largest-volume scanning effort), we took additional steps
to further reduce the rate of false alarms from intrusion
detection systems. Rather than scanning at full speed,
we conducted each of these scans over a 12 hour period.
We also conﬁgured ZMap to use a range of 64 source
addresses and spread out probe trafﬁc among them. We
recognize that there is a difﬁcult balance to strike here:
we do not want to conceal our activities from system
administrators who would want to know about them, but
we also do not want to divert IT support resources that
would otherwise be spent dealing with genuine attacks.

We provide a summary of the precautions we took in Ta-
ble 5 as a starting point for future researchers performing
Internet-wide scans. It should go without saying that scan
practitioners should refrain from exploiting vulnerabili-
ties or accessing protected resources, and should comply
with any special legal requirements in their jurisdictions.

5.1 User Responses

We performed approximately 200 Internet-wide scans
over the course of a year, following the practices described
above. We received e-mail responses from 145 scan traf-
ﬁc recipients, which we classify in Table 6. In most cases,
these responses were informative in nature, notifying us
that we may have had infected machines, or were civil
requests to be excluded from future scans. The vast ma-
jority of these requests were received at our institution’s
WHOIS abuse address or at the e-mail address published
on the scan source IP addresses, but we also received

616  22nd USENIX Security Symposium 

USENIX Association

Small/Medium Business
Home User
Other Corporation
Academic Institution
Government/Military
Internet Service Provider
Unknown
Total Entities

41
38
17
22
15
2
10
145

Table 6: Responses by Entity Type — We classify the
responses and complaints we received about our ongoing
scans based on the type of entity that responded.

responses sent to our institution’s help desk, our chief
security ofﬁcer, and our departmental administrator.

We responded to each inquiry with information about
the purpose of our scans, and we immediately excluded
the sender’s network from future scans upon request. In
all, we excluded networks belonging to 91 organizations
or individuals, totaling 3,753,899 addresses (0.11% of the
public IPv4 address space). About 49% of the blacklisted
addresses resulted from requests from two Internet service
providers. We received 15 actively hostile responses that
threatened to retaliate against our institution legally or
to conduct a denial-of-service (DOS) attack against our
network. In two cases, we received retaliatory DOS trafﬁc,
which was blacklisted by our upstream provider.

6 Related Work
Many network scanning tools have been developed, the
vast majority of which have been optimized to scan small
network segments. The most popular and well respected
is Nmap (“Network Mapper”) [23], a versatile, multipur-
pose tool that supports a wide variety of probing tech-
niques. Unlike Nmap, ZMap is speciﬁcally designed for
Internet-wide scanning, and it achieves much higher per-
formance in this application.

Leonard and Loguinov introduced IRLscanner, an
Internet–scale scanner with the demonstrated ability to
probe the advertised IPv4 address space in approximately
24 hours, ultimately scanning at 24,421 packets per sec-
ond [22].
IRLscanner is able to perform scanning at
this rate by utilizing a custom Windows network driver,
IRLstack [33]. However, IRLscanner does not process
responses, requires a custom network driver and a com-
plete routing table for each scan, and was never released
to the research community. In comparison, we developed
ZMap as a self-contained network scanner that requires
no custom drivers, and we are releasing it to the commu-
nity under an open source license. We ﬁnd that ZMap can
scan at 1.37 million packets per second, 56 times faster
than IRLScanner was shown to operate.

Previous work has developed methods for sending and
receiving packets at fast network line speeds, including
PF_RING [8], PacketShader [11], and netmap [28], all
of which replace parts of the Linux kernel network stack.
However, as discussed in Section 3.1, we ﬁnd that the
Linux kernel is capable of sending probe packets at giga-
bit Ethernet line speed without modiﬁcation. In addition,
libpcap is capable of processing responses without drop-
ping packets as only a small number of hosts respond to
probes. The bottlenecks in current tools are in the scan
methodology rather than the network stack.

Many projects have performed Internet-scale network
surveys (e.g., [10, 12, 14, 15, 25, 27]), but this has typi-
cally required heroic effort on the part of the researchers.
In 2008, Heidemann et al. presented an Internet census
in which they attempted to determine IPv4 address uti-
lization by sending ICMP packets to allocated IP ad-
dresses; their scan of the IPv4 address space took ap-
proximately three months to complete and claimed to be
the ﬁrst Internet-wide survey since 1982 [12]. Two other
recent works were motivated by studying the security
of HTTPS. In 2010, the Electronic Frontier Foundation
(EFF) performed a scan of the public IPv4 address space
using Nmap [23] to ﬁnd hosts with port 443 (HTTPS)
open as part of their SSL Observatory Project [10]; their
scans were performed on three Linux servers and took
approximately three months to complete. Heninger et al.
performed a scan of the IPv4 address space on port 443
(HTTPS) in 2011 and on port 22 (SSH) in 2012 as part of
a study on weak cryptographic keys [14]. The researchers
were able to perform a complete scan in 25 hours by
concurrently performing scans from 25 Amazon EC2 in-
stances at a cost of around $300. We show that ZMap
could be used to collect the same data much faster and at
far lower cost.

Most recently, an anonymous group performed an il-
legal “Internet Census” in 2012, using the self-named
Carna Botnet. This botnet used default passwords to log
into thousands of telnet devices. After logging in, the
botnet scanned for additional vulnerable telnet devices
and performed several scans over the IPv4 space, com-
prising over 600 TCP ports and 100 UDP ports over a
3-month period [1]. With this distributed architecture, the
authors claim to have been able to perform a single-port
scan survey over the IPv4 space in about an hour. ZMap
can achieve similar performance without making use of
stolen resources.

7 Future Work

While we have demonstrated that efﬁciently scanning
the IPv4 address space at gigabit line speeds is possible,
there remain several open questions related to performing
network surveys over other protocols and at higher speeds.

USENIX Association  

22nd USENIX Security Symposium  617

Scanning IPv6 While ZMap is capable of rapidly scan-
ning the IPv4 address space, brute-force scanning meth-
ods will not sufﬁce in the IPv6 address space, which
is far too large to be fully enumerated [7]. This places
current researchers in a window of opportunity to take
advantage of fast Internet-wide scanning methodologies
before IPv6-only services become common place. New
methodologies will need to be developed speciﬁcally for
performing surveys of the IPv6 address space.

10gigE Surveys ZMap is currently limited by the speed
of widely available gigabit networks, and we have not
tested how well its architecture will scale as 10gigE and
faster networks become available. There is motivation to
perform the fastest scans possible as they will provide the
truest sense of a snapshot of the Internet at a given point
in time. However, these faster rates also open questions
of overloading destination networks and hosts. The dy-
namics of performing scans at 10gigE have not yet been
explored.

Server Name Indication
Server Name Indication
(SNI) is a TLS protocol extension that allows a server
to present multiple certiﬁcates on the same IP address [6].
SNI has not yet been widely deployed, primarily because
Internet Explorer does not support it on Windows XP
hosts [21]. However, its inevitable growth will make
scanning HTTPS sites more complicated, since simply
enumerating the address space will miss certiﬁcates that
are only presented with the correct SNI hostname.

Scanning Exclusion Standards
If Internet-wide scan-
ning becomes more widespread, it will become increas-
ingly burdensome for system operators who do not want
to receive such probe trafﬁc to manually opt out from
all benign sources. Further work is needed to standard-
ize an exclusion signaling mechanism, akin to HTTP’s
robots.txt [19]. For example, a host could use a combi-
nation of protocol ﬂags to send a “do-not-scan” signal,
perhaps by responding to unwanted SYNs with the SYN
and RST ﬂags, or a speciﬁc TCP option set.

8 Conclusion

We are living in a unique period in the history of the
Internet: typical ofﬁce networks are becoming fast enough
to exhaustively scan the IPv4 address space, yet IPv6
(with its much larger address space) has not yet been
widely deployed. To help researchers make the most
of this window of opportunity, we developed ZMap, a
network scanner speciﬁcally architected for performing
fast, comprehensive Internet-wide surveys.

We experimentally showed that ZMap is capable of
scanning the public IPv4 address space on a single port
in under 45 minutes, at 97% of the theoretical maximum

speed for gigabit Ethernet and with an estimated 98%
coverage of publicly available hosts. We explored the
security applications of high speed scanning, including
the ability to track protocol adoption at Internet scale and
to gain timely insight into opaque distributed systems
such as the certiﬁcate authority ecosystem. We further
showed that high-speed scanning also provides new attack
vectors that we must consider when defending systems,
including the ability to uncover hidden services, the po-
tential to track users between IP addresses, and the risk
of infection of vulnerable hosts en masse within minutes
of a vulnerability’s discovery.

We hope ZMap will elevate Internet-wide scanning
from an expensive and time-consuming endeavor to a
routine methodology for future security research. As
Internet-wide scanning is conducted more routinely, prac-
titioners must ensure that they act as good Internet citizens
by minimizing risks to networks and hosts and being re-
sponsive to inquiries from trafﬁc recipients. We offer the
recommendations we developed while performing our
own scans as a starting point for further conversations
about good scanning practice.

Acknowledgments

The authors thank the exceptional sysadmins at the Uni-
versity of Michigan for their help and support throughout
this project. This research would not have been possible
without Kevin Cheek, Laura Fink, Paul Howell, Don Win-
sor, and others from ITS, CAEN, and DCO. We thank
Michael Bailey for advice on many aspects of the work
and Oguz Durumeric for his discussion of generating per-
mutations of the IPv4 address space. We also thank Brad
Campbell, Peter Eckersley, James Kasten, Pat Pannuto,
Amir Rahmati, Michael Rushanan, and Seth Schoen. This
work was supported in part by NSF grant CNS-1255153
and by an NSF Graduate Research Fellowship.

References

[1] Anonymous.

Internet census 2012. http://census2012.

sourceforge.net/paper.html, March 2013.

[2] G. Bartlett, J. Heidemann, and C. Papadopoulos. Under-
standing passive and active service discovery. In 7th ACM
SIGCOMM conference on Internet measurement (IMC),
pages 57–70, 2007.

[3] L. Bello. DSA-1571-1 OpenSSL—Predictable random
number generator, 2008. Debian Security Advisory. http://
www.debian.org/security/2008/dsa-1571.

[4] D. J. Bernstein. SYN cookies. http://cr.yp.to/syncookies.

html, 1996.

[5] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and P. Rog-
away. UMAC: Fast and secure message authentication. In
Advances in Cryptology—CRYPTO ’99, 1999.

618  22nd USENIX Security Symposium 

USENIX Association

[6] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen,
and T. Wright. Transport Layer Security (TLS) Extensions.
RFC 3546 (Proposed Standard), June 2003.

[7] T. Chown. IPv6 Implications for Network Scanning. RFC

5157 (Informational), March 2008.

[8] L. Deri. Improving passive packet capture: Beyond device
polling. In 4th International System Administration and
Network Engineering Conference (SANE), 2004.

[9] R. Dingledine. Research problems: Ten ways to dis-
cover Tor bridges. http://blog.torproject.org/blog/research-
problems-ten-ways-discover-tor-bridges, October 2011.
[10] P. Eckersley and J. Burns. An observatory for the SSLiv-
erse. Talk at Defcon 18 (2010). https://www.eff.org/ﬁles/
DefconSSLiverse.pdf.

[11] S. Han, K. Jang, K. Park, and S. Moon. PacketShader:
A GPU-accelerated software router. In ACM SIGCOMM,
September 2010.

[12] J. Heidemann, Y. Pradkin, R. Govindan, C. Papadopoulos,
G. Bartlett, and J. Bannister. Census and survey of the
visible Internet. In 8th ACM SIGCOMM conference on
Internet measurement (IMC), 2008.

[13] J. Heidemann, L. Quan, and Y. Pradkin. A preliminary
analysis of network outages during hurricane sandy. Tech-
nical Report ISI-TR-2008-685b, USC/Information Sci-
ences Institute, November 2012.

[14] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halder-
man. Mining your Ps and Qs: Detection of widespread
weak keys in network devices. In 21st USENIX Security
Symposium, August 2012.

[15] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The
SSL landscape: A thorough analysis of the X.509 PKI
using active and passive measurements.
In 11th ACM
SIGCOMM conference on Internet measurement (IMC),
pages 427–444, 2011.

[16] IANA.

IPv4 address

space registry.

http://

www.iana.org/assignments/ipv4-address-space/
ipv4-address-space.xml.

[17] V. Jacobson, C. Leres, and S. McCanne. libpcap. Lawrence
Berkeley National Laboratory, Berkeley, CA. Initial re-
lease June 1994.

[18] J. Kasten, E. Wustrow, and J. A. Halderman. Cage: Taming
certiﬁcate authorities by inferring restricted scopes. In 17th
International Conference on Financial Cryptography and
Data Security (FC), 2013.

[19] M Koster. A standard for robot exclusion. http://www.

robotstxt.org/orig.html, 1994.

[20] A. Langley. Enhancing digital certiﬁcate security. Google
Online Security Blog, http://googleonlinesecurity.blogspot.
com/2013/01/enhancing-digital-certiﬁcate-security.html,
January 2013.

[21] E. Law. Understanding certiﬁcate name mismatches.
http://blogs.msdn.com/b/ieinternals/archive/2009/12/07/
certiﬁcate-name-mismatch-warnings-and-server-name-
indication.aspx, December 2009.

[22] D. Leonard and D. Loguinov. Demystifying service discov-
ery: Implementing an Internet-wide scanner. In 10th ACM
SIGCOMM conference on Internet measurement (IMC),
pages 109–122, 2010.

[23] Gordon Fyodor Lyon. Nmap Network Scanning: The
Ofﬁcial Nmap Project Guide to Network Discovery and
Security Scanning. Insecure, USA, 2009.

[24] N. Mathewson and N. Provos. libevent—An event notiﬁ-

cation library. http://libevent.org.

[25] HD Moore.

Security ﬂaws

play. Unplug. Don’t Play,

and
January
http://community.rapid7.com/servlet/JiveServlet/
download/2150-1-16596/SecurityFlawsUPnP.pdf.

in universal plug
2013.

[26] Netcraft, Ltd. Web server survey. http://news.netcraft.com/
archives/2013/05/03/may-2013-web-server-survey.html,
May 2013.

[27] N. Provos and P. Honeyman. ScanSSH: Scanning the
Internet for SSH servers. In 16th USENIX Systems Admin-
istration Conference (LISA), 2001.

[28] Luigi Rizzo. netmap: A novel framework for fast packet
I/O. In 2012 USENIX Annual Technical Conference, 2012.

[29] S. Sanﬁlippo and P. Noordhuis. Redis. http://redis.io.
[30] H. Scholz. SIP stack ﬁngerprinting and stack difference
attacks. Talk at Blackhat 2006. http://www.blackhat.com/
presentations/bh-usa-06/BH-US-06-Scholz.pdf.

[31] A. Schulman and N. Spring. Pingin’ in the rain. In 11th
ACM SIGCOMM conference on Internet measurement
(IMC), pages 19–28, 2011.

[32] K. Sklower. A tree-based packet routing table for Berkeley

Unix. In Winter USENIX Conference, 1991.

[33] M. Smith and D. Loguinov. Enabling high-performance
Internet-wide measurements on Windows. In 11th Inter-
national Conference on Passive and Active Measurement
(PAM), pages 121–130. Springer, 2010.

[34] W. R. Stevens and G. R. Wright. TCP/IP Illustrated: The

Implementation, volume 2. Addison-Wesley, 1995.

[35] Tor Project. Tor Bridges. https://www.torproject.org/docs/

bridges, 2008.

[36] Tor Project.

obfsproxy.

https://www.torproject.org/

projects/obfsproxy.html.en, 2012.

[37] J. Viega, M. Messier, and P. Chandra. Network Security
with OpenSSL: Cryptography for Secure Communications.
O’Reilly, 2002.

[38] T. Wilde. Great Firewall Tor probing. https://gist.github.

com/twilde/da3c7a9af01d74cd7de7, 2012.

USENIX Association  

22nd USENIX Security Symposium  619

