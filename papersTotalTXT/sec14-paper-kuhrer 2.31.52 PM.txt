Exit from Hell? Reducing the Impact  

of Ampliﬁcation DDoS Attacks
Marc Kührer, Thomas Hupperich, Christian Rossow,  

and Thorsten Holz, Ruhr-University Bochum 

https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/kuhrer

This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXExit from Hell? Reducing the Impact of Ampliﬁcation DDoS Attacks

Marc K¨uhrer, Thomas Hupperich, Christian Rossow, Thorsten Holz

Horst G¨ortz Institute for IT-Security, Ruhr-University Bochum

Abstract

Ampliﬁcation vulnerabilities in many UDP-based net-
work protocols have been abused by miscreants to launch
Distributed Denial-of-Service (DDoS) attacks that ex-
ceed hundreds of Gbps in trafﬁc volume. However, up
to now little is known about the nature of the ampliﬁca-
tion sources and about countermeasures one can take to
remediate these vulnerable systems. Is there any hope in
mitigating the ampliﬁcation problem?

In this paper, we aim to answer this question and tackle
the problem from four different angles. In a ﬁrst step, we
monitored and classiﬁed ampliﬁcation sources, showing
that ampliﬁers have a high diversity in terms of operat-
ing systems and architectures. Based on these results,
we then collaborated with the security community in a
large-scale campaign to reduce the number of vulnera-
ble NTP servers by more than 92%. To assess possible
next steps of attackers, we evaluate ampliﬁcation vulner-
abilities in the TCP handshake and show that attackers
can abuse millions of hosts to achieve 20x ampliﬁca-
tion. Lastly, we analyze the root cause for ampliﬁcation
attacks: networks that allow IP address spooﬁng. We
deploy a method to identify spooﬁng-enabled networks
from remote and reveal up to 2,692 Autonomous Systems
that lack egress ﬁltering.

1

Introduction

Distributed Denial-of-Service (DDoS) attacks have been
known since many years [8,9,24,34] and they still consti-
tute an important problem today. For a long time, DDoS
attacks were hard to tackle due to their semantic nature:
it is difﬁcult to distinguish an actual attack from a sud-
den rise in popularity for a given service due to a ﬂash
crowd (“Slashdot effect”). A large body of literature is
available on this topic and many DDoS detection mecha-
nisms and countermeasures have been proposed over the
years (e.g., [14,15,43]). Furthermore, advances in Cloud
computing and load balancing techniques helped to miti-
gate this problem [17,18], and nowadays simple types of
DDoS attacks such as SYN and UDP ﬂooding are well-
understood.

However, the adversaries evolved and modern DDoS
attacks typically employ so called ampliﬁcation attacks,
in which attackers abuse UDP-based network protocols
to launch DDoS attacks that exceed hundreds of Gbps
in trafﬁc volume [21, 22]. This is achieved via reﬂec-
tive DDoS attacks [31] where an attacker does not di-
rectly send trafﬁc to the victim, but sends spoofed net-
work packets to a large number of systems that reﬂect the
trafﬁc to the victim (so called reﬂectors). Often, attackers
choose reﬂectors that send back responses that are signif-
icantly larger than the requests, leading to an increased
(ampliﬁed) attack volume. We call such reﬂectors ampli-
ﬁers. Recently, many types of such ampliﬁcation attacks
were discovered [33]. However, little is known about the
nature of the ampliﬁers and about countermeasures one
can take to remediate vulnerable systems.

In this paper, we address this problem and study the
root causes behind ampliﬁcation DDoS attacks. We
tackle the problem from four different angles and pro-
vide empirical measurement results based on Internet-
scale scanning to quantify the problem.

In a ﬁrst step, we want to understand the nature of am-
pliﬁers and determine which kinds of systems are vul-
nerable. Previous work on empirically understanding
DDoS attacks typically focused on ways to estimate the
size of the problem and understanding the infrastructure
behind such attacks [1, 5, 26]. To increase the under-
standing of ampliﬁcation attacks, we utilized protocol-
speciﬁc ﬁngerprinting to reveal as much information as
possible from systems that can be abused on the Internet.
More speciﬁcally, we enumerated the ampliﬁer sources
for seven network protocols and performed large-scale
scans to collect information about vulnerable systems.
This enables us to categorize the types of devices that
can be abused in the wild. We found that there is a large
diversity of vulnerable devices and analyzed their prop-
erties. For example, we found 40.8% of the vulnerable
NTP hosts to run Cisco IOS, an OS that is deployed on
Cisco network devices.

Based on these insights on ampliﬁers, a viable next
step is to reduce the number of vulnerable systems on
the Internet. Previous work on that topic mainly focused

USENIX Association  

23rd USENIX Security Symposium  111

on understanding botnet Command & Control servers
that are used to orchestrate classical DDoS attacks [5].
However, modern ampliﬁcation attacks use a completely
different modus operandi. We contributed to a global
security notiﬁcation procedure where our scanning re-
sults were used to notify NOCs and CERTs of hun-
dreds of large ISPs worldwide about NTP servers vul-
nerable to ampliﬁcation attacks. Furthermore, we col-
laborated with security organizations in order to create
advisories that describe the technical background and ap-
proaches to solve the problem. We analyzed the remedi-
ation success of these measures and found that the num-
ber of NTP servers vulnerable to monlist ampliﬁcation
dropped by 92% in a 13-week period between November
2013 and February 2014. We closely analyzed this effect
and found that especially vulnerable NTP servers within
ARIN have been mitigated, while other geographic re-
gions lag behind.

Since it seems feasible to signiﬁcantly reduce the num-
ber of ampliﬁers, a third angle of the problem is an anal-
ysis of potential attack vectors that adversaries could
abuse in the future. We start with the basic insight that up
to now UDP-based protocols are leveraged by attackers,
since these protocols provide large ampliﬁcation factors.
We study a completely different kind of ampliﬁcation at-
tacks, namely TCP-based ones. Surprisingly, even TCP
can be abused for ampliﬁcation attacks, despite the fact
that this protocol uses a 3-way handshake. This is due
to the fact that certain TCP stacks retransmit SYN/ACK
packets multiple times (some 20x or more) when they
presume that the initial SYN/ACK segment was lost. Thus
an ampliﬁcation of 20x or more is possible. Empirical
scan results suggest that there are hundreds of thousands
of systems on the Internet that can be abused this way.
We performed protocol-speciﬁc ﬁngerprinting to learn
more about the nature of such devices.

As a fourth angle of the problem, we analyzed the
root cause behind ampliﬁcation attacks: if a given net-
work does not perform egress ﬁltering (i.e., veriﬁes
that the source IP address in all outbound packets is
within the range of allocated internal address blocks, see
BCP 38 [13] for details), an attacker can spoof packets
and thus initiate the ﬁrst step of reﬂective DDoS attacks.
Identifying such networks is a challenging problem [12]
and existing solutions rely on a client deployed in the
network under test [3,36]. We utilize a novel remote test
based on DNS proxies that enables us to identify thou-
sands of Autonomous Systems that support IP spooﬁng.
To summarize, our contributions are as follows:

• We performed Internet-wide scans to identify and
monitor all relevant potential ampliﬁers for seven
network protocols vulnerable to ampliﬁcation at-
tacks. We ﬁngerprint and categorize these systems,
showing a high diversity in the ampliﬁer landscape.

• We study the success of a global security notiﬁca-
tion campaign to alert administrators of vulnerable
NTP servers and show the beneﬁts and limitations
of such large-scale initiatives.

• Aiming to assess further ampliﬁcation DDoS tech-
niques, we identify TCP as an alternative source
for ampliﬁcation—despite its three-way-handshake
protocol. We reveal millions of systems that can be
abused to amplify TCP trafﬁc by a factor up to 20x.
• Finally, we aim to tackle the root cause for ampliﬁ-
cation DDoS attacks: networks that do not perform
egress ﬁltering and thus allow IP address spooﬁng.
We deploy a remote scanning technique and ﬁnd up
to 2,692 ASes that permit spoofed IP trafﬁc.

Paper Outline. The paper is organized as follows. In
Section 2, we deﬁne the threat model and outline our
scanning setup to perform Internet-wide scans. We then
shed light onto the landscape of hosts that are vulnerable
to UDP-based ampliﬁcation DDoS attacks. In Section 3,
we detail the effects of our NTP case study. Section 4
tackles the problem of TCP-based ampliﬁers, demon-
strating that the TCP three-way-handshake can be abused
for ampliﬁcation attacks. In Section 5, we introduce a
novel mechanism to identify networks that allow IP ad-
dress spooﬁng. Section 6 reviews prior work and we con-
clude this paper in Section 7.

2 Ampliﬁcation DDoS

We begin with an analysis of the threat landscape. To
this end, we ﬁrst review the general threat model before
we analyze different aspects of ampliﬁcation DDoS at-
tacks. More speciﬁcally, we study the ampliﬁer magni-
tude, measure what kinds of devices can be abused on
the Internet, and determine the churn of ampliﬁers.

2.1 Threat Model
The scope of this work are ampliﬁcation DDoS attacks.
In such an attack, a miscreant abuses public systems
(such as open recursive DNS resolvers) to reﬂect attack
trafﬁc to a DDoS victim [31]. In particular, she abuses
hosts that not only reﬂect but also amplify the trafﬁc.
Typically, the attacker chooses connection-less protocols
in which she can send relatively small requests that result
in signiﬁcantly larger responses. By spooﬁng the source
of the trafﬁc (i.e., impersonating the victim), she can en-
force that the public systems—unwillingly—amplify and
reﬂect trafﬁc to the victim. Prior work has revealed that
at least 14 UDP-based protocols are vulnerable to such
abuse [33]. These protocols offer severe ampliﬁcation
rates—in the worst case, as with the monlist feature in
NTP, they amplify trafﬁc by a factor of up to 4,670.

112  23rd USENIX Security Symposium 

USENIX Association

2

2.2 Ampliﬁer Magnitude

In this paper, we try to shed light onto the landscape of
ampliﬁers, i.e., hosts that are vulnerable to ampliﬁcation
abuse. As a ﬁrst step, we enumerate and observe these
ampliﬁers in the IPv4 address space. That is, we per-
formed Internet-wide scans for a subset of the vulnerable
protocols: DNS, SNMP, SSDP, CharGen, QOTD, NTP,
and NetBIOS. We chose to monitor these protocols, as
prior work only approximated the ampliﬁer landscape for
them. The ampliﬁcation vulnerabilities of these seven
protocols can be abused by attackers to launch severe
ampliﬁcation attacks.
In addition, all these seven pro-
tocols run server-side, thus hosts running such protocols
are seemingly better connected and more stable in terms
of IP address churn than hosts of end users.

Scanning Setup. We developed an efﬁcient scanner to
identify ampliﬁers for these protocols in Internet-wide
scans. In order to respect good scanning practices as sug-
gested by Durumeric et al. [11], we limit the number of
requests that a particular network receives. For this rea-
son, we compute the scan targets as a pseudo-random
permutation of the entire IPv4 address space (except the
IP address 0.0.0.0). That is, we use a linear feedback
shift register (LFSR) to compute the order of the 232 − 1
IPv4 addresses to be scanned. In order to avoid to be-
come blacklisted, we refrained from aggressive scanning
and distributed the scans over 48 hours. In addition, we
set up a reverse DNS (rDNS) record for our scanner and
conﬁgured a web server that presents project information
and an explanation how to opt-out from our scans.

For each of the protocols, we send a request that can be
used to amplify trafﬁc. That is, we send NTP version
requests, SSDP SEARCH requests, SNMP v2 GetBulk
requests, DNS A lookups, and NetBIOS’ default name
lookup. We ran the scans on a weekly basis from Nov
22, 2013 to Feb 21, 2014 to observe potential changes in
terms of ampliﬁers. We chose to use the weekends for
our scans so that the load of both our scanning network
and the scanned networks have less impact on business
activities.
In the case of CharGen and QOTD, we re-
frained from repeating the scans, as the number of am-
pliﬁers was too low to justify repeated full scans.

During the course of our scans, we received 90 emails
from administrators asking about the scanning experi-
ments. Adhering to these requests, we excluded 91 IP
preﬁxes and 30 individual IP addresses (about 3.7 mil-
lion IP addresses in total) after administrators asked us
to do so. To allow comparisons between two scans, we
ignored these IP addresses in all of our scans, i.e., even
if they were not blacklisted at the beginning.

Figure 1: Trend of UDP-based ampliﬁers

Table 1: Intersection of potential ampliﬁers based on the
Internet-wide scan on Nov 22, 2013

Intersection (in %)

Protocol

DNS
CharGen
NetBIOS
NT P
QOT D
SNMP
SSDP

DNS CharGen NetBIOS NT P QOT D SNMP SSDP

-
1.7
4.7
0.9
14.0
33.5
9.9

0.0
-
0.1
0.3
11.8
0.1
0.0

0.5
2.4
-
0.2
18.5
0.6
3.1

0.2
20.0
0.6
-
8.4
2.7
0.2

0.0
4.0
0.2
0.0
-
0.0
0.1

11.6
9.4
1.8
3.2
4.2
-
0.4

2.1
1.3
5.9
0.1
8.5
0.2
-

Results. Figure 1 illustrates the number of identiﬁed
ampliﬁers per protocol. By far the highest number of
ampliﬁers was found for open recursive DNS resolvers,
slightly ﬂuctuating between 23 and 25.5 million systems.
For most of the other protocols, the number of ampli-
ﬁers is quite constant. An exception are NTP ampliﬁers,
whose popularity constantly decreases, a phenomenon
that we describe in detail in Section 3. None of the proto-
cols (except for the two legacy protocols CharGen with
107,725 and QOTD with 36,609 vulnerable hosts) had
fewer than 2.5 million ampliﬁers, showing a large land-
scape of hosts that can be abused.

Quite interestingly, some systems run multiple vulner-
able services. Table 1 shows the intersection between
the individual protocols relative to the overall number of
ampliﬁers for the protocols speciﬁed in the ﬁrst table col-
umn. The largest overlap is between DNS and SNMP:
a third of the public SNMP hosts also run open recur-
sive DNS resolvers. Note that the table is not symmet-
ric, which, for example, reveals that less than 11.6% of
the open DNS resolvers also run unprotected SNMP dae-
mons. For most of the other protocols the intersection is
negligible, though. This means that the number of ampli-
ﬁers basically sums up. We measured almost 46 million
ampliﬁers for all scanned UDP-based protocols.

USENIX Association  

23rd USENIX Security Symposium  113

3

Table 2: Results of the device ﬁngerprinting for the ampliﬁers identiﬁed on Nov 22, 2013

Hardware (in %)

Architecture (in %)

mbedded

E

5.7
1.3
0.5
10.4
2.9

Router

9.7
0.7
44.8
66.5
94.3

Unknown

84.0
96.0
52.3
20.0
0.6

Others

0.6
2.0
2.4
3.1
2.2

Protocol

DNS
NetBIOS
NT P
SNMP
SSDP

x86
0.6
87.6
9.6
2.9
1.5

MIPS

7.0
0.1
18.4
44.9
2.7

PowerPC

0.0
0.0
6.9
1.1
0.0

Unknown

92.0
12.3
64.0
48.0
95.7

Others

0.4
0.0
1.1
3.1
0.1

Unix
3.6
0.4
18.2
1.5
1.8

Linux

3.4
0.1
26.8
11.4
36.0

Ubuntu

0.0
0.0
0.0
0.1
5.5

FreeBSD

0.0
0.0
4.7
0.1
0.0

Operating System (in %)
IOS
Cisco

Windows

OS
ZyN
7.5
0.3
0.0
17.8
0.7

0.8
87.3
0.2
0.8
1.3

Junos

0.0
0.0
2.9
0.0
0.0

NetOS

0.0
0.0
0.0
0.0
19.3

Others

1.1
0.7
1.7
8.7
1.8

Unknown

83.5
11.2
4.7
57.4
33.6

0.1
0.0
40.8
2.2
0.0

2.3 Ampliﬁer Classiﬁcation
Observing the magnitude of the problem, we wondered
what kinds of systems allow for such ampliﬁcation vec-
tors.
In an attempt to answer this question, we use
protocol-speciﬁc ﬁngerprinting to reveal as much infor-
mation as possible from these systems. That is, we gen-
erate device ﬁngerprints by inspecting the replies from
the ampliﬁers during our UDP scans. We dissect the re-
sponses of each host and protocol individually to clas-
sify systems in three categories: the underlying hardware
(e.g., routers, desktop computers, or printers), the system
architecture (such as x86, MIPS, or PowerPC), and the
operating system.

Fingerprinting Setup. We manually compiled 1,873
regular expressions that allow a ﬁne-granular genera-
tion of ﬁngerprints. We further leverage Nmap service
probes [27] to ﬁngerprint the NetBIOS protocol. For
NetBIOS, we also focus on the structure of the payload
to obtain information about the OS. NTP version re-
sponses reveal the processor type, OS, and the version
of the running NTP daemon. To generate ﬁngerprints
for the SNMP protocol, we analyze the object identi-
ﬁer values (OID) in the responses. For SSDP, the re-
sponses contain text fragments resembling HTTP head-
ers that provide system information in the Server header
ﬁeld. Additionally, SSDP headers include Unique Ser-
vice Name (USN) and Search Target (ST) ﬁelds, provid-
ing more general information about a device.

We improve the coverage of our UDP ﬁngerprints by
scanning the ampliﬁers for common TCP-based proto-
cols. We use FTP, HTTP, HTTPS, SSH, and Telnet to
leverage information in protocol banners and text frag-
ments. We synchronize the TCP and UDP scans, hence
once a full Internet-wide UDP scan is ﬁnished, we initi-
ate a follow-up TCP scan for hosts that are found to be
an ampliﬁer for at least one UDP protocol.

Results. Table 2 depicts the ﬁngerprint results obtained
for the ampliﬁers found on Nov 22, 2013. For reasons of
brevity, we summarize ﬁngerprint details with less than
2% share to Others. Note that the category “router” also

includes gateways, switches, and modems as many of
these devices provide similar features.

The best results for the OS classiﬁcation are achieved
for NTP. We ﬁnd that 40.8% of the vulnerable NTP hosts
run Cisco IOS, an OS that is deployed on Cisco de-
vices such as business routers and switches. We fur-
ther identify 1,267,008 ampliﬁers (17.4%) running Linux
on MIPS and 357,076 devices (4.9%) running Linux on
PowerPC. These two combinations are common for con-
sumer devices such as routers and modems. The majority
of NTP ampliﬁers thus run on networking equipment.

Similarly,

two thirds of the SNMP ampliﬁers are
routers. With a share of 17.8%, the ZyNOS system
stands out—apparently running unprotected SNMP ser-
vices per default. But we also observe a wide distribu-
tion of other SNMP devices. This includes 58,000 of-
ﬁce printers (0.7%), 51,037 ﬁrewall appliances (0.6%),
and 40,061 network cameras (0.5%). Routers are even
more prominent among SSDP hosts with a share of about
94.3%. This shows that at least three of the analyzed pro-
tocols are overly prominent on routers.

On the contrary, the vast majority of NetBIOS ampli-
ﬁers run Windows on x86, a typical setup of desktop
computers. Since the Conﬁcker outbreak in 2008, it is
known that millions of Windows systems on the Internet
are reachable via the NetBIOS [32] protocol.

Unfortunately, DNS provides only limited ﬁngerprint
information and we thus had to solely rely on the TCP
ﬁngerprints to classify DNS servers. However, most
DNS servers did not run TCP services, resulting in a
high number of uncategorized hosts. Even if TCP ser-
vices were accessible, the provided information was of-
ten too generic (e.g., banners as “Apache”, “SSH-2.0-
OpenSSH”, or “FTP Server”). However, we could iden-
tify 5.4% of the hosts (1,388,348) as MIPS-based routers
with ZyNOS, which is common for broadband routers
distributed by manufacturer ZyXEL.

A high diversity of ampliﬁers is attested when looking
at smaller clusters. For example, we ﬁnd 695 vulnera-
ble devices to be running Miele Logic, a payment sys-
tem for Miele devices such as washing machines. Sim-
ilarly, we identify 9,224 ampliﬁers running server man-

114  23rd USENIX Security Symposium 

USENIX Association

4

Table 3: Ampliﬁer churn rate per protocol

Protocol

DNS
NetBios
NT P
SNMP
SSDP

Initial Scan

( # )

25,681,450
2,853,213
7,269,015
8,866,748
5,336,107

Week 1

( # )

12,190,302
1,455,351
6,859,043
4,939,118
3,088,148

( % )

47.5
51.0
94.4
55.7
57.9

Week 13

( # )

8,263,508
979,266
4,222,060
3,411,563
2,067,830

( % )

32.2
34.3
58.1
38.5
38.8

agement systems (like iLO, iDRAC, or IPMI). We fur-
ther ﬁnd 51,351 Digital Video Recorders, 7,739 Power
Distribution Units, and 20,927 Network Attached Stor-
age devices (NAS) to be vulnerable to ampliﬁcation.

Ambiguous Fingerprints. We had to resolve a few
conﬂicts when combining the ﬁngerprints from multi-
ple protocols. For NTP ampliﬁers, we ﬁnd valid TCP
ﬁngerprints for 1,919,932 hosts, while conﬂicts emerge
for 9,945 IP addresses (0.5%). For SNMP, we lever-
age TCP data for 2,042,541 ampliﬁers while obtaining
31,346 conﬂicts (1.5%). We presume that these conﬂicts
were caused by responses from “border” devices such as
routers that host some services themselves (e.g., SNMP
and SSH), while requests for FTP or HTTP were for-
warded to the devices connected to the router, resulting
in multiple ﬁngerprints for a single IP address. To resolve
these conﬂicts, we assign a lower priority to TCP ﬁnger-
prints when classifying the ampliﬁers. In addition, we re-
frained from aggregating the individual UDP ﬁngerprints
to one large set, as the overlap between the UDP proto-
cols is low anyway (cf. Table 1).

2.4 Ampliﬁer Churn
An important aspect from the attacker’s point of view is
how fast the set of ampliﬁers changes. An up-to-date list
of reliable ampliﬁers is key to achieving a high impact
during an attack. For this reason, we measure the churn
rate of the ampliﬁers per protocol, which shows how fast
a list of ampliﬁers becomes outdated. That is, we enu-
merate the ampliﬁers based on their IP addresses on Nov
22, 2013 and check if these hosts are still vulnerable for
ampliﬁcation attacks in the subsequent weeks.

Table 3 lists the numbers of ampliﬁers for the ﬁve UDP
protocols that we monitored on long term. Figure 2 illus-
trates the ratio of ampliﬁers that are still reachable at the
same IP address over time. For most protocols (DNS,
NetBIOS, SNMP, and SSDP) the churn of ampliﬁers is
quite high: only about 50% of the initial hosts are still
reachable after one week. After the second week, we
again observe a minor decrease, resulting in a total of
40 - 50% of available ampliﬁers for each protocol. For
the following weeks we ﬁnd the number of ampliﬁers to
reach an almost steady level.

Figure 2: IP churn of potential ampliﬁers

To understand the nature of the signiﬁcant drop after
the ﬁrst week and obtain knowledge about the vulnera-
ble systems still reachable after 13 weeks, we leverage
our ﬁngerprinting techniques. We ﬁnd the ampliﬁers that
became outdated within the ﬁrst week to be mostly con-
nected via consumer routers (e.g., 78.8% for SNMP). We
assume that these routers are connected via DSL with
low IP address lease times, causing the rapid breakdown
rate after one week [37]. To conﬁrm this assumption,
we aggregated reverse DNS records for a random sample
of 100,000 unreachable ampliﬁers and checked for com-
mon indicators of dial-up connections (i.e., the appear-
ance of tokens such as “dialup”, “dyn”, or “pool”—we
further manually veriﬁed the Top 5 providers not provid-
ing indicators in the rDNS data). We indeed found at
least 82.8% of the IP addresses to be linked to connec-
tions with dynamic IP address assignment. This means
that an attacker needs to frequently re-scan for ampliﬁers
or otherwise risks to decrease the impact of her attacks.
The ampliﬁers that are still reachable after 13 weeks
presumably have longer lease times or static Internet
connectivity. For example, we can see a clear distinction
between countries in which SSDP hosts disappeared af-
ter a week (e.g., China, Argentina, Russia) and countries
in which most hosts are still reachable after 13 weeks
(e.g., Korea, United States, Canada). While only 3.4%
of the Chinese ampliﬁers were still reachable after 13
weeks, still more than 69% of the Canadian ampliﬁers
were available. This shows that the geolocation of In-
ternet links (and thus the risk to face IP address churn)
highly inﬂuences the availability of ampliﬁers.

Interestingly, the NTP protocol draws a completely
different picture. Given a ﬁxed list of vulnerable hosts,
the ratio of available NTP ampliﬁers decreases at a neg-
ligible rate. After four weeks, an attacker can still abuse
approximately 90% of the initial NTP ampliﬁers. After
13 weeks, still 58.1% of the initially-scanned hosts are

USENIX Association  

23rd USENIX Security Symposium  115

5

reachable. Of the 41.9% decrease after 13 weeks, many
systems presumable disappeared because of our NTP
ampliﬁer notiﬁcation campaign (cf. Section 3)—and not
because of IP churn. The actual churn is thus even lower
and signiﬁcantly differs from churn in the other proto-
cols. In contrast to the vulnerable ampliﬁers of the other
protocols, more than 40% of the NTP ampliﬁers are run-
ning Cisco IOS that is commonly distributed on busi-
ness routers and switches with static IP addresses. We
further ﬁnd 53.7% of the vulnerable hosts to be located
within the United States (31.3%), South Korea (13.0%),
and Japan (9.4%) for which the typical IP lease times for
broadband are above average.

3 Case Study: NTP Ampliﬁcation

After inspecting the ampliﬁcation attacks in general, this
section focuses on NTP, which we consider by far the
worst among all known vulnerable protocols. NTP is a
promising ampliﬁcation vector for an attacker for three
reasons. First, NTP server implementations allow for
ampliﬁcation factors of up to 4,670 [33]. Attackers can
abuse the monlist feature in popular ntpd versions,
which requests a list of up to 600 NTP server clients in
about 44kB UDP payload. Second, as we have seen in
Section 2.4, NTP servers have minimal IP address churn.
Lastly, NTP offers even further ampliﬁcation vectors.
For example, the NTP version request reveals a ver-
bose system ﬁngerprint (OS, architecture, server info) of
the NTP server, allowing about 24-fold ampliﬁcation.

Attackers have already practically demonstrated the
impact of NTP attacks. For example, in February 2014,
CloudFlare observed a 400 Gbps attack against a French
hosting provider [22]—the largest DDoS attack observed
so far. If the attacker had even more resources (in partic-
ular bandwidth) to send spoofed monlist requests, the
impact of such an attack could have been even higher.

Luckily, NTP servers can be conﬁgured such that the
monlist requests are disabled for unauthorized users,
and more recent ntpd versions protect this feature with
a proper session handshake. These changes typically
do not bring disadvantages for the administrators, while
they eliminate the ampliﬁcation vector. Even disabling
functionality like monlist does not break time synchro-
nization. But although secure conﬁgurations are well-
documented, most administrators are not aware of the
ampliﬁcation vulnerabilities and operate NTP servers in
(sometimes bad) default conﬁgurations. From a security-
perspective this raises several urging questions: once we
found ampliﬁcation vulnerabilities, how can we reduce
the number of ampliﬁers? Can we notify administrators?
How effective would such a notiﬁcation procedure be?

3.1 NTP Ampliﬁer Notiﬁcations
In a large-scale campaign, we have launched a global no-
tiﬁcation procedure to alert NTP administrators about the
ampliﬁcation problems. We thankfully cooperated with
many parties striving towards the same goal: reducing
the number of NTP ampliﬁers.

Datasets. We deﬁne two datasets of NTP ampliﬁers.
NT Pver contains all NTP servers that reply to version
requests, i.e., systems that are “less” vulnerable to am-
pliﬁcation abuse. This is the same dataset that we ﬁnger-
printed in Section 2. As a subset of this, NT Pmon contains
the NTP servers that also support the monlist requests,
i.e., systems that allow for more “severe” ampliﬁcation.

Campaign. We collaborated with security organiza-
tions in order to create technical advisories that de-
scribe how to solve the ampliﬁcation problems in NTP.
This resulted in public advisories of CERT-CC [42] and
MITRE [25]. Due to the high number of vulnerable
Cisco devices for NTP ampliﬁcation (cf. Table 2), we
also contacted Cisco which resulted in a public advisory
of Cisco’s PSIRT [7]. The advisories describe how to
disable the monlist feature in typical NTP server im-
plementations (such as ntpd). The same conﬁguration
change also disables version responses. Thus, in prin-
ciple, the advisories help to reduce the number of servers
in both datasets, NT Pver and NT Pmon.

In addition, we distributed lists of IP addresses of the
systems in NT Pmon among trusted institutions. For ex-
ample, we shared our data with direct contacts in NOCs
and CERTs of hundreds of large ISPs worldwide. Fur-
thermore, we cooperated with data clearing houses (e.g.,
TrustedIntroducer [41] and ShadowServer [35]) that in-
formed their subscribers. Lastly, we informed the NTP
Pool Project [28] about misconﬁgured hosts in the public
pool of NTP servers and synchronized our notiﬁcations
with the OpenNTPProject [30] to start the announce-
ments simultaneously.

We did not actively notify systems that are only in
NT Pver for two reasons. First, we saw an urgent need to
close the ampliﬁers in NT Pmon, as the monlist ampliﬁ-
cation is in the order of magnitudes higher than of other
NTP features. Second, we can then compare the efﬁ-
ciency of advisories (which affect both datasets) with the
effects of active and personalized notiﬁcations (which af-
fect only NT Pmon).

3.2 Analyzing the Remediation Success
We ran weekly scans for NTP ampliﬁers to observe the
developments over time. Figure 3 shows the number of
NTP ampliﬁers per week and marks important events.

116  23rd USENIX Security Symposium 

USENIX Association

6

Figure 3: Trend of NT Pmon ampliﬁers

At their peaks on Dec 15, 2013, we tracked 7,364,792
servers in NT Pver and 1,651,199 servers in NT Pmon, re-
spectively. The number of ampliﬁers in NT Pmon is steady
at ﬁrst, also after Symantec has released a blog article
about the attacks late December 2013 [39]. However, the
number of ampliﬁers starts to drop (15.4%) right after
we released the CVE and shared a ﬁrst (incomplete) list
of IP addresses. A second major drop (43.4%) happened
during the week we distributed twice an updated (and
complete) list of potential ampliﬁers and two other ad-
visories were released. After publishing further weekly
notiﬁcations (omitted from the graph for better readabil-
ity) we have observed a steady decrease of ampliﬁers.

At the end of our measurements on Feb 24, 2014,
the number of ampliﬁers reached a local minimum at
4,802,212 (NT Pver) and 126,080 (NT Pmon). Compared
to the peak numbers, this constitutes signiﬁcant drops in
both datasets. The number of ampliﬁers in NT Pver de-
creased by 33.9%, a success likely stemming from the
advisories and recent publicity on NTP attacks in gen-
eral. However, looking at the development of severe am-
pliﬁers shows how successful global notiﬁcation efforts
can be: the number of ampliﬁers (NT Pmon) dropped by
92.4% with an ongoing decrease.

To verify whether

the number of ampliﬁers for
NT Pmon still decreases continuously, we performed an-
other Internet-wide scan on Jun 20, 2014 and ﬁnd 87,463
hosts still vulnerable to monlist ampliﬁcation, i.e., a de-
crease of almost 40,000 hosts since Feb 24, 2014.

Fingerprinting. We compared the ﬁngerprints of the
NT Pmon datasets at the start and end of our measure-
ments. We clearly observe decreasing numbers for all
architectures, OSes, and hardware types. Interestingly,
the ratio of MIPS-based ampliﬁers dropped from 47.2%
to 19.1%, while the ratio of x86-based systems increased

Table 4: Decrease of NT Pmon ampliﬁers per country

Country

Nov 22, 2013

Feb 24, 2014

Decrease

Ampliﬁers (in #)

Remaining

(in %)

US
KR
RU
DE
CA
CN
JP
GB
UA
BR
TW
NL
FR
CZ
PL

1,073,666
88,289
58,519
50,627
36,070
32,995
29,915
24,408
19,270
13,900
13,362
13,122
12,992
11,825
10,891

28,415
16,183
11,476
4,793
1,881
4,172
2,777
2,741
2,716
2,719
6,397
3,934
4,557
1,226
1,960

1,045,251
72,106
47,043
45,834
34,189
28,823
27,138
21,667
16,554
11,181
6,965
9,188
8,435
10,599
8,931

2.6
18.3
19.6
9.5
5.2
12.6
9.3
11.2
14.1
19.6
47.9
30.0
35.1
10.4
18.0

from 40.2% to 58.0%. Similarly, 23.0% of the devices
of a popular router manufacturer remain vulnerable—a
value standing out from the average decrease. On ab-
solute scale, though, the numbers drop across all ﬁnger-
prints, indicating that the clean-up was not driven only
by a single device type or manufacturer.

Geographic Distribution. We also investigated the
geographical distribution of the ampliﬁers. For this, we
used the MaxMind GeoIP database [23] to assign a coun-
try to the IP address of an ampliﬁer. We then compared
how the numbers of ampliﬁers evolve in single countries.
Table 4 lists the remaining ampliﬁers of the 15 countries,
which had the most ampliﬁers in Nov 2013. The clean-
up was—on relative scale—most successful in the US,
where the number of ampliﬁers decreased to only 2.6%.
In other countries like Taiwan the number decreased only
to 47.9%. These differences may be caused by the num-
ber and quality of direct contacts we had in the US com-
pared to Taiwan: we admittedly had more contacts in the

USENIX Association  

23rd USENIX Security Symposium  117

7

Table 5: Decrease of NT Pmon ampliﬁers per RIR

RIR

ARIN
RIPE
APNIC
LACNIC
AFRINIC

Ampliﬁers (in #)

Nov 22, 2014

Feb 24, 2014

Decrease

1,112,422
283,991
202,719
21,721
7,495

30,766
53,324
38,122
5,075
920

1,081,656
230,667
164,597
16,646
6,575

Remaining

(in %)

2.8
18.8
18.8
23.4
12.3

US and Europe compared to the rest of the world. But
it also shows that the current network of CERTs is not
perfectly connected to share our information equally in
all countries. For example, also European countries like
France (35.1%) and Austria (47.1%) lag behind the av-
erage decrease. However, on an absolute scale, the situ-
ation is different. While the number of NTP ampliﬁers
was clearly reduced in the US, still 28,415 systems re-
main vulnerable to monlist ampliﬁcation.

Table 5 shows the absolute numbers of NTP servers
Internet Registry (RIR), which (very
per Regional
It
roughly) indicates the continent of the ampliﬁers.
shows that we face a global problem, but also proves that
all regions in the world have acknowledged the problems.

Per-Provider Statistics. A closer look at
the Au-
tonomous Systems (AS) distribution sheds light onto
how ampliﬁers have been closed. Of the 96 ASes that
had at least 1,000 ampliﬁers, about half have shut down
more than 95% of the ampliﬁers. This shows that many
providers either enforce most ampliﬁers in their networks
to be shut down or successfully ﬁlter NTP trafﬁc at the
network level. More speciﬁcally, we identiﬁed 73 ASes
(0.44% of all ASes we observed during our monitor-
ing period) that had more than 100 NTP servers in one
week, and did not have a single vulnerable server left
open in the subsequent weeks. This strongly suggests
that these providers perform network-level ﬁlters, as it is
unlikely that so many individual servers were all cleaned
up within a few days. Nine ASes left open more than
half of the ampliﬁers, i.e., these providers do very little
to mitigate the threat. We are currently establishing in-
dividual contacts with the least-active ASes and hope to
understand the reasons for the remaining ampliﬁer land-
scape in their networks.

Result Veriﬁcation. We veriﬁed if the drop in NTP
ampliﬁers is not caused by networks blocking our scan-
ner [10]. This can already be seen in the ampliﬁer trend
graph (Figure 1), in which the number of ampliﬁers for
other protocols remains almost constant. To be sure, we
scanned for NTP ampliﬁers from a secondary host in
a different /16 network. The primary scanner indeed
missed 8.6% of the ampliﬁers that the secondary scan-

ner found. We manually investigated this and found 904
networks (/20) that have at least ﬁve ampliﬁers that the
primary scanner missed—indicating that some networks
do blacklist our scanner. While our primary scanner has
thus missed ampliﬁers, these systems make up an almost-
negligible part of the 92.2% decrease of ampliﬁers.

3.3 Lessons Learned
Summarizing, the campaign to reduce the number of
NTP monlist ampliﬁers was quite effective and showed
remediation successes for almost 95% of the vulnerable
hosts just after 6 months. As such, it would be interesting
to see recipes to repeat this success in similar campaigns
for other security-critical issues, such as ampliﬁcation
vulnerabilities in other protocols or even unrelated, but
security-critical problems like the heartbleed vulnera-
bility in OpenSSL. Figure 3 clearly shows that the coun-
teractions (advisories and IP address lists) correlate with
the decrease in numbers of ampliﬁers.

Unfortunately, it is impossible to proof causality, in
particular, to see which IP address distribution channels
or which advisories were most effective. However, in our
conversations with providers we had the impression that
it helps to repeatedly point out the problem. Further, it
may not be sufﬁciently effective to have public advisories
that nobody reads. Instead, we found that communica-
tion was key to motivate CERTs and providers to act ac-
cordingly. Once we reached out to CERTs and providers,
it typically was no problem to close the vulnerable hosts.
On the negative side, though, we experienced that
the Internet community is not well-prepared for such
campaigns. Although we were quite well-connected
with nationally and internationally operating CERTs
and providers, it is hard to reach out to all providers
individually.
If providers and CERTs were bet-
ter connected to non-proﬁt data clearing houses (like
shadowserver.org), vulnerability notiﬁcations could
be sent out more efﬁciently.

4 TCP-based Ampliﬁcation Attacks

In the previous section, we have shown that we can have
an inﬂuence on the ampliﬁer landscape. As such, we
introduce next steps attackers may take once we “ﬁx” all
the protocols that have been documented to be vulnerable
for ampliﬁcation attacks [33]. Given the connection-less
nature of UDP, it comes as no real surprise that UDP-
based protocols may allow for ampliﬁcation attacks.

In this section, we analyze to what extent TCP allows
for ampliﬁcation attacks similar to the UDP-based at-
tacks. TCP is a connection-oriented protocol, in which
early on (i.e., during the handshake) the IP addresses of
both communication parties are implicitly veriﬁed via

118  23rd USENIX Security Symposium 

USENIX Association

8

Attacker

Amplifier

Victim

1.  SYN

1.  SYN

1
 
r
o
i
v
a
h
e
B

2
 
r
o
i
v
a
h
e
B

2.  SYN/ACK
3.  SYN/ACK
4.  SYN/ACK

. . .

n.  SYN/ACK

2.  SYN/ACK

3.  RST

4.  SYN/ACK

Figure 4: Ampliﬁcation abuse in the TCP handshake

initially-random TCP sequence numbers. We evaluate
how TCP can be abused for ampliﬁcation regardless of
the TCP three-way-handshake.

From the viewpoint of the attackers, abusing TCP
brings multiple beneﬁts. First, providers cannot easily
block or ﬁlter TCP trafﬁc related to well-known proto-
cols (such as HTTP), as compared to protocols that are
less critical (such as CharGen, QOTD, or SSDP). In ad-
dition, it is hard to distinguish attacks from normal trafﬁc
in a stream of TCP control segments, while providers can
deploy payload-based ﬁlters for attack trafﬁc from many
UDP-based protocols. Lastly, there are millions of po-
tential TCP ampliﬁers out there and “ﬁxing” them seems
like an infeasible operation.

4.1 TCP Ampliﬁcation Background
TCP initiates a connection with a three-way-handshake,
which works as follows: a client willing to start a TCP
connection sends a SYN segment to a server and this
packet contains a random sequence number seqA. If the
server is willing to accept the client, it responds with a
SYN/ACK segment, in which the acknowledgment num-
ber is set to seqA + 1 and a random sequence number
seqB is added as well. In the third step, the client com-
pletes the connection setup by sending a ﬁnal ACK to the
server where the sequence number is set to seqA + 1 and
the acknowledgement number is set to seqB + 1.

At ﬁrst sight, TCP thus does not allow ampliﬁcation:
all segments are of the same size and no data bytes are
exchanged before the handshake is ﬁnished. Assuming
that the server draws TCP sequence numbers at random,
there is no practical way to complete the handshake with
IP-spoofed trafﬁc. If the client address is spoofed, the-
oretically only one single SYN/ACK is sent to a potential
victim. While this allows to reﬂect trafﬁc, it does not
amplify the trafﬁc and therefore does not attack a victim
with more bytes than sent by an attacker.

In practice,

though, TCP connections encounter
packet loss. TCP stacks thus deploy segment retransmis-

Amplifier

Amplifier

Amplifier

Amplifier

Attacker

Internet

assigned

IP

non-assigned

IP

Victim Network

spoofed SYN
SYN/ACK
RST

Figure 5: Attacker’s choice of targets

sions, i.e., they retransmit segments that have not been
acknowledged by the other party. We noticed that re-
transmissions also occur during the handshake. Many
popular TCP stacks resend SYN/ACK segments until: (i)
an ACK is received (and the connection is successfully
established), (ii) a threshold is met (and the connection
times out), or (iii) the connection is closed by the client
(e.g., via a RST segment).
In face of ampliﬁcation at-
tacks, this is problematic, as the client’s IP address is not
validated until the handshake is complete.

Figure 4 illustrates two typical behaviors of the TCP
handshake. The ﬁrst behavior illustrates a server repeat-
edly sending SYN/ACK segments, resulting in a TCP am-
pliﬁcation. The second behavior points out a way for am-
pliﬁcation even though the client (i.e., the victim) sends
a RST segment to tear down the (not-yet-existing) TCP
connection. In principle, this instructs servers (i.e, am-
pliﬁers) to stop sending any further SYN/ACK segments.
We measured if hosts obey to this behavior.

4.2 Measuring TCP Ampliﬁcation
As a ﬁrst step to estimate the scope of this problem, we
measure how the TCP stacks implement retransmissions
during the TCP handshake. We perform an Internet-wide
SYN scan and record the replies for further analysis. Our
scanner does not complete the handshakes (i.e., we do
not send ACK segments). With this, we aim to mimic the
behavior of a system under an ampliﬁcation attack that
did not initiate the TCP connection in question. If TCP
segments arrive that do not belong to any (half-)open
connection (such as the reﬂected SYN/ACK segments in
our scenario), TCP stacks either i) ignore these segments,
or ii) respond with a RST segment, asking the other side
to abort the TCP connection.

A victim, however, might not able to respond with RST
packets, e.g., when it is already suffering from overload.
Similarly, an attacker does not necessarily need to steer
her attack against assigned IP addresses as shown in Fig-
ure 5. That is, the attacker can target an unassigned IP
address so that there is no host that responds with RST
segments. As a result, the capacity of the victim’s net-

USENIX Association  

23rd USENIX Security Symposium  119

9

Figure 6: HTTP, Telnet, and CUPS without RST

Figure 7: HTTP and Telnet with RST

work is overloaded by SYN/ACK segments. Addressing
arbitrary IP addresses in the target network thus allows
an attacker to control that no RST responses will be sent,
leading to higher impact of an ampliﬁcation attack.

TCP Scanning. We run two separated TCP scans to
mimic both behaviors. In the ﬁrst scan, we only send SYN
segments and do not send anything back when receiving
SYN/ACK segments. In the second scan, we “acknowl-
edge” each incoming SYN/ACK segment with a RST seg-
ment. We performed the ﬁrst scan for two popular pro-
tocols (i.e., HTTP and Telnet) and one printer-oriented
protocol (CUPS). We chose these protocols, as according
to Internet Census 2012, HTTP and Telnet yield a high
number of reachable hosts [40]. In addition, to evaluate
the TCP behavior of printers, we chose to scan CUPS.

In total, 66,785,451 HTTP hosts, 23,519,493 Telnet
hosts, and 1,845,346 CUPS hosts replied to our requests.
Figure 6 shows the results of the ﬁrst scans as a CDF.
The graph outlines that 6% of all HTTP hosts reply with
a single SYN/ACK response and 24% of the hosts send at
most three packets. A rise can be observed in-between
3 and 4 packets, meaning that 42% of the hosts reply
to our SYN requests with 4 packets or less. We ﬁnd the
highest rise for 5 to 6 packets as 53.1% of all hosts send
at most ﬁve SYN/ACK segments, but already 97.8% send
six segments (or less). That is, 46.9% of the reachable
HTTP hosts allow an ampliﬁcation factor of 6 or higher.
Similar trends can be observed for the Telnet proto-
col. We ﬁnd 55.6% of all Telnet hosts to enable an am-
pliﬁcation attack with factor 6 or higher.
In contrast
to HTTP, about 12.2% of the Telnet hosts (more than
2.8 million systems) amplify requests even by factor 20.
CUPS hosts, on the contrary, show less severe ampliﬁca-
tion rates. About 41.8% of the CUPS hosts replied with
only a single packet and, in general, the number of seg-
ments sent by CUPS hosts is lower.

Figure 7 shows the results of our second scan (with
RST). Indeed, sending RST tremendously changes the be-
havior of TCP stacks. In contrast to our ﬁrst scan only
0.03% of Telnet hosts allow ampliﬁcation by factor 20
which is a negligible number of 7,247 hosts. Almost
94% of all Telnet hosts send only one SYN/ACK packet in
response; the same number applies for HTTP. A minor
fraction of hosts keep resending SYN/ACK segments. We
count 506,476 devices for HTTP and 114,157 devices for
Telnet that send six SYN/ACK segments. Still, for the at-
tack victim, replying with RST segments signiﬁcantly re-
duces the impact for TCP ampliﬁcation attacks and thus
constitutes a potential proactive countermeasure.

4.3 Categorizing TCP Ampliﬁers
In this subsection, we aim to categorize the most preva-
lent behaviors that we have identiﬁed in the previous sec-
tions. Figures 6 and 7 have revealed signiﬁcant groups
of hosts that reply with the same number of TCP seg-
ments. Table 6 summarizes how many hosts belong to
each of these groups. What kinds of systems are vul-
nerable to ampliﬁcation attacks? To answer this ques-
tion, we ﬁngerprint the selected groups by re-using our
TCP-based scans to obtain information via FTP, HTTP,
HTTPS, SSH, and Telnet.

First, we classify the HTTP hosts that sent exactly six
segments. Of the systems for which we obtained a ﬁnger-
print, about 88% (in total 3,228,000 hosts) run a Linux or
Unix OS. Manual inspection has revealed that many of
them are routers or embedded devices often running an
FTP server (e.g., for a NAS). Other devices were vendor-
speciﬁc, such as the ZynOS operating system. We also
found numerous MikroTik devices and a smaller group
of TP-LINK routers and D-Link devices.
In contrast,
there are only 0.2% Windows ampliﬁers in this group
of hosts, hence this group of TCP ampliﬁers mainly con-
sists of routers and various kinds of embedded devices.

120  23rd USENIX Security Symposium 

USENIX Association

10

Table 6: Hosts vulnerable to TCP ampliﬁcation

Scan

Without RST:
CUPS

HTTP

Telnet

With RST:
HTTP

Telnet

Number of response segments

3

4

6

20

12.7%
234,478
17.3%
11,558,250
8.1%
1,899,095

0.44%
294,535
0.32%
76,774

9.7%
179,069
18.5%
12,322,327
16.1%
3,780,499

0.36%
243,028
0.37%
88,504

22.9%
422,622
44.7%
29,834,824
38.9%
9,147,151

0.76%
506,476
0.47%
114,157

0.0005%
9
0.6%
395,361
12.2%
2,872,878

0.0005%
349
0.03%
7,247

In auxiliary tests, we have measured that Windows hosts
(Windows 7, Vista, and XP) send four or ﬁve SYN/ACK
segments in response—depending on the WINSOCK im-
plementation. Although this ampliﬁcation is not negligi-
ble, it is signiﬁcantly lower than for other devices.

Second, we determine what kind of Telnet hosts sent
six packets. Again, Unix and Linux are predominant as
about 115 times more hosts in this group run Unix or
Linux compared to the number of devices running Win-
dows. Many of these hosts (49%) are routers, while other
occurring devices are media servers, network cameras,
digital video recorders, or VoIP phones.

Third, we analyze the Telnet hosts that sent 20
SYN/ACK segments. We found that 84.3% of all ﬁnger-
printable hosts in this group are routers or embedded de-
vices. These embedded hosts—often based on MIPS or
ARM architecture—include devices such as Raspberry
Pis and printers. We found 86.1% of the devices to utilize
the embedded web server Allegro RomPager and 37.5%
to be manufactured by TP-LINK. In the remaining hosts,
we also identiﬁed networking devices running ZynOS,
ClearOS, or Cisco IOS. Typical desktop computers are
negligible in this group: Windows is installed on 0.3%
and MacOS on 0.0005% of these systems.

Lastly, we investigate the Telnet hosts that sent more
than 20 SYN/ACK segments (21,981 hosts with an average
of 971 response segments). Most of these hosts (87.9%)
were found to be business and consumer routing devices
of which 34% were running the embedded web server
GoAhead-Webs. We ﬁnd 50.4% of these devices to be
a speciﬁc ATM Integrated Access device manufactured
by RAD. Another 13.2% of the devices utilized the web
server Allegro RomPager that we ﬁnd to be associated to
devices of manufacturers such as TP-LINK and ZyXEL.
More information can be found in a further paper [20].

We conclude that ampliﬁcation factors of 20 and more
are largely caused by embedded devices and routers. We
have contacted the vendors and wait for their feedback
regarding these vulnerabilities.

5 Spoofer Identiﬁcation

IP address spooﬁng is the root cause for ampliﬁcation
attacks, as it enables attackers to specify arbitrary tar-
gets that are ﬂooded with reﬂected trafﬁc. The Internet
community addressed this issue as early as in May 2000
and suggested that—whenever possible—spoofed trafﬁc
should be blocked at the network edge [13]. However, as
the attacks in practice have shown, spooﬁng still seems
to be possible—yet it is unclear to what extent.

Up to now, the most powerful resource for tracking
networks that allow spooﬁng is the Spoofer Project [36].
The project offers a client software that one can use to
test if the own network ﬁlters IP-spoofed packets. Yet,
such measurements require volunteers who download,
compile/install, and run a client software. Aggregating
user measurements in a study in July 2013, Beverly et
al. show that about 610 of the 2582 tested ASes allow
IP spooﬁng (at least partially, i.e., in some of their an-
nounced IP preﬁxes) [4]. On relative scale, however, less
than 5% of the total number of ASes were tested. In other
words, for more than 95% of the ASes it remains unclear
if they support IP spooﬁng.

5.1 Remote Spoofer Test
Ideally, one would have a methodology to track networks
that allow IP spooﬁng without the need for individuals
running manual or tool-based tests from within the net-
work. Such remote tests would boost the measurement
coverage, so that we can alert administrators about po-
tential misconﬁgurations that permit IP spooﬁng in their
networks. We deploy such a large-scale experiment that
enables us to identify thousands of ASes that support IP
spooﬁng—from remote. Our DNS-based technique was
ﬁrst mentioned by Mauch on the NANOG mailing list in
August 2013 [16]. It relies on public DNS proxies (or
DNS stub resolvers—we will refer to “proxy” in the fol-
lowing) that have a broken networking implementation.
Figure 8 describes the core idea of the technique. The
party that wants to identify spoofers (i.e., us) controls
an Internet-scale scanner S and a name server that is au-
thoritative for a domain sufﬁx dsu f . In our case the do-
main dsu f is scan.syssec.rub.de. Note that we do
not have control over devices on the right hand side,
i.e., the DNS resolver and the optional DNS proxy, re-
spectively.
In step (1), the scanner S sends a DNS A
lookup for domain d to an open resolver P. The do-
main d uses dsu f as domain sufﬁx, but is speciﬁcally
crafted for each scanning target. That is, S encodes
a hex-formatted IP address of the scanning target P in
the domain. This allows us to tell from the DNS re-
sponse to which IP address we have sent the corre-
sponding DNS request.
In addition, to avoid caching

USENIX Association  

23rd USENIX Security Symposium  121

11

 

University 

A? q9ZbKc.01020304.\ 
scan.syssec.rub.de 

 

Tested AS 

S:  Scanner 

7.7.7.7 

1 

P:  DNS Resolver (2a) 
or DNS Proxy (2b) 

1.2.3.4 

 

University 

S:  Scanner 

7.7.7.7 

2a 

2b 

 

Public resolver’s AS 

R:  Recursive 
DNS Resolver 

8.8.8.8 

Authoritative 
Name Server 

7.7.7.8 

3a 

DNS Response 
srcIP: 8.8.8.8 
dstIP: 7.7.7.7 

1 

DNS Request 
srcIP: 7.7.7.7 
dstIP: 1.2.3.4 

DNS Response 
srcIP: 8.8.8.8  
dstIP: 7.7.7.7 

4b 

3b 

DNS Response 
srcIP: 8.8.8.8  
dstIP: 1.2.3.4 

 

Public resolver’s AS 

R:  Recursive 
DNS Resolver 

8.8.8.8 

 

Tested AS 

P: DNS Proxy 

1.2.3.4 

2b 

DNS Request 
srcIP: 1.2.3.4  
dstIP: 8.8.8.8 

 2a 

DNS Request 
srcIP: 7.7.7.7  
dstIP: 8.8.8.8 

Figure 8: Setup to scan for spooﬁng-enabled networks.
R is optional if P is an iterative resolver (step 2a) and is
only used if P is a DNS proxy (step 2b)

Figure 9: Network overview illustrating the two possible
paths for DNS requests and responses when receiving re-
sponses for which the replying IP address did not match
the IP address that was encoded in the requested domain

effects, we encode a random value in d that changes
per request. In our case, d for target IP address 1.2.3.4
looks like q9ZbKc.01020304.scan.syssec.rub.de,
whereas “q9ZbKc” is the random domain preﬁx and
“01020304” the hex-formatted IP address.

When sending the request to P, one has to keep in
mind that P may have different roles. If the scanned tar-
get P is a public recursive DNS resolver, P iteratively
resolves the domain name by contacting the authorita-
tive name servers down the domain tree as summarized
in step (2a). For the purposes of our experiments such
recursive resolvers are not important because they do not
forward requests or responses. As we will show later,
though, our technique to identify spooﬁng-enabled net-
works is based on the assumption that systems forward
requests or responses. Quite often, P is not a resolver
but a DNS proxy that forwards the DNS communication
from a client (i.e., our scanner) to an iterative resolver R,
as illustrated in step (2b).

We now leverage the fact that some DNS proxies do
not correctly change the IP addresses when forwarding
the request. In principle, to forward the DNS lookup to
the resolver, the proxy P needs to change both the source
and destination IP address of the request: it switches the
source from S to its own address and the destination from
its own address to R. Similarly, to forward the DNS re-
sponse to the client, P changes the source from R to P
and the destination from P to S. However, we encoun-
tered DNS proxies that do not change the addresses cor-
rectly. That is, we received DNS responses for which
the replying IP address did not match the IP address that

was encoded in the requested domain d. Instead, when S
receives the response, the source IP address is set to R.

There are a few potential explanations for this observa-
tion. One is that P is a multi-homed system, i.e., has mul-
tiple interfaces with IP addresses in different networks.
In many cases, though, proxies were using well-known
resolvers (such as Google DNS) or resolvers in different
ASes, excluding this possibility. Another explanation is
that these devices have broken networking implementa-
tions, which cause the packets to have “wrong” IP header
information when being forwarded. This could, e.g., be
caused by broken Network Address Translation (NAT)
implementations or faulty DNS proxy software.

Figure 9 illustrates the corresponding network situ-
ation when we receive a DNS response for which the
source IP address of the UDP packet does not match
the IP address that we encoded in the domain name of
the DNS request. When sending a DNS request to the
proxy (step 1), either P does not change the source ad-
dress when forwarding the request to resolver R as out-
lined in step (2a) (i.e., the proxy effectively impersonates
the sender S) so that R directly responds to S (step 3a).
Alternatively, the proxy forwards the request to the re-
solver R (step 2b), obtains a DNS response (step 3b), and
does not change the source address when forwarding the
response to the sender S (step 4b), thus impersonates the
resolver R. Either way, if R and S are not within P’s
AS, then the proxy P is located in a network that permits
the transmission of spoofed IP addresses. Both behav-
iors cause typical DNS clients to fail the resolution, as
the DNS response comes from an unexpected IP address.

122  23rd USENIX Security Symposium 

USENIX Association

12

Table 7: Number of misconﬁgured DNS resolvers P and
the corresponding Autonomous Systems
Filter

Top 3 Countries

#P #ASP

Top 4 Resolver
Top 10 Resolver

Distinct AS
Distinct AS / # respR > 1
Distinct AS / # respR ≥ 10

42,691
45,072

170,451
161,988
137,075

301 BR (52%), IT (11%), HU (10%)
352
BR (53%), IT (10%), HU (9%)

2,692 CN (55%), BR (17%), RU (5%)
2,063 CN (55%), BR (18%), RU (5%)
870 CN (53%), BR (20%), RU (6%)

Clients will not even receive the replies if their network
is protected by a stateful ﬁrewall, which drop UDP pack-
ets unrelated to any UDP stream known to the ﬁrewall.
Unfortunately, we could not examine in detail which part
of the forwarding was broken, as we did not control any
of the recursive resolvers that the spooﬁng proxies used.

5.2 Finding Spooﬁng-Enabled Networks

While performing our Internet-wide scans, we observed
a mismatch of source IP address and encoded target ad-
dress for more than 2.2% of all responsive DNS servers,
resulting in a total of 581,777 DNS proxies which redi-
rect incoming requests to 225,888 distinct recursive DNS
resolvers. To explore these misbehaving DNS proxies
and the corresponding ASes in more detail, we enumer-
ate the number of ASes permitting IP address spooﬁng
using the following ﬁltering methods:

(i) Our most conservative estimation is based only
on responses from four commonly-used open
resolvers operated by Google (i.e., 8.8.8.8 and
8.8.4.4)
and OpenDNS (208.67.222.222 and
208.67.220.220). These servers (“Top 4”) are a
subset of the servers in the second approach.

(ii) Less conservative, we take into account DNS re-
sponses of the most popular ten resolvers ranked
by the number of proxies using them (“Top 10”).
(iii) Lastly, we focus on proxies for which AS(S) (cid:30)=
AS(P) (cid:30)= AS(R) applies. In other words, the proxy
is not located in the same AS as both the sender S
and the resolver R, and thus is spooﬁng the identity
of one of these identities.

Table 7 illustrates the results obtained for each ﬁlter-
ing method.
In total, 7.7% of the potentially-spooﬁng
DNS proxies forward the DNS requests to the Top 10
well-known resolvers (ﬁlter (ii)), resulting in 352 distinct
ASes the proxies are located in. When limiting our focus
to the Top 4 resolvers (ﬁlter (i)), we still identify 301 dif-
ferent ASes that permit spoofed trafﬁc. Furthermore, we
ﬁnd 29.3% of all proxies to be located in different ASes
than the sender S and the resolvers R (ﬁlter (iii)), result-
ing in 2,692 ASes permitting the proxies to either spoof
the IP address of S or R.

Of the 225,888 individual resolvers R we ﬁnd 50.7%
utilized by multiple DNS proxies. To exclude potentially
multi-homed systems with multiple interfaces in distinct
ASes, we restrict the set of resolvers to those which re-
sponded to requests from multiple proxies and ﬁnd 2,063
ASes that allow spoofed trafﬁc. When further ﬁltering
the set to resolvers that replied to at least ten different
proxies, we still identify 870 ASes permitting spoof-
ing. Using our remote test, we can thus identify more
spooﬁng-enabled ASes than the current state-of-the-art
manual analyses performed by the Spoofer Project [36].

5.3 Fingerprinting IP-Spooﬁng Devices

Lastly, we want to understand what type of devices fol-
low the weird practice of spooﬁng IP addresses while
forwarding DNS requests/responses. For this, we use
our TCP-based ﬁngerprints to classify the 42,691 de-
vices that used Google DNS or OpenDNS as iterative
resolver. Of these devices, 6,120 devices replied to our
TCP requests and 5,674 resolvers provided information
suitable for ﬁngerprinting.
In total, we ﬁnd 3,033 de-
vices running the Dropbear SSH daemon, particularly
employed on embedded devices. We also identify 1,437
MikroTik routers to be forwarding requests speciﬁcally
to the Google DNS servers. Further 540 devices of the
manufacturer Airlive perform similar behavior.

We achieve similar results when ﬁngerprinting the
hosts of the other ﬁltering methods (see previous sub-
section). We again ﬁnd Dropbear, MikroTik, and Airlive
to appear frequently. We assume that these devices have
either bad NAT rules or erroneous DNS proxy implemen-
tations. However, requests for more speciﬁc information
from the vendors remained unanswered until now.

5.4 Remote Test Limitations

Our results show that DNS-based spooﬁng tests are
a powerful resource to identify spooﬁng-enabled net-
works. One inherent limitation of this approach is,
though, that such tests do only reveal the fact that (and
not if ) a network allows IP spooﬁng. We leave it up to
future work to test if the tests can be expanded accord-
ingly. For example, we could scan for DNS proxies that
can be ﬁngerprinted as systems that typically spoof IP
addresses. In addition, collaborating with the recursive
resolvers (such as OpenDNS or Google DNS) may re-
veal further insights about the spooﬁng systems. Lastly,
given the large number of hosts running other protocols
than DNS, it may be possible to use further protocols for
similar remote spooﬁng tests.

USENIX Association  

23rd USENIX Security Symposium  123

13

6 Related Work

Our work was inspired by the analysis of ampliﬁcation
attacks by Rossow [33]. He identiﬁed 14 UDP-based
network protocols that are vulnerable to ampliﬁcation at-
tacks and gave a thorough overview of countermeasures.
We continue this line of research and classify the ampli-
ﬁers. We show in an Internet-wide NTP ampliﬁer no-
tiﬁcation initiative that the threats can be mitigated by
cooperation within the security community. We further-
more investigate to what extent TCP-based ampliﬁcation
attacks are possible. Lastly, we provide an overview of
spooﬁng-enabled networks. Our work is thus a thorough
and novel extension of Rossow’s initial analysis.

We group further related works by their topic:

TCP Ampliﬁcation. To the best of our knowledge, we
are the ﬁrst to evaluate the ampliﬁcation potential of
the TCP three-way handshake. Prior work on TCP am-
pliﬁcation has addressed guessable TCP sequence num-
bers, which in principle allow to establish TCP connec-
tions with spoofed packets [2, 31].
In addition, Pax-
son et al. looked at ampliﬁcation in Transactional TCP
(T/TCP)—which has very low popularity though [31].
Lastly, well-known stateful TCP attacks like the FTP
bounce attack also allow for ampliﬁcation [6]. Many of
these attacks have been largely ﬁxed with secure TCP
stack implementations or by hardening certain protocols
(e.g., FTP). The ampliﬁcation vulnerabilities that we dis-
covered in the TCP three-way handshake may again re-
quire improvements to TCP stacks.

Internet-Wide Scanning. Durumeric et al. presented
ZMap, a publicly-available tool optimized for Internet-
wide scans [11]. In fact, we leverage most of their pro-
posed techniques and implemented their guidelines also
for our custom scanner. Zhang et al. used Internet-wide
scans to correlate the mismanagement and the malicious-
ness of networks [44]. They ﬁnd networks that host open
recursive DNS resolvers highly correlate to other mali-
cious activities (such as spamming) initiated from these
networks. Our work is orthogonal, as we follow a proac-
tive approach to cooperate with the providers in order to
get the vulnerabilities ﬁxed. Two non-academic projects
deployed by Mauch, the OpenNTPProject [30] and Open
Resolver Project [29], also address the problems of am-
pliﬁcation sources from a practical point of view. We
have collaborated with Mauch to inform administrators
of NTP servers vulnerable to the monlist ampliﬁcation
and are grateful for his support.

DDoS Attack Types. An alternative way to launch
powerful DDoS attacks are networks of
remotely-

controllable bots. B¨uscher and Holz analyze DirtJumper,
a botnet family with the speciﬁc task to perform DDoS
attacks by abusing the Internet connection of infected
desktop computers [5]. The DirtJumper botnet attacks
at the application-level layer and does not aim to exhaust
bandwidth, though. Kang et al. propose the Crossﬁre at-
tack, in which bots direct low-intensity ﬂows to a large
number of publicly accessible servers [19]. These ﬂows
are concentrated on carefully chosen links such that they
ﬂood these links and disconnect target servers from the
Internet. Studer and Perrig describe the Coremelt attack,
in which bots send legitimate trafﬁc to each other to ﬂood
and disable a network link between them [38]. All these
attacks rely on bots, while our threat model only assumes
that an attacker has any spooﬁng-enabled Internet uplink.
Although the ampliﬁcation DDoS attacks primarily try to
congest bandwidth of a single victim, they can possibly
be combined with the aforementioned techniques.

7 Conclusion

We have conﬁrmed that ampliﬁcation attacks remain a
major Internet security issue—not only for UDP-based
protocols. We identiﬁed TCP as an alternative source
for ampliﬁcation—despite its three-way-handshake pro-
tocol. We ﬁnd millions of systems with TCP stacks that
can be abused to amplify TCP trafﬁc by a factor of 20x
or higher. Our work revealed a tremendous number of
potential ampliﬁcation sources for both UDP and TCP-
based protocols and classiﬁed these systems. During a
ﬁrst-ever large-scale notiﬁcation campaign, we have ob-
served a signiﬁcant decrease in the number of ampliﬁers
for NTP, giving hope for future attempts in ﬁxing pro-
tocols that have similarly-severe ampliﬁcation vulnera-
bilities. Finally, our remote spooﬁng test has identiﬁed
more than 2,000 networks that do not use proper egress
ﬁltering—indicating that it is still a long way to go until
we will have a spooﬁng-free Internet.

Acknowledgment

We would like to thank the anonymous reviewers and
Jared Mauch for their constructive and valuable com-
ments. This work was supported by the German Fed-
eral Ministry of Education and Research (BMBF Grants
16BY1110 (MoBE) and 16BY1201D (iAID)).

References
[1] BAILEY, M., COOKE, E., JAHANIAN, F., AND NAZARIO, J.
The Internet Motion Sensor - A Distributed Blackhole Monitor-
ing System. In Symposium on Network and Distributed System
Security (NDSS) (2005).

[2] BELLOVIN, S. RFC 1984: Defending Against Sequence Number

Attacks, 1996.

124  23rd USENIX Security Symposium 

USENIX Association

14

[3] BEVERLY, R., BERGER, A., HYUN, Y., AND CLAFFY, K. Un-
derstanding the Efﬁcacy of Deployed Internet Source Address
Validation Filtering. In Internet Measurement Conference (IMC)
(2009).

[4] BEVERLY, R., KOGA, R., AND CLAFFY, K.

Initial Longitudi-
nal Analysis of IP Source Spooﬁng Capability on the Internet.
Internet Society (2013).

[5] B ¨USCHER, A., AND HOLZ, T. Tracking DDoS Attacks: Insights
into the Business of Disrupting the Web. In USENIX Workshop
on Large-Scale Exploits and Emergent Threats (LEET) (2012).

[6] CENTER, C. C. FTP Bounce: Advisory CA-1997-27. http:

//www.cert.org/advisories/CA-1997-27.html, 1997.

[7] CISCO PSIRT.

Cisco Network Time Protocol Dis-
Service Vulnerability.

Reﬂective Denial

tributed
http://tools.cisco.com/security/center/content/
CiscoSecurityNotice/CVE-2013-5211, 2014.

of

[8] COMPUTER EMERGENCY RESPONSE TEAM.

CERT advi-
sory CA-1996-21: TCP SYN Flooding and IP Spooﬁng At-
tacks.
https://www.cert.org/historical/advisories/
CA-1996-21.cfm, 1996.

[9] DITTRICH, D.

Attacks/tools.
misc/ddos/, 2000.

Distributed Denial of Service (DDoS)
http://staff.washington.edu/dittrich/

[10] DURUMERIC, Z., BAILEY, M., AND HALDERMAN, J. A. An
Internet-wide View of Internet-wide Scanning. In USENIX Secu-
rity Symposium (2014).

[11] DURUMERIC, Z., WUSTROW, E., AND HALDERMAN, J. A.
ZMap: Fast Internet-Wide Scanning and its Security Applica-
tions. In USENIX Security Symposium (2013).

[12] EHRENKRANZ, T., AND LI, J. On the State of IP Spooﬁng De-

fense. ACM Trans. Internet Technol. 9, 2 (May 2009).

[13] FERGUSON, P., AND SENIE, D. BCP 38: Network Ingress Fil-
tering: Defeating Denial of Service Attacks Which Employ IP
Source Address Spooﬁng, 1998.

[14] FREILING, F. C., HOLZ, T., AND WICHERSKI, G. Botnet
Tracking: Exploring a Root-cause Methodology to Prevent Dis-
tributed Denial-of-service Attacks. In European Symposium on
Research in Computer Security (ESORICS) (2005).

[15] IOANNIDIS, J., AND BELLOVIN, S. M. Implementing Pushback:
Router-Based Defense Against DDoS Attacks. In Symposium on
Network and Distributed System Security (NDSS) (2002).

[16] J. MAUCH. http://seclists.org/nanog/2013/Aug/132,

August 2013.

[17] JUNG, J., KRISHNAMURTHY, B., AND RABINOVICH, M. Flash
Crowds and Denial of Service Attacks: Characterization and Im-
plications for CDNs and Web Sites. In World Wide Web Confer-
ence (WWW) (2002).

[18] KANDULA, S., KATABI, D., JACOB, M., AND BERGER, A.
Botz-4-sale: Surviving Organized DDoS Attacks That Mimic
Flash Crowds.
In USENIX Symposium on Networked Systems
Design and Implementation (2005).

[19] KANG, M. S., LEE, S. B., AND GLIGOR, V. D. The Crossﬁre
Attack. In Proceedings of IEEE Security and Privacy (S&P) (San
Francisco, CA, USA, 2013).

[20] K ¨UHRER, M., HUPPERICH, T., ROSSOW, C., AND HOLZ, T.
Hell of a Handshake: Abusing TCP for Reﬂective Ampliﬁcation
DDoS Attacks. In USENIX Workshop on Offensive Technologies
(WOOT) (2014).
PRINCE;

CLOUDFLARE,

[21] M.

http://

INC.

blog.cloudflare.com/the-ddos-that-almost-broke-
the-internet, March 2013.

[22] M.

PRINCE;

CLOUDFLARE,

INC.

http://

blog.cloudflare.com/technical-details-behind-
a-400gbps-ntp-amplification-ddos-attack, February
2014.

15

[23] MAXMIND GEOIP DATABASE. http://www.maxmind.com/

en/ip-location, 2014.

[24] MIRKOVIC, J., DIETRICH, S., DITTRICH, D., AND REIHER,
P. Internet Denial of Service: Attack and Defense Mechanisms.
Prentice Hall PTR, 2004.

[25] MITRE. CVE-2013-5211.

http://cve.mitre.org/cgi-

bin/cvename.cgi?name=CVE-2013-5211, 2013.

[26] MOORE, D., VOELKER, G. M., AND SAVAGE, S.

Inferring
Internet Denial-of-service Activity. In USENIX Security Sympo-
sium (2001).

[27] NETWORK MAPPER. http://nmap.org/, 2014.

[28] NTP POOL PROJECT. http://www.pool.ntp.org, 2014.

[29] OPEN

PROJECT.
OpenResolverProject.org/, 2013.

RESOLVER

http://

[30] OPENNTP

SCANNING

PROJECT.

http://

OpenNTPProject.org/, 2014.

[31] PAXSON, V. An Analysis of Using Reﬂectors for Distributed
Denial-of-Service Attacks. In Computer Communication Review
31(3) (July 2001).

[32] PORRAS, PHILLIP AND SAIDI, HASSEN AND YEGNESWARAN,
VINOD. Technical Report: Conﬁcker C Analysis. http://
mtc.sri.com/Conficker/, 2009.

[33] ROSSOW, C. Ampliﬁcation Hell: Revisiting Network Protocols
for DDoS Abuse. In Symposium on Network and Distributed Sys-
tem Security (NDSS) (2014).

[34] SCHUBA, C. L., KRSUL, I. V., KUHN, M. G., SPAFFORD,
E. H., SUNDARAM, A., AND ZAMBONI, D. Analysis of a De-
nial of Service Attack on TCP. In IEEE S&P (1997).

[35] SHADOWSERVER

FOUNDATION.

shadowserver.org/, 2014.

http://

[36] SPOOFER PROJECT. http://spoofer.cmand.org/, 2014.

[37] STONE-GROSS, B., COVA, M., CAVALLARO, L., GILBERT,
B., SZYDLOWSKI, M., KEMMERER, R., KRUEGEL, C., AND
VIGNA, G. Your Botnet is My Botnet: Analysis of a Botnet
Takeover.
In ACM Conference on Computer and Communica-
tions Security (CCS) (2009).

[38] STUDER, A., AND PERRIG, A. The Coremelt Attack. In Pro-
ceedings of the European Symposium on Research in Computer
Security (ESORICS) (Saint Malo, France, September 2009).

[39] SYMANTEC CORPORATION.

Hackers Spend Christmas
Break Launching Large Scale NTP-Reﬂection Attacks.
http://www.symantec.com/connect/blogs/hackers-
spend-christmas-break-launching-large-scale-ntp-
reflection-attacks, 2013.

[40] THE

INTERNET CENSUS

2012.

Port

using

/0
internetcensus2012.bitbucket.org/paper.html, 2012.

embedded

insecure

devices.

scanning
http://

[41] TRUSTED

INTRODUCER.

introducer.org/, 2014.

http://trusted-

[42] US-CERT. NTP Ampliﬁcation Attacks Using CVE-2013-5211.
http://www.us-cert.gov/ncas/alerts/TA14-013A, 2014.

[43] YAAR, A., PERRIG, A., AND SONG, D. Pi: A Path Identiﬁca-
tion Mechanism to Defend Against DDoS Attacks. In IEEE S&P
(2003).

[44] ZHANG, J., DURUMERIC, Z., BAILEY, M., LIU, M., AND
KARIR, M. On the Mismanagement and Maliciousness of Net-
works. In Symposium on Network and Distributed System Secu-
rity (NDSS) (2014).

USENIX Association  

23rd USENIX Security Symposium  125

