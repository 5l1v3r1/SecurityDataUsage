FPDetective: Dusting the Web for Fingerprinters

Gunes Acar1, Marc Juarez1,2, Nick Nikiforakis3, Claudia Diaz1, Seda Gürses1,4,

Frank Piessens3 and Bart Preneel1

1KU Leuven, Dept. of Electrical Engineering (ESAT), COSIC, iMinds, Leuven, Belgium

{gunes.acar,marc.juarez,claudia.diaz,seda.guerses,bart.preneel}@esat.kuleuven.be

2IIIA-CSIC, Bellaterra, Spain

mjuarez@iiia.csic.es

3KU Leuven, Dept. of Computer Science, iMinds-DistriNet, Leuven, Belgium

{nick.nikiforakis,frank.piessens}@cs.kuleuven.be

4New York University, Dept. of Media, Culture, and Communication, NY, USA

ABSTRACT
In the modern web, the browser has emerged as the vehicle of
choice, which users are to trust, customize, and use, to access
a wealth of information and online services. However, recent
studies show that the browser can also be used to invisibly
ﬁngerprint the user: a practice that may have serious privacy
and security implications.

In this paper, we report on the design, implementation
and deployment of FPDetective, a framework for the de-
tection and analysis of web-based ﬁngerprinters. Instead of
relying on information about known ﬁngerprinters or third-
party-tracking blacklists, FPDetective focuses on the detec-
tion of the ﬁngerprinting itself. By applying our framework
with a focus on font detection practices, we were able to
conduct a large scale analysis of the million most popular
websites of the Internet, and discovered that the adoption
of ﬁngerprinting is much higher than previous studies had
estimated. Moreover, we analyze two countermeasures that
have been proposed to defend against ﬁngerprinting and ﬁnd
weaknesses in them that might be exploited to bypass their
protection. Finally, based on our ﬁndings, we discuss the
current understanding of ﬁngerprinting and how it is re-
lated to Personally Identiﬁable Information, showing that
there needs to be a change in the way users, companies and
legislators engage with ﬁngerprinting.

Categories and Subject Descriptors
K.6.m [Management of Computing and Information
Systems]: Miscellaneous; H.3.5 [Information Storage
and Retrieval]: Online Information Services — Web-based

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516674.

services; K.4.4 [Computers and Society]: Electronic
Commerce — Security

Keywords
Web security; privacy; device ﬁngerprinting; tracking; dy-
namic analysis; JavaScript; Flash

1.

INTRODUCTION

In 2010, Eckersley demonstrated that benign characteris-
tics of a browser’s environment, like the screen dimensions
and list of installed fonts, could be combined to create a
unique device-speciﬁc ﬁngerprint [7]. Of the half million
users who participated in Eckersley’s experiment, 94.2% of
those using Flash or Java had a unique device ﬁngerprint,
and could thus be identiﬁed and tracked without the need
for stateful client-side technologies, such as browser or Flash
cookies.

Fingerprinting user devices through the browser is an in-
creasingly common practice used of advertising and anti-
fraud companies. Stateless user tracking allows advertising
companies to sidestep the limitations imposed by regulation
on cookies in Europe and the United States. Moreover, with
the advent of smartphones and tablets, ﬁngerprinting allows
advertisers to augment previously gathered user-data and
track the user across devices. Anti-fraud companies adver-
tise ﬁngerprinting as a means to protect users and web appli-
cations against malevolent actors, for instance, by detecting
the use of stolen credentials and identifying Sybil attacks [6].
Most of the time, these services are based on massive device
reputation databases where device ﬁngerprints are stored
along with the device owners’ web history and “reputation
scores.”

Device ﬁngerprinting raises serious privacy concerns for
everyday users.
Its stateless nature makes it hard to de-
tect (no cookies to inspect and delete) and even harder to
opt-out. Moreover, ﬁngerprinting works just as well in the
“private-mode” of modern browsers, which cookie-conscious
users may be utilizing to perform privacy-sensitive opera-
tions. In recent research, Nikiforakis et al. [18] analyzed the
techniques and adoption of three ﬁngerprinting companies,

1129two of which had been identiﬁed by Mayer and Mitchell in
a 2012 survey paper on web-tracking [13]. While the au-
thors studied the practices of these three companies, they
did not attempt to discover other ﬁngerprinters and explore
the methods adopted by these.

This paper aims to shed light on current device ﬁnger-
printing practices through three main contributions. The
ﬁrst is the design and implementation of FPDetective,1 a
framework for identifying and analyzing web-based device
ﬁngerprinting without relying on a list of known ﬁngerprint-
ers.

Second, we use FPDetective to conduct a large-scale study
of web-based device ﬁngerprinting in the top million Alexa
sites. Using FPDetective, we were able to identify 16 new
ﬁngerprinting scripts and Flash objects (including commer-
cial ﬁngerprinting as well as in-house solutions), some of
which are active in the top 500 websites, showing that ﬁn-
gerprinting is much more prevalent than previous studies
estimated. Further, we uncovered previously unreported ﬁn-
gerprinting practices, such as attempting to evade detection
by removing the ﬁngerprinting script once the device has
been ﬁngerprinted, and collecting ﬁngerprints through third-
party widgets. Our ﬁndings highlight the rising prevalence of
ﬁngerprinting and, in turn, the need for more transparency,
awareness and counter-measures with respect to these prac-
tices.

Finally, we evaluate the Tor Browser and Firegloves, two
privacy-enhancing tools that have “ﬁngerprinting-resistance”
as a design goal. We discovered vulnerabilities in both tools
that would allow a ﬁngerprinter to identify users. This il-
lustrates the diﬃculty of protecting against device ﬁnger-
printing. We also tested whether enabling the Do-Not-Track
(DNT) header had any impact on the behavior of ﬁnger-
printing scripts, and found that it does not.

The rest of the paper is organized as follows. Section 2 re-
views the state-of-the-art in device ﬁngerprinting methods.
The FPDetective framework is described in Section 3. Sec-
tion 4 motivates the use of font detection to identify poten-
tial ﬁngerprinters, and explains our data analysis methodol-
ogy. Section 5 presents the experimental results of our study
of the top million Alexa websites. We evaluate in Section 6
the Tor browser, Firegloves, and DNT as countermeasures
to ﬁngerprinting. We discuss in Section 7 the uses of ﬁnger-
printing and its relationship to privacy concerns. Finally,
we oﬀer our conclusions in Section 8.

2. DEVICE FINGERPRINTING

A device ﬁngerprint is a set of system attributes that, for
each device, take a combination of values that is, with high
likelihood, unique, and can thus function as a device iden-
tiﬁer. These attributes include, for example, the device’s
screen size, the versions of installed software, and the list
of installed fonts. Attributes that take more diverse val-
ues (e.g., the list of fonts) are more identifying than values
shared by many devices (e.g., version of the operating sys-
tem). Similarly, attributes with values that are more stable
over time (i.e., that change only infrequently or very gradu-
ally) facilitate identiﬁcation compared to those that change
often and unpredictably.

1The FPDetective framework is available here: http://
homes.esat.kuleuven.be/~gacar/fpdetective/

Web-based device ﬁngerprinting is the process of collect-
ing suﬃcient information through the browser to perform
stateless device identiﬁcation. These ﬁngerprints may then
be used as identiﬁers for tracking the device in the web. By
tracking, we refer to the linking of visits to (one or multiple)
web pages as made by the same device.

There are many reasons why web applications may need
device-related information, e.g., to correctly render content
or to serve device compatible media. Thus, there are many
APIs that enable applications to query these attributes. At
the same time, these APIs can be used to learn enough
attribute values to obtain a device ﬁngerprint that is, for
practical purposes, unique. When a user browses to a web-
page that includes ﬁngerprinting software, her device ﬁn-
gerprint may be collected and compared to a database of
known devices. Using such techniques, known devices can
be matched, and previously unknown devices can be added
to the database. Depending on the use case, the database
entry for each device is augmented with contextual and be-
havioral information with each visit of the user to a moni-
tored webpage.

In this section we brieﬂy introduce device ﬁngerprint-
ing methods. Some of the discussed methods have already
been encountered in real-life ﬁngerprinting code, while oth-
ers have been shown to work but are not yet known to have
been adopted by ﬁngerprinters [18].
2.1 JavaScript-based

From its original inception in 1995 all the way to today,
JavaScript has emerged as the de-facto client-side, program-
ming language of the web. The expressiveness of JavaScript,
combined with its “forgiving” nature when it comes to pro-
gramming errors (such as missing semicolons) and, most im-
portantly, its ubiquitous availability in modern browsers, has
made it an indispensable tool of modern web sites. Virtually
all non-static web pages use JavaScript and a 2010 study by
Yahoo showed that only 1% of actual human visitors have
JavaScript disabled [24].

JavaScript is used by programmers mainly to dynam-
ically manipulate a page’s DOM, enrich user experience
through asynchronous requests and responses, and oﬄoad
non-critical, server functionality to the client. Its privileged
position inside the browser, however, also makes it a strong
ﬁngerprinting tool. The JavaScript-accessible browser re-
sources that have, historically, been probed the most, are
the following:

• navigator: The navigator object contains informa-
tion about the browser vendor and speciﬁc browser ver-
sion, the supported plugins and MIME types, as well
as relatively coarse-grained information about the op-
erating system and architecture on which the browser
is executing.

• screen: The screen object contains information about
the resolution of the user’s monitor (height and width)
and the color and pixel depth.

Mayer,

in 2009, reported on an experiment where he
ﬁngerprinted 1328 web clients [12]. By hashing the con-
catenated contents of the navigator, screen, naviga-
tor.plugins and navigator.mimeTypes, Mayer was able
to uniquely identify more than 96% of the browsers. A

1130year later Eckersley, through the Panopticlick project2, ﬁn-
gerprinted nearly half a million browsers and by extending
the set of ﬁngerprinted features with fonts, timezones and a
browser’s ACCEPT headers, was able to uniquely identify
94.2% of the visitors’ browsing environments [7]. Eckersley
also showed that the list of installed fonts is one of the most
identifying features of a system. This list can be obtained
either through JavaScript by measuring and then comparing
the dimensions of text rendered with diﬀerent fonts [18], or
through browser plugins.

Other researchers have proposed the use of perfor-
mance benchmarks for diﬀerentiating between JavaScript
engines [15], errors in standard test-suites [17] and diﬀer-
ences in the appearance of canvas elements created through
JavaScript [16]. Furthermore, a user’s browsing history,
which can be recovered exploiting JavaScript’s visited-link
color feature [9], has also been shown to uniquely identify
users [19].
In general, while these methods have not yet
been encountered in deployed ﬁngerprinting products [18],
they could potentially be used to increase the accuracy of
the gathered ﬁngerprints.
2.2 Plugin-based

The latest version of HTML, HTML5, together with the
advanced capabilities of JavaScript and Cascading Style
Sheets, give web developers today the ability to create
feature-rich web applications. This, however, was not the
case with older versions of HTML, as their abilities to de-
liver interactive rich Internet applications, like games, video
and music were limited. Third-party companies, like Adobe,
developed plugins and platforms to create, deliver and ren-
der interactive multimedia content. The clear winner of this
“plugin-war” was Adobe Flash, with Java being a distant
second.

As with JavaScript, the adoption of popular third-party
plugins gives ﬁngerprinters the ability to extract numerous
features. Eckersley used Java and Flash to obtain the list
of fonts installed in a device [7], since font-enumeration API
calls are made available by the Flash and Java plugins. In
addition to font extraction, commercial ﬁngerprinting com-
panies use Flash to circumvent HTTP proxies set up by the
user and get more ﬁne-grained information about the device,
such as the speciﬁc operating system kernel version, or the
presence of multiple-monitor setups [18].
2.3 Extension-based

The modular nature of modern browsers has allowed de-
velopers to create extensions that add new functionality, re-
move undesired features, and modify others. Unlike plug-
ins, extensions are not enumerable through JavaScript and
thus can only be detected by their possible side-eﬀects. For
instance, Mowery et al. [15] showed that it is possible to
deduce custom whitelists from the popular NoScript plugin,
simply by requesting scripts from domains and later inspect-
ing whether the scripts successfully executed, by searching
for predetermined JavaScript objects in the global address
space. The deduced whitelists can be used as an extra ﬁn-
gerprint feature. Nikiforakis et al. [18] showed that user-
agent-spooﬁng extensions can also be discovered due to in-
consistencies in the reported browsing environment when
each extension is active.

2https://panopticlick.eff.org/

2.4 Header-based & Server-side

Yen et al. [23] performed a ﬁngerprinting study, similar
to Eckersley’s, by analyzing month-long logs of Bing and
Hotmail. The authors found that IP addresses and user-
agent headers may help in tracking users with high precision
and recall.

Predating ﬁngerprinting at the browser-level, researchers
had shown that it is possible to not only remotely learn the
operating system of a particular host on the Internet [1, 25],
but also to ﬁngerprint multiple physical devices hidden be-
hind NATs through their clockskew, by analyzing the TCP
timestamps of network packets [11].

While these techniques may be less accurate compared to
the aforementioned in-browser ﬁngerprinting methods, their
pure server-side nature makes their detection very diﬃcult,
if not impossible.

3. FPDETECTIVE FRAMEWORK

In this section we describe FPDetective, a framework
for detecting web-based device ﬁngerprinting. FPDetec-
tive is designed as a ﬂexible, general purpose framework
that can be used to conduct further web privacy studies.
FPDetective is freely available and can be downloaded from
http://homes.esat.kuleuven.be/~gacar/fpdetective.

Figure 1 outlines FPDetective’s components and work-
ﬂow. The main component of FPDetective is a crawler,
whose purpose is to visit websites and collect data about
events that might be related to ﬁngerprinting, such as the
loading of fonts, or accessing speciﬁc browser properties.
These logs are parsed and committed to a central database
in a relational structure.
In order to detect Flash-based
ﬁngerprinting, all browser traﬃc is directed through an in-
tercepting proxy that logs all the HTTP(S) traﬃc between
the browser and the web server. These network dumps are
parsed to extract Flash objects, that are then decompiled us-
ing a free, third-party decompiler and stored in the database.
In our analysis of the data collected by FPDetective we fo-
cus on font detection. We would like to emphasize that this
choice was made in order to facilitate the analysis of the
data, and the data gathered by FPDetective can be ana-
lyzed diﬀerently, based on other ﬁngerprinting classiﬁcation
criteria. Further, the FPDetective framework can easily be
adapted for use in Web privacy studies unrelated to ﬁn-
gerprinting. The framework is developed with modularity
in mind using Python, C++, JavaScript and MySQL pro-
gramming/scripting languages. Researchers can customize
the framework to carry out diﬀerent experiments by replac-
ing the script that FPDetective executes when it visits the
sites. We warmly welcome other researchers to provide their
comments, contribute to the project, or fork their own soft-
ware out of FPDetective.

The remainder of this section describes each component

of FPDetective in more detail.
3.1 Components

Crawler: The crawler features two instrumented browsers,
PhantomJS3 and Chromium4. We chose PhantomJS to col-
lect data related to JavaScript-based ﬁngerprinting for its

3http://phantomjs.org/
4http://www.chromium.org/

1131• access to window.screen properties: horizontalDPI,
verticalDPI, height, width, colorDepth, pixel-
Depth, availLeft, availTop, availHeight, a-
vailWidth

• access to offsetWidth and offsetHeight properties

and getBoundingRect method of HTML elements.

• font load attempts by intercepting calls to CSSFont-
Face::getFontData and CSSFontSelector::getFont-
Data methods

Parser: The parser is used to extract relevant data from
the logs generated by the crawler, and to store them in the
database. It also tags sites with a label if a known ﬁnger-
printing script is found in the HTTP requests made for this
visit.

Intercepting Proxy: In order to obtain Flash ﬁles for
static analysis, we redirected traﬃc through mitmproxy [4],
an SSL-capable intercepting proxy. We used the mitmdump
module to log all the HTTP traﬃc passing through the
proxy, and the libmproxy library to parse and extract Flash
ﬁles based on content sniﬃng. More speciﬁcally, we detected
Flash ﬁles through Flash-speciﬁc “magic numbers” appear-
ing the ﬁrst bytes of content since the Content-Type HTTP
header is not always reliable.

Decompiler: We used the JPEXS Free Flash Decompiler8
to decompile Flash ﬁles and obtain the ActionScript source
code. The source code is then searched for ﬁngerprinting re-
lated function calls (e.g. enumerateFonts and getFontList)
to obtain a binary occurrence vector. The complete list of
methods and properties searched in the decompiled source
code is available in Appendix B.

Central Database: We ran crawls using several machines,
but used a central database to store, combine, and ana-
lyze the results of diﬀerent crawls with minimal eﬀort. The
stored data include the set of JavaScript function calls, the
list of HTTP requests and responses, and the list of loaded
or requested fonts. For the Flash experiments, we also stored
a binary vector that represents the existence of ActionScript
API calls that might be related to ﬁngerprinting.
3.2 Performance

By using the Dromaeo JavaScript performance test suite9
we compared our modiﬁed Chromium browser against the
Chromium browser available from Ubuntu’s repositories.
Although the versions of Chromium and WebKit were dif-
ferent for the two browsers (25 vs 28 and 537.22 vs 537.36
repectively) we still believe that the results can provide a
rough approximation of the performance of our tool. The
resulting scores from the Dromaeo test suites were 3,148.63
runs/s for original Chromium and 3,025.86 runs/s for our
modiﬁed browser. The diﬀerence between their aggregate
performance is about 4%, where error intervals were mea-
sured as 1.24% and 1.98%.

The most crucial diﬀerences were between the getHeight
and getWidth methods of the Prototype JavaScript library10
(9.76 vs 214.1 and 9.79 vs 244.3) which is probably due to the
fact that we log accesses to offsetHeight and offsetWidth

8http://www.free-decompiler.com/flash/
9http://dromaeo.com/
10http://prototypejs.org/

Figure 1: FPDetective Framework

minimal use of resources. We used Chromium to investi-
gate Flash-based ﬁngerprinting, since PhantomJS does not
have plugin support and thus cannot run Flash objects.
CasperJS5 and Selenium6 were used to drive the browsers
to websites and navigate through the pages.

To build instrumented versions of the browsers, we modiﬁed
parts of the WebKit source code, which is the rendering en-
gine used by both Chromium and PhantomJS. It should be
noted, however, that during the course of our study, Chro-
mium Project announced that they leave WebKit for a new
rendering engine called Blink, which is again based on We-
bKit [2]. We preferred to work at the native code level in-
stead of developing browser extensions or JavaScript patches
for several reasons: to detect events that are not JavaScript-
based (especially those related to fonts); to detect the origin
of events more precisely; and to defend against JavaScript
attacks that block or circumvent extensions and getter meth-
ods7.
The modiﬁcations allow the crawler to intercept and log ac-
cesses to the following browser and device properties, which
could be used for ﬁngerprinting:

• access to the following navigator properties and meth-
userAgent, appCodeName, product, product-

ods:
Sub, vendor, vendorSub, onLine, appVersion,
language, plugins, mimeTypes, cookieEnabled(),
javaEna-
bled()

• access to navigator.plugins: name, filename, de-

scription, length

• access to navigator.mimeTypes: enabledPlugin, de-

scription, suffixes, type

5http://casperjs.org/
6http://docs.seleniumhq.org/
7http://code.google.com/p/chromium/issues/detail?
id=55084

1132properties. But within JQuery’s11 height and width meth-
ods, diﬀerences were quite low (0.84 vs 2.27 and 0.97 vs
2.27) hinting that this might also be due to the libraries’
implementation details12.

We were able to run 200 parallel PhantomJS instances on
a customer grade computer with quad core CPU and 8GB
of RAM. With these settings we were able to complete a
homepage crawl of the Alexa top million sites in a period of
four days.

For the experiments with the Chromium browser, we
could run approximately 20 crawlers in parallel, since each
crawler was running an instance of Chromium and mitm-
proxy, as well as was using the Flash decompiler whenever
a Flash object was received. Crawling the top 20,000 Alexa
sites required about one day using a single computer with
the characteristics given above.

4. FONT-BASED ANALYSIS OF

FINGERPRINTING

In order to carry out a large scale study of ﬁngerprinting,
we combined automated and manual analysis in our experi-
ments. In the automated step we use font probing and font
enumeration as a criteria for identifying candidate sites that
possibly include a ﬁngerprinting script or object. This ap-
proach is motivated in Section 4.1 and explained in more
detail in Section 4.2. We then examine manually the can-
didates to reﬁne the classiﬁcation using additional criteria
and establish whether the pages contain ﬁngerprinting code.
4.1 Motivation

By inspecting the code of known ﬁngerprinters, and tak-
ing into account the ﬁndings of previous studies [7, 18], we
distill “font detection” through enumeration or probing as a
necessary ingredient of device ﬁngerprinting. Furthermore,
we consider font detection to be a good indicator of ﬁnger-
printing, as getting the list of system fonts has fewer use
cases than requesting information needed for browser fea-
ture detection.

The use of font detection for ﬁngerprinting also oﬀers the

following advantages:

• according to Panopticlick study, fonts are the second
most identifying attribute of a device, having 17.1 bits
of entropy when unsorted;

• although the list of

installed browser plugins has
slightly more entropy, fonts are OS-dependent and thus
enable linking diﬀerent browsers running on the same
device;

• the Tor Browser, which is the most widely used tool
with counter-ﬁngerprinting features, is shipped with a
ﬁxed browser conﬁguration in which plugins are dis-
abled. Fonts are thus the most identifying feature in
this context, and the best candidate to successfully
identify and track anonymous Tor users.

4.2 Methodology

We follow a two-step analysis. The ﬁrst step consists of
an automated analysis of font detection and the second of

11https://jquery.org/
12The full comparison of the performance results can be seen
here: http://dromaeo.com/?id=197597,197598.

a manual analysis of scripts and decompiled Flash source
code. Font detection plays a central role in our analysis
of the dataset collected by FPDetective: it is used to iden-
tify likely ﬁngerprinting candidates in an automated fashion.
We consider as likely candidates the websites that request
an abnormally large number of fonts, or that have font enu-
meration calls in the decompiled ActionScript source code.
In our analysis we classiﬁed as candidates pages that include
scripts that load more than 30 fonts, or Flash ﬁles that con-
tain font enumeration calls.

Our analysis methodology is diﬀerent for the identiﬁcation
of Flash and JavaScript-based ﬁngerprinters, given that font
detection can be carried out by direct enumeration through
Flash, and by indirect probing through JavaScript.

In the case of Flash, a dynamic analysis of font enumer-
ation is hard due to the proprietary nature of the Flash
plugin player and the use of internal font caches. At the
same time, because of the byte-code nature of Flash objects,
they can be straightforwardly decompiled to their original
ActionScript source code. We thus decompiled the Flash
objects into their corresponding ActionScript source code,
selected the ones that had font enumeration calls, and man-
ually analyzed them to understand what they do with the
list of system fonts they collect. We counted a Flash object
as a ﬁngerprinter when it enumerates system fonts, collects
information about the device capabilities and sends the col-
lected ﬁngerprint back to a remote server either by opening
a socket connection or using JavaScript asynchronous calls.
Furthermore we eliminated many false positives by checking
Flash ﬁle URLs and domains with WHOIS lookups. For ex-
ample, multimedia players that include font enumeration to
be used on screen displays were eliminated by using back-
ground information.

On the other hand, due to the increased use of code ob-
fuscation and code minimization techniques, it is, in gen-
eral, very challenging to accurately perform a static analy-
sis of JavaScript source code. We thus opted for a dynamic
analysis approach, in which we intercept and record Java-
Script font-probing events with the FPDetective’s instru-
mented browsers.

As mentioned earlier, next to font-probing events, FPDe-
tective also collects data related to other events that might
be associated with ﬁngerprinting, such as browser plugin
enumeration and screen-size detection. The second part
of our JavaScript-based ﬁngerprinting analysis consisted of
manually studying the identiﬁed candidates, taking into ac-
count this additional information. Speciﬁcally we checked
for evidence of browser feature enumeration, including iter-
ating over name, filename, description and length prop-
erties of browser plugins, the enabledPlugin, descrip-
tion, suffixes, and type properties of mimeType objects,
and navigator properties such as userAgent, appCodeName,
product, and productSub; screen object properties such as
dimensions, color and pixel depth information; and prop-
erties that reveal installed toolbars such as availTop and
availLeft. We classify a JavaScript ﬁle as a ﬁngerprinter
when it loads more than 30 system fonts, enumerates plug-
ins or mimeTypes, detects screen and navigator properties,
and sends the collected data back to a remote server. As we
do for the Flash objects, we incorporated background infor-
mation about JavaScript domain names to eliminate false
positives.

1133We veriﬁed the correct functioning of the framework by
crawling test pages that request a known set of fonts and
checking them against the ones returned by FPDetective.

5. EXPERIMENTS AND RESULTS

In the following experiments we used the FPDetective
framework to crawl the top Alexa websites while searching
for instances of web-based device ﬁngerprinting. Our exper-
iments were separated into the ones geared towards the dis-
covery of JavaScript-based ﬁngerprinting attempts and the
remaining ones towards the discovery of Flash-based ﬁnger-
printing.

For each type of experiment, we ﬁrst automatically
searched for font-detection attempts and used that for se-
lecting candidates for manual analysis.
In the JavaScript
experiments, we tried to ﬁnd JavaScript-based font prob-
ing attempts, for which we used the number of requested
fonts as a measure. In order to ﬁlter out websites that load
high numbers of fonts, but do not use them for probing,
we checked if websites measure the width and height of dis-
played text by using the number of calls to the offsetWidth
and offsetHeight properties of the corresponding HTML
elements.

For the Flash experiments we crawled the sites with Chro-
mium and intercepted Flash objects with mitmproxy. We
then decompiled the discovered Flash ﬁles and searched for
a list of ActionScript API calls (see Appendix B for the full
list) that might be relevant to ﬁngerprinting. Subsequently,
we generated a binary vector that represents the occurrence
of each function call in the Flash object and used that to
select objects for manual analysis.
5.1 JavaScript-Based Font probing

In this set of experiments, we crawled the top Alexa
websites with FPDetective to ﬁnd out the extent of the
JavaScript-based font probing. In the ﬁrst experiment we
visited the homepages of the top Alexa 1 million websites
where we waited for 10 seconds, in order to allow for the
loading of remote content.
In the second experiment, we
visited 100,000 websites and clicked 25 homepage links from
the same domain. We waited 5 seconds after each click and
10 seconds after each page load to allow for resources to
load.

By analyzing the sites that are sorted by FPDetective as
likely candidates of ﬁngerprinting, we found 13 instances of
JavaScript-based font-probing scripts, on a total of 404 web-
sites. In order to ensure the accuracy of our classiﬁcation,
we augmented the automated, dynamic analysis with man-
ual analysis of the source code and background information
on the companies that own the domains from where scripts
are served. Speciﬁcally, we checked whether the script (or
another script served from the same domain) collects other
high-entropy browser properties such as plugins or mime-
Types and if the company is involved in products and ser-
vices that might be related to ﬁngerprinting, e.g., device
identiﬁcation, analytics and anti-fraud.

Table 1 shows the results of these experiments in detail.
The discovered scripts probed as many as 503 fonts and,
popularity-wise, there were three websites in the top 500
Alexa sites that made use of a font-probing script.

BlueCava was discovered on the homepages of 250 Alexa
websites, making it, by far, the most popular font-probing
script. Moreover, it is the only one of the discovered font-
probing scripts that queries diﬀerent sets of fonts based on
the device’s operating system: 231 fonts for Microsoft Win-
dows, 167 for Mac OS and 62 for other operating systems.
While analyzing the candidate scripts, we came across
some interesting practices, such as a script that ﬁrst dynam-
ically injects itself into the page and then, after collecting
the device ﬁngerprint, removes itself from the page. This
was one of the cases that motivated us to develop our tools
for dynamic analysis and is discussed in more detail in Sec-
tion 7.2.

Most of, but not all, the scripts that we found are served
from a domain registered for an analytics and/or anti-fraud
company. An intriguing case is that of Anonymizer13, a paid
anonymization service that ﬁngerprints every visitor access-
ing their homepage and has a set of ﬁngerprinting scripts
that include function names such as submitDnsInfoViaAjax,
getClockSkew, getJsFontList and connectViaSocket.

Figure 2: JavaScript-based font probing scripts on home-
pages of Top 1 Million Alexa sites

We also found that including third party scripts is not
the only form of distribution, e.g., the font probing script
from CoinBase is found as an embedded button that visitors
might click to donate BitCoins to site owner.

We compared the sites that ﬁngerprint users on the home-
page, to sites that only ﬁngerprint users on the inner pages.
We did not observe any diﬀerences between these two, as
evidenced by the two last columns of Table 1. This could
mean that either we could not crawl the inner pages that
include ﬁngerprinting scripts not present in the homepage,
or sites prefer to ﬁngerprint users on their homepages.

The histogram in Figure 2 represents the distribution of
sites using JavaScript-based font probing among the Top 1
Million Alexa sites. The histogram is divided in intervals
of 100,000 sites (according to their Alexa rank) which are
further divided into two bins. The darker bin refers to the
total number of sites in that popularity range that served a
ﬁngerprinting script. These scripts are counted by matching
previously discovered script URLs or regular expressions to

13https://www.anonymizer.com/

100K200K300K400K500K600K700K800K900K1000K0102030405060Scripts foundScripts found and executed1134Fingerprinting

Provider

BlueCava
Perferencement
CoinBase
MaxMind
Inside graph
SiteBlackBox
Analytics-engine
Myfreecams
Mindshare Tech.
Cdn.net
AFK Media
Anonymizer
Analyticsengine

Script name

BCAC5.js
tagv22.pkmin.js
application-773a[...snipped...].js
device.js
ig.js
No ﬁxed URL
fp.js
o-mfccore.js
pomegranate.js
cc.js
fingerprint.js
fontdetect.js
fingerprint.compiled.js

Num
Fonts

231/167/62

153
206
94
355
389
98
71
487
297
503
80
93

Top
Rank
1,390
49,979

497
498

98,786
1,687
36,161

422

109,798
501,583
199,319
118,504
522,447

Number of sites using JS-based FP

1M
In

100K

In

In

homepage

homepage

inner pages

250
51
28
24
18
14
6
3
3
3
2
1
1

404

24
6
4
5
1
10
-
1
-
-
-
-
-
51

24
6
4
5
1
10
-
1
-
-
-
-
-
51

Table 1: Prevalence of Fingerprinting with JavaScript Based Font Probing on Top 1M Alexa sites

URLs of HTTP requests made while visiting the site. Since
we found that not all scripts probe a large number of fonts
every time they are loaded, we included a second (lighter)
bin to represent sites that both served a ﬁngerprinting script
and probed for fonts.

5.2 Flash Based Font Enumeration

The main objective of this experiment is to investigate
the extent of Flash based ﬁngerprinting techniques on the
Web. We crawled the top 10 thousand Alexa websites using
FPDetective and, for each site, we visited the homepage
and waited for 10 seconds to allow for resources to load
completely.

We automatically decompiled all the Flash ﬁles caught by
the intercepting proxy and checked the presence of functions
that might be used for ﬁngerprinting. We manually analyzed
the ﬁles that include functions for known Flash-based ﬁnger-
printing techniques [18], such as querying the Capabilities
class to collect information about the operating system and
device, or opening a socket (by using XMLSocket) to bypass
system wide proxy settings.

We also checked for the presence of function calls that
might be used to send the collected information to a remote
server (e.g., sendAndLoad or URLLoader) or use of Exter-
nalInterface.Call or addCallback functions for opening
JavaScript interfaces to either call JavaScript functions from
the Flash ﬁle or allow page scripts to access Flash functions.
Finally, we took into account whether the collected in-
formation is sent to a remote server or used internally, by
the Flash object. This helped us to ﬁlter out potential false
positives, such as Flash video players that enumerate sys-
tem fonts, in order to check if a font is available for use in
player’s on-screen display.

Table 2 shows our results for Flash-based ﬁngerprinting.
Being found on 69 sites, BB Elements, which oﬀers tools for
managing ad campaigns, is the most prevalent Flash-based
ﬁngerprinter. Piano Media is mostly found on newspaper
sites and claims to employ ﬁngerprinting for paywall enforce-
ment. Paywalls, in this case, are used to ensure that users
do not access paid content, such as newspaper or magazine
articles, without subscription or payment. Usually, paywalls

are combined with a limited number of free accesses, e.g., an
online newspaper can oﬀer ten free articles per user per day.
The website of the Turkish Ministry of Education (MEB)
is unique in both being the only .gov website that em-
ploys web-based device ﬁngerprinting and in the wealth
of collected attributes from the device’s hardware compo-
nents. The Flash ﬁle served from this site extracts and sends
detailed information about system mouse, keyboard, ac-
celerometer, multi-touch capability, microphone, camera as
well as system fonts. It should be noted that this site serves
an e-School system to manage grades and other records of
millions of students in Turkey. ThreatMetrix is the only
discovered company which uses proxy-piercing to reveal a
user’s original IP address and whether she uses a proxy.

In Table 2 we can see the ﬁngerprinters that have been
discovered along with some of the functions that were called
from the Flash ﬁles. We only included in the table the Flash
ﬁles that have functions for font enumeration. That does
not include, for instance, 50 Flash objects from one of the
companies previously studied [18].

Given that we discovered several previously unknown ﬁn-
gerprinting scripts by extending our crawl space to 1 million
for the JavaScript experiment, we plan to make a similar
study for the Flash based ﬁngerprinters.

5.3 Testing FPDetective with Fontconﬁg

Fontconﬁgis a Linux library that conﬁgures and manages
the access to system fonts. In this experiment we used de-
bugging functionality of fontconﬁg to test our framework’s
accuracy.

We crawled the Alexa Top 10,000 sites and compared the
set of font requests made by each web site to ensure that
FPDetective is not missing or overcounting font events. The
comparison of the two measurements indicated that we nei-
ther miss nor overcount the font load events.

5.4 Prevalence of Fingerprinting

With FPDetective we found 404 sites in the Alexa top mil-
lion pages that ﬁngerprint visitors on their homepages using
JavaScript-based font probing. These scripts are served by
13 diﬀerent ﬁngerprinting providers, of which only a few had
been identiﬁed in prior research.

1135Fingerprinting

Provider

Num of

Sites

Top
Rank

BB Elements
Piano Media
Bluecava
ThreatMetrix
Alipay
meb.gov.tr (Turkish Ministry of Education)

69
12
6
6
1
1

903
3,532
1,390
2,793

83

2,206

Flash

Proxy

HW and OS

Interaction

Cookies

(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:88)

Detection

Proﬁling

(cid:88)

(cid:88)

(cid:88)
(cid:88)
(cid:88)

with JS

(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:88)

Table 2: Flash Fingerprinting objects found on Top 10K Alexa websites

Although 404 out of 1,000,000 can be thought of as a very
low frequency, we would like to note that the results pre-
sented here should be taken as lower bounds, as our crawlers
cannot reach pages that are placed after forms including
CAPTCHAs or similar obstacles. Moreover, Flash-based
ﬁngerprinting was present on the homepages of 95 out of the
top 10,000 sites, indicating that Flash-based ﬁngerprinting
is more prevalent. This is possibly because of its extended
capabilities for font enumeration, proxy detection and its
widespread browser support.

6. EVALUATION OF FINGERPRINTING

COUNTERMEASURES

In this section we brieﬂy analyze two tools that can be
employed to counter ﬁngerprinting: the Tor Browser and
the FireGloves Firefox extension. We also evaluate whether
the Do Not Track header is being respected by ﬁngerprinters.
6.1 Tor Browser

The Tor Browser is part of the software bundle that is used
to access the Tor anonymity network [5], a popular service
that is currently used daily by more than 800,000 people to
anonymously browse the web. Tor relays communications
over three routers located in diﬀerent parts of the world. The
communications are encrypted in layers (onion routing [8])
to prevent any single Tor router from linking the source and
destination of a data stream.

The Tor Browser incorporates strong defenses to counter
the ﬁngerprinting techniques described by the Panopticlick
study, as its design goals include enabling user anonymity
and preventing the linkability of browsing sessions. Given
that the Tor Browser has a limited user base compared to
web users in general, even a partial ﬁngerprint might be
enough to uniquely distinguish a Tor user. Thus, there is
a need to eliminate ﬁngerprintable diﬀerences among Tor
Browsers, so that Tor users remain indistinguishable from
each other.
In fact, cross-origin ﬁngerprinting unlinkabil-
ity is listed as a privacy requirement for the Tor Browser14.
For this reason the Tor Browser is shipped with ﬁxed set-
tings that provide almost no browser properties that could
be exploited to extract distinguishing features.

As described in Section 4, fonts are operating-system-
dependent, and thus a good candidate attribute for distin-
guishing and recognizing users. To limit font-based ﬁnger-
printing, the Tor Browser caps the number of fonts that a
page can request and load. However, for usability reasons,
@font-face rules are exempted from these limits. Upon in-
spection of the Tor Browser source code, we discovered that

14https://www.torproject.org/projects/torbrowser/
design/#fingerprinting-linkability

the local fonts loaded by @font-face CSS rules are also ex-
empted from the Tor Browser’s font-per-document cap, and
that it is possible to load an unlimited number of system
fonts using the local() value of the @font-face rule’s src
descriptor.

Furthermore, if a font is not installed locally, it may be
requested from the src/url property of the font-face rule.
This is eﬀectively communicating the lack of this font to
the server without using JavaScript. Note also that one
local font-face rule can be used to report the status(not-
found) of more than one font by chaining font-face local()
properties, for example:

@font-face { font-family: Font1;

src: local("Font2"), local("Font3"),

url("Font1-2-3-NotFound.ttf");

}

We immediately communicated the vulnerability to the
Tor Bug Tracker and the issue is ﬁxed in the upcoming (2.4)
version with a patch that disables the use of the local()
property15.
6.2 Firegloves

Firegloves [3] is a proof-of-concept browser extension for
Mozilla Firefox that was created for research purposes. In
order to confuse ﬁngerprinting scripts, Firegloves returns
randomized values when queried for certain attributes, like
the screen resolution, the platform on which the browser
is running and the browser’s vendor and version. Addi-
tionally, Firegloves limits the number of fonts that a sin-
gle browser tab can load and reports false dimension values
for the offsetWidth and offsetHeight properties of HTML
elements to evade JavaScript-based font detection.

We evaluated the eﬀectiveness of Firegloves’ as a counter-
measure to ﬁngerprinting, and discovered several shortcom-
ings. For instance, instead of relying on offsetWidth and
offsetHeight values, we could easily use the width and the
height of the rectangle object returned by getBoundingCli-
entRect method, which returns the text’s dimensions, even
more precisely than the original methods16. This enabled
us to detect the same list of fonts as we would without the
Firegloves extension installed. Surprisingly, our probe for
fonts was not limited by the claimed cap on the number of
fonts per tab. This might be due to a bug, or to changes
in the Firefox extension system that have been introduced
after FireGloves, which is not currently being maintained,
was ﬁrst developed.
15https://trac.torproject.org/projects/tor/ticket/
8455#comment:3
16https://developer.mozilla.org/en-US/docs/DOM/
element.offsetWidth

1136Although Firegloves spoofs the browser’s user-agent and
platform to pretend to be a Mozilla Firefox version 6 run-
ning on a Windows operating system, the navigator.oscpu
is left unmodiﬁed, revealing the true platform. Moreover,
Firegloves did not remove any of the new methods intro-
duced in later versions of Mozilla Firefox and available in
the navigator object, such as navigator.mozCameras and
navigator.doNotTrack. Finally, since Firegloves cannot
change the APIs available to Flash, a Flash application can
still discover the real operating system and the real screen
resolution.

Overall, while Firegloves is trying to protect users from
ﬁngerprinting, its detectable presence on the users’ browsing
environments may actually make them more uniquely iden-
tiﬁable: since Firegloves is installed by only 1, 750 users, its
successful detection makes the user much more unique than
if it was not present at all.

Our ﬁndings are in line with prior results showing that
user-agent-spooﬁng extensions can be straightforwardly dis-
covered and bypassed [18]. These ﬁndings illustrate the dif-
ﬁculty of eﬀectively protecting users against ﬁngerprinting,
and indicate that counter-measures short of perfect may re-
sult in a net loss of privacy for their adopters – as their
devices become more easily ﬁngerprintable through these.
6.3 Do Not Track

The Do Not Track (DNT) HTTP header ﬁeld allows users
to signal their tracking preferences to websites. DNT is
currently being standardized by the W3C under the name
“Tracking Preference Expression” and it has already been
adopted by most modern browsers17.

We set the DNT header to 1 in the PhantomJS browser
and visited the websites identiﬁed as performing ﬁngerprint-
ing in our previous experiments. For all of these pages, we
obtained the same results with respect to the number of
fonts probed and other browser properties accessed, sug-
gesting that DNT preferences are ignored by ﬁngerprinters.

7. DISCUSSION

7.1 Uses of Fingerprinting

Using FPDetective, we were able to identify companies
that are engaging in what we call web based device ﬁnger-
printing. While it is not possible to infer the purposes for
which ﬁngerprinting is being put to use by these companies,
we take a moment to reﬂect on their ﬁngerprinting related
practices.

The majority of the companies serving the ﬁngerprinting
scripts explicitly state on their websites, in press releases,
and in various social media channels that they are success-
fully deploying (device) ﬁngerprinting. In contrast, the web-
sites that employ the services of these companies rarely dis-
close in their privacy policies that they are ﬁngerprinting
their users’ devices, let alone mention that they are gather-
ing the information that FPDetective revealed them to be
collecting. In some cases, we detected ﬁngerprinting scripts
that were embedded in ad banners. It is unclear whether
ﬁrst parties serving these ad banners are aware of the exis-
tence of these embedded ﬁngerprinting scripts.

Companies express that they deploy device ﬁngerprinting
in the context of a variety of web services. The spectrum of
use cases include fraud detection, protection against account
hijacking, anti-bot and anti-scraping services, enterprise se-
curity management, protection against DDOS attacks, real-
time targeted marketing, campaign measurement, reaching
customers across devices, and limiting number of access to
services. While most companies will specialize either in
‘fraud detection and web security’ or ‘marketing applica-
tions’, MaxMind is an example of a company that uses their
data collection to provide services for both uses. MaxMind
also stands out with their very explicit documentation of
their personal and non-personal data collection, their pro-
cessing activities and their commitment to make their prac-
tices transparent.

Further material from companies describing the use cases
suggest that the data models in the databases also vary.
Fraud detection companies often speak of “device reputa-
tion databases” with proﬁles for “billions” of devices that
are rich enough to provide “intelligence” to companies about
the security risks of these devices. The variety in mentioned
uses ranging from “adjusting security policies based on the
device a person is using” to “identifying and blocking bot-
nets that easily switch IP addresses” suggests that these are
rich device-centered databases. On the other hand, market-
ing companies express that they are able to identify user-
behavior across websites and devices, suggesting that they
feed ﬁngerprinting data into “customer”-centered database
systems that are heavy on analytics, and can link diﬀerent
devices to a single user across websites.

In-house applications seem to be mainly concerned with
whether the same user is using multiple devices to access
the same service, or limiting the number of times a speciﬁc
service is accessed, e.g., when ﬁlling out surveys. Such ap-
plications seem to limit data collection using ﬁngerprinting
to the given website and are less concerned with analytics
and intelligence applications.

A perplexing case among in-house applications is that
of Anonymizer Inc., a company that presents itself as “the
global leader in online privacy, anonymity, and identity pro-
tection solutions for over 17 years.”18 The script is served
from the domain privacytool.org (owned by Anonymizer
Inc.), a site where users can test whether they are anony-
mous online. The privacytool.org site clearly explains that
to perform the test a Java applet will run on the user’s
computer, describes the information that will be gathered,
and explicitly states that “Data obtained from the browser
like lists of plug-ins or fonts can be used to identify your
computer.”19 Users must click a link placed below this in-
formation in order to run the applet.

We found, however,

that ﬁngerprinting scripts from
privacytool.org are also present
in the homepage of
anonymizer.com, another site owned by Anonymizer Inc.
that, paradoxically, oﬀers anonymity as a service. The
anonymizer.com privacy policy states: “When you navi-
gate our Web site, Anonymizer will gather certain informa-
tion such as your Internet Protocol address, browser type,
browser language, and the date and time of your visit. We
may place a cookie on your computer [. . . ]” The policy in-
cludes further information about cookies but, in contrast to

17http://www.w3.org/TR/2013/
WD-tracking-dnt-20130430/

18https://www.anonymizer.com/company/
19http://privacytool.org/AnonymityChecker/index.jsp

1137the privacytool.org notice, it does not mention at any point
the execution of ﬁngerprinting scripts, or that it collects
information such as the list of installed fonts, DNS server
information, or the real IP address if the user is connected
through a proxy. Finally, note that while privacytool.org
oﬀers informed choice to its users, who may voluntarily ex-
ecute the script, the ﬁngerprinting scripts that run in the
anonymizer.com homepage are invisible to users and run by
default.

7.2 Visibility of Fingerprinting

The majority of web users have diﬃculties in grasping
what cookies are, whether they are enabled, their threats to
their privacy and how to manage them [14]. This situation
is worse in the case of third-party and covert cookies, which
have been found to essentially be invisible to end-users. Ar-
guably, user perception of web based device ﬁngerprinting is
comparably, if not more, invisible to the users.

In all the cases we encountered, there were no visible ef-
fects of ﬁngerprinting, and the users were not informed that
they were being ﬁngerprinted. Thus, the only way for users
to discover that their devices are being ﬁngerprinted is to
manually examine the source of the page and all the embed-
ded JavaScript and Flash objects.

In one distinct case, while verifying the results of FPDe-
tective, we discovered that a company which sells ﬁnger-
printing products for anti-bot and anti-scraping services,
was deleting the ﬁngerprinting script from the page’s DOM
after the script had executed and collected the ﬁngerprint.
Thus, the only way to identify this ﬁngerprinter is to break-
point through the execution of JavaScript code and wit-
ness the loading and unloading of the ﬁngerprinting code.
This requires an in-depth understanding of how JavaScript
is executed and the principles of debugging programs, which
the vast majority of users are not likely to possess. More-
over, this anti-debugging technique is reminiscent of the
techniques employed by JavaScript malware when trying
to evade detection by analysts and high-interaction honey-
pots [10].

7.3 Is ﬁngerprinting a matter of privacy?

Our ﬁndings suggest that this issue may require further
technical and legal attention with respect to privacy. Yet,
most of the companies whose ﬁngerprinting activities were
detected by FPDetective expressly distance their practices
from any consequences they might have for people’s privacy.
A number of companies argue that they do not collect
PII (Personally Identiﬁable Information) in the process of
distinguishing “the good, the bad and the ugly” on the web.
While ﬁngerprinting may not require PII, the use cases de-
scribed by ﬁngerprinting companies on their webpages sug-
gest that they use device information to track, proﬁle, and
shape the future web experience of the tracked users (as
well as bots). For example, MaxMind oﬀers online retailers
a service to check on their customers’ fraud scores based on
31 “non-PII” attributes, including IP address, shipping ad-
dress, non-salted hashes of email addresses and passwords,
and credit card BIN number. The computation of the cus-
tomers’ score is based on things like the ‘riskiness of the
country of origin’, ‘proxy use’, ‘free webmail use’, and ‘bank
checks’. These are matters closely related to privacy con-
cerns expressed by users about uninformed monitoring of

web usage, constraints on informational self-determination,
and discrimination [21].

Further, by focusing on “device” identiﬁcation and, espe-
cially in fraud detection cases, claiming that they are con-
cerned only about “bots”, companies express that tracking
“persons” is not the object of their interest. In this world-
view, ﬁngerprinting is nothing more than (security) scripts
collecting data based on socially invisible interactions that
are irrelevant to individual privacy. Further, especially in
the case of fraud detection, companies often argue that ﬁn-
gerprinting is implemented for the protection of the end-
users’ quality of service. These two framings, i.e., “ﬁnger-
printing is all about devices” and “we track these devices
for user convenience”, make it very diﬃcult to demand a
response to the privacy issues that may be raised with re-
spect to device ﬁngerprinting and the use of the databases
populated using ﬁngerprinting. As such ﬁngerprinting prac-
tices proliferate, device IDs may come to “represent” users
in databases, instead of PII. Hence, classical conceptions of
PII may not be suﬃcient to grasp the social and ethical con-
cerns associated ﬁngerprinting and related databases. We
hope that this paper, by virtue of making web based ﬁnger-
printing more visible, will contribute to better understand-
ing what privacy issues may be at stake and to challenging
the framing of web based device ﬁngerprints as non-PII.

In the context of the US, it may be worth discussing
whether a static list of attributes that count as PII is suf-
ﬁcient to draw a reasonable boundary on which “personal
data” should be subject to protection. Device ﬁngerprint-
ing underlines that data is identiﬁable based on context;
in other words, identiﬁability may result from processing
seemingly non-identiﬁable information [22]. If we accept this
argument, then attention needs to be paid to risks associ-
ated with: linking of the reputation and device ﬁngerprint
databases to individuals; undesirable and unacceptable uses
of these datasets for determining “the good, the bad, and
the ugly” of the web; the security of these datasets; and the
opacity of ﬁngerprinting practices to the general public, as
well as to individual device owners.

It is also currently unclear whether there is a responsibil-
ity to inform the owners that their devices are being ﬁnger-
printed, and if so, who has the responsibility to inform the
users. For example, the privacy policy of articlesbase.com
explicitly indicates all the “non-personal information” that
the site collects. However, in this rather detailed and read-
able list, the site does not state that they are ﬁngerprint-
ing the user’s device or that they are probing fonts. One
could argue, since the font probing scripts are not served by
articlesbase.com but by siteblackbox.com, that it is the
responsibility of the latter to inform the users. However, in
their documentation of the articlesbase case [20], no refer-
ences are made to ﬁngerprinting of users and we were unable
to locate a privacy policy on the website. Similar issues are
likely to arise when it comes to honoring DNT preferences.

8. CONCLUSION

User tracking is becoming pervasive as advertisers and
tracking companies seek to reﬁne their targeting, detect
fraud, or oﬀer new services. While most of today’s track-
ing is done through third-party cookies, prior research has
shown that browser and system attributes can be used to
uniquely identify devices through ﬁngerprints. Even though
these ﬁngerprints are less accurate than stateful identiﬁers

1138such as cookies, their main advantage is that device ﬁnger-
printing is harder to detect and to defend against.

In this paper we presented FPDetective, a ﬁngerprinting-
detection framework that identiﬁes web based ﬁngerprint-
ers. Using FPDetective, we performed a large-scale crawl
of the Internet’s most popular websites, and showed that
the adoption of ﬁngerprinting is signiﬁcantly higher than
what previous research estimated. Among others, we identi-
ﬁed large commercial companies involved in ﬁngerprinting, a
complete disregard towards the DNT header, and the use of
anti-debugging techniques, most commonly associated with
JavaScript malware. Moreover, we showed that dedicated
ﬁngerprinters can bypass existing privacy-protecting tech-
nologies.

Overall, our ﬁndings demonstrate that web ﬁngerprinting
is a real and growing issue, deserving the attention of both
policymakers and the research community. We hope that
our framework, which is freely available to other researchers
and can easily be extended to conduct further studies, will
contribute to addressing this issue by providing a means to
shed light on web ﬁngerprinting practices and techniques.

9. ACKNOWLEDGEMENTS

The authors would like thank the anonymous review-
ers, Carmela Troncoso, Ashkan Soltani, Nessim Kisserli
and Tom van Cutsem for their valuable comments; Vi-
cen¸c Torra for enabling the collaboration; and Danny De
Cock for his hardware support. For KU Leuven, this re-
search was supported by the projects IWT SBO SPION,
iMinds CoMobile, FWO G.0360.11N, FWO G.0686.11N,
GOA TENSE (GOA/11/007), and EU FP7 NESSoS, Web-
Sand and Strews; the B-CCENTRE; and the Research Fund
KU Leuven. For IIIA-CSIC, this research was supported
by the projects EU FP7 grant agreement number 262608,
the Spanish MEC projects ARES (CONSOLIDER INGE-
NIO 2010 CSD2007-00004), eAEGIS (TSI2007-65406-C03-
02), and COPRIVACY (TIN2011-27076-C03-03). For NYU,
this research was supported by the Intel Science and Tech-
nology Center - Social Computing. Marc Juarez was par-
tially funded by the LLP Erasmus Programme of the Com-
mission of the European Communities during his stay at KU
Leuven.

10. REFERENCES
[1] Nmap - Free Security Scanner For Network

Exploration & Security Audits. http://www.nmap.org.
[2] A. Barth. Blink: A rendering engine for the Chromium

project. http://blog.chromium.org/2013/04/
blink-rendering-engine-for-chromium.html.

[3] K. Boda. Firegloves.

http://fingerprint.pet-portal.eu/?menu=6.

[4] A. Cortesi. mitmproxy: a man-in-the-middle proxy.

http://mitmproxy.org/.

[5] R. Dingledine, N. Mathewson, and P. Syverson. Tor:

The second-generation onion router. In Proceedings of
the 13th USENIX Security Symposium, pages 303–320.
USENIX, 2004.

[6] J. R. Douceur. The sybil attack. In Peer-to-peer

Systems, pages 251–260. Springer, 2002.

[7] P. Eckersley. How Unique Is Your Browser? In

Proceedings of the 10th Privacy Enhancing
Technologies Symposium (PETS), pages 1–17, 2010.

[8] D. Goldschlag, M. Reed, and P. Syverson. Hiding
routing information. In Information Hiding, pages
137–150, 1996.

[9] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An

empirical study of privacy-violating information ﬂows
in JavaScript Web applications. In Proceedings of CCS
2010, pages 270–283, Oct. 2010.

[10] A. Kapravelos, M. Cova, C. Kruegel, and G. Vigna.

Escape from monkey island: Evading high-interaction
honeyclients. In Proceedings of the 8th Conference on
Detection of Intrusions and Malware & Vulnerability
Assessment (DIMVA), pages 124–143, 2011.

[11] T. Kohno, A. Broido, and K. Claﬀy. Remote physical

device ﬁngerprinting. Dependable and Secure
Computing, IEEE Transactions on, 2(2):93–108, 2005.

[12] J. R. Mayer. Any person... a pamphleteer. Senior

Thesis, Stanford University, 2009.

[13] J. R. Mayer and J. C. Mitchell. Third-party web

tracking: Policy and technology. In Proceedings of the
IEEE Symposium on Security and Privacy, pages
413–427, 2012.

[14] A. D. Miyazaki. Online privacy and the disclosure of
cookie use: Eﬀects on consumer trust and anticipated
patronage. Journal of Public Policy & Marketing,
27(1):19–33, 2008.

[15] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham.

Fingerprinting information in JavaScript
implementations. In H. Wang, editor, Proceedings of
W2SP 2011. IEEE Computer Society, May 2011.

[16] K. Mowery and H. Shacham. Pixel perfect:

Fingerprinting canvas in HTML5. In M. Fredrikson,
editor, Proceedings of W2SP 2012. IEEE Computer
Society, May 2012.

[17] M. Mulazzani, P. Reschl, M. Huber, M. Leithner,
S. Schrittwieser, and E. Weippl. Fast and reliable
browser identiﬁcation with javascript engine
ﬁngerprinting. In Web 2.0 Workshop on Security and
Privacy (W2SP), May 2013.

[18] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel,

F. Piessens, and G. Vigna. Cookieless monster:
Exploring the ecosystem of web-based device
ﬁngerprinting. In Proceedings of the IEEE Symposium
on Security and Privacy, pages 541–555, 2013.

[19] (cid:32)L. Olejnik, C. Castelluccia, and A. Janc. Why Johnny

Can’t Browse in Peace: On the Uniqueness of Web
Browsing History Patterns. In the 5th workshop on
Hot Topics in Privacy Enhancing Technologies
(HOTPETS 2012).

[20] SiteBlackBox. Case studies: Articlesbase.
[21] B. Ur, P. G. Leon, L. F. Cranor, R. Shay, and

Y. Wang. Smart, useful, scary, creepy: perceptions of
online behavioral advertising. In Proceedings of the
Eighth Symposium on Usable Privacy and Security,
SOUPS ’12, pages 4:1–4:15, New York, NY, USA,
2012. ACM.

[22] I. Van Der Ploeg. Keys To Privacy. Translations of
“the privacy problem” in Information Technologies,
pages 15–36. Maastricht: Shaker, 2005.

[23] T.-F. Yen, Y. Xie, F. Yu, R. P. Yu, and M. Abadi.

Host ﬁngerprinting and tracking on the web:privacy
and security implications. In Proceddings of the 19th

1139Annual Network and Distributed System Security
Symposium (NDSS), 2012.

[24] N. C. Zakas. How many users have JavaScript

disabled? http://developer.yahoo.com/blogs/ydn/
many-users-javascript-disabled-14121.html.

[25] M. Zalewski. p0f v3 (version 3.06b).

http://lcamtuf.coredump.cx/p0f3/.

APPENDIX
A. LIST OF FINGERPRINTING URLS

Table 3 shows the location of each ﬁngerprinting script
discovered, separated by the respective ﬁngerprinting com-
panies.

B. ACTIONSCRIPT CALLS

The following list enumerates the ActionScript calls that

FPDetective searches for in the decompiled Flash ﬁles.

• enumerateFonts (only with argument true)
• getFontList
• all Capabilities class properties and methods, includ-

ing

– version
– manufacturer
– serverString
– language

• screenDPI
• screenResolutionX
• screenResolutionY
• getTimezoneOffset
• getLocal
• XMLSocket
• Math.min, Math.max
• ExternalInterface.call
• ExternalInterface.addCallback
• sendAndLoad
• URLLoader
• navigateToURL
• loadMovie
• createUID
• getUrl
• allowDomain
• allowInsecureDomain
• loadPolicyFile
• URLRequest
• LoadVars
• md5, sha256, sha384, sha512

FingerPrinter
BlueCava
Perferencement
CoinBase
MaxMind
Inside graph
SiteBlackBox
Analytics-engine
Myfreecams
Mindshare Tech.
Cdn.net
AFK Media
Anonymizer
Analyticsengine
BBelements
Piano Media
Bluecava
ThreatMetrix
Alipay
MEB

Script URL

http://ds.bluecava.com/v50/AC/BCAC5.js
http://tags.master-perf-tools.com/V20test/tagv22.pkmin.js
https://coinbase.com/assets/application-773afba0b6ee06b45ba4363a99637610.js
http://device.maxmind.com/js/device.js
http://inside-graph.com/ig.js
(No ﬁxed URL)
http://sl4.analytics-engine.net/detector/fp.js
http://www.myfreecams.com/mfc2/lib/o-mfccore.js
pomegranate.js(Nofixeddomain)
http://cdn-net.com/cc.js
http://gmyze.com/0.4.1.1/js/fingerprint.js
https://www.privacytool.org/AnonymityChecker/js/fontdetect.js
http://dpp750yjcl65g.cloudfront.net/analyticsengine/util/fingerprint.compiled.js
http://go.eu.bbelements.com/flash/bbnaut.swf
http://mp.pianomedia.eu/bucket/novosense.swf
http://lookup.bluecava.com/flash/guids[2|3].swf
https://h.online-metrix.net/fp/fp.swf?org_id=...&session_id=... (also served from other domains)
http://img.alipay.com/common/um/lsa.swf
http://meb.gov.tr/KZneA1akxW/502758.swf

Table 3: URLs of Fingerprinting JavaScript and Flash Files

1140