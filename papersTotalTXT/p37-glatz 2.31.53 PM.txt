Classifying Internet One-way Trafﬁc

Eduard Glatz

ETH Zurich

Zurich, Switzerland

eglatz@tik.ee.ethz.ch

Xenofontas Dimitropoulos

ETH Zurich

Zurich, Switzerland

fontas@tik.ee.ethz.ch

ABSTRACT
Internet background radiation (IBR) is a very interesting
piece of Internet traﬃc as it is the result of attacks and
misconﬁgurations. Previous work primarily analyzed IBR
traﬃc to large unused IP address blocks called network tele-
scopes. In this work, we build new techniques for monitor-
ing one-way traﬃc in live networks with the main goals of
1) expanding our understanding of this interesting type of
traﬃc towards live networks as well as of 2) making it useful
for detecting and analyzing the impact of outages. Our ﬁrst
contribution is a classiﬁcation scheme for dissecting one-way
traﬃc into useful classes, including one-way traﬃc due to un-
reachable services, scanning, peer-to-peer applications, and
backscatter. Our classiﬁcation scheme is helpful for moni-
toring IBR traﬃc in live networks solely based on ﬂow-level
data. After thoroughly validating our classiﬁer, we use it
to analyze a massive data-set that covers 7.41 petabytes
of traﬃc from a large backbone network to shed light into
the composition of one-way traﬃc. We ﬁnd that the main
sources of one-way traﬃc are malicious scanning, peer-to-
peer applications, and outages.
In addition, we report a
number of interesting observations including that one-way
traﬃc makes a very large fraction, i.e., between 34% and
67%, of the total number of ﬂows to the monitored network,
although it only accounts for 3.4% of the number of pack-
ets on average, which suggests a new conceptual model for
Internet traﬃc in which IBR traﬃc is dominant in terms of
ﬂows. Finally, we demonstrate the utility of one-way traﬃc
of the particularly interesting class of unreachable services
for monitoring network and service outages by analyzing the
impact of interesting events we detected in the network of
our university.

Categories and Subject Descriptors
C.2.3 [COMPUTER-COMMUNICATION NETWORKS]:
Network Operations—Network monitoring

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.

General Terms
Measurement, Security

Keywords
Measurement methods, Traﬃc Analysis (anomaly detection,
classiﬁcation)

1.

INTRODUCTION

Studying the background radiation of the Internet has
been instrumental for understanding Internet threats, like
the prevalence of Denial of Service (DoS) attacks [29] and
the propagation of Slammer [27] and Blaster [4] worms.
IBR traﬃc has been primarily studied with the help of net-
work telescopes [28], which are large unpopulated IP address
blocks (e.g. /8) that seamlessly ﬁlter out all benign traﬃc.
In live networks, i.e., popuated networks IBR traﬃc can be
extracted by dissecting two-way from one-way traﬃc, i.e.,
traﬃc connections that do not receive a network reply. In
this work, we build techniques for monitoring one-way traﬃc
in live networks.

We make three main contributions. First, we design and
validate a comprehensive classiﬁcation scheme for dissecting
one-way traﬃc that relies solely on ﬂow-level data, e.g., Net-
Flow. Our scheme uses 13 carefully-designed rules, which
encode novel heuristics as well as leverage and combine ex-
isting techniques that have been proven eﬀective for certain
types of traﬃc. We associate each one-way ﬂow with up to
17 diﬀerent signs, which help dig into the causes of one-way
ﬂows. The key features of our scheme are that: 1) it relies
on ﬂow data; 2) it is very easy to conﬁgure; 3) it provides
transparency into the classiﬁcation process; and 4) it is eas-
ily extensible.

Our second contribution is that we use our classiﬁcation
scheme to shed light into IBR traﬃc towards a large live
network by analyzing a massive data set of unsampled ﬂow
records summarizing 7.41 petabytes of traﬃc recorded over
eight years (from 2004 to 2011). We ﬁnd that in the studied
years one-way traﬃc makes between 34% and 67% of the to-
tal number of ﬂows, but it only accounts on average for 3.4%
of the packets. This suggests a new conceptual model of In-
ternet traﬃc in which IBR traﬃc is a needle in a haystack
in terms of packets (and bytes), but it is very dominant in
terms of ﬂows. Besides, we ﬁnd that scanning is the largest
component of one-way traﬃc corresponding to 83.5% and
62.6% of the one-way ﬂows and packets, respectively. The
second major contributor is traﬃc caused by peer-to-peer
(P2P) applications. Finally, we ﬁnd that in 2011 the vol-

37ume of IBR traﬃc in terms of ﬂows is almost equal to 2004
with small ﬂuctuations in the years between. The fraction of
IBR traﬃc in the total number of ﬂows has been consistently
decreasing from 67% in 2004 to 34% in 2011.

Third, we show how one-way ﬂows assigned to the class
of unreachable services provide new possibilities for service
availability monitoring enabling in particular to passively as-
sess the impact of outages, which is not possible with tradi-
tional approaches based on active probing. To demonstrate
the utility of our scheme, we describe and measure the im-
pact of interesting outages and misconﬁguration we discov-
ered in the network of our university.

In the next section we provide preliminary insights into
the one-way traﬃc classiﬁcation problem. Next, in Section 3
we describe our data sets and their sanitization steps. Our
classiﬁcation scheme is introduced in Section 4 and validated
in Section 5. In Section 6 we use our scheme to characterize
the composition of IBR traﬃc in a live network, while in
Section 7 we outline how our work is useful for service avail-
ability monitoring. Finally, we present related work and
conclude our paper in Section 8 and 9.

2. PRELIMINARIES

Network communication inherently reﬂects dialogs taking
place between applications running on distributed systems
including any accompanied control and error messages. Reg-
ular communication involves two-way traﬃc consisting of
packets in opposite direction. In contrast, one-way traﬃc re-
sults from communication errors or other unusual situations
that result in packets in one direction. In this work, we look
at one-way communication at the network level. We deﬁne
a two-way ﬂow (or equivalently a bi-ﬂow) as the aggregate
of two standard 5-tuple ﬂows that have reverse values in the
source and destination IP address and port number ﬁelds.
A 5-tuple traﬃc ﬂow is a ﬂow of packets that have common
values in the IP address, port number, and layer-4 protocol
ﬁelds. We deﬁne an one-way ﬂow as a ﬂow that does not
have a matching reverse ﬂow. A two-way ﬂow may still be
the result of a failed communication at the transport or ap-
plication level, e.g., a TCP reset packet produces a two-way
ﬂow, therefore one-way ﬂows provide a conservative view of
failed communication attempts in the Internet.

One-way traﬃc is important as it is associated with inter-
esting events, such as unreachable services, scanning, and
misconﬁgurations. To draw useful information from one-
way traﬃc we need to infer what is causing it. The goal
of one-way traﬃc classiﬁcation is to classify one-way traf-
ﬁc into classes of malicious and benign causes. We identify
three main causes of one-way traﬃc:

(cid:129) Failures & Policies: this group comprises attempts
to access a service that do not succeed due to fail-
ures or policies. Possible reasons are ﬁrewall blocking,
temporary or permanent outages of network elements,
stopped service processes on end-hosts, and routing
misconﬁgurations. For example, the use of laptops
outside of enterprise networks they are conﬁgured for
produces one-way traﬃc. Similarly, one-way traﬃc is
the result of attempts to use services that are blocked
by security policies, like when testing connectivity with
the ping tool to non-responding destinations. Further-
more, one-way traﬃc can in special cases result from
network congestion.

(cid:129) Attacks: vulnerability scanning is a very common at-
tack vector. However, unsolicited probes typically do
no receive a reply resulting in many one-way ﬂows.
Another attack case is backscatter traﬃc from DoS at-
tacks using spoofed source IP addresses, which also
results in one-way ﬂows towards the spoofed IP ad-
dresses. Third, preﬁx hijacking results in one-way traf-
ﬁc towards a “black hole”.

(cid:129) Special application behavior: P2P applications try
to reconnect to systems they have been in contact be-
fore as such systems are often preferred peers by ap-
plication design. However, the dynamic nature of P2P
networks and in particular nodes unexpectedly leaving
a network result in one-way reconnection attempts. A
second, but rare scenario is applications using sessions
that run the two communication directions over dif-
ferent connections. For example, an interesting case
we have identiﬁed is the application layer protocol of
LANsource [15] that runs over UDP and uses diﬀerent
destination ports for each communication direction.

Properly identifying Internet one-way traﬃc from mea-
surement data imposes speciﬁc requirements on monitoring.
In particular, traﬃc sampling and poor spatial network cov-
erage, i.e., missing one direction of a communication that
may take a diﬀerent path due to asymmetric routing, may
result in artiﬁcial one-way ﬂows. In principle, dealing with
asymmetric routing requires to either know how ﬂows are
routed or to monitor every link along a network cut between
a monitored network and the Internet. For these reasons, it
is practically easier to measure one-way traﬃc near the edge,
e.g., in enterprise, university, or small ISP networks, where it
is possible to monitor the entire border traﬃc activity with-
out sampling. Edge networks comprise the vast majority of
Internet domains.

3. DATASETS AND SANITIZATION

We use data from a regional academic backbone network
that serves 46 single-homed universities and research insti-
tutes. The monitored address range contains 2.2 million IP
addresses, which correspond to a continuous block slightly
larger than a /11. We have been archiving unsampled ﬂow
records since 2003 from hardware-based NetFlow meters on
the border routers of the monitored network. The meters
capture all the traﬃc that crosses the border destined to
or coming from the Internet.
In a single peering link, we
observe in 2011 on average 108.1 million ﬂows per hour,
which corresponds to 3,064 million packets. The stored ﬂow
records are not anonymized. From each record we extract for
our classiﬁcation scheme the following ﬁelds: IP addresses,
port numbers, protocol number, byte/packet counts, and
timestamps. We do not use TCP ﬂags because they are not
supported by the fast hardware-based NetFlow, although
they can be easily integrated in our classiﬁcation. Over time
we have accumulated a massive archive with more than 100
TBytes of compressed NetFlow records.

A challenge in analyzing our data is computational over-
head especially for tasks that cannot be parallelized. For
example, using a optimized C++ program to parse one day
of data and compute the average number of one-way ﬂows
per host takes 10 hours and 10-20 Gbytes of main memory.
The computational overhead includes time for disk I/O, de-

38compression (bzip2 ), sorting ﬂows by their start time, pre-
processing (as discussed in the following paragraphs), and
updating a hash table, which keeps per host state. Memory
consumption is dominated by the hash table. The compu-
tation time can be drastically reduced by using ﬂow me-
ters that support on-the-ﬂy bidirectional ﬂow monitoring,
like YAF [16]. To make the computational overhead more
tractable, we use two 400-hour samples per year, which cor-
respond to approximately one month per year. In particular,
we analyze the ﬁrst 400 hours of each February and August
between 2004 and 2011. The studied traﬃc data correspond
to 457 gigaﬂows and 7.41 petabytes and cover approximately
9% of the total number of ﬂows observed during the eight
year period. This is one of the largest traﬃc traces that has
been analyzed in the literature.

For each 400-hour sample, in the top rows of Table 1 we
report the time the monitoring and collection infrastruc-
ture was functioning properly and the traﬃc volume it cor-
responds to. Overall the availability of the infrastructure
was higher than 99.5% with only short interruptions due to
router restarts and corrupted data. To eliminate the impact
of interruptions in our analysis, we use daily averages and
discard the days in which the short interruptions occurred.

3.1 Data Sanitization

In this section we describe how we addressed a number
of data sanitization challenges for extracting one-way ﬂows.
In particular, we outline our methodology for eliminating
double-counting, defragmentating ﬂows, and pairing bi-ﬂows.
To speed up searching for matching ﬂows, we split time into
intervals and limit our search within an interval.
In Sec-
tion 3.1.4 we analyze the impact of the interval size.
In
the future, the standardization of bidirectional ﬂow moni-
toring [34] will likely make one-way ﬂow extraction much
easier.

3.1.1 Double-Counting Elimination

Although we collect ﬂows from border routers only, if a
ﬂow is routed through multiple border routers, it will be re-
ported multiple times in our NetFlow data. To address this
problem we use a map provided to us by network operators
of SWITCH (ISP serving Swiss Universities) that speciﬁes
which ports of the border routers are connected to the in-
ternal backbone and which to the Internet. Our NetFlow
data carry information about the input and output port of
a ﬂow. We use this information to ﬁlter out ﬂows. We only
keep ﬂows that are routed between the Internet and the in-
tranet. Double-counting elimination has a signiﬁcant impact
on our data reducing the total traﬃc volume by 32.3%.

3.1.2 Defragmentation

We call the standard 5-tuple NetFlow records raw ﬂows.
NetFlow may fragment a traﬃc ﬂow when the active time-
out expires or when the ﬂow cache is ﬁlled up and ﬂushed.
In addition, the optional NetFlow fast aging feature, with
which our meters are conﬁgured, leads to additional frag-
mentation. Fast ﬂow aging reduces the utilization of the
ﬂow table by exporting a ﬂow if no more than a few packets
are observed within the ﬁrst few seconds of the creation of
a ﬂow table entry. It realizes an eﬃcient process to age out
entries for short ﬂows. To address ﬂow fragmentation due to
fast aging, we split time into intervals and for each raw ﬂow
we search within its time interval for other raw ﬂows with

the same 5-tuple. We merge matching ﬂows updating their
byte/packet counts and start/end timestamps. We call the
merged ﬂows defragmented ﬂows. Note that if a ﬂow spans
multiple intervals it will yield one defragmented ﬂow for each
interval. In the bi-ﬂow pairing process we account for these
cases. In the third and fourth row of Table 1 we show the
numbers of raw and defragmented ﬂows. We observe that
defragmentation has a signiﬁcant impact reducing the num-
ber of ﬂows by a fraction ranging between 20.6% and 39.6%
for diﬀerent years.

3.1.3 Bi-ﬂow Pairing

For TCP and UDP a two-way ﬂow is the aggregate of two
defragmented ﬂows that have the same 5-tuple with reverse
values in the source and destination IP address and port
ﬁelds. For each defragmented ﬂow in an observation interval,
we search for ﬂows in the same or in the adjacent intervals
and group matched ﬂows into a bi-ﬂow. A one-way ﬂow is a
ﬂow that does not have a matching reverse ﬂow in the same
or in an adjacent interval.

A special situation exists for other protocols, like ICMP,

Encapsulated IPv6, and Encapsulated Secure Payloads (ESP).
The port ﬁelds in our NetFlow data do not carry interest-
ing semantics for protocols other than TCP and UDP. For
these protocols we deﬁne a ﬂow and match bi-ﬂows based on
a 3-tuple consisting of the IP addresses and protocol ﬁelds.
This deﬁnition may underestimate the number of one-way
ﬂows involving protocols other than TCP and UDP.

Interestingly, it is not oﬃcially documented how NetFlow
deﬁnes a ﬂow for these protocols. According to certain
sources NetFlow aggregates packets with common values
in the source/destination IP address, protocol, and ICMP
type/code ﬁelds into an ICMP ﬂow [37]. For protocols other
than TCP, UDP, and ICMP, NetFlow sets port ﬁelds to
zero [37]. We ﬁnd that this behavior is not met by our Net-
Flow data. Only 5% of all ICMP ﬂows carry the ICMP type
and code information, while all remaining ICMP ﬂows have
this information set to zero.

3.1.4

Impact of the Interval Size

We next analyze the impact of the interval size by comput-
ing ﬂow metrics for a full day of data using diﬀerent interval
sizes. We select a 10-minute reference interval within which
we can search eﬃciently for ﬂow fragments and pairs.
In
Figure 1 we show the impact of the interval size with re-
spect to the 10-minute (600 secs) interval. We observe, as
expected, that longer intervals lead to slightly lower ﬂow
counts as fewer ﬂows cross interval boundaries. This de-
crease is less for two-way ﬂows due to their longer duration.
We observe that doubling the interval size slightly decreases
absolute count metrics by 3-5%. On the other hand, the de-
crease of the relative volume of one-way ﬂows is only 1.2%
and does not decrease further with an increasing interval
size. Therefore, we conclude that with a 10-minute inter-
val absolute count metrics slightly overestimate the number
of ﬂows, while relative count metrics, which is the type of
metrics we primarily report, are very accurate.

4. ONE-WAY TRAFFIC CLASSIFICATION
Our classiﬁcation scheme has the following key features:
(cid:129) Flow-based Classiﬁcation: We leverage solely ﬂow
monitoring data, i.e., NetFlow. Compared to packet-

39Hours

Total terabytes
Raw ﬂows (1e9)

Defragmented ﬂows (1e9)

Two-way ﬂows (1e9)

Two-way packets (1e9)

One-way ﬂows (1e9)

One-way packets (1e9)

2004
799.0
270.8
30.96
24.31
6.117
381.1
12.19
34.09

2005
800.0
304.5
29.35
22.47
6.712
418.6
9.102
20.89

2006
792.0
424.4
30.32
22.53
8.046
558.0
6.502
24.04

2007
780.0
641.5
49.03
29.62
10.84
834.0
8.040
31.09

2008
799.0
842.6
63.16
44.03
17.61
1080.8
8.967
27.59

2009
799.0
1035.2
77.05
58.55
22.97
1286.8
12.78
49.65

2010
800.0
1763.2
90.91
72.21
28.71
2092.3
15.01
39.56

2011
800.0
2132.7
86.49
66.91
26.55
2372.7
14.06
79.03

Table 1: Size of data sets per year in total hours, bytes, ﬂows and packets. The diﬀerent ﬂow counts represent
the processing steps from raw data to defragmented ﬂows and ﬁnally to ﬂows separated into two- and one-way
ﬂows.

Two−way flows
One−way flows
One−way/total flows
Total flows

e
z
s
 
l

i

a
v
r
e

t

n

i
 
s
 

0
0
6

 
.
t
r

 

w
n
o

i
t

a
i
r
a
V

5
0

.

1

0
0

.

1

5
9

.

0

300

450

600

720

900

1200

Interval Size [s]

Figure 1: Impact of time interval size on ﬂow met-
rics aggregated for a full day. The decrease of the
fraction of one-way to total ﬂows is not more than
1.2% for a doubled interval size.

level data and DPI that have been used in the past
to monitor IBR traﬃc, ﬂow monitoring provides fewer
details, but is less expensive, scales better to moni-
toring large IP address blocks, and is more generally
available.

(cid:129) Easy Conﬁguration: Our classiﬁer does not require
training, which is a drawback of many traﬃc classi-
ﬁcation techniques.
It can be applied with minimal
conﬁguration, without extensive overhead.

(cid:129) Comprehensibility: We use legible rules instead of
complex classiﬁcation structures, like self-organizing
maps, to make our classiﬁer comprehensible to non-
machine-learning experts. Our scheme is based on
the rules summarized in Table 3 that can be easily
reviewed and veriﬁed both by researchers and network
operators. Traﬃc classiﬁcation schemes should be eas-
ily understandable to be engaged and deployed by net-
work operators.

(cid:129) Extensibility: Our classiﬁer can be easily extended
with additional traﬃc features and classiﬁcation rules.
For example, if a ﬂow monitor is conﬁgured to collect
additional data, like TCP ﬂags, then these can be eas-
ily integrated into new or existing classiﬁcation rules.

We classify one-way ﬂows using a two step process that
resembles the way medical diagnosis identiﬁes the cause of
a health problem. We ﬁrst deﬁne a set of signs, which are
informative attributes for digging into the cause of one-way

ﬂows. We then check each ﬂow against all signs and ﬁnd the
ones it matches. Finally, we classify a ﬂow based on the col-
lection of signs that are present or absent. Our classiﬁcation
scheme is based on a set of rules that take as input the signs
of a ﬂow and determine the appropriate class, including the
unknown class.

4.1 Signs

Flow signs are derived from sign tests. A sign test deter-
mines if a ﬂow exhibits a speciﬁc sign and may be as simple
as checking a ﬂow feature value or as complex as performing
a behavioral assessment of an involved end-host. We intro-
duce in total 17 signs exploiting in 4 cases techniques from
the literature that have been shown eﬀective for detecting
scan and peer-to-peer traﬃc. We classify our signs in four
categories based on the entity they characterize: 1) a pair
of communicating hosts, 2) a remote host as a source of a
one-way ﬂow, 3) a local host as a target of a one-way ﬂow,
or 4) a ﬂow. In Table 2 we summarize our signs and show
in which category they belong.

4.1.1 Host-Pair Signs

Host-pair signs characterize a pair of end-hosts with a
one-way ﬂow. They reﬂect the mix of one- and two-way
ﬂows of a host pair.
In Figure 2 the graphs a to d illus-
trate communication patterns that correspond to the four
possible combinations of a biﬂow and an outﬂow between a
host pair with an inﬂow. Hosts are represented by nodes,
where the local host is the node in the left and directed
links represent the presence of one or more ﬂows. We use
the sign end-hosts-communicating to mark one-way ﬂows be-
tween hosts that are involved in a productive communica-
tion, i.e., they have one or more biﬂows between them, with
occasional failed connections, i.e., one-way ﬂows. We assign
this sign to one-way ﬂows with the communication pattern
shown in the graphs b and d in Figure 2.

Furthermore, we introduce a sign called “InOut” to cap-
ture the pattern of graph c in Figure 2. In particular, the
“InOut” sign identiﬁes host pair communication situations
in which a one-way ICMP ﬂow is a reply to another out-
going one-way ﬂow exchanged between the same host pair.
We assign ICMP one-way ﬂows with the sign “InOut” to a
special class that includes suspected benign one-way ﬂows.

4.1.2 Remote Host Signs

We use four signs to characterize remote hosts that gen-
erate one-way ﬂows towards the monitored network. If we
observe one-way ﬂows from a well-known source port of a
remote host to a local ephemeral port and at the same time
we do not observe any two-way ﬂows nor opposite direction

40Detection Criterion/Algorithm

Sign Type
Host pair behavior

Remote host behavior

Local host behavior

Flow feature

Sign Name
End-hosts-communicating One-way ﬂow between productive host pair
Limited dialog
Service sole reply
Remote scanner 1
Remote scanner 2
Remote non-scanner
Unused local address
Service unreachable
Peer-to-peer
Artifact
Single packet
Large ﬂow
Bogon
Protocol

Sign Short Name for Rules
PotOK
One-way ﬂows between unproductive host pair
InOut
no biﬂow on srcIP ∧ dstPort≥1024 ∧ srcPort < 1024 Backsc
TRW algorithm (suspected scanner)
Host classiﬁcation (suspected scanner)
TRW algorithm (suspected regular host)
Unpopulated local IP address
Unanswered request to local service
Flow towards local P2P host
UDP/TCP ﬂow with both port numbers=0
Flow contains one packet only
Flow carries ≥ 10 packets or ≥ 10240 bytes
Source IP belongs to bogon space
IP protocol type of ﬂow

TRWscan
HCscan
TRWnom
GreyIP
Unreach
P2P
Artef
Onepkt
Large
Bogon
TCP, UDP, ICMP, OTHER

Table 2: Overview of deﬁned signs based on the behavior of one or both involved hosts or based on the
numeric values of one or more ﬂow attributes.

Figure 2: Mixture of incoming one- and two-way
ﬂows exchanged between a host pair shown as a
graph. Hosts are represented by nodes and the pres-
ence of inﬂow/outﬂow/biﬂows by arrows.

one-way ﬂows between the two hosts, then we assign the
service sole reply sign. We use this sign to detect backscat-
ter from attack traﬃc towards a service of the remote host.
We check for the absence of biﬂows within a 30-minute time
interval to limit computational overhead.

Besides, we leverage two state-of-the-art algorithms to de-
tect remote scanners. We introduce three signs that de-
scribe either a positive or a negative test result. The ﬁrst
two signs are based on the well-known Threshold Random
Walk (TRW) [19] algorithm, which uses sequential hypothe-
sis testing to qualify a remote host as scanner or benign (or
undecidable). We denote these signs with “TRWscan” and
“TRWnom”. The second algorithm [3] is a variant of TRW
that inspects the behavior of a remote host in a relaxed way
and classiﬁes it as a scanner if a test condition is met. A
negative test result is not supported, i.e., it does not qual-
ify a host as benign. The test assesses the service fanout
of a remote host, i.e., the count of 2-tuples {dstIP,dstPort}
the host attempted to access, and its overall success in con-
nection establishment. Each connection attempt is qualiﬁed
either as “good” if it results in a two-way ﬂow or as “bad”
if it results in a one-way ﬂow. This way, a remote host is
classiﬁed as a scanner if it has a bad service fanout larger
than two times the good service fanout (and at least 4). The
host classiﬁcation is done in a ﬁrst pass. During a second
pass any ﬂow sourced by a classiﬁed scanner is labeled with
the sign “HCscan”. Both algorithms restrict their tests to 30
minute time windows to keep memory demands in bounds.

4.1.3 Local Host Signs

We use three signs to characterize local hosts within the
monitored network. We mark with the sign unused local
address (“GreyIP”) local IP addresses that never sourced

any ﬂow over a full observation period of 400 hours and,
therefore, are unpopulated.

We introduce the sign service unreachable to trace out-
ages of well-known services. We deﬁne a service as an end-
point described by the 3-tuple {localIP, protocol, localPort}
with the constraint that the port number is well-known, i.e.,
below 1024. We consider only TCP and UDP ﬂows. We
consider a local service valid if it serves at least 20 clients
during any 30-minute interval over a full observation period.
We label one-way ﬂows that target valid services with the
sign service unreachable (“Unreach”).

The sign peer-to-peer marks one-way ﬂows caused by stale
host caches of P2P applications. Behavioral P2P application
identiﬁcation has been studied extensively [20, 31, 18]. We
make use of three rules from the literature (H1,2,3 from [18])
that identify a local host as a member of a P2P network
based on the observation of typical P2P behavioral patterns.
We require that at least 2 out of 3 P2P rules are matched
or a match occurs for at least 5 time windows of 30 minute
duration. First, we prepare a list with detected local P2P
hosts by analyzing two-way ﬂows of a full observation period.
Then, we mark any TCP/UDP one-way ﬂow targeted at a
high port towards such hosts with the peer-to-peer sign.

4.1.4 Flow Signs

The remaining signs are either direct ﬂow attributes or
are derived from them by the rules shown in Table 2. The
sign artifact is used for TCP and UDP ﬂows with both port
numbers set to zero. Such ﬂows are the result of packet
fragments for which the correct port numbers are not avail-
able due to the missing layer-4 header. If a ﬂow contains a
source address that belongs to bogon space using the data
of [9] then we mark it with the sign bogon.

4.2 Classiﬁer

A class is associated with one or more rules. We deﬁne

the following classes:

(cid:129) Service Unreachable: access attempt to temporary

unavailable services.

(cid:129) Malicious Scanning: probing for the exploitation of

vulnerabilities in end systems.

(cid:129) Benign P2P: P2P applications trying to access peers
listed in their local host cache that are not anymore
available.

41Rule # Flow Membership Rules

{T RW scan, P otOk} ⇒ Scanner
{HCscan, P otOk} ⇒ Scanner
{GreyIP, Backsc, ICM P , bogon} ⇒ Scanner
{Onepkt, GreyIP , ICM P , T RW nom, bogon, P 2P , U nreach, P otOk, Backsc, Large} ⇒ Scanner
{ICM P, T RW nom, InOut, bogon, P otOk} ⇒ Scanner
{Backsc, T RW scan, HCscan, P 2P , InOut, P otOk} ⇒ Backscatter
{U nreach, T RW scan, HCscan, bogon, P 2P} ⇒ U nreachable

Class Name

Malicious

Scanning

Backscatter

Service

Unreachable

Benign P2P

Scanning

Suspected

Benign

Bogon

1

2

3

4

5

6

7

8

9

10

11

12

13

{P 2P, T RW scan, HCscan, bogon} ⇒ P 2P

{P otOk, U nreach, P 2P , bogon} ⇒ Benign
{Large, GreyIP , T RW scan, HCscan, P 2P , U nreach, ICM P , Backsc, bogon} ⇒ Benign
{T RW nom, GreyIP , HCscan, P 2P , U nreach, bogon, Backsc} ⇒ Benign
{ICM P, InOut, T RW scan, HCscan, bogon} ⇒Benign
{bogon, T RW scan, HCscan, Backsc} ⇒ Bogon

Table 3: Rules used to classify one-way ﬂows. Each rule speciﬁes which signs have to be present or absent
(sign names with overbars). An overview of deﬁned signs can be found in Table 2.

(cid:129) Backscatter: replies to DoS attack traﬃc that uses
randomly chosen source IP addresses to hide the real
identity of an attacker.

(cid:129) Suspected Benign: one-way ﬂows may exist as part
of benign applications using data and control connec-
tions in parallel and employing one of them for ac-
knowledgment only. Another cause may be tempo-
rary failures within an otherwise productive communi-
cation.

(cid:129) Bogon: one-way ﬂows originating from bogon IP space.
(cid:129) Other: one-way ﬂows that do not match any of the

above classes.

We derive our classiﬁcation rules with a systematic pro-
cess shown in Figure 3. We start with an initial set of rules
and in each iteration we classify ﬂows, compute a conﬂict re-
port of the resulting classiﬁcation and update the rules. The
conﬂict report describes ﬂows classiﬁed in multiple classes.
Speciﬁcally, it reports: 1) the classes that intersect; 2) the
size of the intersections; 3) an ordered (by their popular-
ity) list of sign combinations in the intersections; and 4)
the number of remaining unclassiﬁed ﬂows. Based on the
conﬂict report and in particular the sign combinations, we
then manually update the rules to resolve conﬂicts and to
reduce the number of unclassiﬁed ﬂows. Each ﬂow is checked
against 17 diﬀerent signs, which in theory yields a maximum
of 131,072 possible sign combinations. However, most com-
binations do not occur in practice. In our data, we observe
a total of 1,035 diﬀerent sign combinations. Moreover, one
could ignore sign combinations that are only observed in a
small number of ﬂows resulting in a sharp reduction on the
number of interesting combinations. We iteratively repeat
this procedure until we resolve all conﬂicts and cannot fur-
ther signiﬁcantly reduce the number of unclassiﬁed ﬂows.
Based on the described procedure we derived a ﬁrst version
of our classiﬁcation rules after eight iterations. Then, we
further reﬁne our rules based on our validation. The ﬁnal
classiﬁer includes 13 classiﬁcation rules shown in Table 3.

Figure 3: Rule reﬁnement stages

For the initial rule set we deﬁned rules that contained
only signs that must be present based on expert knowledge.
This resulted in many ﬂows that were classiﬁed in multiple
classes, summing up on average to 21.9% of the ﬂows with a
peak of 40.6%. Through carefully studying conﬂicting sign
sets provided by the conﬂict report we revised the rules by
adding extra predicates describing signs that must be absent
to resolve all class conﬂicts. Finally, we investigated all sign
sets of signiﬁcant size that were not yet catched by any rule
to minimize the count of unclassiﬁed ﬂows (assigned to class
“Other”). This way we could classify on average 98.0% of all
one-way ﬂows with a low of 95.6% in August 2008.

Our classiﬁer processes input ﬂows in three passes. In a
ﬁrst pass it initializes local services, local P2P hosts and in-

42active local IP addresses. In a second pass matching signs
are assigned to ﬂows and in a ﬁnal pass rules are applied to
account each ﬂow to a unique class. We have implemented
our classiﬁer in C++ and run it on a dedicated Linux clus-
ter with a fast RAID disk subsystem. We collect logs of the
overhead of the three passes combined for all 16 runs. In
general, the overhead scales with the size of the dataset, but
also depends on dataset characteristics. On average a run
processed 28.6 gigaﬂows in 23.1 hours (with a maximum of
37.4 hours) and required 3.4 GB of memory (with a peak of
6.1 GB). Considering the monitoring period length of 400
hours these ﬁgures are well within real-time bounds set by
the speed of the ﬂow data collection process. Note that we
exclude the overhead for preprocessing (time binning, ﬂow
defragmentation, biﬂow-pairing) as it largely depends on the
available input data (e.g. NetFlow export or YAF-created
ﬂow records). On our NetFlow records the preprocessing re-
quired the most resources while still safely remaining within
real-time bounds.

Our classiﬁcation scheme has one parameter that needs
conﬁguration: the time window size used for P2P and ser-
vices identiﬁcation and for scanner detection. We set it by
default to 30 minutes, but on a smaller network the window
size should be increased (see also Section 5).

5. VALIDATION

In this section we evaluate the accuracy of our classiﬁer
and optimize its rule set. Validating a one-way traﬃc clas-
siﬁcation scheme is very challenging. A major challenge is
the scarcity of information available from one-way traﬃc
consisting of very short ﬂows carrying few packets and fre-
quently no payload. We address this challenge, ﬁrst, by
building more accurate host proﬁles based on ﬂow data over
long time windows, second, by carefully examining one-way
packets for violation of relevant protocol state machines, and
third, by exploiting DPI and application identiﬁcation tech-
niques.

We ﬁrst use a traﬃc summarization technique [5] based
on frequent item-set mining (FIM) to summarize ﬂows of
diﬀerent classes into frequent item-sets, which can be then
easily inspected by an analyst. We apply this approach in
each class and measurement period between 2004 and 2011.
In summary, we ﬁnd that for diﬀerent classes and periods
up to 75% of the ﬂows were correctly classiﬁed. However,
with this approach we cannot assess the remaining ﬂows and
the number of false negatives. In addition, a validation of
one-way traﬃc classiﬁcation solely based on ﬂow data often
provides insuﬃcient evidence, as we miss information like
TCP ﬂag and ICMP types/codes. For this reason, we built
a dedicated validation setup in a smaller network to obtain
more detailed data.
5.1 Validation Setup

We built a monitoring setup and collected packet traces
at the Internet gateway of the Swiss university Hochschule
f¨ur Technik Rapperswil (HSR) occupying a /16 IP address
range. The campus network is sparsely populated with a
total of 3,949 active IP addresses seen during our experi-
ment. We use a dedicated host that is tapping traﬃc be-
tween the border router and the ﬁrewall. On the border
router no ﬁltering is activated, enabling us to see all traﬃc
routed to this IP range. To reliably collect packet data, we
use an Endace DAG card that provides exact packet times-

tamps. Mandated by the IT security policy, we anonymize
all IP addresses using a preﬁx-preserving scheme. Note that
anonymization does not allow us to use active probing for
our validation as proved to be useful in [30].

We collected packet traces for 19 consecutive days and
extracted ﬂows using the YAF ﬂow meter [16] conﬁgured
for bidirectional ﬂow export. We then split ﬂows into 10-
minute intervals and defragmented ﬂows within each inter-
val resulting in a total of 322.7 million (mio) ﬂows, which
include 219.6 mio (68.1%) incoming one-way ﬂows, 8.06 mio
outgoing one-way ﬂows (2.5%) and 95.1 mio two-way ﬂows
(29.5%). The small fraction of two-way ﬂows can be ex-
plained by the scarce population of the monitored network.
We retain packet data for a sub-period of three randomly
chosen days.

To obtain application labels we conﬁgured YAF with its
optional DPI application identiﬁcation feature that assigns
application labels to ﬂows it recognizes. However, the cover-
age achieved by YAF is limited. Thus, we used an additional
DPI application identiﬁer to add a second set of application
labels for almost all ﬂows. This additional DPI application
identiﬁer originally was developed to evaluate the BLINC
classiﬁer [21] and in an improved version to evaluate several
competing approaches to application identiﬁcation [24].

To learn more on the occurrence of one-way ﬂows using
bogus source IP addresses, we periodically downloaded the
full bogon list provided by [9] throughout the data collec-
tion process. This list not only contains the oﬃcial IANA-
reserved address ranges, but includes all IP ranges assigned
to regional registrars that have not yet been handed out to
costumers.

5.2 Validation Criterias

To determine class memberships we built a DPI classi-
ﬁer that uses an extensive set of 33 rules that make heavy
use of details available only from packet-level data. Due to
space limitations, we describe our DPI-based classiﬁcation in
the companion technical report [12]. In the following para-
graphs, we summarize the key additional information we
extracted from the packet-level data and how we exploited
it.

Extended Host Proﬁles: For each host we maintain a
host proﬁle over the full observation period of 457 hours (19
days) that tracks its connection success and subsequently
is used to feed the TRW algorithm. This is feasible in our
/16 network, i.e., it required 12 GBytes of memory for 10.2
mio extended host proﬁles, but does not reasonably scale
for larger networks carrying more traﬃc. Besides, extended
host proﬁles in combination with application identiﬁcation
are useful for identifying P2P hosts and local services.

ICMP types and codes: For ICMP ﬂows we analyze if
type and code information and the communication situation
of the involved host pair ﬁt a class. For example, we deem
a ﬂow as backscatter if it is an echo reply and the receiver
never sent a request to the sender. In addition, we check
if the source of an ICMP ﬂow is not already identiﬁed as a
scanner, which interestingly is true for more than 92.1% of
all incoming one-way ICMP ﬂows.

Protocol State Machine: As an additional way to iden-
tify malicious scan traﬃc, we analyze how well individual
ﬂows follow the transport layer protocol state machine. Mal-
formed packets are frequently used to exploit weaknesses of
protocol stacks or to penetrate non-stateful ﬁrewalls. For

43TCP ﬂows we test if the ﬂags of consecutive packets ﬁt into
acceptable state changes in the TCP protocol machine and
run sanity checks on the sequence numbers of segments.

Application Identiﬁcation: We apply application iden-
tiﬁcation techniques [16, 21, 24] on two-way ﬂows to discover
local services and to detect hosts running P2P applications.
Precise Timestamps: We rely on packets timestamps
to identify the initiator of a connection, which is not possible
using NetFlow timestamps. Initiator detection is useful in
combination with DPI and extended host proﬁles for map-
ping local services.

5.3 Validation Results

We run both the ﬂow-based classiﬁer and our DPI classi-
ﬁer over the evaluation dataset. Then, we compare the re-
sults of both classiﬁcation runs and ﬁll-in a confusion matrix
showing predicted (ﬂow-based) versus actual (DPI-based)
class memberships. Based on the confusion matrix, we cal-
culate the recall (also called sensitivity), speciﬁcity and pre-
cision metrics for all deﬁned classes. Recall measures the
portion of actual positives which are correctly identiﬁed as
such; speciﬁcity measures the proportion of actual negatives
which are correctly identiﬁed; and precision measures the
portion of the classiﬁed positives which are correctly identi-
ﬁed.

For the ﬂow-based classiﬁcation we use the same settings
as we apply to the full dataset with the exception of the
time window parameter for remote host proﬁling, which we
increase by a factor of 32 to 16 hours instead of 30 mins.
This compensates for the smaller probability to observe ran-
domly targeted scan ﬂows in the evaluation dataset caused
by the smaller IP address range. Similarly to the full-dataset
analysis, we classify incoming one-way ﬂows. Our validation
uses the full evaluation dataset to build host proﬁles and a
subset of 34.8 mio incoming one-way ﬂows for DPI. For this
subset we could validate 99.4% of all one-way ﬂows.

The test results are summarized in Table 4. We obtain
very good results for the classes “Malicious Scanning”, “Ser-
vice Unreachable” and “Benign P2P Scanning” with recalls
above 95.3%, speciﬁcitiy values greater than 91.3% and pre-
cision exceeding 95.4%. The class “Suspected Benign” has
a recall of 85.1% and a precision of 75% caused by ﬂows
in the borderline between the classes “Suspected Benign”
and “Malicious Scanning” that are hard to separate. On the
other hand, its speciﬁcity is excellent at 99.9%. For the class
“Backscatter” we observe a recall of 62.4%. We miss primar-
ily ICMP replies and error messages as ICMP type and code
information is not available in our ﬂow data. However, the
recall can be easily improved by using ICMP type/code ﬁelds
when available to ﬁnd ICMP replies. Besides, a speciﬁcity of
100% and a precision of 88.4% shows this class is still very
useful. Finally, we observe a low recall for the class “Bo-
gon” of 40.4% and at the same time a perfect speciﬁcity and
precision of 100.0%. This is because the bogon list used by
the ﬂow-based classiﬁer is a subset of the bogon list used by
our DPI classiﬁer. We intentionally exclude the full-bogon
information from ﬂow-based classiﬁcation because historical
full-bogon data is not available. Again, it is trivial to extend
the ﬂow-based classiﬁer to use full-bogon lists for analyzing
present or future data.

Class Name
Malicious Scanning
Backscatter
Service Unreachable
Benign P2P Scanning
Suspected Benign
Bogon

Recall [%]
99.9 (99.6)
62.4 (62.4)
99.6 (99.5)
95.3 (91.8)
85.1 (70.5)
40.4 (40.2)

Speciﬁcity [%] Precision [%]

91.2 (88.8)

100.0 (100.0)
100.0 (100.0)

99.9 (99.8)
99.9 (99.9)

99.8 (99.6)
88.4 (87.2)
96.1 (92.5)
95.5 (85.0)
75.0 (70.5)

100.0 (100.0)

100.0 (100.0)

Table 4: Results of validation. The values in paren-
theses provide a lower bound by counting non-
validated ﬂows as classiﬁcation mismatches.

5.4

Impact on Flow Classiﬁer

For ﬂow-based scan detection we use two sets of rules.
The ﬁrst set is based on scan detection algorithms provid-
ing strong evidence. The second set deﬁnes rules that point
towards scanning, but provide weaker evidence. In particu-
lar, it includes ﬂows 1) towards unpopulated IP addresses or
2) that consist only of a single packet and do not match any
other rule. The validation shows that the second rule set is
in fact useful for scan detection, which led us to add this rule
set to the class “Malicious Scanning” eliminating an initially
deﬁned class “Suspicious Other”. In particular, 65.1% of the
ﬂows matching these rules are actually detected as scanners
when observing host behavior for an extended time period.
Another change introduced during validation concerns the
assignment of ICMP ﬂows. We observe that 92.1% of all
ICMP ﬂows seen are sourced by identiﬁed scanners. With-
out ICMP type/code information, it is diﬃcult to satisfac-
torily distinguish backscatter ICMP ﬂows from scanning.
Consequently, we moved a rule initially assigned to the class
“Backscatter”, assuming ICMP replies from DoS attacks, to
the class “Malicious Scanning”. Furthermore, we added the
sign “InOut” that helps to identify host pair communication
situations in which an ICMP ﬂow is a reply to a one-way
ﬂow exchanged between the same host pair. We use this
sign in the class “Suspected Benign”.

6. ONE-WAY TRAFFIC COMPOSITION

In this section we apply our classiﬁcation scheme on a
massive dataset of ﬂows records collected between 2004 and
2011 to shed light into the composition and characteristics
of one-way traﬃc.

Aggregate Statistics: We ﬁrst ﬁnd that in terms of
ﬂows one-way traﬃc is a very large component of Internet
traﬃc. During the studied period one-way ﬂows correspond
to between 34% and 67% of the total number of ﬂows to-
wards the monitored network. This is important for systems
that need to keep per ﬂow state, like stateful ﬁrewalls and
ﬂow meters. On the other hand, due to their short-lived
nature, one-way traﬃc corresponds on average only to 3.4%
and 0.79% of the total number of packets and bytes, respec-
tively. This indicates that IBR traﬃc is not a signiﬁcant
in terms of additional bandwidth consumption and packet
processing overhead.

Table 5 provides for each measurement period and class
the fraction of one-way traﬃc in terms of ﬂows and pack-
ets. On average the class “Malicious Scanning” accounts for
83.5% of all one-way ﬂows. It is followed by the classes “Be-
nign P2P” (6.7%), “Service Unreachable” (4.8%), “Suspected
Benign” (2.6%), “Other” (2.2%), “Backscatter” (0.3%) and
“Bogon” (0.1%), where in parentheses we show the average
fraction of one-way ﬂows per class over the eight year period.
The packet perspective provides a diﬀerent view. “Mali-

44Period Malicious Scanning Backscatter Unreachable
4.8%/9.2%
2004-02
0.6%/1.3%
2004-08
2005-02
5.8%/12.1%
0.4%/0.7%
2005-08
0.6%/4.4%
2006-02
0.4%/0.3%
2006-08
1.7%/1.2%
2007-02
2.2%/2.9%
2007-08
2008-02
1.1%/1.9%
2008-08
2009-02
2009-08
2010-02
2010-08
2011-02
2011-08

Benign P2P
0.1%/0.2%
5.5%/10.3%
0.0%/0.1%
3.4%/9.8%
0.0%/0.1%
4.1%/9.1%
0.0%/0.1%
1.8%/4.3%
0.1%/0.2%
4.2%/9.9%
0.1%/0.0%
5.3%/4.1%
0.1%/0.1%
6.5%/7.1%
0.2%/0.2%
9.5%/17.6%
0.2%/0.2%
23.9%/49.4%
0.3%/0.4% 15.2%/26.3% 6.5%/11.4%
0.1%/0.0% 15.3%/25.3% 5.9%/11.1%
5.7%/10.2%
0.1%/0.1%
4.0%/7.7%
0.3%/0.2%
0.2%/0.2%
6.3%/12.5%
0.6%/1.2%
7.3%/18.7%
2.2%/4.3% 12.3%/46.7% 6.9%/15.1%

87.2%/57.9%
93.9%/82.0%
87.2%/65.6%
95.4%/74.7%
89.3%/71.8%
87.8%/47.3%
86.9%/83.6%
80.7%/63.5%
68.3%/34.4%
70.5%/47.8%
74.2%/55.7%
86.2%/75.2%
88.2%/77.5%
85.8%/74.3%
81.4%/61.5%
72.8%/28.3%

3.7%/6.0%
2.6%/5.1%
3.1%/4.7%
6.2%/12.9%

Suspected Benign

Bogon

Other

1.1%/3.7%
1.0%/4.1%
1.8%/10.5%
1.5%/5.3%
3.3%/10.2%
3.2%/46.9%
2.8%/6.2%
3.5%/10.3%
3.0%/10.4%
3.2%/8.5%
2.7%/5.6%
2.3%/5.2%
2.9%/5.9%
2.6%/5.5%
2.6%/3.5%
3.7%/4.3%

0.1%/0.1% 1.1%/18.7%
0.0%/0.0% 1.0%/2.7%
0.0%/0.0% 1.0%/2.7%
0.3%/0.1% 0.7%/14.9%
0.2%/0.1% 2.3%/3.5%
0.0%/0.0% 3.1%/1.4%
0.0%/0.0% 2.0%/1.8%
0.2%/0.1% 3.7%/5.5%
0.0%/0.0% 3.5%/3.7%
0.0%/0.0% 4.4%/5.5%
0.0%/0.0% 1.8%/2.3%
0.0%/0.0% 2.0%/3.3%
0.1%/0.0% 2.0%/3.5%
0.0%/0.0% 1.9%/2.7%
0.0%/0.0% 1.9%/2.3%
0.0%/0.0% 2.0%/1.4%

Table 5: Fraction of ﬂows/packets falling into the deﬁned one-way ﬂow classes. The class Other represents
the remainder of ﬂows not captured by the other classes. Note, that we do not list rules that achieve a low
coverage eliminating the ﬂow artifacts class that results from fragmented packets without layer-4 header.

cious Scanning” accounts for 62.6% of all one-way packets,
“Benign P2P” for 13.0%, “Service Unreachable” for 10.1%,
“Suspected Benign” for 9.1%, “Other” for 4.7%, “Backscat-
ter” for 0.5%, and “Bogon” for 0.03%.

We observe that one-way traﬃc is clearly dominated by
scanning. In terms of packets, scanning accounts for a smaller
fraction of 62.6% of the total number of one-way packets.
This is because one-way ﬂows classiﬁed as scanning consist
on average of 1.6 packets per ﬂow.
In contrast, one-way
ﬂows of the classes “Service Unreachable” and “Benign P2P”
consist of 4.1 and 12.1 packets per ﬂow, respectively. This
diﬀerence is because TCP one-way ﬂows to unreachable ser-
vices are much more persistent in SYN packet retransmis-
sion attempts than TCP scanning. In addition, we ﬁnd that
one-way ﬂows in the class “Benign P2P” are often multi-
packet UDP ﬂows that sharply increase the average number
of packets per ﬂow.

Changes Over Time: Besides, we observe a number of
notable changes over time.
In Figure 4 we compare how
the mean daily number of one- and two-way ﬂows evolved
between 2004 and 2011. The volume of one-way ﬂows has
exhibited small ﬂuctuations between 2004 and 2011 and, in-
terestingly, in 2011 it is almost equal to 2004. On the other
hand, the number of two-way ﬂows has grown signiﬁcantly
by 343%. A study by Akamai estimated the global Internet
penetration increase in 2010 as 17% [2]. If we extrapolate
this ﬁgure over eight years, it yields a growth by 351%, which
is very close to our observations.

Besides, we observe that the fraction of one-way ﬂows has
dropped signiﬁcantly over time as shown in Figure 5.
In
2004 one-way ﬂows accounted for 67% of the total number
of ﬂows. Their share gradually dropped and since Aug. 2007
one-way ﬂows account consistently for one out of three in-
coming ﬂows. Between 2004 and 2007, a very large fraction
of one-way ﬂows targeted a small number of destination port
numbers, which were used by loud worms, like Sasser. For
this reason, we connect the decline of share of one-way ﬂows
to that presently aggresive scanning is not as common mal-
ware propagation vector as in the period between 2004 and
2007.

Figure 6 shows how one-way traﬃc breaks down into dif-
ferent classes in terms of ﬂows. The fraction of “Malicious
Scanning” ﬂows varies, started at a high of 87.2% in 2004

 

h
4
2

l

/
s
w
o
F
n
a
e
M

 

Inbound One−Way
Inbound One−Way

Two−Way
Two−Way

6
0
+
e
8

6
0
+
e
4

0
0
+
e
0

’4.2 ’5.2 ’6.2 ’7.2 ’8.2 ’9.2 ’0.2 ’1.2

Period

Figure 4: Evolution of one and two-way mean daily
ﬂow counts over time. The vertical bars mark 95%
conﬁdence intervals.

l

s
w
o
F
 
y
a
w
−
e
n
O

 
f

 

o
n
o

 

i
t
c
a
r
F
n
a
e
M

6
.
0

4

.

0

2

.

0

0

.

0

’04.2

’05.8

’07.2

’08.8

’10.2

’11.8

Period

Figure 5: One-way ﬂows as a (mean) fraction of the
total number of ﬂows, i.e., both one- and two-way
ﬂows, between 2004 and 2011. The share of one-
way ﬂows has declined between 2004 and 2007 and
remains almost constant since then.

and stayed at this or a higher level until 2006. Then, in 2007
we note a decline that leads to a low of 68.3% in Aug. 2008.

45l

h
 
4
2
/
s
w
o
F
 
y
a
W
−
e
n
O

8
0
+
e
4

8
0
+
e
3

8
0
+
e
2

8
0
+
e
1

0
0
+
e
0

1
0

.

4
0
0
2

7
0

.

4
0
0
2

1
0

.

5
0
0
2

7
0

.

5
0
0
2

2
0

.

6
0
0
2

7
0

.

6
0
0
2

 SuspBenign
 SrvUnreach
 other

 MalScan

 Bogon
 BenignP2P
 Backscat

1
0

.

9
0
0
2

7
0

.

9
0
0
2

1
0

.

0
1
0
2

7
0

.

0
1
0
2

1
0

.

1
1
0
2

8
0

.

1
1
0
2

1
0

.

7
0

.

2
0

.

7
0

.

8
0
0
2

8
0
0
2

7
0
0
2

7
0
0
2

Period

Figure 6: Composition of one-way traﬃc in ﬂow
counts per class.

This decline correlates with an increase of the class P2P one-
way traﬃc that falls early into the same period and also an
increase of class “Unreachable” later on. The high counts
in class “Service Unreachable” between Aug. 2008 and Feb.
2009 are caused by unanswered NTP requests towards an
NTP server.
Investigating further this incident, we found
that the increased number of requests pushed the operator
to introduce access restrictions to this server. As we ana-
lyze more in the next section, this class of one-way ﬂows is
very useful to administrators to monitor the reachability of
services. The peak in benign P2P one-way traﬃc between
Aug. 2007 and Feb. 2008 can be attributed to two IP ad-
dresses that are reported to be fake servers by the eMule
Bulletin Board. Fake eMule servers are commonly used to
collect eMule user data for research or legal prosecution. Mi-
nor contributors to this class are XBSlink traﬃc sourced by
Xbox 360 and PS2/3 game equipment, and the MMORPG
(massively multiplayer online role-playing game) Heroes of
Might and Magic.

7. SERVICE AVAILABILITY

MONITORING

In this section, we show how one-way ﬂows of the class
“Service Unreachable” are very helpful for monitoring the
availability of local networked services. Most existing schemes
for monitoring the availability of services within an enter-
prise, a data center, or a university network are based on
active probing and/or server logs.
In contrast, ﬂow data
provide a new passive approach to monitor local services.
The key intuition is that outages result in both 1) a drop (or
halt) in the number of two-way ﬂows and 2) a correlated rise
in the number of one-way ﬂows towards a destination. These
changes can be easily detected by monitoring the number of
one- and two-way ﬂows towards local services. Compared to
previous approaches, ﬂow-based outage detection enables to
leverage the regular traﬃc of a network as probe traﬃc. This
approach oﬀers the following key advantages: 1) It exploits
passive measurements in contrast to injecting network over-
head for active probing; 2) It provides a tangible assessment
of the impact of outages by enabling to count the actual num-

ber of remote client IP addresses that fail to reach a service;
3) It automatically discovers running local services circum-
venting the need to manually conﬁgure (new) services; and
4) It enables to concurrently monitor many services by tak-
ing advantage of data from the strategical network location
of gateways.

In the next paragraphs, we ﬁrst outline our analysis method-

ology and secondly we show how our approach enables to
assess the impact of outages using as a case study illustrat-
ing interesting misconﬁgurations and outages we detected in
the campus network of ETH Zurich by applying our scheme
on one week of data.

7.1 Methodology

Using one-way ﬂows classiﬁed with our scheme in the class
“Service Unreachable” as well as bidirectional ﬂows as in-
put, we compute the following three metrics to evaluate the
reachability of local services within the network of ETH
Zurich. We focus on services running on well-known port
numbers.

We deﬁne the availability of a service as the number of
time intervals a service is alive, i.e., it has bidirectional ﬂows,
over the number of intervals it is either alive or unresponsive,
i.e., it only has incoming one-way ﬂows. We ignore intervals
in which a service does not have any incoming ﬂows. The
availability metric helps group services into permanently and
temporarily oﬀered ones.

Available services are not necessarily reachable to all clients
due to access policies, misconﬁgurations, or other reachabil-
ity problems. We deﬁne the reachability of a service as the
fraction of the number of distinct client IP addresses with
bidirectional ﬂows to the service over the total number of
distinct client IP addresses to the service during a time in-
terval. The reachability metric is useful for identifying mis-
conﬁgurations and outages.

Finally, the outage impact of a service is the number of
unique client IP addresses that are involved in one-way ﬂows
of the class “Service Unreachable” during a time interval.
As several clients can be behind a remote NAT, this metric
provides a lower bound on the actual number of clients that
are aﬀected by an outage and is very useful for assessing the
impact of failures.

7.2 Outages and Misconﬁgurations

In this section we demonstrate the utility of one-way ﬂows
detected with our classiﬁcation scheme for monitoring the
availability of networked services.

We applied our scheme on a randomly-selected week of
NetFlow data from our archive and initially focused on ser-
vices discovered within the address range of the Depart-
ment of Information Technology and Electrical Engineering
of ETH Zurich. We discovered services as 2-tuples {localIP ,
localP ort} with a well-known port number that had more
than 20 unique clients during any time interval. As with
bi-ﬂow pairing, we used a 10-minute time interval. We dis-
covered in total 43 remotely accessible departmental services
for which we computed our three metrics. To validate our
observations, we met and discussed with the network admin-
istrators of our department providing them details about the
availability, reachability, and outages of the services. The
administrators conﬁrmed the validity of the discovered ser-
vices and provided feedback on a number of interesting out-
ages we summarize in the next paragraphs.

46993/tcp (tardis.ee)
25/tcp (tranquility.ee)
80/tcp (yosemite.ee)
25/tcp (smtp.ee)

 1

 0.8

 0.6

 0.4

 0.2

s
t

n
e

i
l

 

C
d
e

l
i

a
F

 
f

o

 

n
o

i
t
c
a
r
F

 0

 20

 21

 22

 24

 23
Day of June 2011

 25

 26

 27

Figure 7: Coinciding outage observed on the 23rd of
June 2011 19:40 UTC on most university services re-
sulting in failed accesses from 287,583 unique clients.

We identiﬁed a group of 32 services available at least 99%
of the time and 11 services that either fail very often or are
not operated all the time.

For all frequently used services we found a coinciding
global outage on the 23rd of June 2011 starting at approx-
imately 19:40 UTC and lasting approximately 15 minutes
as shown in Figure 7. This was a general problem in the
reachability of the department network from the outside.
To learn more about this outage, we analyzed three key ser-
vices of the entire university: the main web, webmail, and
software distribution services of ETH Zurich. Surprisingly,
we found that at the same point in time the services were
not accessible indicating a campus-wide reachability prob-
lem. During the identiﬁed 15-minute interval the outage
impact metric revealed that 287,583 unique clients failed to
access target services! Our investigation showed that the
outage occurred during a planned router software upgrade.
Although, temporal disruptions due to the upgrade were ex-
pected, the scale of the disruption revealed was suprisingly
larger than expected. Present server availability monitoring
techniques based on active probing and server logs miss this
important information about the impact of an outage. Un-
derstanding the impact of outages in terms of the number of
aﬀected clients is very useful since this information helps to
better provision network repairs and upgrades so that the
number of aﬀected clients is minimized.
In addition, the
number of failed client connections relates to the quality of
an oﬀered service and to lost revenues. In the examined case,
although the detected outage resulted from a planned router
software upgrade scheduled to take place during late evening
hours, the number of aﬀected clients, which our analysis re-
vealed, turned out to be much higher than expected, which
is important for better planning of such events. In addition,
we visually inspected the time series of the volume of one-
way ﬂows for the top departmental services and found that
the outage resulted in a sharp increase in requests targeting
mail services due to the automated retry behavior of mail
clients. On the other hand, for web services the volume of
one-way ﬂows during the outage did not substantially diﬀer
from the volume of two-way ﬂows during regular operation,
indicating a more network-friendly retry behavior.

Our inspection of the reachability metric for the discov-
ered services revealed two actionable cases. First, we found

an NTP server that was consistently not reachable on aver-
age by 12.9% of its clients. The outage impact metric showed
that in this case too, a suprisingly large number of clients
failed to receive a reply: during the studied week in total
2.2 million unique clients were involved in one-way ﬂows
to the NTP server. Investigating this further unveiled that
standard NTP “hello world” conﬁguration examples use the
swisstime.ee.ethz.ch server in our department, making it
likely one of the most popular NTP servers in the Internet.
In addition, swisstime.ee.ethz.ch is often preconﬁgured
in embedded devices. The failure rate, i.e., fraction of one-
way ﬂows, varies for diﬀerent countries of origin.
In the
top client countries we observe Belgium with failure rate
65.7%, India with 20.2%, and Germany with 16.8%. Our
investigation found two main causes of low reachability: 1)
an IP ﬁlter was conﬁgured to prevent access from a /8 ad-
dress block, which was frequently the source of attacks; and
2) certain devices appear to compute invalid CRC check-
sums resulting in dropped requests. From these ﬁndings
we learned both that the traﬃc ﬂow volume to the studied
network was heavily aﬀected from the popular NTP server
and that a misconﬁgured application computes invalid CRC
checksums.

Second, we noticed that the SMB service (Microsoft re-
mote ﬁle server access) oﬀered on 445/tcp was targeted by
far more one-way ﬂows (112% more) than two-way ﬂows.
An in-depth analysis revealed that almost all one-way ﬂows
were sourced by a likely misconﬁgured client that persis-
tently tried to connect to this service. All remaining services
achieved a reachability of 97.1% or more with most of them
ranking at the 99.9% ﬁgure.

8. RELATED WORK

The related work falls into the following three categories.

8.1 IBR Trafﬁc in Network Telescopes

Studying IBR traﬃc has been very useful for understand-
In 2001, Moore et al. [29] were the
ing Internet threats.
ﬁrst to use network telescopes to monitor background radia-
tion and answer questions such as “how prevalent are denial-
of-service attacks in the Internet today?”. Yegneswaran et
al. [39] employed scan logs collected by Dshield [11] during
four months in 2001 and 2002 to analyze quantitative char-
acteristics of intrusion activity in the global Internet. They
made a number of interesting observations including that a
very small collection of correlated sources are responsible for
a signiﬁcant fraction of intrusion attempts. In 2004, Pang
et al. [30] used traces, lasting 80-hours to one week, from
three sites to conduct a detailed characterization of traﬃc
towards four large unused address blocks. Among other ob-
servations, they highlighted the dynamism of background
radiation, which unlike normal traﬃc, can exhibit signiﬁ-
cant changes on a nearly daily basis. In 2010, Wustrow et
al. [38] examined background radiation between 2006 and
2010 to four /8 unused blocks. They observed among other
ﬁndings that background radiation continues to be very dy-
namic and identiﬁed interesting artifacts that lead to ad-
dress space pollution. In addition to characterizing traces
from network telescopes, in this work we consider the need
to dissect one-way traﬃc to live networks, introduce and
validate a one-way traﬃc classiﬁer to facilitate this goal and
characterize a massive data set of IBR traﬃc towards a live
network.

478.2 IBR Trafﬁc in Live Networks

A number of more recent studies have focused on one-
way traﬃc.
In 2012, Brownlee [6] described a tool called
iatmon for classifying one-way traﬃc based on packet in-
terarrival times and remote scanner patterns of the schema
of Treurinet [35]. In addition, the author described obser-
vations about the diﬀerent types of scanning in six months
of data from the UCSD Network Telescope [7]. Our work
is complementary to the iatmon tool, as we focus on ﬂow
instead of packet-based classiﬁcation. Besides, the work by
Lee and Brownlee [26] used three one-day packet traces cap-
tured in 2000, 2003, and 2006 in the University of Auck-
land to analyze the lifetime and size distribution of one and
two-way ﬂows. In our work, we provide new insights into
one-way ﬂows based on a substantially larger trace and in-
troduce novel methods to classify their causes. Allman et
al. [3] used TCP connection logs from the Lawrence Berke-
ley National Laboratory collected between 1994 and 2006
to characterize how scanning changed over time. In addi-
tion, they correlated observed patterns to well-known mal-
ware activity. Our study follows on until 2011 and focuses
primarily on how to classify one-way traﬃc. Jin et al. [17]
used ﬂow data towards grey IP space of a campus network
and developed a heuristic to identify external scanners. We
follow along this direction and highlight the need to clas-
sify one-way traﬃc and identify a number of diﬀerent causes
in addition to scanning. Guha et al. [13] characterized the
fraction of useful ﬂows generated by mobile hosts in an en-
terprise network and found that 34% of the ﬂows fail mainly
due to hosts mobility. Compared to this work, we focus on
understanding the nature of incoming (instead of out-going)
one-way traﬃc.
8.3 Network Outages

Many previous studies have developed techniques for de-
tecting network outages caused by events like preﬁx hijack-
ing using control plane data (e.g., BGP updates) [36, 8, 25],
active probing with tools like traceroute and ping [40, 41],
or both [14, 22, 23, 33].

Recently, two studies have provided ﬁrst insights on us-
ing passive network traﬃc measurements, like NetFlow or
packet traces, to detect and characterize network outages.
In particular, Schatzmann et al. [32] described a ﬂow-based
approach to identify reachability problems in remote net-
works caused by events like preﬁx hijacking. Dainotti et
al. [10] used IBR traﬃc to a /8 network telescope to charac-
terize large-scale remote outages caused by earthquakes and
country-wide censorship. Compared to these studies, we use
IBR traﬃc towards a live network to detect and characterize
ﬁne-grained outages aﬀecting local networked services.

9. CONCLUSIONS

One-way traﬃc towards live networks is an exotic piece
of Internet traﬃc. In the past it has been primarily studied
with the help of a small number of large network telescopes.
Although network telescopes have been very useful for un-
derstanding Internet attacks and misconﬁgurations, only a
very small number of telescopes have been available to re-
searchers, while the exhaustion of the IPv4 address space is
likely to further drain their availability.

To shed light into IBR traﬃc towards live networks, in this
work we introduce a classiﬁcation scheme for one-way traﬃc.
Classifying one-way traﬃc based solely on ﬂow-level data is

very challenging as one-way ﬂows contain very few pack-
ets often without any payload. To address these challenges,
we design, carefully optimize, and validate 13 classiﬁcation
rules that leverage communication patterns of involved end
hosts to classify one-way traﬃc. Our techniques are useful
for monitoring IBR traﬃc in any edge network and therefore
signiﬁcantly broaden the availability of network telescopes.
They are also useful to network operators for passively mon-
itoring the reachability of local networked services and in
particular for analyzing the impact of outages, which is not
possible with existing service monitoring techniques based
on active probing or server logs.

We use our classiﬁer to analyze the composition of a mas-
sive dataset of traﬃc ﬂow records from a regional backbone
network and make the following key observations:

(cid:129) One-way traﬃc makes between 34% and 67% of the
total number of ﬂows, although it only accounts for
only 3.4% and 0.79% of the total number of packets
and bytes, respectively.

(cid:129) The main sources of one-way traﬃc are: 1) scanning,
which accounts for 83.5% of the one-way ﬂows and
62.6% of the one-way packets; 2) peer-to-peer appli-
cations, which account for 6.7% of the one-way ﬂows
and 13.0% of the one-way packets; and 3) unreachable
services, which account for 4.8% of the one-way ﬂows
and 10.1% of the one-way packets.

(cid:129) The fraction of one-way ﬂows to the total number of
ﬂows has declined from 67% in 2004 to 34% in 2011.
(cid:129) The number of two-way ﬂows has grown signiﬁcantly
by 343% between 2004 and 2011. In contrast, the ab-
solute volume of one-way ﬂows in 2011 is almost equal
to 2004.

Finally, we focus on the particularly interesting class of
one-way traﬃc caused by unreachable services and show,
using the network of ETH Zurich as a case study, how this
class is very useful for detecting important network outages
and for assessing their impact.

With this paper we make the code of our classiﬁcation
scheme publicly available [1]. In addition, to shed further
light into the composition of one-way traﬃc and to facil-
itate correlating data from multiple IBR traﬃc monitors,
we release non-sensitive details about the evolution of one-
way and two-way traﬃc between 2004 and 2011 based on
the studied datasets. In particular, for each 10-minute time
interval, we make available statistics about the synthesis of
one-way traﬃc, the popularity of diﬀerent signs, the targeted
services, and the geographical distribution of sources.

Acknowledgements
We are grateful to SWITCH for providing us precious data
for studying one-way traﬃc. In addition, we are thankful
to Dominik Schatzmann for helping with double-counting
elimination and to Simon Leinen for providing us valuable
feedback on service reachability monitoring. Lastly, we wish
to acknowledge anonymous reviewers for their helpful com-
ments and suggestions.

4810. REFERENCES
[1] One-way Traﬃc Classiﬁcation Website.

http://www.ow-class.ethz.ch/.

[2] Akamai Technologies. The state of the internet report

(3rd quarter, 2009). Technical report, 2009.

[3] M. Allman, V. Paxson, and J. Terrell. A brief history

of scanning. In Proceedings of the 7th ACM
SIGCOMM conference on Internet measurement,
page 82. ACM, 2007.

[4] M. Bailey, E. Cooke, F. Jahanian, D. Watson, and

J. Nazario. The blaster worm: Then and now. IEEE
Security and Privacy, 3:26–31, July 2005.

[5] D. Brauckhoﬀ, X. Dimitropoulos, A. Wagner, and

K. Salamatian. Anomaly extraction in backbone
networks using association rules. In Proceedings of the
9th ACM SIGCOMM conference on Internet
measurement conference, IMC ’09, pages 28–34, New
York, NY, USA, 2009. ACM.

[6] N. Brownlee. One-way traﬃc monitoring with iatmon.
In Passive and Active Measurement Conference, 2012.

[7] CAIDA. UCSD Network Telescope.

http://www.caida.org/data/realtime/telescope/.

[8] Y.-J. Chi, R. Oliveira, and L. Zhang. Cyclops: the

as-level connectivity observatory. SIGCOMM Comput.
Commun. Rev., 38(5), Sept. 2008.
[9] T. Cymru. The Bogon Reference.

http://www.team-cymru.org/Services/Bogons/,
2012.

[10] A. Dainotti, R. Amman, E. Aben, and K. C. Claﬀy.

Extracting beneﬁt from harm: using malware
pollution to analyze the impact of political and
geophysical events on the internet. SIGCOMM
Comput. Commun. Rev., 42(1):31–39, 2012.

[11] Cooperative Network Security Community - Internet

Security. www.dshield.org.

[12] E. Glatz and X. Dimitropoulos. Classifying internet
one-way traﬃc. TIK-Report 336, ETH Zurich, May
2012.

[13] S. Guha, J. Chandrashekar, N. Taft, and

K. Papagiannaki. How healthy are today’s enterprise
networks? In Proceedings of the 8th ACM SIGCOMM
conference on Internet measurement, pages 145–150.
ACM, 2008.

[14] X. Hu and Z. M. Mao. Accurate real-time

identiﬁcation of ip preﬁx hijacking. In Proceedings of
the 2007 IEEE Symposium on Security and Privacy,
SP ’07, 2007.

[15] IANA - Internet Assigned Numbers Authority. PORT

NUMBERS.
http://www.iana.org/assignments/port-numbers,
2011.

[16] C. Inacio and B. Trammell. Yaf: yet another

ﬂowmeter. In Proceedings of the 24th international
conference on Large installation system
administration, pages 1–16. USENIX Association,
2010.

[17] Y. Jin, Z. Zhang, K. Xu, F. Cao, and S. Sahu.

Identifying and tracking suspicious activities through
IP gray space analysis. In Proceedings of the 3rd
annual ACM workshop on Mining network data,
page 12. ACM, 2007.

[18] W. John and S. Tafvelin. Heuristics to classify internet

backbone traﬃc based on connection patterns.
International Conference on Information Networking
(ICOIN), pages 1–5, 2008.

[19] J. Jung, V. Paxson, A. Berger, and H. Balakrishnan.

Fast portscan detection using sequential hypothesis
testing. In Proceedings of the IEEE Symposium on
Security and Privacy, pages 211–225, 2004.

[20] T. Karagiannis, A. Broido, and M. Faloutsos.

Transport layer identiﬁcation of p2p traﬃc.
Proceedings of the 4th ACM SIGCOMM conference on
Internet measurement, pages 121–134, 2004.

[21] T. Karagiannis, K. Papagiannaki, and M. Faloutsos.
Blinc: multilevel traﬃc classiﬁcation in the dark. In
Proceedings of the 2005 conference on Applications,
technologies, architectures, and protocols for computer
communications, SIGCOMM ’05, 2005.

[22] E. Katz-Bassett, H. V. Madhyastha, J. P. John,

A. Krishnamurthy, D. Wetherall, and T. Anderson.
Studying black holes in the internet with hubble. In
Proceedings of the 5th USENIX Symposium on
Networked Systems Design and Implementation,
NSDI’08, 2008.

[23] E. Katz-Bassett, C. Scott, D. R. Choﬀnes, I. Cunha,

V. Valancius, N. Feamster, H. V. Madhyastha,
T. Anderson, and A. Krishnamurthy. Lifeguard:
practical repair of persistent route failures. In
Proceedings of the ACM SIGCOMM 2012, 2012.

[24] H. Kim, K. Claﬀy, M. Fomenkov, D. Barman,

M. Faloutsos, and K. Lee. Internet traﬃc classiﬁcation
demystiﬁed: myths, caveats, and the best practices. In
Proceedings of the 2008 ACM CoNEXT conference,
page 11. ACM, 2008.

[25] M. Lad, D. Massey, D. Pei, Y. Wu, B. Zhang, and

L. Zhang. PHAS: A preﬁx hijack alert system. In In
Proc. USENIX Security Symposium, 2006.

[26] D. Lee and N. Brownlee. Passive measurement of
one-way and two-way ﬂow lifetimes. SIGCOMM
Comput. Commun. Rev., 37(3):17–28, 2007.

[27] D. Moore, V. Paxson, S. Savage, C. Shannon,

S. Staniford, and N. Weaver. Inside the slammer
worm. IEEE Security and Privacy, 1:33–39, July 2003.

[28] D. Moore, C. Shannon, G. Voelker, and S. Savage.

Network telescopes: Technical report. Technical
report, CAIDA, 2004.

[29] D. Moore, G. M. Voelker, and S. Savage. Inferring

internet denial-of-service activity. In SSYM’01:
Proceedings of the 10th conference on USENIX
Security Symposium, Berkeley, USA, 2001.

[30] R. Pang, V. Yegneswaran, P. Barford, V. Paxson, and

L. Peterson. Characteristics of Internet background
radiation. In Proceedings of the 4th ACM SIGCOMM
conference on Internet measurement, pages 27–40.
ACM New York, NY, USA, 2004.

[31] M. Per´enyi, T. D. Dang, A. Geﬀerth, and S. Molnr.

Identiﬁcation and analysis of peer-to-peer traﬃc.
JOURNAL OF COMMUNICATIONS, 1(7), 2006.

[32] D. Schatzmann, S. Leinen, J. Kogel, and

W. Muhlbauer. Fact: Flow-based approach for
connectivity tracking. In Passive and Active
Measurement conference, Mar. 2011.

[33] X. Shi, Y. Xiang, Z. Wang, X. Yin, and J. Wu.

49Detecting preﬁx hijackings in the internet with argus.
In Proceedings of the 12th ACM SIGCOMM
conference on Internet measurement. ACM, 2012.

measurement, IMC ’10, pages 62–74, New York, NY,
USA, 2010. ACM.

[39] V. Yegneswaran, P. Barford, and J. Ullrich. Internet

[34] B. Trammell and E. Boschi. Bidirectional ﬂow export

using IPFIX. RFC 5103, January 2008.

[35] J. Treurniet. A network activity classiﬁcation schema

and its application to scan detection. IEEE/ACM
Trans. Netw., 19(5):1396–1404, Oct. 2011.

[36] US Homeland Security. BGPmon.

http://bgpmon.net/.

[37] Wikipedia. Netﬂow.

http://en.wikipedia.org/wiki/Netflow.

[38] E. Wustrow, M. Karir, M. Bailey, F. Jahanian, and

G. Huston. Internet background radiation revisited. In
Proceedings of the 10th annual conference on Internet

intrusions: global characteristics and prevalence.
SIGMETRICS Perform. Eval. Rev., 31(1):138–147,
2003.

[40] Z. Zhang, Y. Zhang, Y. C. Hu, Z. M. Mao, and

R. Bush. ispy: detecting ip preﬁx hijacking on my
own. IEEE/ACM Trans. Netw., 18(6), Dec. 2010.

[41] C. Zheng, L. Ji, D. Pei, J. Wang, and P. Francis. A

light-weight distributed scheme for detecting ip preﬁx
hijacks in real-time. In Proceedings of the 2007
conference on Applications, technologies, architectures,
and protocols for computer communications,
SIGCOMM ’07, 2007.

50