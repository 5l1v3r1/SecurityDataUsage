Multi-scale Dynamics in a Massive Online Social Network

Xiaohan Zhao†, Alessandra Sala∗, Christo Wilson†, Xiao Wang‡, Sabrina Gaito§,

Haitao Zheng†, Ben Y. Zhao†

†Department of Computer Science, UC Santa Barbara

∗Bell Labs, Ireland, ‡Peking University, §Università degli Studi di Milano

{xiaohanzhao, bowlin, htzheng, ravenben}@cs.ucsb.edu, alessandra.sala@alcatel-lucent.com,

wangxiao@net.pku.edu.cn, gaito@dsi.unimi.it

ABSTRACT
social network
Data conﬁdentiality policies at major
providers have severely limited researchers’ access to large-
scale datasets. The biggest impact has been on the study of
network dynamics, where researchers have studied citation
graphs and content-sharing networks, but few have analyzed
detailed dynamics in the massive social networks that dom-
inate the web today.
In this paper, we present results of
analyzing detailed dynamics in a large Chinese social net-
work, covering a period of 2 years when the network grew
from its ﬁrst user to 19 million users and 199 million edges.
Rather than validate a single model of network dynamics,
we analyze dynamics at diﬀerent granularities (per-user, per-
community, and network-wide) to determine how much, if
any, users are inﬂuenced by dynamics processes at diﬀer-
ent scales. We observe independent predictable processes
at each level, and ﬁnd that the growth of communities has
moderate and sustained impact on users.
In contrast, we
ﬁnd that signiﬁcant events such as network merge events
have a strong but short-lived impact on users, and they are
quickly eclipsed by the continuous arrival of new users.

Categories and Subject Descriptors
J.4 [Computer Applications]: Social and Behavioral Sci-
ences; H.3.5 [Information Storage and Retrieval]: On-
line Information Services

General Terms
Algorithms, Measurement

Keywords
Dynamic Graphs, Online Social Networks

1.

INTRODUCTION

A number of interrelated processes drive dynamics in so-
cial networks. A deeper understanding of these processes

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’12, November 14–16, 2012, Boston, Massachusetts, USA.
Copyright 2012 ACM 978-1-4503-1705-4/12/11 ...$15.00.

can allow us to better model and predict structure and dy-
namics in social networks.
In turn, improved models and
predictors have numerous practical implications on the de-
sign of infrastructure, applications, and security mechanisms
for social networks.

Details of these dynamic processes are best studied in the
context of today’s massive Online Social Networks (OSNs),
e.g. Facebook [38], LinkedIn [24], and Renren [13]. Un-
fortunately, the providers of large social networks generally
consider their dynamic network data to be trade secrets, and
have few incentives to make such data available for research.
Instead, studies have analyzed citation networks [22], con-
tent sharing networks [18], and high level statistics of social
networks [1]. Others [21, 26, 10] sought to validate genera-
tive models such as preferential attachment (PA) [5].

Our goal is to better understand in detail the evolution-
ary dynamics in a social network. This includes not only the
initial growth process during a social network’s formation,
but also the ongoing dynamics afterwards, as the network
matures. Much of the prior work in this area, including gen-
erative graph models and eﬀorts to validate them [5, 21, 26,
10], has focused on capturing network dynamics as a sin-
gle process. In contrast, we are interested in the question
“how are individual user dynamics inﬂuenced by processes
at diﬀerent scales?” How much are the dynamics of users in-
ﬂuenced by external forces and events, such as the activities
of friends in communities they belong to, or by large-scale
events that occur at the network level?

In this work, we explore these questions empirically
through a detailed analysis of social network dynamics at
multiple scales: at the individual user level, at the level of
user communities, and at the global network level. We study
a dynamic graph, i.e. a sequence of detailed timestamped
events that capture the ongoing growth of a large Chinese
online social network. With over 220 million users, it is
the largest social network in China, and provides function-
ality similar to Facebook. We focus our analysis on ﬁrst two
years of its growth, from its ﬁrst user in November 2005,
to December 2007 when it had over 19 million members.
This captures the network’s initial burst of growth, as well
as a period of more sustained growth and evolution. Our
anonymized data includes timestamps of all events, includ-
ing the creation of 19 million user accounts and 199 million
edges. This dataset is notable because of three features: its
scale, the absolute time associated with each event, and a
rare network merge event, when the network merged with its
largest competitor in December 2006, eﬀectively doubling its
size from 600K users to 1.3 million users in a single day.

171Our analysis of network dynamics in this dataset focuses
on three diﬀerent levels of granularity: nodes, communi-
ties, and networks. At each level, we search for evidence of
impact on user behavior. Along the way, we also make a
number of intriguing observations about dynamic processes
in network communities and network-wide events.

Individual Nodes. The creation of links between individ-
ual users has been studied in a number of contexts, and is
long believed to be driven by generative models based on
the principle of preferential attachment, i.e. users prefer
to connect to nodes with higher degree [5]. Our goal is to
extend the analysis of this model with respect to two new
dimensions. First, preferential attachment deﬁnes how a se-
quence of edges are created in logical order, but how do node
dynamics correlate with absolute time? Second, does the
strength of the preferential attachment model strengthen or
weaken as the network grows in scale and matures?

Communities. Intuitively, the behavior of a user is likely
to be signiﬁcantly impacted by the actions of her friends in
the network. This has been previously observed in oﬄine
social networks [39]. Our goal is to empirically determine if
user activity at the level of communities has a real impact on
individual users. To do so, we ﬁrst implement a way to deﬁne
and track the evolution of user communities over time. We
use the Louvain algorithm [6] to detect communities, track
the emergence and dissolution of communities over time, and
quantify the correlation of user behavior to the lifetime, size,
and activity level of the communities they belong to.

Networks. Finally, we wish to quantify the impact, if
any, of network-level events on individual user behavior. By
network-level events, we refer to unusual events that aﬀect
the entire network, such as the merging of two distinct so-
cial networks recorded in our dataset. We analyze user data
before and after the merge of our social network and its
competitor, and quantify the impact of diﬀerent factors on
user behavior, including duplicate accounts, and user’s edge
creation preferences over time.

Key Findings.
Our analysis produces several signif-
icant ﬁndings. First, we ﬁnd that nodes (users) are most
active in building links (friendships) shortly after joining the
network. As the network matures, however, we ﬁnd that new
edge creation is increasingly dominated by existing nodes in
the system, even though new node arrivals is keeping pace
with network growth. Second, we ﬁnd that inﬂuence of the
preferential attachment model weakens over time, perhaps
reﬂecting the reduced visibility of each node over time. As
the network grows in size, users are less likely to be aware of
high degree nodes in the network, and more likely to obey
the preferential model with users within a limited neighbor-
hood. Third, at the level of user communities, we ﬁnd using
the Louvain algorithm that users in large communities are
more active in creating friends and stay active for a longer
time. In addition, we found that a combination of commu-
nity structural features can predict the short-term “death”
of a community with more than 75% accuracy.

Finally, in our analysis of the network merge event, we use
user activity to identify duplicate accounts across the net-
works. Aside from duplicate accounts, we ﬁnd that the net-
work merge event has a distinct short-term impact on user
activity patterns. Users generate a high burst in edge cre-
ation, but the cross-network activity fades and quickly be-
comes dominated by edge creation generated by new users.
Overall, this quickly reduces average distance between the

two networks and melds them into a single monolithic net-
work.
2. NETWORK LEVEL ANALYSIS

We begin our study by ﬁrst describing the dataset, and
performing some basic analysis to understand the impact of
network dynamics on ﬁrst order graph metrics. Our data is
an anonymized stream of timestamped events shared with
us by a large Chinese social network, whose functionality
is similar to those of Facebook, Google+ and Orkut. Our
basic measurements in this section set the context for the
analysis of more detailed metrics in later sections.

Dataset of Dynamics in a Massive Social Network.
The ﬁrst edge in our large social network was created on
November 21, 2005. The social network was originally built
as a communication tool for college students, but expanded
beyond schools in November 2007.

Our anonymized dataset encompasses the timestamped
creation events of all users and edges in the social network.
The dataset covers more than 2 years, starting on Novem-
ber 21, 2005 and ending December 31, 2007.
In all, the
dataset includes the creation times of 19,413,375 nodes and
199,563,976 edges. To perform detailed analysis on the so-
cial graph, we produce 771 graphs representing daily static
snapshots from the timestamped event stream. Note that in
this paper, we will use the term node to mean an OSN user
and edge to mean a friendship link.

An unusual event happened on December 12, 2006, when
our network merged with a second, competing online social
network that was created in April 2006. On the merge date,
our social network had 624K users with 8.2 million social
links, and the second online social network had 670K users
with 3 million social links. Wherever possible, we treat the
merge as an external event to minimize its impact on our
analysis of network growth. We also present detailed analy-
sis of the network merge event in Section 5.

On our network, default user policy limits each user to
1,000 friends. Users may pay a fee in order to increase their
friend cap to 2,000. However, prior work by the network
has shown that very few users take advantage of such fea-
tures. We make the same observation about our dataset:
the number of users with >1,000 friends is negligibly small.

Network Growth.
Figure 1(a) depicts the growth of
the large Chinese social network in terms of the number of
nodes and edges added each day. Day 0 is November 21,
2005. Overall, the network grows exponentially, which is
expected for a social network. However, there are a num-
ber of real world events that temporarily slow the growth,
and manifest as visible artifacts in Figure 1(a). The two
week period starting at day 56 represents the Lunar New
Year holiday; a two-month period starting on day 222 ac-
counts for summer vacation; the merge with the competing
social network causes a jump in nodes and edges on day
386; additional dips for the lunar new year and summer
break are visible starting at days 432 and 587, respectively.
In Figure 1(b), we plot daily growth as a normalized ratio
of network size from the previous day. It shows that rela-
tive growth ﬂuctuates wildly when the network is small, but
stabilizes as rapid growth begins to keep rough pace with
network size.

Graph Metrics Over Time.
We now look at how
four key graph metrics change over the lifetime of our data

172 
/
 
s
e
d
o
N

 1e+07
s
e
 1e+06
g
d
E
 100000
 10000
 1000
 100
 10
 1

 
f

#

o

 

Network Merge

Edges
Nodes

 0

 100  200  300  400  500  600  700  800

Day

(a) Absolute Network Growth

h

t

g
n
e
L

 

h

t

 

a
P
e
g
a
r
e
v
A

 6
 5.5
 5
 4.5
 4
 3.5
 3
 2.5
 2
 1.5

Network Merge

 0

 100  200  300  400  500  600  700  800

)

%

(
 

t

h
w
o
r
G
 
y

l
i

a
D

 
f

o

 

e

t

a
R

t

i

n
e
c
i
f
f

 

e
o
C
g
n
i
r
e

t
s
u
C

l

 
.

g
v
A

 10000

 1000

 100

 10

 1

 0.1

 0.01

New Edges
New Nodes

Network Merge

 0  100  200  300  400  500  600  700  800

 

e
e
r
g
e
D
e
d
o
N
e
g
a
r
e
v
A

 

 40
 35
 30
 25
 20
 15
 10
 5
 0

Network Merge

 0

 100  200  300  400  500  600  700  800

Day

Day

(b) Relative Network Growth

(c) Average Node Degree

 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

Network Merge

 0

 100  200  300  400  500  600  700  800

y
t
i
v
i
t

a

t
r
o
s
s
A

 0.2

 0

-0.2

-0.4

-0.6

-0.8

-1

Day

Day

(d) Average Path Length

(e) Clustering Coeﬃcient

 0

 100  200  300  400  500  600  700  800

Day

(f) Assortativity

Figure 1: Network growth over time, and its impact on four important graph metrics.

stream, and use them to identify structural changes in the
large Chinese social network. We monitor average degree,
average path length, average clustering coeﬃcient, and as-
sortativity. As before, the analysis of each metric starts from
November 21, 2005.

Average Degree. As shown in Figure 1(c), average node de-
gree grows for much of our observed time period, because the
creation of edges between nodes out paces the introduction
of new users to the network. When we take a closer look,
we see that around days 120, 275, 475 and 650, the average
degree grows faster. This means that more edges are created
around this time period, which happens to match up nicely
with the beginning of new academic semesters over multiple
years. On day 305, however, a period of rapid growth in
users starts to reduce average degree in the network. This
comes from a sudden inﬂux of new users due to several suc-
cessful publicity campaigns by the social network. Next, on
day 386 (December 2006), average degree drops suddenly
when 670K loosely connected nodes from a competing social
network merges with our social network. Average degree re-
sumes steady growth following the event, again showing edge
growth out pacing node growth and increasing network den-
siﬁcation [22].

Average Path Length. We follow the standard practice of
sampling nodes to make path length computation tractable
on our large social graphs. We compute the average path
length over a sample of 1000 nodes from the SCC for each
snapshot, and limit ourselves to computing the metric once
every three days. As seen in Figure 1(d), the results are
intuitive: path length drops as densiﬁcation increases (i.e.
node degree increases). There is a signiﬁcant jump when
nodes from the second online social network join the large
social network on day 386, but the slow drop resumes as
densiﬁcation continues after the merge.

Average Clustering Coeﬃcient. Clustering coeﬃcient is a
measure of local density, computed as the ratio of the exist-
ing edges between the immediate neighbors of a node over

the maximum number of edges possible between them. We
plot average clustering coeﬃcient in Figure 1(e).
In early
stages of network growth (before day 60), the network was
very small and contained a large number of small groups
with loose connections between them. Groups often formed
local cliques or near-cliques, resulting in high clustering co-
eﬃcients across the network. Once the network grows in
size, average clustering coeﬃcient transitions to a smooth
curve and decreases slowly. The network merge produces a
small jump, since the competing social network had many
small clusters of 3 or 4 nodes that boosted average clustering
coeﬃcient.

Assortativity. Finally, we plot assortativity in Figure 1(f).
Assortativity is the probability of a node to connect to other
nodes with similar degree, computed as the Pearson corre-
lation coeﬃcient of degrees of all node pairs. In the early
stages of the network, the graph is sparse and dominated
by a small number of supernodes connecting to many leaf
nodes. This produces a strong negative assortativity that
ﬂuctuates and then evens out as the network stabilizes in
structure. Assortativity evens out at around 0, meaning
nodes in our network have no discernible inclination to be
friends with nodes of similar or diﬀerent degree.

Summary. We observe that the high-level structure of
our network solidiﬁes very quickly. Several key properties
stabilize after the ﬁrst 2 months, with others establishing a
consistent trend after 100 days. While the notable network
merge with a second, competing social network introduces
signiﬁcant changes to network properties, the eﬀects quickly
fade with time and continued inﬂux of new users to the
merged network.
3. EDGE EVOLUTION

In this section, we study the behavior of individual nodes
in terms of how they build edges over time. Many studies
have shown that nodes build edges following the preferential
attachment (PA) model [5, 21, 26, 10]. Speciﬁcally, when a
new node joins the network and creates edges, it chooses the

173F
D
P

 1

 0.1

 0.01

 0.001

 0.0001

 1e-05

 1e-06

Month 1
Month 2
Month 3
Month 4-5
Month 6-14
Month 15-26

s
e
g
d
E

 
f

o

 

e
g
a

t

n
e
c
e
P

 0.5

 0.4

 0.3

 0.2

 0.1

 0

Average

 1

 10

 100

 1000

 0

 0.2

 0.4

 0.6

 0.8

 1

e
g
a

t

n
e
c
e
P

 1

 0.8

 0.6

 0.4

 0.2

 0

min. age < 30 days
min. age < 10 days
min. age < 1 day

 0

 100  200  300  400  500  600  700  800

Edge Inter-arrival Times (Day)

Normalized Lifetime

Day

(a) Distribution of Edge Inter-arrival
Times

(b) Edge Creation vs. Normalized Life-
time

(c) Node Age and Edge Creation

Figure 2: Time dynamics of edge creation. (a) The probability distribution of the edge inter-arrival times
follows a power-law distribution. (b) The normalized activity level over each user’s lifetime. Users create
most of her friendships early on. (c) The portion of edges created by new nodes each day. When the network
is young, new edges are mostly triggered by newly joined nodes. However, as the network matures, the
majority of new edges connect older users.

destination of each edge proportionally to the destination’s
degree. In other words, nodes with higher degrees are more
likely to be selected as the destination of new edges, leading
to a “rich get richer” phenomenon.

Using our dynamic network data, we extend the analysis
of this model in two new dimensions. First, while PA deﬁnes
how a sequence of edges is created in logical order, we seek
to understand how node activities correlate with absolute
time. Second, we are interested in whether, as the network
evolves, the PA model’s predictive ability grows or weakens
over time.
3.1 Time Dynamics of Edge Creation
Edge Inter-arrival. We begin by analyzing the edge cre-
ation process in absolute time, focusing on the speed that
nodes add edges. First, we look at the inter-arrival time
between edge creation events. For each node, we collect the
inter-arrival times between all its edges, then place them
into buckets based on the age of the node when the edge
was created. We then aggregate all users’ data together for
each bucket, e.g.
the “Month 1” bucket contains all edge
inter-arrival times where one or both of the nodes was less
than 1 month old.

We plot the results in Figure 2(a). We observe that the
time gap between a node’s edge creation events follows a
power-law distribution. The scaling exponent is between 1.8
and 2.5, shown in Figure 2(a). The exponent values can be
used in an edge creation gap model. However, it is diﬃcult to
evaluate its signiﬁcance without a direct comparison to data
from other networks. Overall, this power-law distribution
provides a realistic model of a user’s idle time between edge
creations at diﬀerent stages of her lifetime.

Edge Creation Over Lifetime.
The above result moti-
vates us to examine the normalized activity level within each
user’s lifetime. We plot in Figure 2(b) the distribution of
new edges based on the normalized age of the users involved.
To avoid statistical outliers, we consider only nodes with at
least 30 days of history in our dataset and degree of at least
20. As expected, users create most of their friendships early
on in their lifetimes. Edge creation converges to a constant
rate once most oﬄine friends have been found and linked.

Node Age and Edge Creation.
We observe above that
nodes tend to generate a signiﬁcant portion of their edges
soon after joining the network. Since most generative graph

models use new nodes to drive edge creation, we ask the
question “What portion of the new edges created in the net-
work are driven by the arrival of new nodes?” For each day
in our dataset, we take each edge created on that day and
determine its minimal age, i.e. the minimum age of its two
endpoints. The distribution of this value shows what portion
of new edges are created by new nodes.

We compute and plot this distribution in Figure 2(c). We
show the relative contribution by nodes of diﬀerent ages by
plotting three stacked percentages, showing the portion of
daily new edges with minimal age ≤ 1 day, ≤ 10 days, and ≤
30 days. We see that when the network is young (≤ 60 days),
the vast majority of new edges connect brand new nodes (i.e.
1 day old). As the network stabilizes and matures, that
portion quickly drops, and continues to decrease over time.
Edges with minimal age of 10-30 days dominate new edges
for much of our trace, but their contribution steadily drops
over time from 95% around day 100 to 48% by day 770. Note
that this drop occurs even after the daily relative network
growth has reached a constant level (see Figure 1(b)). It is
reasonable to assume that in today’s network (4.5 years past
the end of our data), the vast majority of new edges connect
mature users who have been in the network for signiﬁcant
amounts of time.

This result in Figure 2(c) is important, because it shows
a dramatic change in the driving force behind edge creation
as the network matures. Most generative graph models as-
sume edge creation is driven by new nodes. However, our
data indicates that existing models will only accurately cap-
ture the early stages of network creation. Capturing the
continuous evolution of a mature network requires a model
that not only recognizes the contribution of mature nodes
in edge creation, but also its continuous change over time.
3.2 Strength of Preferential Attachment

Next, we take a look at the preferential attachment model
and how well it predicts changes over time and network
growth. We follow the method in [21] to measure the
strength (or degree) of preferential attachment using edge
probability pe(d). This function deﬁnes the probability that
an edge chooses its destination with degree d, normalized by
the total number of nodes of degree d before this time step:

pe(d) =

Σt{et(u, v) ∧ dt−1(v) = d}

Σt|v : dt−1(v) = d|

(1)

174y
t
i
l
i

b
a
b
o
r
P
 
e
g
d
E

 0.001

 0.0001

 1e-05

 1e-06

 1e-07

 1e-08

pe(d) α d0.78

MSE: 1.75*10-10

 1

 10

 100

 1000

Degree

 0.0001

 1e-05

 1e-06

 1e-07

y
t
i
l
i

b
a
b
o
r
P
 
e
g
d
E

 1e-08

 1

pe(d) α d0.6

MSE: 4.42*10-11

 10

 100

 1000

Degree

α

 2
 1.8
 1.6
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
0.6M

8.26M (2006-12-12)

Dest: Higher Degree
Dest: Random

11.97M (2006-12-13)

(6.3n5+18n4+2.9n3+1.2n2-67.9n+700)*10-3

(6.5n5+16.3n4+3.9n3+5.7n2-83.4n+501.2)*10-3

50M

100M

150M

199M

Network edge count

(a) pe(d), higher-degree node as destina-
tion

(b) pe(d), random destination selection

(c) Evolution of α(t)

Figure 3: (a)-(b) Fitting the measured edge probability pe(d) with dα, when our large Chinese social network
reaches 57M edges. In (a), pe(d) is calculated by selecting the higher-degree node as each edge’s destination. In
(b) the destination is selected randomly. The mean square error (MSE) is very low, conﬁrming the goodness
of the ﬁt. (c) As the network grows, α drops from 1.25 to 0.65. It can be approximated by a polynomial
function of the network edge count n.

where {et(u, v) ∧ dt−1(v) = d} = 1 if the destination v of
the edge et(u, v) is of degree d, and 0 otherwise.

Intuitively, if a network grows following the PA model, its
edge probability pe(d) should have a linear relationship with
d: pe(d) ∝ d. The authors of [21] veriﬁed this conclusion
using synthetic graphs, and also tested the PA model on
four real social networks: Flickr, Delicious, Answers, and
LinkedIn. The ﬁrst three networks follow the PA model
pe(d) ∝ dα with α ≈ 1, while for LinkedIn, α = 0.6. From
these observations, we can deﬁne a criterion for detecting
preferential attachment: when α → 1, the network grows
with a strong preferential attachment, and when α → 0, the
edge creation process becomes increasingly random.

Using this criterion, we validate the PA model over time
on our large Chinese social network by ﬁtting pe(d) mea-
sured at time t to dα(t) and examining α(t) over time. Our
study seeks to answer an important question: “Does our
network display the same level of preferential attachment
consistently over time?” In other words, does α(t) stay con-
stant over time? And if not, is the preferential attachment
stronger (or weaker) at a particular stage of network growth?
We make some small adjustments to the computation of
pe(d) on our dataset. First, because our data does not state
who initiated each friendship link (edge directionality), we
perform our test with two scenarios. The ﬁrst is biased in
favor of preferential attachment, because it always selects
the higher degree end-point as the destination. The second
scenario chooses the destination node randomly from the two
end-points. Second, to make the computation tractable on
our large number of graph snapshots, we compute pe(d) once
after every 5000 new edges. Finally, to ensure statistical
signiﬁcance, we start our analysis when the network reaches
a reasonable size, e.g. 600K edges.
We start by examining whether pe(d) ∝ dα(t)
Results.
is a good ﬁt. For this we use the Mean Square Error (MSE)
between the measured pe(d) and the ﬁtted curve. We ob-
serve that the MSE decreases with the edge count, ranging
from 1.8e-5 to 3.5e-13. This conﬁrms that the ﬁt is tight
for the measured edge probability. To illustrate the results,
Figures 3(a)-(b) show the edge probability pe(d) when the
network reaches 57M edges, using the two destination selec-
tion methods. The corresponding MSEs of the ﬁt are 1.7e-10
and 4.4e-11, respectively.

Next, we examine α(t) over time in Figure 3(c). We make

two key observations. First, α(t) when using the higher-
degree method is always larger than when using random
selection. This is as expected since the former is biased
in favor of preferential attachment. More importantly, the
diﬀerence between the two results is always 0.2. This means
that despite the lack of edge destination information, we can
still accurately estimate pe(d) from these upper and lower
bounds.

Second, α(t) decays gradually over time, dropping from
1.25 (when the network ﬁrst launched) to 0.65 (two years
later at 199M edges). Since the number of nodes with node
degree 1000 in the last snapshot is very small (0.0001% of
the total nodes in the network), we believe the decrease in
α(t) is not caused by the hard limit on node degree. This
results shows that when the network is young, it grows with
a strong preferential attachment. However, as the network
becomes larger, its edge creation is no longer driven solely
by popularity. Perhaps this observation can be explained by
the following intuition. When a social network ﬁrst launches,
connecting with “supernodes” is a key factor driving friend-
ship requests. But as the network grows, it becomes harder
to locate supernodes inside the massive network and their
signiﬁcance diminishes. Alternatively, we could explain this
phenomenon in another way. When the network is young, a
new user is likely to ﬁnd few of her oﬄine friends to connect
to, and “supernodes” easily draw users’ attention because of
their popularity. As the network grows, users ﬁnd more and
more of their oﬄine friends on the online social network. As
a result, users pay more attention to people who they may
know instead of popular users.

Finally, we observe a small ripple at the early stage of the
network growth, when α(t) experiences a surge on December
12, 2006 (8.26M edges). This is due to the network merge
event, which generated a burst of new edges that produce a
bump in α(t) for that single day.

3.3 Summary of Observations

Our analysis produces three conclusions:

• In a node’s lifetime, edge creation rate is highest
shortly after joining the network and decreases over
time.
• Edge creation in early stages of network growth is

175driven by new node arrivals, but this trend decreases
signiﬁcantly as the network matures.
• While edge creation follows preferential attachment,
the strength degrades gradually as the network expands
and matures.

These results set the stage for the following hypothesis.
An accurate model to capture the growth and evolution of
today’s social networks should combine a preferential attach-
ment component with a randomized attachment component.
The latter would provide a degree of freedom to capture the
gradual deviation from preferential attachment.
4. COMMUNITY EVOLUTION

In online social networks, communities can be deﬁned as
groups of densely connected nodes based on network struc-
ture. More speciﬁcally, they are groups of nodes where more
edges connect nodes in the same community than edges be-
tween diﬀerent communities [29]. Note that these are im-
plicit groups based on structure, and not explicit groups
that a user might join or leave. Communities eﬀectively
capture “neighborhoods” in the social network. As a result,
we believe they represent the best abstraction with which to
measure the inﬂuence of social neighborhoods on user dy-
namics. We ask the question, “how do today’s social network
communities inﬂuence their individual members in terms of
edge creation dynamics?”

To answer our question, we must ﬁrst develop a method
to scalably identify and track communities as they form,
evolve, and dissolve in a dynamic network. There is ample
prior work on community detection in static graphs [29, 7,
37, 6]. More recent work has developed several algorithms
for tracking dynamic communities across consecutive graph
snapshots [17, 32, 23, 35, 34]. Some of these techniques
are limited in scale by computational cost, others require
external information to locate communities across snapshots
of the network.

In the remainder of this section, we describe our technique
for scalably identifying and tracking communities over time
based on network structure. We then present our ﬁndings
on community dynamics in our social network, including
community formation, dissolution, merging, and splitting.
Finally, we analyze community-level dynamics, and use our
detected communities to quantify the correlation between
node and community-level dynamics. To make computa-
tion tractable across our large dataset, we choose a modiﬁed
Louvain algorithm to produce the large majority of our re-
sults. To ensure that our choice of community detection
algorithm does not signiﬁcantly bias our results, we validate
a portion of our ﬁndings using a second community detection
algorithm that does not rely on modularity.
4.1 Tracking Communities over Time

Tracking communities in the presence of network dynam-
ics is a critical step in our analysis of network dynamics at
diﬀerent scales. Prior work proved that dynamic community
tracking is an NP-hard problem [35]. Current dynamic com-
munity tracking algorithms [17, 32, 23, 35, 34, 11] are ap-
proximation algorithms that “track” a community over mul-
tiple snapshots based on overlap with an incarnation in a
previous snapshot.
For scalability and eﬃciency, we use
the similarity-based community tracking mechanism [11] for
our analysis. In this section, we ﬁrst introduce background
on community detection algorithms and related deﬁnitions.

Then, we brieﬂy describe our mechanism, which is a mod-
iﬁed version of [11] that provides tighter community track-
ing across snapshots using the incremental version of the
Louvain algorithm [6]. At a high level, we use incremental
Louvain to detect and track communities over snapshots,
and use community similarity to determine when and how
communities have evolved.

Background.
Communities can be deﬁned based on
network structure as groups of well-connected nodes. There
are dense connections inside communities but sparse connec-
tions between communities [29]. Modularity [27] is a widely
used metric to quantify how well a network can be clus-
tered into communities. It is deﬁned as the diﬀerence be-
tween the fraction of edges falling in communities and the
expected fraction when edges are randomly connected.
It
is formally deﬁned in Equation 2, where A is the adjacency
matrix (Aij = 1 if node i and j are connected, and Aij = 0
otherwise), ki is the degree of nodei , m is the total number
of edges and δ(ci, cj) = 1 if node i and j are in the same
community and δ(ci, cj ) = 0 otherwise. The value of mod-
ularity should be between -1 and 1, and a large modularity
means the network can be well clustered into communities.

Q =

(cid:2)

ij

1
2m

(Aij − kikj
2m

)δ(ci, cj )

(2)

Several algorithms are designed to optimize modularity.
[29] proposes a simple method to optimize modularity, re-
ducing complexity to O(n3).
[28] improves the algorithm
further using hierarchical clustering method and its com-
plexity is O(n2).
[7] further reduces the complexity to
O(m· d· log(n)) using balanced binary trees and max heaps.
[37] improves the computation eﬃciency by avoiding unbal-
anced partitions.

Similarity-based Community Tracking.
Lou-
vain [6] is a scalable community detection algorithm that
signiﬁcantly improves both modularity and eﬃciency using
greedy local modularity optimization. It uses a bottom up
approach that iteratively groups nodes and communities to-
gether, and migrates nodes between communities until the
improvement to modularity falls below a threshold δ. To the
best of our knowledge, Louvain is the only community de-
tection algorithm that scale to graphs with tens of millions
of nodes1.

Our approach leverages the fact that Louvain can be run
in incremental mode, where communities from the current
snapshot are used to bootstrap the initial assignments in the
next snapshot. Given how sensitive community detection is
to even small changes in modularity, this approach enables
more accurate tracking of communities by providing a strong
explicit tie between snapshots. Finally, we follow the lead
of [11], and track communities over time by computing the
similarity between communities. Similarity is quantiﬁed as
community overlap and is computed using set intersection
via the Jaccard coeﬃcient.

Community Evolution Events.
Using similarity
to track communities allows us to detect major community
events, including their birth, death, merges, and splits. We
deﬁne a community A splits at snapshot i when A is the
highest correlated community to at least two communities

1https://sites.google.com/site/ﬁndcommunities/

176l

y
t
i
r
a
u
d
o
M

 1

 0.8

 0.6

 0.4

 0.2

 0

δ =  0.0001
δ =  0.001
δ =  0.01
δ =  0.1
δ =  0.3

 0

 100  200  300  400  500  600  700  800

Day

(a) Modularity

y
t
i
r
a

l
i

m
S

i

 
.
g
v
A

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

δ  = 0.3
δ  = 0.1
δ  = 0.01
δ  = 0.001
δ  = 0.0001

 0

 100  200  300  400  500  600  700  800

Day

 1000

 100

 10

s
e
i
t
i
n
u
m
m
o
C

 
f
o
 
#

 1

 10

δ = 0.3
δ  = 0.1
δ  = 0.01
δ = 0.001
δ = 0.0001

 100

Community Size

 1000

(b) Average Community Similarity

(c) Community Size Distribution on Day
602

Figure 4: Tracking communities over time and the impact of δ. (a) The value of modularity always stays
above 0.4, indicating a strong community structure. The choice of δ has minimum impact, and δ = 0.01 is
sensitive enough to detect communities. (b) The value of average similarity over time at diﬀerent δ values.
Small δ values like 0.0001 and 0.001 produce less robust results. (c) The distribution of community size
observed on Day 602. The algorithm is insensitive to the choice of δ once δ ≥ 0.01. The same conclusion
applies to other snapshots.

B and C at snapshot i + 1. When at least two communities
A and B at snapshot i contribute most of their nodes to
community C at snapshot i + 1, A and B have merged.

When a community A splits into multiple communities
X1, X2...Xn, we designate Xj as the updated A in the new
snapshot, where Xj is the new community who shares the
highest similarity with A. We say that all other communi-
ties in the set were “born” in the new snapshot. Similarly,
if multiple communities merge into a single community A,
we consider A to have evolved from the community that it
shared the highest similarity with. All other communities
are considered to have “died” in the snapshot.

Choosing δ.
The δ threshold in Louvain is an impor-
tant parameter that controls the trade oﬀ between quality of
community detection and sensitivity to dynamics. If δ is too
small, the algorithm is too sensitive, and over-optimizes to
any changes in the network, needlessly disrupting the track-
ing of communities. If δ is too large, the process terminates
before it optimizes modularity, and it produces inaccurate
communities.

Choosing the best value for δ means optimizing for the
dual metrics of high modularity and robustness (insensitiv-
ity) to slight network dynamics. First, we use network-wide
modularity as a measure of modularity optimization for a
given δ value. Second, to capture robustness to network
dynamics, we use community similarity [11]: the ratio of
common nodes in two communities to the total number of
diﬀerent nodes in both communities. More speciﬁcally, for
two consecutive snapshots, we compute the average similar-
ity between communities that exist in both snapshots. We
run the Louvain algorithm on our snapshots using several
diﬀerent δ threshold values, and select the best δ that gener-
ates both good modularity and strong similarity. We repeat
this procedure on shrinking ranges of δ until modularity and
similarity can no longer be improved.

Sensitivity Analysis.
We run the Louvain algorithm
on our dynamic graph snapshots generated every 3 days.
We start from Day 20, when the network is large enough
(64 nodes) to support communities, and only consider com-
munities larger than 10 nodes to avoid small cliques.

We scale δ between 0.0001 and 0.3, and plot the resulting
modularity and average similarity in Figure 4. As shown in
Figure 4(a), in all snapshots the modularity for all thresholds

is more than 0.4. According to prior work [20], modularity
≥ 0.3 indicates that our social network has signiﬁcant com-
munity structure. As expected, a threshold around 0.01 is
sensitive enough for Louvain to produce communities with
good modularity. Note that the big jump in modularity on
Day 386 is due to the network merge event.

Figure 4(b) shows that thresholds 0.0001 and 0.001 pro-
duce lower values of average similarity (i.e. they are less
robust and more sensitive) compared to higher thresholds
between 0.1 and 0.3. Thus, Louvain with δ > 0.01 generates
relatively good stability of communities between snapshots.
Lastly, we examine whether detected communities are
highly sensitive to the choice of δ. As an example, Fig-
ure 4(c) plots the distribution of community sizes observed
on Day 602. The conclusion from this ﬁgure is that once the
threshold exceeds 0.01, the impact of δ on community size
is reduced to a minimum. The same conclusion applies to
other snapshots as well.

Based on the results in Figure 4, we repeat the Louvain
algorithm within a ﬁner threshold range of 0.01 to 0.1. We
ﬁnd that a threshold value of 0.04 provides the best balance
between high modularity and similarity. We use δ = 0.04 to
track and measure dynamic communities in the rest of our
analysis on the dataset.
4.2 Community Statistics Over Time

We now leverage the Louvain-based community tracking
technique to analyze the dynamic properties of our social
network communities. We begin in this section by looking at
the community size distribution, how it changes over time,
and the distribution of lifetimes for all communities. In Sec-
tion 4.3, we take a closer look at the dynamic processes of
community merges and splits. We explore the possibility of
predicting community death from observed dynamics. Fi-
nally, in Section 4.4, we analyze the impact of community
membership on individual user dynamics, and gauge how
and to what extent community dynamics are observed to
have inﬂuenced individual user dynamics.

Community Size.
The size distribution of communi-
ties is an important property that reﬂects the level of cluster-
ing in the network structure. Since the network is constantly
evolving, we can compute a community size distribution for
each snapshot in time. We already observed in Figure 4(c)
that the distribution of community sizes follows a power-law.

177 1000

 100

 10

s
e

i
t
i

n
u
m
m
o
C

 
f

o

 

#

 1

 10

Day 401
Day 602
Day 770

 100

Community Size

 1000

s
e
d
o
N

 
f
o
 
e
g
a
t
n
e
c
r
e
P

 0.7

 0.6

 0.5

 0.4

 0.3

 0.2

 0.1

 0

1st
2nd
3rd
4th
5th

 0

 100  200  300  400  500  600  700  800

Day

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 100  200  300  400  500  600  700  800

Community Lifetime (day)

(a) Community Size Distribution

(b) % of Nodes Covered by Top 5 Com-
munities

(c) CDF of Community Lifetime

Figure 5: Analysis on the evolution of communities. (a) Community size distribution on Days 401, 602, and
770. All three lines follow a power-law distribution, and show a gradual trend towards larger communities.
(b) The portion of nodes covered by the top 5 communities grows considerably as the network matures. (c)
Distribution of community lifetimes shows most communities only stay in the network for a very short time,
and are quickly merged into other communities. This indicates a high level of dynamics between communities.

Our goal

is to understand not only the instantaneous
community size distribution, but also how the distribution
changes over time as the network evolves. Thus, we com-
pute the distributions for days 401, 602, and 770; 3 speciﬁc
snapshots roughly evenly spaced out in our dataset following
the network merge event. We plot the resulting community
size distributions in Figure 5(a). The ﬁgure shows that the
three snapshots consist of a large number of small communi-
ties and a long tail of large communities, consistent with the
power-law distribution. This is consistent with other daily
snapshots as well. More importantly, these snapshots show
a gradual trend towards larger communities. Over the year
of time between snapshots 401 and 770, the number of small
communities shrunk by an order of magnitude. In turn, the
sizes of the largest communities increase signiﬁcantly.

To take a closer at how communities grow over time, we
focus on the portion of the network that is covered by a
small number of the largest communities. We take the top
ﬁve communities sorted by size, and plot the percentage of
the overall network they contain in Figure 5(b). We see
that their coverage of the network shows a clear and sus-
tained growth over time. They grow from less than 30%
around day 100 to more than 60% of the entire network by
the end of our dataset. Over time, this trend seems to indi-
cate that as the network matures, connectivity becomes uni-
formly strong throughout the main connected component,
while distinctions between communities fade.

Community Lifetime.
In a dynamic network, how
long a community remains in the network is another impor-
tant statistical property. By using our community identiﬁca-
tion method between snapshots, we measure the distribution
of community lifetime. Figure 5(c) shows that most of the
communities only stay in the network for a very short period
of time. Speciﬁcally, 20% of communities have lifetimes of
less than a day, meaning that they disappear in the next
snapshot after they are ﬁrst detected. 60% of the communi-
ties have lifetimes less than 30 days, at which point they are
merged into other communities. This shows an extremely
high level of dynamics at the community level.
4.3 Community Merging and Splitting

Community merging and splitting are the main reasons
underlying community death and birth. Therefore, under-
standing these processes in detail is critical to understanding

dynamics at the community level as a whole. We study these
processes in detail, with three questions in mind: What fac-
tors inﬂuence the split and merge processes for communi-
ties? What features, if any, are good indicators for whether
a community will merge soon? Finally, can we predict which
communities will merge together?

First, we study whether community size impacts split-
ting or merging. For splitting events, we only consider the
largest two communities resulting from the split. Similarly
for merge events, we focus on the two largest communities
merging to become one community. We use as a metric the
ratio of the size of the second largest community to the size
of the largest community. The smaller the ratio is, the larger
the size diﬀerence is between the two communities. In Fig-
ure 6(a), we plot the ratio of community splitting with a red
line and community merging with a black line. We observe
that for 78% of merged community pairs, this ratio is less
than 0.005. This reﬂects that for most merge events, there is
a large size discrepancy between the smaller community and
a larger community. This is consistent with our observation
that small communities tend to disappear over time, while
the biggest communities continue to grow in size.

The community splitting process acts in a totally diﬀerent
manner. The red line in Figure 6(a) shows that the ratio for
68% split communities pairs are more than 0.5. Thus, when
a community splits into smaller communities, the commu-
nity tends to split into two comparable size communities.
One possible explanation for this observation is that users
only have a ﬁnite amount of time or energy to devote to
online friendships, e.g. an online version of Dunbar’s Num-
ber [9]. Once a community grows beyond this number, exist-
ing users cannot continue to add more friends. This leads to
non-uniform distribution of new edges as users arrive, which
creates pockets of stronger connectivity in the community
and fragments it. The limit in social relationships has been
observed in prior measurement studies [38].

Predicting Merging.
Since community merge is the
only reason causing the death of the communities, we are
curious whether there are any structural features speciﬁc to
the merge process, and whether we can accurately predict
if a community is going to merge with another in the next
snapshot. We identify three structural metrics, including
community size, in-degree ratio, the ratio of the edges inside
a community over the sum of the degrees of nodes in the

178F
D
C

Merge Community
Split Community

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 1e-07  1e-06  1e-05  0.0001  0.001  0.01

 0.1

 1

Size difference between two largest communities
(a) Community Size Diﬀerence

)

%
(
y
c
a
r
u
c
c
A

 100

 80

 60

 40

 20

 0

 20

 1

 0

Merge with comm. with strongest tie
Not merge with comm. with strongest tie

 90  100

 0

 100

 200

 400

 500
 300
Network Time (Day)

 600

 700

 800

Predicted to merge
Predicted not to merge

 30

 60

 70

 40

 80
Community Current Age (Days)

 50

(b) Accuracy on Merge Prediction

(c) Patterns of Merged Communities

Figure 6: Analysis of community merge and split events. (a) The distribution of the normalized size diﬀerence
between the largest two components when they split or merge. Small communities always merge into large
communities, and a community tends to split into two communities of comparable sizes. (b) The accuracy
of our prediction on whether a community will merge with another in the next snapshot. We achieve a
reasonably good accuracy of 75%.
(c) With very high probability (99%), a community merges with the
community that has the most edge connections (or the strongest tie) to itself.

community, and the similarity of a community to itself in
the previous snapshot (deﬁned in Section 4.1).

Since these metrics evolve over time, we also consider
short-term changes in these features as additional factors.
For example, consider the community size feature. We can
identify its ﬁrst order change indicator as a feature:
if a
community is smaller than its incarnation in the previous
snapshot, we use -1 to indicate the decrease. Similarly, we
use 1 to mark an increase and 0 to mark no change. For
each metric, we can also consider its second order change
indicator.
If the change in community size from snapshot
i − 1 to i is larger than the size change from snapshot i − 2
to i − 1, we use 1 to indicate acceleration in this metric.
Similarly, we use -1 to mark a deceleration in this metric.
In total, we start with the three basic metrics and add on
their standard deviation, their ﬁrst order change indicator,
and their second order change indicator.

Leveraging these feature metrics, we can now predict
whether a community will merge with another in the next
snapshot. Speciﬁcally, we apply a support vector machine
over these features, together with the age of each community.
For consistency, we do not consider communities created on
the day of the network merge with the competing network
because those changes are driven by external events. To ex-
amine the accuracy of our prediction, we compute two met-
rics: 1) the ratio of the number of communities predicted to
merge in the next snapshot to the number of communities
who actually merge, and 2) the ratio of the number of com-
munities predicted to not merge in the next snapshot to the
number of communities who do not merge.

Figure 6(b) plots our two accuracy metrics as a function
of the community age. They show that our method achieves
reasonable prediction accuracy. It achieves an average ac-
curacy of 75% in predicting community merges and 77% in
predicting no merges. This means that we can reliably track
communities’ short-term evolution.

We are also interested in predicting which destination
community a given community will merge into. After ex-
amining each merged community pair, we make an inter-
esting observation. With a very high probability (99%), a
community i will merge with another community j that has
the largest number of edges to i, or the strongest tie with
i. Figure 6(c) illustrates this trend by plotting red dots for
all merge events where a community merges with the peer

with the strongest tie, and a green triangle otherwise. The
results show that the trend is consistent over time. Thus, we
conclude that the inter-community edge count is a reliable
metric for predicting the destination of community merges.

4.4 Impact of Community on Users

To understand how communities impact users’ activity, we
compare edge creation behaviors of users inside communi-
ties to those outside of any community. Overall, our results
show that community users score higher on all dimensions of
activity measures, conﬁrming the positive inﬂuence of com-
munity on users.

Edge Inter-arrival Time.
Figure 7(a) plots the
CDF of edge inter-arrival times for community and non-
community users. We observe that users within diﬀerent
communities display similar edge inter-arrival statistics, and
merge their results into a single CDF curve for clarity. The
considerable distance between the two curves conﬁrms that
community users are more enthusiastic in expanding their
social connections than non-community users.

User Lifetime.
Next, we examine how long users stay
active after joining the network, and whether engagement
in a community drives up a user’s activity span. We deﬁne
a user i’s lifetime as the gap between the time i builds her
last edge and the time i joins the network.

Figure 7(b) plots the CDF of user lifetime for users in
diﬀerent size communities as well as non-community users.
[x, y] represents communities of size between x and y. We
ﬁnd that the lifetime distribution depends heavily on the
size of the community. The larger the community is, the
longer its constituent user’s lifetimes are. Compared to non-
community users, users engaging in a community tend to
stay active for a longer period of time. This conﬁrms the
positive impact of community on users.

In-Degree Ratio.
Although we know that commu-
nities have more edges inside than outside statistically, we
want to quantify how each user within each community con-
nect to each other. We compute each user’s in-degree ratio,
i.e. the ratio of her edge count within her community to her
degree. Figure 7(c) shows the CDF of the in-degree ratio
for users in communities of diﬀerent sizes. We observe that
users in larger communities have a larger in-degree ratio, in-
dicating that they form a greater percentage of edges within

179F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

community nodes
non-community nodes

 10  20  30  40  50  60  70  80  90  100

Edge Inter-arrival Times (Day)

(a) Edge Inter-arrival Time

F
D
C

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

non-community nodes
[10,1k]
[1k,10k]
10k+

 0

 100  200  300  400  500  600  700  800

Lifetime (Day)

(b) Node Lifetime

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

[10,1k]
[1k,10k]
10k+

 0.2

 0.4

 0.6

 0.8

 1

In-Degree Ratio

(c) Edge In-Degree Ratio

Figure 7: Comparing activity of users inside and outside communities. Community users score higher on all
dimensions of activity measures, conﬁrming the positive inﬂuence of community on users. (a) Edge inter-
arrival time. Community nodes create edges more frequently than non-community nodes. (b) Node lifetime.
Community users are grouped by their community sizes. [x, y] represents communities of size between x and
y. Community nodes stay active longer than non-community nodes. (c) Community user’s in-degree ratio.
Nodes in larger communities are more active within their own communities.

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

community nodes
non-community nodes

 10  20  30  40  50  60  70  80  90  100

Edge Inter-arrival Times (Day)

(a) Edge Inter-arrival Time

F
D
C

 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0

non-community nodes
[10,1k]
[1k,10k]
10k+

 0

 50  100  150  200  250  300  350  400

Lifetime (Day)

(b) Node Lifetime

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

[10,1k]
[1k,10k]
10k+

 0.2

 0.4

 0.6

 0.8

 1

In-Degree Ratio

(c) Edge In-Degree Ratio

Figure 8: Veriﬁcation of results on the impact of communities on users’ activities, using the Absolute Potts
Model (APM) community detection algorithm. The results from communities detected by APM are consis-
tent with our results using communities detected by our incremental Louvain approach.

their own community. In particular, 11-30% of nodes only
interact with peers in their own communities. These results
show that like oﬄine communities, online social communities
also encourage users to interact “locally” with peers sharing
mutual interests.

4.5 Veriﬁcation by Alternative Community

Detection Algorithm

One concern with our work is whether our results are
strongly biased by our choice of community detection algo-
rithm. Since our incremental Louvain approach is the only
algorithm able to process our large dataset, we choose to
validate a small subset of our results using an alternative
algorithm for community detection.

We select the Absolute Potts Model (APM) community
detection algorithm [31]. This algorithm detects communi-
ties by minimizing a metric from Potts model, which de-
scribes the network energy under such network partition.
The formal deﬁnition of this metric for unweighted graphs is
shown in Equation 3, where Aij is the element of adjacency
matrix, Jij = (1 − Aij) is the missing edge in this network
and σi is the community which node i belongs to. If node i
and node j are in the same community, i.e. σi = σj, δ(σi, σj)
is 1; otherwise, it is 0. γ is used to weight the strength of
the missing edges, which is 0.0001 in our experiment.

H = − 1
2

(cid:2)

i(cid:3)=j

(Aij − γJij )δ(σi, σj )

(3)

Because of the signiﬁcant computational costs, we run the
APM community detection algorithm on our ﬁrst-year net-
work data, i.e. from snapshot 20 to snapshot 383. Then we
run the measurement in Figure 7 on communities detected
by APM, and present all of the results in Figure 8. Fig-
ure 8(a) shows the CDF of edge inter-arrival time of users
in communities and users out of communities. We ﬁnd that
users in communities are more active in creating new connec-
tions compared to those outside of communities. Figure 8(b)
shows the node lifetime distribution in communities of dif-
ferent sizes. We observe that users in larger communities
have longer lifetimes. The edge in-degree ratio distribution
in Figure 8(c) shows that users in larger communities are
more likely to connect users inside the same community than
users outside the community. All these results are qualita-
tively consistent with the observations in Figure 7. This
conﬁrms our results on community membership’s impact on
user activity. But more broadly, it provides evidence that
our choice of that community detection algorithms does not
signiﬁcantly skew our analytical results.
4.6 Summary of Results

communities lead to the following key ﬁndings:

Our eﬀorts on tracking and analyzing the evolution of
• Our social network displays a strong community struc-
ture, and the size of the communities follows the power-
law distribution.
• The majority of communities are short-lived, and
within a few days they quickly merge into other larger

180communities. These merge events can be reliably pre-
dicted using structural features and dynamic metrics.
• The membership to a community has signiﬁcant in-
ﬂuence on users’ activity. Compared to stand-alone
users, community users create edges more frequently,
exhibit a longer lifetime, and tend to interact more with
peers in the same community.

5. MERGING OF TWO OSNS

On December 12, 2006, our large Chinese OSN merged
with a second competing online social network in China.
This combined entity became
the largest Chinese online
social network that exists today. Our access to the graph
topological and temporal data that characterizes this merge
gives us a unique opportunity to study how this network-
level event impacts users’ activity. For clarity, we refer to
our original social network as network X and the competitor
it merged with as network Y .

In this section, we analyze the forces at work during the
merge. First, we look at the edge creation activity of users
over time in order to isolate users that have become inactive.
This enables us to estimate how many duplicate accounts
there were between network X and network Y . Second, we
examine edge creation patterns within and between the two
OSNs, and show that user preferences vary by OSN and over
time. We observe that the merge is the primary driver of
new edge creation for only a short time; edges to new users
that joined the combined network after the merge rapidly
take over as the driving force. Finally, we calculate the
distance between users in each group to quantify when the
two distinct OSNs become a single whole. We calculate that
the average path length from one OSN to the other drops
rapidly in the days following the merge, even when edges
to new users are ignored. This demonstrates that the two
OSNs quickly become a single, indistinguishable whole.
5.1 Background

Our original Chinese social network opened for business
in November 2005 to university students. Before the two
networks merged, network X counted 624K active users and
8.2M edges. Network Y was a competing OSN created in
April 2006 that also targeted university students. Before the
merge, network Y included 670K active users and 3M edges.
On December 12, 2006, the two OSNs oﬃcially merged
into a single OSN. During the actual merge event, both
OSNs were “locked” to prevent modiﬁcation by users, and
all information from network Y was imported and merged
into network X’s databases. Starting the next day, users
could log-in to the combined system and send friend requests
normally, e.g. users with proﬁles in network X could friend
users in network Y and vice versa. New users just joining
the system would not notice any diﬀerence between proﬁles
of users from the two networks.

Since both networks targeted university students, it was
inevitable that some users would have duplicate proﬁles after
the merge. Network X used users’ registration emails to
identify whether a user has a duplicate proﬁle in network
Y . If a user uses one email to register both networks, the
new merged social network allowed the user to choose which
proﬁle they wanted to keep during their ﬁrst log-in to the
site after the merge.

Deﬁnitions.
In this section, we investigate the details
of the merge between the two networks. To facilitate this

analysis, we classify the edges created after the merge into
three diﬀerent groups. External edges connecting users from
network X to users in network Y , whereas internal edges
connect users within the same OSN. New edges connect a
user in either OSN with a new user who joined the com-
bined network after the merge. Time based measurements
are presented in “days after the merge,” e.g. one day af-
ter the merge is day 387 in absolute terms, since the merge
occurs during day 386 of our dataset.
5.2 Measuring the Merge
User Activity Over Time.
We start our analysis by
examining the number of active users
in both OSNs over
time. We deﬁne a user as “active” if it has created an edge
within the last t days. In our data, 99% of users create at
least one edge every 94 days (on average), hence we use that
as our activity threshold t.

Figure 9(a) shows the number of active users over time for
network X, while Figure 9(b) focuses on network Y users.
Each “all edges” line highlights the number of users actively
creating edges in each group. Although we have 384 days of
data after the merge, the x-axis of Figures 9(a) and 9(b) only
extends 290 days. Since our minimum activity threshold is
94 days, we cannot determine whether users have become
inactive during the tail of our dataset.

We now address the question: how many duplicate ac-
counts were there on both OSNs? Users with accounts on
both services were prompted to choose one account or the
other on their ﬁrst log-in to the combined OSN after the
merge. However, the discarded accounts were not deleted
from the graph. Thus, it is likely that any accounts that
are inactive on the ﬁrst day after the merge are discarded,
duplicate accounts.

Figures 9(a) and 9(b) reveal that 11% of network X ac-
counts and 28% of network Y accounts are immediately in-
active. Thus, it is likely that at least 39% of users had dupli-
cate accounts between the two networks before the merge.
Interestingly, users demonstrate a strong preference for keep-
ing network X accounts over network Y accounts.

As time goes on, the number of active accounts in each
group continues to drop. Presumably, these users lose inter-
est in the merged network and stop generating new friend
relationships. After 284 days, the number of inactive net-
work X accounts doubles to 23%, while 52% of network
Y accounts are inactive. The relative decrease in active ac-
counts over time (12% on network X versus 24% on network
Y demonstrates that network X users are more committed
to maintaining their OSN presence. This observation corre-
sponds to our earlier ﬁnding that users with duplicate ac-
counts tended to keep their network X accounts. Network
X users form a self-select population of more active OSN
users when compared to network Y users.

The “new users,” “internal,” and “external” lines give the
ﬁrst glimpse of the types of connections favored by users in
both OSNs. For each line, a user is considered active only
if they have created an edge of the corresponding type in
the last 94 days. Users in both graphs show similar pref-
erences: edges to new users are most popular, followed by
internal and then external edges. The large activity gap
between internal and external edges highlights the strong
homophily among each group of users. Internal and exter-
nal edge creation activity declines more rapidly than edges
to new users. This makes sense intuitively: the number of

181 

s
r
e
s
U
e
v
i
t
c
A

 
f

 

o
%

 100

 80

 60

 40

 20

 0

 0

 

s
r
e
s
U
e
v
i
t
c
A

 
f

 

o
%

 100

 80

 60

 40

 20

 0

 0

 50

 250

All Edges
New Users
Internal
External

 150

 100

 200
Days After the Merge

y
a
D

 
r
e
p
 
s
e
g
d
E

 1e+06

 100000

 10000

 1000

 250

New Users
Internal
External

 0  50  100  150  200  250  300  350  400

Days After the Merge

All Edges
New Users
Internal
External
 50

 150

 100

 200
Days After the Merge

(a) Active users over time for network
X

(b) Active users over time for network
Y

(c) Edge creation per day

Figure 9: (a)-(b) The number of active users over time. Accounts that are inactive on day 0 after the merge
are likely to by discarded, duplicate accounts. Overall user activity declines over time. (c) Number of edges
of diﬀerent types created per day after the merge. Edges to new users quickly become the most popular edge
type, although there is a small peak for external edges as well.

s
e
g
d
E

 
.
t
x
E

 
/
 
.
t

n

I
 
f

o

 

o

i
t

a
R

 10

 1

 0.1

Network X
Both
Network Y

 0

 50

 100  150  200  250  300  350  400

s
e
g
d
E

 
.
t
x
E

 
/
 

w
e
N

 
f

o

 

o

i
t

a
R

 100

 10

 1

 0.1

Network X
Both
Network Y

 0

 50

 100  150  200  250  300  350  400

Days After the Merge

Days After the Merge

e
c
n
a

i

 

t
s
D
e
g
a
r
e
v
A

 3.5

 3

 2.5

 2

 1.5

 1

 0

Network Y to Network X
Network X to Network Y

 50

 100  150  200  250  300  350  400

Days After the Merge

(a) Ratio of internal to external edges

(b) Ratio of new to external edges

(c) Distance between 2 OSNs over time

Figure 10: (a) Ratio of internal to external edges over time. Network X users create more edges overall, and
are biased towards internal edges, weighting the average upward. (b) Ratio of new to external edges per day.
Both networks overwhelmingly prefer edges to new users, although they reach this point at diﬀerent rates.
(c) The average distance in hops between the two OSNs drops over time as more internal and external edges
are created. By day 50, the two networks are essentially one large, well connected whole.

users in the two networks is static, and hence the pool of
possible friends slowly drops over time as edges are created.

Edge Creation Over Time.
Next, we switch focus
to look at the characteristics of edges, rather than individ-
ual users. By looking at the relative amounts of internal,
external, and edges to new users that are created each day,
we can identify what types of connections are driving the
dynamic growth of the network after the merge.

Figure 9(c) shows the number of internal, external, and
new edges created per day. Initially, internal and external
edges are more numerous than edges to new users. However,
3 days after the merge new edges begin to outnumber exter-
nal edges, and by day 19 new edges out pace internal edges
as well. This result demonstrates that new users quickly be-
come the primary driver of edge creation, as opposed to new
edges between older, established users. This is not surpris-
ing: since the merged network is growing exponentially, the
number of new users eventually dwarfs the sizes of network
X and network Y , which remain static.

Note that this result does not conﬂict with the results
presented in Section 3. Section 3 examines the edge creation
patterns over the lifetime of all users in our data. In this
section, we are comparing the edge creation patterns of users
who existed before the merge to everyone who joined after.
Thus, the age “buckets” in this section are very course.

We now ask the question: are there diﬀerences between the
types of edges created by network X and network Y users?
Although Figure 9(c) demonstrates that internal edges al-

ways outnumber external edges, the reality of the situation
is more complicated when the edges are separated by OSN.
Figure 10(a) plots the ratio of internal to external edges
over time for network X and network Y .
Initially, users
on both OSNs favor creating internal edges (i.e.
the ra-
tio is >1). However, by day 16, the ratio for network Y
users starts to permanently favor external edges. The reason
for this strange result is that network X users create more
than twice as many edges than network Y users.
In our
dataset, network X users create 3.9 million internal edges,
while network Y users only create 1.5 million. However,
unlike internal edges, external edges aﬀect the statistics for
both groups. Thus, the number of external edges (2.2 mil-
lion total in our dataset) is driven by the more active user
base. Even though network X users create less external
edges than internal edges, the number is still proportionally
greater than the number of internal edges created between
network Y users. The “both” line in Figure 10(a) is always
>1 because network X users create more edges overall, which
pushes the average upwards.

Figure 10(b) plots the ratio of edges to new users versus
external edges over time for both networks. This plot reveals
that the inﬂection point where users switch from preferring
external edges to new edges is diﬀerent for the two OSNs.
The ratio becomes ≥1 for network X 5 days after the merge,
whereas network Y takes 32 days. Despite these diﬀerences,
both OSNs demonstrate the same overall trend for the ratio
to eventually tip heavily in favor of edges to new users.

182Distance Between the two networks.
Finally, we
examine the practical consequences of edge creation between
the two networks. Our goal is to answer the question: at
what point do the two networks become so interconnected
that they can no longer be considered separate graphs?

To answer this question, we calculate the distance,

in
hops, between users in each group. Intuitively, the distance
between the groups should decrease over time as 1) more
external edges are created, and 2) more internal edges in-
crease the connectivity of users with external edges. In our
experiments, we select 1,000 random users from each OSN
on each day after the merge and calculate the shortest path
from each of them to any user in the opposite OSN. Thus,
the lowest value possible in this experiment is 1, e.g. the
randomly selected user has an external edge directly to a
user in the opposite OSN. New users and edges to new users
are not considered in these tests.

Figure 10(c) shows that the average path length between
the two OSNs rapidly declines over time. Although average
path lengths for both OSNs initially start above 3 hops,
within 47 days average path lengths are <2. Path lengths
from network X to network Y are uniformly shorter, and by
the end of the experiment the average path length is <1.5.
The distance between networks X and Y rapidly ap-
proaches an asymptotic lower bound in Figure 10(c). Once
this bound is reached, it is apparent that the graphs can
become no closer. We conclude that by day 50, when both
lines begin to approach the lower bound, the two networks
can no longer be considered separate OSNs. These results
demonstrate how quickly the two disjoint OSNs can merge
into a single whole, even when edge creation is biased in
favor of internal edges (see Figure 10(a)).
5.3 Summary of Results

Our analysis produces several high-level conclusions:
• There were a large number of duplicate accounts be-
tween the two networks that become inactive immedi-
ately after the merge.
• Edges to new nodes quickly become the driving force
• Despite user’s preference against external edges, the
two networks very quickly merge into a single, well-
connected graph.

behind edge creation.

We also observe that the merge alters user’s edge creation

patterns for a short time (until equilibrium is restored):

• The total number of edges created per day increases,
driven by the sudden appearance of so many new users.
• Users’ preferences for internal/external edges changes
• Network X users are more active than network Y
users. Thus, the external edges created between net-
work X and network Y force network Y users to be-
come more active than they normally would be.

drastically in the days following the merge.

6. RELATED WORK
Dynamic OSN Measurement.
Several studies have
measured basic dynamic properties of graphs. [22] analyzed
four citation and patent graphs, and proposed the forest
ﬁre model to explain the observed graph densiﬁcation and

shrinking diameter. [21] studied details of dynamics in four
OSNs to conﬁrm preferential attachment and triangle clo-
sure features. Similar conclusions were reached by studies
on Flickr [26] and a social network aggregator [10]. [16] mea-
sured network temporal radius and found out that there is
a gelling point to distribution.
In addition, [2] measured
weighted dynamic graphs, [1] analyzed the growth of a Ko-
rean OSN, and [36] considered temporal user interactions
as graph edges instead of static friendship. Finally, [12, 18]
analyzed blogspace dynamics.

Some studies focused on analyzing social network dynam-
ics through explicitly deﬁned groups [4, 40, 14] or discon-
nected components [19, 25, 15].
[18] tried to identify blog
communities and detect bursts in diﬀerent temporal snap-
shots. [30] utilized the clique percolation method [8] to iden-
tify overlapping community dynamics in mobile and citation
graphs. Unlike these studies, our work focuses on the evolu-
tion of implicit communities in a densely connected, large-
scale social graph.

Dynamic Community Detection and Tracking Algo-
rithms.
There are two approaches to detecting and
tracking dynamic communities. One approach is to mini-
mize the self-deﬁned temporal cost of communities between
snapshots.
[35] proved that this problem is NP-hard and
then several works [35, 34, 23] proposed approximation al-
gorithms. However, these algorithms only scale to graphs
with thousands of nodes.
[32] and [17] propose dynamic
community detection algorithms that scale to graphs with
hundreds of thousands of nodes. The drawback of [32] is
that it cannot track individual community evolution.

The other approach is to match communities detected
by static community detection algorithms across temporal
[11] maps communities between snapshots if
snapshots.
their similarity is higher than a threshold.
[3, 33] tracks
communities between snapshots based on critical commu-
nity events. These algorithms do not consider any temporal
correlation when detecting communities between snapshots.
7. CONCLUSION

This work presents a detailed analysis of user dynamics
in a large Chinese online social network, using a dataset
that covers the creation of 19 million users and 199 million
edges over a 25-month period. More speciﬁcally, we focus on
analyzing edge dynamics at diﬀerent levels of scale, including
dynamics at the level of individual users, dynamics involving
the merge and split of communities, and dynamics involving
the merging of two independent online social networks.

Our analysis produced a number of interesting ﬁndings of
dynamics at diﬀerent scales. First, at the individual node
level, we found that the preferential attachment model grad-
ually weakens in impact as the network grows and matures.
In fact, edge creation in general becomes increasingly driven
by connections between existing nodes as the network ma-
tures, even as node growth keeps pace with the growth in
overall network size. Second, at the community level, we
use an incremental version of the popular Louvain commu-
nity detection algorithm to track communities across snap-
shots. We empirically analyze the birth, growth, and death
of communities across merge and split events, and show that
community merges can be predicted with reasonable accu-
racy using structural features and dynamic metrics such as
acceleration in community size. Finally, we analyze detailed
dynamics following a unique event merging two comparably-

183sized social networks, and observe that its impact, while sig-
niﬁcant in the short term, quickly fades with the constant
arrival of new nodes to the system.

While our results from this network may not generalize
to all social networks, our analysis provides a template for
understanding the dynamic processes that are active at dif-
ferent scales in many complex networks. A signiﬁcant take-
away from our work is that the actions of individual users
are not only driven by dynamic processes at the node-level,
but are also signiﬁcantly inﬂuenced by events at the com-
munity and network levels. A comprehensive understanding
or model of an evolving network must account for changes
at the network and community levels and their impact on
individual users.

Acknowledgments
We would like to thank our shepherd Alan Mislove and the
anonymous reviewers for their feedback. This work is sup-
ported in part by NSF grant CNS-1224100 and by DARPA
GRAPHS. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the fund-
ing agencies.

8. REFERENCES
[1] Ahn, Y., Han, S., Kwak, H., Moon, S., and Jeong, H.

Analysis of topological characteristics of huge online social
networking services. In Proc of WWW (2007).

[2] Akoglu, L., McGlohon, M., and Faloutsos, C. RTM:
Laws and a recursive generator for weighted time-evolving
graphs. In Proc. of ICDM (2008).

[3] Asur, S., Parthasarathy, S., and Ucar, D. An

event-based framework for characterizing the evolutionary
behavior of interaction graphs. ACM TKDD 3, 4 (2009), 16.

[4] Backstrom, L., Huttenlocher, D., Kleinberg, J., and

Lan, X. Group formation in large social networks:
membership, growth, and evolution. In Proc. of KDD
(2006).

[5] Barab´asi, A., and Albert, R. Emergence of scaling in

random networks. Science 286, 5439 (1999), 509.

[6] Blondel, V., Guillaume, J., Lambiotte, R., and

Lefebvre, E. Fast unfolding of communities in large
networks. J. Stat. Mech (2008).

[7] Clauset, A., Newman, M., and Moore, C. Finding
community structure in very large networks. Physical
review E 70, 6 (2004).

[8] Der´enyi, I., Palla, G., and Vicsek, T. Clique percolation

in random networks. Physical review letters 94 (2005).

[9] Dunbar, R. Neocortex size as a constraint on group size in

primates. Journal of Human Evolution 22, 6 (1992).

[10] Garg, S., Gupta, T., Carlsson, N., and Mahanti, A.

Evolution of an online social aggregation network: an
empirical study. In Proc. of IMC (2009).

[11] Greene, D., Doyle, D., and Cunningham, P. Tracking
the evolution of communities in dynamic social networks.
In Proc. of ASONAM (2010).

[12] Guo, L., Tan, E., Chen, S., Zhang, X., and Zhao, Y.
Analyzing patterns of user content generation in online
social networks. In Proc. of KDD (2009).

[13] Jiang, J., Wilson, C., Wang, X., Huang, P., Sha, W.,

Dai, Y., and Zhao, B. Y. Understanding latent
interactions in online social networks. In Proc. of IMC
(2010).

[14] Kairam, S., Wang, D., and Leskovec, J. The life and

death of online groups: predicting group growth and
longevity. In Proc. of WSDM (2012).

[15] Kang, U., McGlohon, M., Akoglu, L., and Faloutsos,
C. Patterns on the connected components of terabyte-scale
graphs. In Proc. of ICDM (2010).

[16] Kang, U., Tsourakakis, C., and Faloutsos, C. Radius

plots for mining tera-byte scale graphs: Algorithms,
patterns, and observations. In Proc. of SDM (2010).
[17] Kim, M., and Han, J. A particle-and-density based

evolutionary clustering method for dynamic networks.
Proceedings of the VLDB Endowment 2, 1 (2009), 622–633.

[18] Kumar, R., Novak, J., Raghavan, P., and Tomkins, A.
On the bursty evolution of blogspace. World Wide Web 8,
2 (2005), 159–178.

[19] Kumar, R., Novak, J., and Tomkins, A. Structure and

evolution of online social networks. In Proc. of KDD
(2006).

[20] Kwak, H., Choi, Y., Eom, Y., Jeong, H., and Moon, S.
Mining communities in networks: a solution for consistency
and its evaluation. In Proc. of IMC (2009).

[21] Leskovec, J., Backstrom, L., Kumar, R., and Tomkins,

A. Microscopic evolution of social networks. In Proc. of
KDD (2008).

[22] Leskovec, J., Kleinberg, J., and Faloutsos, C. Graphs

over time: densiﬁcation laws, shrinking diameters and
possible explanations. In Proc. of KDD (2005).

[23] Lin, Y., Chi, Y., Zhu, S., Sundaram, H., and Tseng, B.
Facetnet: a framework for analyzing communities and their
evolutions in dynamic networks. In Proc of WWW (2008).
[24] LinkedIn Infrastructure Team. Data infrastructure at

linkedin. In Proc. of ICDE (2012).

[25] McGlohon, M., Akoglu, L., and Faloutsos, C.

Weighted graphs and disconnected components: patterns
and a generator. In Proc. of KDD (2008).

[26] Mislove, A., Koppula, H., Gummadi, K., Druschel, P.,

and Bhattacharjee, B. Growth of the ﬂickr social
network. In Proc. of WOSN (2008).

[27] Newman, M. Analysis of weighted networks. Physical

Review E 70, 5 (2004), 056131.

[28] Newman, M. Fast algorithm for detecting community

structure in networks. Physical Review E 69 (2004).

[29] Newman, M., and Girvan, M. Finding and evaluating

community structure in networks. Phys.Rev. E 69, 2 (2004).

[30] Palla, G., Barabasi, A., and Vicsek, T. Quantifying

social group evolution. Nature 446, 7136 (2007), 664–667.

[31] Ronhovde, P., and Nussinov, Z. Local

resolution-limit-free potts model for community detection.
Physical Review E 81, 4 (2010), 046114.

[32] Sun, J., Faloutsos, C., Papadimitriou, S., and Yu, P.
Graphscope: parameter-free mining of large time-evolving
graphs. In Proc. of KDD (2007).

[33] Takaffoli, M., Sangi, F., Fagnan, J., and Zaıane, O. A

framework for analyzing dynamic social networks.
Applications of Social network Analysis (ASNA) (2010).

[34] Tantipathananandh, C., and Berger-Wolf, T.

Constant-factor approximation algorithms for identifying
dynamic communities. In Proc. of KDD (2009).

[35] Tantipathananandh, C., Berger-Wolf, T., and Kempe,

D. A framework for community identiﬁcation in dynamic
social networks. In Proc. of KDD (2007).

[36] Viswanath, B., et al. On the evolution of user interaction

in facebook. In Proc. of WOSN (2009).

[37] Wakita, K., and Tsurumi, T. Finding community

structure in mega-scale social networks. CoRR
abs/cs/0702048 (2007).

[38] Wilson, C., Boe, B., Sala, A., Puttaswamy, K. P. N.,
and Zhao, B. Y. User interactions in social networks and
their implications. In Proc. of EuroSys (April 2009).

[39] Zachary, W. An information ﬂow model for conﬂict and
ﬁssion in small groups. Journal of anthropological research
(1977), 452–473.

[40] Zheleva, E., Sharara, H., and Getoor, L. Co-evolution
of social and aﬃliation networks. In Proc. of KDD (2009).

184