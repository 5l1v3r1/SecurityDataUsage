TLS Proxies: Friend or Foe?

Mark O’Neill, Scott Ruoti, Kent Seamons, Daniel Zappala
Brigham Young University, Department of Computer Science

mto@byu.edu, ruoti@isrl.byu.edu, seamons@cs.byu.edu, zappala@cs.byu.edu

ABSTRACT
We measure the prevalence and uses of TLS proxies
using a Flash tool deployed with a Google AdWords
campaign. We generate 2.9 million certiﬁcate tests and
ﬁnd that 1 in 250 TLS connections are TLS-proxied.
The majority of these proxies appear to be benevolent,
however we identify over 1,000 cases where three malware
products are using this technology nefariously. We also
ﬁnd numerous instances of negligent, duplicitous, and
suspicious behavior, some of which degrade security for
users without their knowledge. Distinguishing these
types of practices is challenging in practice, indicating a
need for transparency and user awareness.

1.

INTRODUCTION

Secure communication on the Internet is based primar-
ily on digital certiﬁcates signed by certiﬁcate authorities
and intermediate authorities. This validation system is
currently being compromised by the use of TLS proxies,
which can act as a man-in-the-middle (MitM) for TLS
connections [3]). A TLS proxy can issue a substitute
certiﬁcate for any site the user visits, so that the user
establishes an encrypted connection to the proxy rather
than the desired web site. The proxy can then decrypt
and monitor or modify all user traﬃc, before passing it
along via a second encrypted channel to the desired web
site. TLS proxies are used for a variety of legitimate
purposes, such as blocking malware, but can also be
used by malicious entities to compromise the privacy
or security of end users. Isolated attacks have been ob-
served in the wild, notably in Iran [1] and Syria [7]. The
most dangerous aspect of TLS proxies is that the user
is entirely unaware that encrypted traﬃc is being inter-
cepted by an organization or attacker; browser software
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than the author(s) must be honored. Abstracting with credit is
permitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14 - 16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to
ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987488

still shows a lock icon during such sessions. Thus TLS
proxies are controversial because they mislead users and
compromise the end-to-end security promises made by
TLS.

Detecting the presence and prevalence of TLS proxies
is a challenging measurement problem. To detect a
proxy, we must obtain the certiﬁcate a client, such as a
web browser, actually obtains, then compare this with
the valid certiﬁcate presented by the server the client
is contacting. A mismatch indicates that some kind of
proxy, either benevolent or malicious, is intercepting the
client’s traﬃc to that particular server. To determine
the prevalence of TLS proxies, we must repeat this
measurement on as many client systems as possible.

Two recent works have found some evidence for TLS
proxies by measuring certiﬁcates received by clients.
Huang et al. measure the prevalence of TLS proxies that
intercept traﬃc from clients connecting to Facebook
[9], ﬁnding that 1 in 500 TLS connections are proxied,
mostly by corporate Internet ﬁlters and personal an-
tivirus software. In addition, 1,112 connections were
found to be intercepted by malware. Because this study
uses Flash to detect a certiﬁcate mismatch, it does not
detect proxies aﬀecting most mobile devices. The Net-
alyzer project measured certiﬁcates received by Android
apps, assessing 15,000 sessions and identifying just one
case of a TLS proxy running in an analytics app [22].
Though this is a very low rate of prevalence (30 times
less than Huang’s study), the app was found to whitelist
several sites, including Facebook. This indicates that
measurements of proxies should examine low-proﬁle sites
that are unlikely to be whitelisted.

To measure the prevalence of proxies we use a Flash
app deployed with a Google AdWords campaign. Like
Huang, our measurements use Flash to detect a certiﬁ-
cate mismatch without any user interaction. However,
the deployment via Adwords aﬀords some advantages.
First, we can actively measure clients, based on how
much money we spend on the advertisement, enabling
us to collect 12 million of measurements in a week by
spending $750 per day. Second, we target our measure-
ments toward a server that ordinarily does not receive
signiﬁcant traﬃc. This enables detection of proxies that
intentionally whitelist popular sites such as Facebook.

551Using the AdWords campaign, we were able to test
2.9 million connections for substitute certiﬁcates. Our
ﬁndings are as follows:

• We found 11,764 proxied connections out of 2.9 mil-
lion total measurements (0.41% or approximately
1/250 of all connections) spanning 142 countries.
This rate is double that reported by Huang, which
provides evidence that some proxies may use white-
listing. We found that most substitute certiﬁcates
claim to be from benevolent TLS proxies, with
70.87% claiming to be generated by a ﬁrewall soft-
ware and 12.66% claiming to be generated by a
corporate network.

• We found over 2,000 instances of negligent and
malicious behavior. Our analysis of one parental
ﬁlter found that it masks forged certiﬁcates, allow-
ing an attacker to easily perform a MitM attack
against the ﬁrewall’s users. In addition, we found
three malware products aﬀecting over 1,000 con-
nections that install a new root certiﬁcate and act
as a TLS proxy to dynamically insert advertise-
ments on secure sites. We also found evidence that
spammers are using TLS proxies in their products.
We found numerous other suspicious circumstances
in substitute certiﬁcates, such as a null Issuer Or-
ganization, falsiﬁed certiﬁcate authority signatures,
and downgraded public key sizes.

2. BACKGROUND

To validate the identity of a website such as Amazon,
the web browser relies on certiﬁcate authorities (CAs),
which digitally sign certiﬁcates vouching for the identity
of the web server. When the browser initiates a TLS
connection with a server, it retrieves the server’s certiﬁ-
cate, then must verify the certiﬁcate’s validity before
exchanging encrypted traﬃc.

Web browsers authenticate a site by validating a chain
of digital signatures from the site’s certiﬁcate back to
one of a set of trusted root certiﬁcates. These certiﬁ-
cates comprise the “root store” and are typically bundled
with the operating system or browser. For example, the
certiﬁcate for www.google.com is signed by the Google
Internet Authority G2, an intermediate certiﬁcate au-
thority run by Google. This certiﬁcate is in turn signed
by GeoTrust Global CA, a certiﬁcate authority whose
certiﬁcate is located in the root store of the browser or
operating system. A substitute certiﬁcate’s signature
should not be able to be traced back to a root store
certiﬁcate and should be rejected.

This system can be attacked by a TLS proxy inserting
itself as a man-in-the-middle between the browser and
the web server. As shown in Figure 1, when the browser
tries to open a secure connection to the web server, this
connection is instead intercepted by the proxy. The
proxy also provides a falsiﬁed, substitute certiﬁcate to
the browser, so that it can impersonate the original

Figure 1: “Secure” session establishment with
involving a TLS proxy

website. For this to work, the proxy must somehow
control a substitute certiﬁcate for the original website
that validates against the root store of the user. This
can be accomplished in a variety of ways, both benign
and malicious.

Benign ways to provide valid substitute certiﬁcate in-
clude (a) using enterprise software to supply certiﬁcates
for the root store of all computers in an organization,
(b) creating a software image using new root certiﬁcates,
or (c) installing a new root certiﬁcate with software
such as a personal ﬁrewall. Generally these methods are
used for benevolent reasons, such as blocking malware
and viruses, providing intrusion detection, or protecting
intellectual property.

Other ways of providing seemingly-valid certiﬁcates
are more nefarious. For example, malware typically has
permission to add new root certiﬁcates when it is in-
stalled inadvertently by the user. Alternatively, a rogue
certiﬁcate authority can issue any certiﬁcate it wants,
since all root certiﬁcates are allowed to sign for any do-
main. There have also been numerous reported cases of
compromised and negligent certiﬁcate authorities that
allow attackers to issue fraudulent certiﬁcates [6]. In ad-
dition, governments have the ability to coerce authorities
into granting them substitute certiﬁcates.
3. MEASUREMENT TOOL

We have developed a tool to measure the prevalence of
TLS proxies using existing, widely-deployed technologies.
The tool runs silently from the perspective of the user,
with no user action required to install or run it.
3.1 Design

Our tool works as shown in Figure 2. The client
browser connects to an ad server where the Flash ap-
plication is hosted. The application is embedded in an
advertisement, which is downloaded and automatically
run by the browser. The tool sends a ClientHello mes-
sage to the Web Server to initiate a TLS handshake.
The tool then records the ServerHello and Certifi-
cate messages received in response and terminates the
handshake. The retrieved certiﬁcates are then forwarded
to the Database Server for analysis.

To measure a TLS proxy, the Web Server must host
a simple socket policy ﬁle. For security reasons Flash
9.0 and above requires that applications attempting to
establish a TCP connection with a remote host ﬁrst
obtain permission from that host via this policy ﬁle.

TLS ConnectSubstitute Certificate(1)(2)(4)Key InformationEncrypted Traffic(5)Browser(3)Web ServerTLS ConnectCertificateKey InformationTLS ProxyEncrypted Traffic552our measurement methodology was not well known, so
it is unlikely that any attacker was evading detection
or tampering with our reports. However, in the case
that this methodology becomes well-known, it would be
diﬃcult to prevent dedicated attackers from modifying
their TLS proxies to avoid our measurements.

While our tool is capable of using multiple hosts si-
multaneously as the “Web Server”, each of these hosts
must serve a socket policy ﬁle (described previously)
that allows this remote connection to occur.

4. GOOGLE ADWORDS CAMPAIGN

To achieve rapid and widespread deployment of our
measurement tool we leveraged the Google AdWords
platform. This strategy for using an advertising cam-
paign to conduct an end-user measurement study has
previously been used to study CSRF attacks [2], DNS
rebinding attacks [11], and DNSSEC deployment [10,
13]. Our study is the ﬁrst to use this same method to
measure the deployment of TLS proxies.
4.1 Deployment

The deployment of the measurement tool is given in
Figure 2. Deployment responsibilities were delegated to
the Google AdWords platform, while all reports from
the tool were sent back to a Database Server we con-
trolled. To accommodate placement in advertisements,
our measurement tool was modiﬁed to contain a visible
canvas on which we place a simplistic advertisement
for our research lab. Our measurement tool was run
as soon as the user’s browser loaded the advertisement,
and required no interaction from the users.

For our ad campaign we leveraged the CPM (cost-
per-impression) bidding model for our campaign, which
maximizes the number of unique clients presented with
our ad. We set the Max. CPM to $10 USD. To help us
reach a global audience we indicated that our ad should
be served to all locations and languages. Additionally,
since ads are shown only on websites that match a set of
designated keywords we selected our keywords based on
phrases that were currently trending globally on Google
Trends1. We set our ad to show uniformly throughout
the day so as to collect data from users in a variety of
locations and situations (e.g., home, commuting, work).
Along with the certiﬁcate, we also recorded the IP
address of the client tested. This IP address was then
used to query the MaxMind GeoLite [17] database to
gather geolocation information.

Our Google AdWords advertising campaign ran from
January 6, 2014 to January 30, 2014. During the ﬁrst
17 days of the study we varied the amount of money
allocated to the ad campaign, but for the last week we
kept it at $500/day.
In this study we only gathered
certiﬁcate data for our own website, tlsresearch.byu.edu.
We used the following keywords for the study: Nelson
Mandela, Sports, Basketball, NSA, Internet, Freedom,

1http://www.google.com/trends/?geo

Figure 2: Using an Ad Server for TLS Proxy
Measurement

Our Web Server’s socket policy ﬁle is served on port 80.
This avoids eﬀects of captive portals, which often block
traﬃc targeting ports other than those used by HTTP
and HTTPS (e.g., airport public access WiFi).
3.2

Implementation

To implement our tool it was necessary to retrieve
the certiﬁcate used during a TLS handshake. It would
have been preferable to use JavaScript or HTML5 to
retrieve the certiﬁcate used as part of a current TLS
connection, but unfortunately there is no API available
for this. Firefox allows a plugin to request the certiﬁcate,
but plugins require manual client installation. This left
us with the alternative of establishing a plain TCP
connection with the target server and then initiating
a TLS handshake. Unfortunately, the ability to use
a plain TCP connection rules out the use of HTML5
WebSockets.

Due to these constraints, we opted to use the Adobe
Flash platform. We implemented our tool in Action-
Script using only libraries supported by the Flash 9.0
runtime, due to its nearly complete market penetration
relative to newer versions. Using the Socket API pro-
vided by Flash 9.0 we implemented functionality required
to perform a partial TLS handshake. After receiving
the full Certificate message from the Web Server the
handshake is aborted and the connection is closed. The
Flash application records and parses all certiﬁcates re-
ceived from the Certificate message (as some hosts
oﬀer certiﬁcate chains) and stores them locally until it
parses the ﬁnal one. All certiﬁcate data, in PEM for-
mat, is concatenated and then sent as an HTTP POST
request to the Database Server for analysis.

Code and collected datasets are available for download

at https://tlsresearch.byu.edu.
3.3 Limitations

Our tool is unable to measure TLS proxies being used
against most mobile devices. An overwhelming majority
of mobile platforms do not support Flash, and Adobe
has discontinued their development of Flash for mobile
devices.

It is possible that TLS proxies could be engineered to
circumvent our measurements. At the time of our study,

ClientHelloServerHelloWeb ServerServerHelloClientHello(1)(2)(3)CertificateBrowser: HTTPS RequestHTTPS Response with Flash Measurement ToolClientTLS Proxy?CertificateCertificateAd ServerDatabase Server553Paul Walker, Security, LeBron James, Haiyan, Snowden,
PlayStation 4, Miley Cyrus, Xbox One, iPhone 5s.

This campaign generated 4,634,386 impressions and
3,897 clicks (not required to complete the measurement)
at a cost of $4,911.97. In total we completed 2,861,244
successful measurements.
4.2 Ethical Considerations

Our experimental design limits potential harm to users.
Our tool makes several request to a web server we con-
trol, which is largely indistinguishable from the traﬃc
generated by advertisements that load images, audio,
or video from a web server. If network administrators
were to investigate this traﬃc by visiting our web server,
they would be shown a description of our research and
provided with our contact information2. Our tool also
logs the substitute certiﬁcate a browser sees, which some
organizations or individuals may consider a privacy leak;
this is balanced by only examining modiﬁcations made
to a connection to our own web server and the potential
beneﬁts that come from viewing certiﬁcate information
to identify malware. This and Huang’s work [9] has
informed the community about these practices and mo-
tivated a subsequent study that identiﬁed weaknesses in
personal ﬁrewalls [5]. Other than the certiﬁcate, we only
record data that is present in the web server’s connection
log. Finally, our tool complies with Google AdWords’
terms of service.

5. RESULTS

During the ad campaign, we served 4.36 million ads
and successfully completed 2.86 million measurements.
Of those tests, 11,764 returned a diﬀerent X.509 certiﬁ-
cate than was served by our secure web server, indicating
the presence of a TLS proxy.

The users behind a proxied connection that were iden-
tiﬁed by our campaign originated in 142 countries and
from 8,589 distinct IP addresses. Due to the targeting
algorithms used by Google AdWords, our tool’s exposure
to these countries is not uniformly distributed. Table 1
shows the countries with the most proxied connections
in our study. For each country, the table lists the to-
tal number of proxied connections, the total number of
connections, and the percentage of total connections to
that country that were proxied. Some countries have
signiﬁcantly higher percentages of proxied connections
than the average, including France (1.09%), Canada
(0.87%), Belgium (0.81%), the United States (0.79%),
and Romania (0.74%). Together, connections from the
United States and Brazil account for 36% of detected
proxies.
5.1 Analysis of Issuers

We ﬁrst analyze the contents of the Issuer Organiza-
tion in the substitute certiﬁcates we collected. We use
OpenSSL to decode the certiﬁcates and store them in a

2We were never contacted.

Rank Country

Proxied

Total

Percent

1
2
3
4
5
6
7
8
8
13
14
15
16
17
18
19
20
21
22
23

France
Canada
Belgium
US
Romania
Brazil
Portugal
India
Turkey
S.Korea
Russia
Spain
Japan
Netherlands
UK
Germany
Ukraine
Taiwan
Poland
Italy
Other (215)

812
303
136
2,252
696
2,041
185
302
303
196
224
226
111
104
759
499
160
101
182
200
1,972

74,789
34,695
16,816
285,078
94,116
298,618
29,799
51,348
65,195
46,660
58,402
62,569
31,751
31,938
259,971
187,805
61,431
61,195
110,550
129,358
869,096

1.09%
0.87%
0.81%
0.79%
0.74%
0.68%
0.62%
0.59%
0.46%
0.42%
0.38%
0.36%
0.35%
0.33%
0.29%
0.27%
0.26%
0.17%
0.16%
0.15%
0.23%

Total

11,764

2,861,180

0.41%

Table 1: Proxied connections by country, or-
dered by percentage proxied

database, where we can run queries. We also manually
inspect the contents of the relevant ﬁelds to identify the
issuing organization and their software products, using
web searches to determine their identity. We empha-
size that our results in this section are based on the
intercepting proxy self-identifying themselves in the cer-
tiﬁcate. It is certainly possible that malicious proxies
have hidden their tracks by masquerading as a legitimate
organization in the Issuer Organization ﬁeld, and we
cannot detect this.

Table 2 shows the values for the Issuer Organization
ﬁeld of the substitute certiﬁcates. Table 3 provides
a breakdown of values present in the Issuer Organiza-
tion ﬁeld of the substitute certiﬁcates. The majority
of certiﬁcates from proxied connections have an Issuer
Organization ﬁeld matching the name of a personal
or enterprise ﬁrewall (69.54%). Another 12.66% have
the name of an organization set as the Issuer Organi-
zation (e.g., Lawrence Livermore National Laboratory,
Lincoln Financial Group). Additionally, 7% (829) of
the substitute certiﬁcates have null values for the Issuer
Organization ﬁeld.

The most suspicious activities discovered were revealed
by certiﬁcates with an Issuer Organization that matched
the names of malware. “Sendori, Inc,”“WebMakerPlus
Ltd,” and “IopFailZeroAccessCreate” appeared in 966, 95,
and 21 Issuer Organization ﬁelds, respectively. Sendori
poses as a legitimate enterprise, however they produce
software that compromises the DNS lookup of infected
machines, allowing them to redirect users to improper

554Rank

Issuer Organization

Connections

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

Bitdefender
PSafe Tecnologia S.A.
Sendori Inc
ESET spol. s r. o.
Null
Kaspersky Lab ZAO
Fortinet
Kurupira.NET
POSCO
Qustodio
WebMakerPlus Ltd
Southern Company Services
NordNet
Target Corporation
DigiCert Inc
ContentWatch, Inc.
NetSpark, Inc.
Sweesh LTD
IBRD
Cloud Services
Other (332)

4,788
1,200
966
927
829
589
310
267
167
109
95
62
61
52
49
42
42
39
26
23

1,121

Table 2: Issuer Organization ﬁeld values

Proxy Type

Connections

Percent

Business/Personal Firewall
Organization
Malware
Unknown
Parental Control
Business Firewall
Certiﬁcate Authority
School
Personal Firewall
Telecom

8,101
1,394
1,112
840
156
69
49
32
11
0

68.86%
12.66%
8.65%
7.14%
1.33%
0.59%
0.42%
0.27%
0.09%

0%

Table 3: Classiﬁcation of claimed issuer, ordered
by percentage proxied

hosts. A TLS proxy component is used to bypass host
authenticity warnings in the browser. The substitute
certiﬁcates generated by the TLS proxy are signed by
a root authority that was added to the root store of
the local machine at the time of infection. Substitute
certiﬁcates issued by Sendori originated from 30 distinct
countries.

The WebMakerPlus malware is primarily associated
with inserting advertisements into Web pages. We hy-
pothesize that WebMakerPlus uses a TLS proxy to sim-
ulate that their advertisements are served from a secure
connection and to modify secure pages in transit to in-
clude such content. Substitute certiﬁcates containing
markings for WebMakerPlus originated from 16 distinct
countries.

Manual Internet queries revealed that malware was
responsible for an Issuer Common Name ﬁeld value of

“IopFailZeroAccessCreate.” The certiﬁcates containing
this value originated from 14 distinct countries. Dis-
turbingly, each certiﬁcate contained the same 512-bit
public key. This malware was also reported by [9].

It is somewhat surprising that these malware programs
self-identify in the substitute certiﬁcates they generate,
as an attacker can arbitrarily select values for the ﬁelds
in a substitute certiﬁcate.

In addition to malware discoveries, we found that the
names of two companies highly associated with spam
were also present in numerous Issuer Organization ﬁelds.
The names “Sweesh LTD”, and “AtomPark Software
Inc” were found in 39 and 20 substitute certiﬁcates,
respectively. AtomPark oﬀers tools for spammers in-
cluding “email extractors” and “bulk mailers.” Sweesh
oﬀers services to spammers to overcome “hurdles” faced
by advertisers and publishers. Internet searches reveal
that Sweesh may be responsible for the development of
WebMakerPlus.

Not all of the root certiﬁcates found in the collected
substitute chains were unique. In the 11,764 substitute
chains 8,341 distinct roots were found. For example,
310 leaf certiﬁcates signed by “Fortinet” all used the
same root certiﬁcate, and these were obtained from
155 distinct IP addresses. This behavior was consis-
tent across many of the popular issuers identiﬁed (e.g.,
POSCO, Southern Company Services, Target Corpora-
tion). These organizations are likely using a single root
to sign intermediate certiﬁcates and then deploying these
at various endpoints where they operate TLS proxies.
5.2 Negligent Behavior

Where possible, we installed and characterized per-
sonal ﬁrewall software from many of the most common
companies whose names were provided in the Issuer
Organization, Issuer Organizational Unit, and Issuer
Common Name ﬁelds of our collected certiﬁcates. We
characterized the behavior of these solutions when run-
ning behind our own TLS proxy (setup using sslsplit and
ARP poisoning) which issued certiﬁcates signed by an
untrusted CA. While most solutions properly rejected
our forged certiﬁcates, Kurupira, a parental ﬁlter that is
responsible for 267 proxied connections in our dataset,
did not. When visiting google.com and gmail.com, Ku-
rupira replaced our untrusted certiﬁcate with a signed
trusted one, thus allowing attackers to perform a trans-
parent man-in-the-middle attack against Kurupira users
without having to compromise root stores. In contrast,
BitDefender not only blocked this forged certiﬁcate, but
also blocked a forged certiﬁcate that resolved to a new
root we installed.

We found TLS proxies that generate substitute cer-
tiﬁcates with weak cryptographic strength. Our original
certiﬁcate has a public key size of 2048 bits. However, we
found that 5,951 (50.59%) substitute certiﬁcates have
public key sizes of 1024 bits and 21 certiﬁcates have
public key sizes of 512 bits. In addition, 23 (0.20%) TLS
proxies generated substitute certiﬁcates that used MD5

555for signing, 21 (0.18%) which were also 512 bit keys. In-
terestingly, some TLS proxies generated certiﬁcates that
have better cryptographic strength than our certiﬁcate.
Seven (0.06%) used certiﬁcates with a key size of 2432
and ﬁve (0.04%) used SHA-256 for signing.

In addition to problems with cryptographic strength,
we discovered that 49 (0.42%) substitute certiﬁcates
claim to be signed by DigiCert, though none of them
actually are. The original certiﬁcate from our secure
web server is issued by DigiCert High Assurance CA-3,
indicating the TLS proxy likely copied this ﬁeld when
creating the substitute. It is alarming that a TLS proxy
would opt to copy this ﬁeld, as it signiﬁes a masquerading
as the legitimate authority.
It is possible that these
proxies are operated by malicious individuals doing their
best to not be detected by the user.

Finally, we note that 110 substitute certiﬁcates have
modiﬁcations to the subject ﬁeld. For 51 (0.43%) certiﬁ-
cates, the subject did not match our website’s domain.
In many cases a wildcarded IP address was used that
only designated the subnet of our website. In two cases
the substitute certiﬁcate is issued to the wrong domain
entirely: mail.google.com and urs.microsoft.com.
These certiﬁcates appear to be legitimate for those do-
mains and properly validate back to GeoTrust and Cy-
bertrust roots, respectively.

6. RELATED WORK

The most closely related work in this ﬁeld is a recent
paper by Huang et al., which independently develops a
measurement tool that is similar to ours and conducts
a measurement study of TLS proxies that intercept the
Facebook website [9]. Generally speaking, the advantage
of Huang’s methodology is that they may ﬁnd proxies
speciﬁcally targeting Facebook, whereas the advantage
of our methodology is that we may detect proxies that
intentionally whitelist a popular sites such as Facebook
in order to avoid detection. A limitation of our method is
that we cannot collect data from users with ad blockers.
Thus results from Huang must be read with the postﬁx
of “for facebook.com users,” and results from our study
must be read with the postﬁx of “for Internet users
permitting ads.”

In comparing our results to Huang, there are both
similarities and diﬀerences. When inspecting the Issuer
Field of substitute certiﬁcates, 13 of the 20, and 8 of
the top 10 issuers also appear in Huang’s measurements.
Some of the bad actors we ﬁnd (Sendori and IopFailZe-
roAccessCreate) were also found by Huang, in addition
to some of the behavior by Kurupira. However, there
are also some major diﬀerences between the results in
these studies. The prevalence of proxies in our study
is roughly twice what was measured by Huang (0.41%
versus 0.20%). In addition, we ﬁnd a wider array of
malware, deceptive practices, and suspicious circum-
stances. Our measurements of WebMakerPlus represent
malware found only in our study. Likewise, the presence

of infections from Sweesh and AtomPark are unique to
our study. We are the ﬁrst to identify a parental ﬁlter
replacing an untrusted certiﬁcate with a trusted one.

There are also some diﬀerences between the character-
istics of the substitute certiﬁcates detected in our study
and Huang. For instance, we ﬁnd that chain depths of
two or more certiﬁcates are more common. Chains with
a depth of two or more certiﬁcates accounted for 20%
of our substitute chains and 9% of Huang’s. Note that
the legitimate chains in both studies had a chain depth
of two. In addition, 68 of our proxy results contained
a chain depth of 5, compared to only 2 reported by
Huang. Due to these depth diﬀerences, we also found
more certiﬁcate chain sizes larger than 1000 bytes (20%
vs 9%). We also see diﬀerences in the public key sizes
of substitute certiﬁcates when comparing our results to
those of Huang. In particular, we ﬁnd less certiﬁcates
using 512-bit key lengths (us: 21, Huang: 119) and the
presence of keys larger than 2048 (us: 7, Huang: 0).

The only other paper to ﬁnd evidence of TLS proxies
is the work from The Netalyzer project, which analyzes
the root store of Android devices [22]. Their primary
ﬁndings include the use of manufacturer and vendor-
speciﬁc certiﬁcates, the presence of unusual root certs,
and third party apps that manipulate the root store.
In addition, they ﬁnd one case of a TLS proxy, out of
15,000 assessed TLS sessions. It is diﬃcult to compare
the prevalence (1 in 15K) to rates found by Huang and
this paper because the sample is from users choosing to
download the Netalyzer App.

A large body of work seeks to detect and prevent
TLS proxies, generally regarding them as MitM attacks.
Clark and van Oorschot [4] provide an extensive survey
of this area, covering solutions that work with the CA
system such as pinning [8], TACK [16], and Certiﬁcate
Transparency [12, 21], as well as those that seek to vali-
date self-signed certiﬁcates such as Convergence [15]. A
lesser-known group of solutions acknowledges that there
is an industry need for TLS inspection and some IETF
drafts suggest notifying users when a proxy is present
[18, 14] or even sharing session keys with proxies explic-
itly [19]. Our recent work surveying users indicates a
strong pragmatic approach to TLS inspection, with will-
ingness to allow this technique by employers, provided
notiﬁcation and consent is obtained [20].

7. CONCLUSION

Our work highlights the need for stronger protection
and monitoring of the root store used by devices and
browsers. The only way for TLS proxies to avoid a
browser warning is if they generate substitute certiﬁcates
that are valid; aside from compromising a certiﬁcate
authority, both benevolent and malicious parties need
to insert a certiﬁcate into the root store. Modifying the
root store should require administrative privileges, and
monitoring software should be used to remove certiﬁcates

556from the store that are considered malicious or that are
run by untrustworthy organizations.

In addition, better measurement tools are needed to
understand the prevalence and nature of SSL proxies.
The method used by Huang is still viable, but only works
to detect proxies aﬀecting a single server. Our measure-
ments indicate that this undercounts proxies when that
server is well-known, and yet measuring at well-known
servers is the only way to get large amounts of data with
this method. Using a Flash advertisement provides a
scalable and robust method for detecting proxies, but
this does not work if a user has an ad blocker installed.
Moreover, we have found that most advertising net-
works no longer allow these types of advertisements. In
the future, a community-driven, voluntary measurement
platform would signiﬁcantly help to collect these types
of measurements.
8. ACKNOWLEDGMENTS

This work was supported by a 2014 Google Faculty
Research Award, Sandia National Laboratories, and the
National Science Foundation under Grant No. CNS-
1528022. Any opinions, ﬁndings, and conclusions or
recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of
the National Science Foundation.
9. REFERENCES
[1] H. Adkins. An update on attempted

man-in-the-middle attacks.
http://googleonlinesecurity.blogspot.com/2011/
08/update-on-attempted-man-in-middle.html.

[2] A. Barth, C. Jackson, and J. C. Mitchell. Robust

defenses for cross-site request forgery. In
Proceedings of the 15th ACM Conference on
Computer and Communications Security, pages
75–88. ACM, 2008.

[3] T. Chiu. The growing need for SSL inspection.

http://www.bluecoat.com/security/security-
archive/2012-06-18/growing-need-ssl-inspection/,
2011. Accessed: 27 February, 2014.

[4] J. Clark and P. C. van Oorschot. SoK: SSL and

HTTPS: Revisiting past challenges and evaluating
certiﬁcate trust model enhancements. In IEEE
Symposium on Security and Privacy (SP), 2013.

[5] X. d. C. de Carnavalet and M. Mannan. Killed by

proxy: Analyzing client-end tls interception
software. In Network and Distributed System
Security Symposium (NDSS), 2016.

[6] Z. Durumeric, J. Kasten, M. Bailey, and J. A.
Halderman. Analysis of the HTTPS certiﬁcate
ecosystem. In ACM Internet Measurement
Conference (IMC), 2013.

[7] P. Eckersley. A syrian man-in-the-middle attack

against facebook.
https://www.eﬀ.org/deeplinks/2011/05/syrian-
man-middle-against-facebook, May 2011.

[8] C. Evans and C. Palmer. Certiﬁcate pinning

extension for HSTS.
http://tools.ietf.org/html/draft-evans-palmer-
hsts-pinning-00. Accessed: 22 March, 2013.

[9] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson.

Analyzing forged SSL certiﬁcates in the wild. In
IEEE Symposium on Security and Privacy (SP),
2014.

[10] G. Huston. Counting DNSSEC. https:

//labs.ripe.net/Members/gih/counting-dnssec.
Accessed: 26 February, 2014.

[11] C. Jackson, A. Barth, A. Bortz, W. Shao, and

D. Boneh. Protecting browsers from DNS rebinding
attacks. ACM Transactions on the Web (TWEB).
[12] B. Laurie, A. Langley, and E. Kasper. Certiﬁcate

transparency, IETF RFC 6962.
http://tools.ietf.org/html/rfc6962, Jun 2013.

[13] W. Lian, E. Rescorla, H. Shacham, and S. Savage.

Measuring the practical impact of DNSSEC
deployment. In USENIX Security Symposium,
2013.

[14] S. Loreto, J. Mattsson, R. Skog, H. Spaak, G. Gus,

and M. Hafeez. Explicit trusted proxy in
HTTP/2.0, Internet Draft.
http://tools.ietf.org/html/draft-loreto-httpbis-
trusted-proxy20-01, February 2014.

[15] M. Marlinspike. SSL and the future of authenticity.

Black Hat USA, 2011.

[16] M. Marlinspike and T. Perrin. Trust assertions for

certiﬁcate keys. http://tack.io/, 2013.

[17] MaxMind. Geolite. http://dev.maxmind.com/

geoip/legacy/geolite/#IP Geolocation. Accessed:
27 February, 2014.

[18] D. McGrew, D. Wing, Y. Nir, and P. Gladstone.
TLS proxy server extension, Internet-Draft, TLS
Working Group. http://tools.ietf.org/html/draft-
mcgrew-tls-proxy-server-01, July 2012.

[19] Y. Nir. A method for sharing record protocol keys

with a middlebox in TLS, Internet-Draft, TLS
Working Group. http://tools.ietf.org/html/draft-
nir-tls-keyshare-02, March 2012.

[20] S. Ruoti, M. O’Neill, D. Zappala, and K. Seamons.
User attitudes toward the inspection of encrypted
traﬃc. In Symposium on Usable Privacy and
Security (SOUPS), 2016.

[21] M. D. Ryan. Enhanced certiﬁcate transparency
and end-to-end encrypted mail. In Network and
Distributed System Security Symposium (NDSS).
Internet Society, 2014.

[22] N. Vallina-Rodriguez, J. Amann, C. Kreibich,

N. Weaver, and V. Paxson. A tangled mass: The
android root certiﬁcate stores. In ACM Conference
on Emerging Networking Experiments and
Technologies (CoNEXT). ACM, 2014.

557