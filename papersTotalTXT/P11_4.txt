Chrome	  Extensions:	  Threat	  Analysis	  

and	  Countermeasures	  

Lei	  Liu,	  Xinwen	  Zhang*,	  Guanhua	  Yan*,	  and	  Songqing	  Chen	  

George	  Mason	  University	  

Huawei	  R&D	  Center	  

Los	  Alamos	  NaIonal	  Laboratory	  	  

NDSS’12	  	  

*	  Does	  not	  represent	  employer’s	  opinion	  

AOacks	  via	  Extensions	  

•  Extension	  is	  the	  vehicle	  for	  increasing	  aOacks	  	  

•  BHO/add-­‐on	  is	  the	  one	  of	  the	  techniques	  used	  by	  

many	  spyware	  writers	  in	  IE.	  

•  Kida	  et	  al’05,	  CERT’05,	  Egele’07,	  Li’07,	  Guha’11	  

•  Abusing	  of	  Firefox	  extensions	  has	  been	  widely	  

recognized	  and	  studied	  in	  literature	  

•  Defcon’09,	  Ter-­‐Louw’08,	  Dhawan’09,	  Bandhakav’10,	  
Djeric’10,	  Guha’11	  

AOacks	  via	  Chrome	  Extensions	  

•  Buggy	  Chrome	  extensions	  have	  been	  

idenIﬁed	  recently	  	  

•  27	  out	  of	  100	  leak	  data	  

–  hOp://www.adrienneporterfelt.com/blog/?p=226_	  

•  Malicious	  extensions	  have	  appeared	  

Problem	  Statement	  

•  Why	  Chrome	  extension?	  

–  Chrome	  has	  built-­‐in	  security	  model	  for	  browser	  architecture	  and	  extension	  

• 

• 

• 

• 

Is	  current	  Chrome	  extension	  architecture	  good	  enough?	  	  
– 
ParIcularly	  with	  the	  consideraIon	  of	  malicious	  extensions	  

It	  is	  a	  diﬃcult	  task	  to	  saniIze	  rapidly	  increasing	  extensions	  in	  Google	  Chrome	  Web	  Store	  with	  slow	  reviewing	  
process	  

Easy	  to	  launch	  malicious	  extensions:	  	  
– 
–  Users	  are	  free	  to	  download/install	  extensions	  from	  many	  (known/unknown)	  host	  servers	  	  
– 

Strong	  incenIve	  for	  aOackers,	  e.g.,	  	  

harvest	  sensiIve	  content	  in	  web	  pages	  

• 
•  Modify	  web	  search	  content	  	  

Google	  takes	  acIons	  against	  malicious	  extension	  developers	  
– 
–  Domain	  veriﬁcaIon	  for	  developers	  	  

singup	  fee	  for	  developers	  

Problem:	  Can	  we	  have	  a	  technical	  soluIon?	  
–  Or	  improvement	  	  of	  current	  permission	  model	  for	  beOer	  security	  with	  malware	  extension?	  	  

ContribuIons	  

•  We	  demonstrate	  several	  aOacks	  with	  malicious	  Chrome	  

extensions	  through	  experimental	  implementaIon	  

•  We	  do	  security	  analysis	  of	  the	  permission	  model	  of	  

Chrome	  extension	  
–  With	  the	  assumpIon	  of	  malicious	  extensions	  

•  We	  propose	  security	  enhanced	  extension	  permission	  

model	  and	  enforcement	  mechanism	  
–  Following	  the	  principles	  of	  least	  privilege	  and	  separaIon	  of	  

privilege	  in	  more	  strict	  way	  

Chrome	  Extension	  Architecture	  

Web	  server	  

Extension	  gallery	  

installaIon	  

Localstorage	  

Cookies	  

JS	  

DOM	  

Render	  

Content	  

Script	  (java	  script)	  

Isolated	  World	  

Extension	  

(HTML/Javascript)	  

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

NaIve	  
code	  

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

Chrome	  Extension	  Security	  Model	  

Least	  Privilege	  
–  Pre-­‐deﬁned	  permission	  set	  (e.g.,.	  To	  access	  web	  sites,	  browser	  tab,	  bookmarks,	  history,	  …)	  
–  Each	  extension	  declares	  permissions	  required	  
–  User	  authorizes	  permissions	  at	  installaIon	  Ime	  

Privilege	  SeparaIon	  
–  Diﬀerent	  permissions	  for	  diﬀerent	  components	  of	  extension	  
–  Content	  script	  can	  interact	  with	  web	  content,	  not	  browser	  modules	  
–  Extension	  core	  has	  more	  privileges,	  but	  insulated	  from	  web	  pages	  

• 

• 

• 

–  Process-­‐level	  isolaIon:	  extension	  core	  runs	  in	  separated	  process	  from	  renderer	  and	  browser	  
–  Within	  a	  renderer	  process,	  content	  script	  runs	  in	  isolated	  world	  from	  Javascript	  of	  web	  page	  

Strong	  isolaIon	  
–  Same	  origin	  policy	  

•  Each	  extension	  has	  unique	  origin	  
•  Accessing	  other	  origins	  requires	  cross-­‐site	  permissions	  
• 

Inject	  content	  script	  requires	  cross-­‐site	  permissions	  

Chrome	  Extension	  Trust	  Model	  

•  The	  main	  trust	  model	  of	  Chrome	  extension	  

assumes	  trusted	  but	  buggy	  extensions	  

•  But	  malicious	  web	  pages	  
•  Therefore	  the	  security	  objecIves	  are	  mainly	  for	  

restricIng	  web	  pages	  to	  access	  browser	  
resources	  via	  extensions	  

•  And	  conﬁne	  the	  damage	  propagaIon	  if	  possible	  

Experimental	  AOacks	  

•  We	  develop	  a	  malicious	  extension	  as	  a	  bot	  

– 	  from	  Chrome	  7	  to	  the	  latest	  
– does	  email	  spamming,	  DDoS,	  and	  phishing	  aOacks	  

easily	  	  
•  Through	  aOacking	  web	  pages	  

– Receive	  commands	  from	  bot	  master	  with	  built-­‐in	  

update	  mechanism	  of	  Chrome	  extension	  
•  No	  security	  check	  for	  update	  	  

Email	  Spamming	  

Upload	  
	  update	  

update	  

site	  

Webmail	  
	  server	  

POST	  

POST	  

Browser	  

download	  update	  

manipulate	  

Extension	  

Password	  Sniﬃng	  

DDoS	  AOack	  

Security	  Analysis	  	  

•  Trust	  Model:	  	  

trustworthy	  

–  We	  assume	  browser	  kernel	  and	  pulgins	  are	  
–  Sandbox	  mechanism	  provided	  by	  OS	  works	  well	  
–  NaIve	  code	  for	  extensions	  is	  sandboxed	  
–  Web	  apps	  are	  trusted	  

•  Threat	  model:	  malicious	  extensions	  

–  Extension	  core	  
–  Content	  scripts	  

Cross-­‐site	  Forgery	  with	  Content	  Script	  

Web	  server	  

• 

• 

• 

• 

A	  content	  script	  injected	  into	  web	  page	  can	  
arbitrary	  access	  the	  origin	  of	  the	  page	  

All	  user	  credenIals	  associated	  with	  the	  origin	  
can	  be	  included	  in	  an	  HTTP	  req	  

Since	  the	  origin	  of	  the	  content	  script	  is	  usually	  
not	  that	  of	  the	  web	  page	  

This	  is	  a	  Cross-­‐site	  Forgery	  Req	  
The	  email	  spamming	  aOack	  leverages	  this	  

– 
– 

Default	  privileges	  of	  content	  script	  are	  not	  least	  

Localstorage	  

Cookies	  

JS	  

DOM	  

Render	  

Content	  

Script	  (java	  script)	  

Isolated	  World	  

Extension	  

(HTML/Javascript)	  

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

Cross-­‐site	  Requests	  with	  Extension	  Core	  

Web	  server	  

• 
• 

• 
• 

Cross-­‐site	  reqs	  via	  content	  scripts	  through	  extension	  core	  
The	  extension	  core	  can	  ﬁle	  cross-­‐site	  HTTP	  reqs	  to	  mulIple	  origins	  	  
– 
Cross-­‐site	  permissions	  are	  authorized	  in	  order	  to	  inject	  content	  scripts.	  	  

Default	  privileges	  of	  extension	  core	  are	  not	  least	  
No	  diﬀerenIated	  permission	  of	  extension	  core	  and	  content	  script	  

– 

Inject	  scripts	  vs.	  cross-­‐site	  reqs	  

Content	  

Script	  (java	  script)	  

Isolated	  World	  

Render	  

Extension	  

(HTML/Javascript)	  

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

Content	  

Script	  (java	  script)	  

Isolated	  World	  

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

Cross-­‐site	  Requests	  with	  Content	  Scripts	  

•  Without	  cross-­‐site	  permission,	  a	  running	  content	  script	  can	  

only	  make	  HTTP	  reqs	  to	  the	  origin	  of	  the	  tab	  page	  

Web	  server	  

DOM	  

Localstorage	  

Cookies	  

JS	  

Render	  

Content	  

Script	  (java	  script)	  

Isolated	  World	  

• 

• 

• 

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

However,	  since	  content	  script	  has	  full	  privileges	  of	  DOM,	  it	  
can	  ﬁle	  unlimited	  cross-­‐site	  HTTP	  reqs	  to	  arbitrary	  origin,	  e.g.,	  	  

Insert	  iframe	  	  
Load	  img	  

– 
– 
–  Modify	  src	  of	  DOM	  objects	  
–  With	  user	  credenIals	  included	  in	  the	  req	  

Loading	  of	  new	  DOM	  objects	  results	  in	  cross-­‐site	  reqs	  

Privilege	  to	  access	  DOM	  is	  not	  least	  for	  content	  script	  

Extension	  

(HTML/Javascript)	  

UndiﬀerenIated	  Permissions	  

• 

Web	  server	  

An	  extension	  may	  inject	  content	  script	  to	  many	  
origins	  
– 
–  But	  only	  to	  a	  dedicated	  one,	  e.g.,	  a	  	  translaIon	  web	  

It	  does	  not	  need	  to	  ﬁle	  HTTP	  reqs	  to	  all	  origins	  

service	  

•  When	  an	  origin	  is	  assigned	  to	  extension,	  all	  

components	  get	  the	  full	  privileges	  
– 
–  Content	  script	  can	  arbitrarily	  modify	  the	  DOM,	  and	  ﬁle	  

Extension	  core	  can	  ﬁle	  cross-­‐site	  reqs	  freely	  

cross-­‐sit	  reqs	  

DOM	  

Localstorage	  

Cookies	  

JS	  

Render	  

Content	  

Script	  (java	  script)	  

Isolated	  World	  

• 

	  

y
r
a
d
n
u
o
b
	  
s
s
e
c
o
r
P

Privilege	  separaIon	  is	  not	  ﬁne-­‐grained	  enough	  	  

Extension	  

(HTML/Javascript)	  

permissions”:	  [“hOp://*/
*”	  ]	  

19	  out	  of	  30	  
most	  popular	  
extensions	  have	  
this	  type	  of	  over	  
privileges	  

Security	  Enhanced	  Chrome	  Extensions	  
•  Micro-­‐privilege	  management	  

•  DiﬀerenIate	  DOM	  elements	  with	  sensiIvity	  

Micro-­‐privilege	  Management	  
•  More	  ﬁne-­‐grained	  permission	  deﬁniIon	  and	  enforcement	  	  
•  Fine-­‐grained	  permission	  diﬀerenIaIon	  for	  extension	  core	  and	  

content	  script	  
–  Permission	  specs	  are	  separated	  from	  diﬀerent	  components	  

•  Least	  default	  privileges	  	  

–  Content	  script	  cannot	  introduce	  new	  origin	  to	  DOM	  
–  no	  HTTP	  req	  to	  tab	  origin	  

Example	  Permission	  Spec	  
•  Permissions	  for	  a	  translaIon	  extension:	  	  

DiﬀerenIaIng	  DOM	  Elements	  

•  To	  further	  reduce	  possible	  sensiIve	  data	  leakage	  by	  content	  
script,	  DOM	  elements	  can	  be	  diﬀerenIated	  with	  sensiIvity	  
levels	  

•  A	  web	  app	  developer	  can	  idenIfy	  sensiIve	  informaIon	  in	  a	  

web	  page,	  e.g.,	  	  
–  High	  level	  data:	  only	  can	  ﬂow	  to	  web	  origin	  
–  Medium	  level:	  may	  ﬂow	  to	  authorized	  origins	  
–  Low	  level	  (default):	  can	  ﬂow	  to	  any	  origin	  

•  An	  extension	  developer	  	  can	  specify	  permissions	  

accordingly:	  
–  E.g.,	  HIGH	  for	  username/pw,	  MEDIUM	  for	  other	  user	  info	  

ImplementaIon	  

•  We	  have	  implemented	  the	  micro-­‐privilege	  management	  

and	  spec.	  

•  For	  DOM	  sensiIvity,	  we	  develop	  a	  helper	  extension	  

(trusted):	  	  
–  To	  idenIfy	  and	  label	  sensiIve	  DOM	  elements	  
–  Re-­‐write	  DOM	  element	  properIes	  
•  According	  to	  conﬁgurable	  dicIonary	  	  

–  Chrome	  enforces	  permission	  check	  based	  on	  extension	  manifest	  	  
–  Explicitly	  mark	  sensiIve	  info	  by	  web	  app	  developer	  is	  not	  pracIcal	  

right	  now	  	  

EvaluaIons	  

EvaluaIon	  

•  We	  selected	  30	  most	  popular	  extensions	  from	  Google	  extension	  gallery	  

–  24	  of	  them	  have	  granted	  network	  access	  
–  19	  of	  them	  request	  higher	  privileges	  than	  necessary	  (hOp://*/*)	  

•  Our	  implementaIon	  easily	  changes	  their	  spec	  to	  reduce	  privileges	  	  

EvaluaIon	  

•  Our	  implementaIon	  blocks	  all	  experimental	  

aOacks	  on	  the	  bot	  extension.	  	  

Conclusions	  

•  Demonstrated	  spamming,	  phishing,	  and	  DDoS	  aOacks	  

with	  implemented	  Chrome	  extensions	  

•  Analyzed	  the	  permissions	  model	  that	  causes	  these	  

problems	  

•  Proposed	  security	  enhanced	  permission	  model	  and	  

enforcement	  for	  Chrome	  extension	  architecture	  	  
–  Micro-­‐privileged	  permission	  management	  and	  spec	  
–  DiﬀerenIate	  content	  script’s	  permission	  with	  DOM	  

sensiIvity	  levels	  

Thank	  You!	  

Q&A	  

