CensorSpoofer: Asymmetric Communication using IP

Spooﬁng for Censorship-Resistant Web Browsing

Qiyan Wang

Xun Gong

Dept. of Computer Science,

Dept. of Electrical & Computer

UIUC

qwang26@illinois.edu

Engineering, UIUC

xungong1@illinois.edu

Giang T. K. Nguyen

Dept. of Computer Science,

UIUC

nguyen59@illinois.edu

Amir Houmansadr

Dept. of Computer Science,

UT Austin

houmansadr@utexas.edu

Nikita Borisov

Dept. of Electrical & Computer

Engineering, UIUC
nikita@illinois.edu

ABSTRACT
A key challenge in censorship-resistant web browsing is be-
ing able to direct legitimate users to redirection proxies while
preventing censors, posing as insiders, from discovering their
addresses and blocking them. We propose a new framework
for censorship-resistant web browsing called CensorSpoofer
that addresses this challenge by exploiting the asymmet-
ric nature of web browsing traﬃc and making use of IP
spooﬁng. CensorSpoofer de-couples the upstream and down-
stream channels, using a low-bandwidth indirect channel for
delivering upstream messages (URLs) and a high-bandwidth
direct channel for downloading web content. The upstream
channel hides the request contents using steganographic en-
coding within Email or instant messages, whereas the down-
stream channel uses IP address spooﬁng so that the real ad-
dress of the proxy is not revealed either to legitimate users
or censors. We built a proof-of-concept prototype that uses
encrypted VoIP for this downstream channel and demon-
strated the feasibility of using the CensorSpoofer framework
in a realistic environment.

Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design—Network communications; C.2.0
[Computer-Communication Networks]: General—Se-
curity and protection

Keywords
Censorship resistance, asymmetric communication, IP spoof-
ing, Voice-over-IP

1.

INTRODUCTION

Today, the Internet is playing an ever-increasing role in
social and political movements around the world. Activists

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.

use it to coordinate their activities and to inform the gen-
eral people of important information that is not available
via traditional media channels. The role played by Twitter,
Facebook, YouTube, CNN iReport and many other web-
sites/blogs in the recent events in the Middle East is a great
example of this [34, 47].

The free ﬂow of information and exchange of ideas on the
Internet have been perceived as a serious threat by repressive
regimes. In response, they have imposed strong censorship
on the Internet usage of their citizens. They monitor, ﬁl-
ter, trace, and block data ﬂows using sophisticated technolo-
gies, such as IP address blocking, DNS hijacking, and deep
packet inspection [32, 50]. For example, the “Great Firewall
of China” blocks almost all popular social networks, such as
Facebook, Twitter and Flickr, and other websites that may
provide political information contrary to the state’s agenda,
such as Youtube, Wikipedia, BBC News, and CNN [60]. To
exercise control over the Internet, the Chinese government
employs an Internet police force of over 30 000 people to
constantly monitor the citizens’ online activities [45], and
an individual who is caught violating the laws of Chinese
censorship is subject to payment of ﬁnes [24].

There are many tools that aim to circumvent such cen-
sorship [1, 2, 40, 48]; a typical approach is to deploy a redi-
rection proxy that provides access to blocked sites. Cen-
sors are, however, eager to locate such proxies and block
them as well; a particularly powerful approach is the in-
sider attack, wherein censors pretend to be legitimate users
of the service in order to locate and shut down the prox-
ies. Limiting the amount of information each user gets and
trying to identify compromised insiders can partially miti-
gate this attack [51, 52, 56]; however, these techniques are
unlikely to survive a powerful adversary who can deploy a
very large number of corrupt users. An alternate approach
is to never reveal the proxies’ addresses to users and thus
be completely immune to the insider attack. Some recent
work suggests strategically placing special deﬂection routers
at core Internet ISPs to transparently redirect users’ traﬃc
to the proxies [44, 49, 59]. Such a deployment, however re-
quires a signiﬁcant resource investment that is likely to come
only from a (pro-Internet freedom) government agency, as
well as cooperation of large ISPs.

We propose a new approach, CensorSpoofer, that can be
deployed using minimal resources, perhaps volunteered by
ordinary people interested in promoting Internet freedom.

121(The Tor project [40] has demonstrated the feasibility of
building a successful service with contributions from such
volunteers.) Our key insight is that it is possible to use
IP address spooﬁng to send data from the proxy to a user
without revealing its actual origin. Such a spoofed channel
allows communication in a single direction only; however,
we can exploit the asymmetric nature of web-browsing traf-
ﬁc, using a low-bandwidth indirect channel, such as stegano-
graphic instant messages or Email, to communicate requests
from the user to the proxy. To avoid identiﬁcation by the
censor, CensorSpoofer mimics an encrypted VoIP session to
tunnel the downstream data, since the VoIP protocol does
not require endpoints to maintain close synchronization and
does not reveal its contents to the censor. We also explore
additional steps that need to be taken to prevent detection,
namely, choosing a plausible fake IP source address.

To demonstrate the feasibility of CensorSpoofer, we built
a proof-of-concept prototype implementation and tested it
in a real-world environment. Our experiments show that
our prototype can be successfully used for browsing the web
while resisting blocking eﬀorts of the censors.

The rest of this paper is organized as follows. We intro-
duce the related work in Section 2. Section 3 presents the
basic concepts, including the threat model and system goals.
Section 4 describes the framework of CensorSpoofer.
In
Section 5, we elaborate a concrete design of CensorSpoofer
based on VoIP, and analyze its security in Section 6. Sec-
tion 7 presents our prototype implementation and the eval-
uation results. We conclude in Section 8.

2. RELATED WORK

In response to Internet censorship, many pragmatic sys-
tems such as Dynaweb/freegate [1], Ultrasurf [2], and Psiphon
[48] have been developed to help people bypass censorship.
All these systems are based on a simple idea:
let the user
connect to one of the proxies deployed outside the censor’s
network, which can fetch blocked webpages for the user. To
hide the nature of the traﬃc, the communications with the
proxy are encrypted. Infranet [41] takes things a step fur-
ther, embedding the real communication inside a cover web
session, using covert channels to communicate the request
and image steganography to return the data. However, while
escaping detection by outsiders, these designs are vulnera-
ble to the insider attack, where the censor pretends to be an
ordinary user to locate the proxies and then block them.

Tor [40] also uses proxies (called bridges, run by volun-
teers) to resist censorship, but employs more advanced strate-
gies to limit the distribution of proxies’ IP addresses. So far,
Tor has tried four diﬀerent distribution strategies. First,
each user would receive a small subset of bridges based on
his or her IP address as well as the current time. Second,
a small subset of bridges could be obtained by sending a
request via Gmail. These strategies fail to protect against
an adversary who has access to a large number of IP ad-
dresses and Gmail accounts; Chinese censors were able to
enumerate all bridges in under a month [3].
(McLachlan
and Hopper further showed that open proxies could be used
to gain access to a large number of IP addresses [53]). The
third strategy involves distributing bridge addresses to a few
trusted people in censored countries in an ad hoc manner,
who then disseminate this information to their social net-
works. Fourth, an individual can deploy a private bridge
and give the bridge’s address only to trusted contacts. These

methods can resist bridge discovery but reach only a limited
fraction of the population of potential bridge users.

Several researchers have tried to design better proxy dis-
tribution strategies [42, 51, 52, 56] that aim to identify users
who are likely to lead to a proxy being blocked using past
history and directing new proxy information towards other
users. However, these designs are not likely to withstand a
censor who controls a large number of corrupt users.

TriangleBoy [4] is a circumvention system that is similar
in spirit to Tor-bridge and also uses IP spooﬁng. In Trian-
gleBoy, a user connects to one of the TriangleBoy proxies
run by volunteers, and the proxy forwards the user’s URLs
to a SafeWeb server, which fetches the web pages and sends
them back to the user by spooﬁng the source IP address with
the proxy’s IP. The only diﬀerence between Tor-bridge and
TriangleBoy is that in Tor the downstream traﬃc takes the
same route (through several relays) as the upstream traf-
ﬁc, while in TriangleBoy the server sends the downstream
traﬃc to the user directly using IP spooﬁng to improve ef-
ﬁciency. Note that, in spite of using IP spooﬁng, the Tri-
angleBoy proxies are still exposed to users, which raises the
same problem to the insider attack as Tor bridges; whereas,
CensorSpoofer adopts a diﬀerent architecture by using IP
spooﬁng to conceal the proxy’s IP address, and hence is im-
mune the insider attack.

Similar to CensorSpoofer, another school of prior research
tries to fundamentally resist the insider attack, i.e., toler-
ating any fraction of corrupt users, by hiding the proxy’s
IP from any user and therefore the censors. One way to
achieve this is to utilize indirect channels, i.e., relaying the
traﬃc sent to/by the proxy through one or more intermedi-
ate nodes. For example, MailMyWeb [5] and FOE [6] utilize
Email as the indirect channel. For these systems, users are
required to be able to access foreign servers that support
encryption (e.g., Gmail), in order to avoid being detected
by the censor. Nevertheless, considering the Chinese gov-
ernment once temporarily blocked Gmail [35], we can envi-
sion that the censor would again block the few special Email
providers upon ﬁnding out they are popularly used to bypass
censorship.

It is important to note that, while CensorSpoofer also em-
ploys an indirect channel, we only use it for sending users’
requests (e.g., URLs), which are usually very small (espe-
cially after encoding URLs into small numbers) and easy to
hide into any indirect channel using steganography. This al-
lows us to obviate the need for special servers (e.g., external
Email providers supporting encryption) to provide a secured
and high-bandwidth indirect channel, and users can even use
the local Email and IM providers controlled by the censor
to access our system. Consequently, the cost of blocking the
upstream indirect channel of CensorSpoofer is signiﬁcantly
higher: the censor has to block all overseas indirect commu-
nication (e.g., overseas Email and IM).

More recently, researchers proposed several infrastructure-
assisted circumvention systems,
including Telex [59], De-
coy routing [49], and Cirripede [44]. Although these sys-
tems can support low-latency communication and perfectly
resist the insider attack, they require a signiﬁcant invest-
ment of eﬀort by large ISPs. By contrast, CensorSpoofer is
an infrastructure-independent circumvention system, allow-
ing individuals to deploy their own anti-censorship systems
without requiring support from network infrastructure.

Instead of aiming to provide low-latency communication,

122some anti-censorship systems are designed to achieve censorship-
resistant content sharing and/or distribution. For example,
some proposals leverage peer-to-peer (P2P) networks to pro-
vide privacy-preserving ﬁle sharing, e.g., Freenet [38], mem-
bership concealing overlay network [57], and darknet [7, 54].
Collage [36] let users stealthily exchange censored informa-
tion with an external proxy via a website that can host user-
generated content (e.g., Flickr) using steganography.

3. CONCEPT

3.1 Threat Model

We consider a state-level adversary (i.e., the censor), who
controls the network infrastructure under its jurisdiction.
The censor has sophisticated capabilities of IP ﬁltering, deep
packet inspection, and DNS hijacking, and can potentially
monitor, block, alter, and inject traﬃc anywhere in its net-
work. However, the censor is motivated to allow citizens to
normally access basic Internet services, such as IM, Email
and VoIP, as blocking such services would lead to economic
losses and political pressure. More speciﬁcally, we assume
the censor is unwilling to interfere with the Internet connec-
tions of a user, e.g., an ongoing VoIP conversation, unless it
has evidence that a particular connection is being used for
bypassing censorship.

Furthermore, we assume the censor generally allows peo-
ple to use common encryption protocols to protect their on-
line privacy, e.g., SRTP [28] or ZRTP [31] for secure VoIP
communication.1 Thus far, this assumption has held true
for most existing cases of Internet censorship, and the use of
encrypted protocols such as SSL/TLS have formed the foun-
dation of most existing anti-censorship systems [1, 2, 5, 6, 40,
44,48,49,59]. Once again, blocking encrypted traﬃc reduces
the security of normal citizens using the Internet for personal
or business reasons, and thus censors are motivated to allow
such traﬃc through. There have been important exceptions
to this, including Iran’s blocking of all encrypted traﬃc prior
to the 33rd anniversary of the Islamic Revolution [33] and
Egypt’s complete disconnection of the Internet in response
to nationwide protests [39]. Such drastic censorship requires
fundamentally diﬀerent circumvention approaches that are
out of scope of our work.

We assume the censor can utilize its governmental power
to force local IM, Email, and VoIP providers to censor their
users’ communication. We also assume that the censor can
block any foreign Internet website or service, such as an
Email or instant messaging provider, if it has reason to be-
lieve that it is being used to circumvent censorship. The
censor can rent hosts outside of its own network, but oth-
erwise has no power to monitor or control traﬃc outside its
network. Finally, we assume that the censor has suﬃcient
resources to launch successful insider attacks, and thus is
aware of the same details of the circumvention system as
are known to ordinary users.

Similar to many existing systems [36,40,41,44,49,59], our
approach requires that users run specialized circumvention
software on their computers. We assume that users are able
to obtain authentic copies of the software without alerting

1Although much of VoIP traﬃc is currently unencrypted,
the trend is towards more widespread use of secure VoIP
protocols; for example, a number of VoIP software clients [8–
14] and VoIP phones [15, 16] have encryption functionality.

the government to this fact through some form of out-of-
band communication. (We acknowledge, however, that se-
cure and reliable mechanisms for distributing such software
are an important area of future research.)

3.2 System Goals

CensorSpoofer aims to achieve the following goals:
Unblockability: The censor should not be able to block
CensorSpoofer without incurring unacceptable costs (e.g.,
having to block all oversea Email communication).

Unobservability: The censor should not be able to tell
whether a user is using CensorSpoofer without incurring un-
acceptable costs.

Perfect resistance to insider attacks: The censor should
not be able to break unblockability or unobservability of
CensorSpoofer even if nearly all users are compromised.

Low latency: CensorSpoofer should be able to fetch and
deliver the web pages for users with low latency. For clarity,
CensorSpoofer does not aim to support highly interactive
web applications, such as Javascript.

Deployability: CensorSpoofer should be deployable by peo-
ple with limited resources, without requiring any support
from network infrastructure.

4. CENSORSPOOFER FRAMEWORK

4.1 Overview

In censored countries, users cannot visit blocked websites
directly and have to connect to some external proxies to ac-
cess these websites. These proxies’ IP addresses are exposed
to users who connect to them, and therefore can be easily
blocked by the censor who colludes with corrupt users. A
natural solution to this is to employ indirect channels to
hide the proxy’s IP address. For example, MailMyWeb [5]
and FOE [6] use Email as the indirect channel for which the
intermediate nodes are Email servers.

To carry voluminous downstream traﬃc (e.g., web con-
tent), the indirect channel must have high bandwidth. This
requirement excludes steganographic indirect channels, such
as steganographic IM/Email. As a result, the circumvention
system has to rely on an encrypted indirect channel so as
to utilize full capacity of the indirect channel while ensuring
unobservability of the transmission of censored data. This
requires the intermediate nodes of the indirect channel to
support encryption (e.g., TLS/SSL) and reside outside the
censor’s network (to avoid eavesdropping by corrupt inter-
mediate nodes). Currently, only a few Email providers (in-
cluding Gmail, and Hotmail) can meet these requirements.
However, due to their limited user base in the censored coun-
try, the censor could simply block them altogether, as wit-
nessed by Gmail being blocked in China in 2011 [35].

Our insights. We notice that for web browsing, the up-
stream traﬃc (e.g., URLs) is much lighter-weight than the
downstream traﬃc.
If an indirect channel is only used to
send upstream messages, high bandwidth is no longer re-
quired for the indirect channel. This allows us to use any
indirect channel with steganography to transmit upstream
data. Besides, by using steganography, users can even use
local IM or Email providers that potentially collude with
the censor to access our circumvention system without be-
ing detected. The elimination of requiring special servers to
construct the indirect channel makes it substantially harder

123Figure 1: The CensorSpoofer framework. The user pretends to communicate with an external dummy host legitimately, and
sends URLs to the spoofer via a low-bandwidth indirect channel (e.g., steganographic IM/Email). The spoofer fetches blocked
webpages, and injects censored data into the downstream ﬂow towards the user by spooﬁng the dummy host’s IP.

for the censor to block our circumvention system as all over-
seas Email and IM communication has to be prohibited.

As for the downstream channel, since the proxy’s IP (i.e.,
source IP) is not used in packet routing, we can adopt IP
spooﬁng to conceal the proxy’s IP address. This eliminates
the need for an indirect channel to hide the proxy’s IP, allow-
ing us to use direct channels, which are more common and
higher-bandwidth, to send voluminous downstream traﬃc.
Our design. Based on these insights, we design a new cir-
cumvention framework for web browsing, which uses asym-
metric communication with separate upstream/downstream
channels. In particular, a user who requires circumvention
service ﬁrst starts or pretends to start a legitimate com-
munication session (e.g., a VoIP call) with a dummy host
residing outside the censor’s network, and the proxy (called
spoofer) injects censored data into the downstream ﬂow to-
wards the user by spooﬁng the dummy host’s IP, so that
the censor believes the user is legitimately communicating
with the dummy host only.
It is important to note that
the dummy host does not need to cooperate with the user
or the spoofer, but it should look legitimate to the censor,
e.g., its port for VoIP should “seem open” if the cover ses-
sion is a VoIP call. Meanwhile, the user sends URLs to the
spoofer through a low-bandwidth indirect channel, such as
steganographic IM/Email. An illustration of the framework
is provided in Figure 1.

Next, we discuss the downstream and upstream channels

in more details.

4.2 Downstream Channel

1) To conceal the spoofer’s IP address, we apply IP spoof-
ing in the downstream ﬂow. Then, the ﬁrst question is what
kind of traﬃc (TCP or UDP) is suitable for IP spooﬁng?

Generally, hijacking TCP with IP spooﬁng is diﬃcult. In
TCP, end hosts maintain connection state and acknowledge
received data. Suppose the client has established a TCP
connection with the dummy host, and the spoofer knows the
dummy host’s IP address and sequence number and tries to
inject packets containing censored data into the downstream
ﬂow. First of all, the TCP connection with the dummy host
must be kept alive; otherwise, the dummy host will send
RST packets in response to the client’s packets, which can
be easily detected by the censor. In addition, if the spoofer
sends more data to the client than the dummy host (i.e.,
the sequence number of the spoofer is higher than that of

the dummy host), the censor can detect the inconsistency of
the sequence numbers as long as the dummy host sends any
packet to the client2. Thus, the spoofer has to use the se-
quence numbers that have already been used by the dummy
host (i.e., injecting packets as “resent packets”). However,
in this case a censor with packet-recording capability can
detect the injected packets by comparing the contents of
packets with the same sequence number.

In contrast, UDP is a connectionless protocol and easier
to hijack. Unlike TCP, end hosts of UDP do not maintain
any connection state or acknowledge received data. Hence, if
the dummy host keeps “quiet” and the client and the spoofer
cooperate closely, it is feasible to deceive a smart censor
into believing that the client is legitimately communicating
with the dummy host over a duplex UDP channel. In this
work, we focus on UDP traﬃc for IP spooﬁng. We present
a concrete example of hijacking UDP in Section 5.

2) To ensure unobservability, the communication between
the client and the spoofer (and the dummy host) should look
like a normal UDP session of a legitimate Internet applica-
tion. So, the second question is what carrier applications
should be used?

UDP is mainly used for time-sensitive applications, such
as VoIP, video conferencing, multi-player online games, we-
bcam chat, online TV, etc. These applications usually have
high-bandwidth channels. Other UDP applications, such as
DNS and SNMP, have very limited bandwidth and thus are
not suitable to carry voluminous downstream traﬃc.

We can further divide these applications into two classes
based on their communication manner: (i) client-to-server
communication, e.g., multi-players online games and online
TV, and (ii) client-to-client communication, e.g., VoIP and
video chat. To achieve better robustness to blocking, we
prefer the applications in the second class, since for these
applications the pool of dummy hosts is signiﬁcantly larger
(e.g., the dummy hosts could be any VoIP client on the
Internet), making it much harder to block them altogether.
3) In CensorSpoofer, we use a dummy host as a cover to
stealthily transmit censored data. The third question is how
to select plausible dummy hosts?

2An active censor can check the dummy host’s current se-
quence number by replaying a client’s packet that is out-
side the dummy host’s receiving window; in this case the
dummy host will reply an ACK packet containing its cur-
rent sequence number.

124The selection of dummy hosts is decided by the carrier
application. For example, if the carrier application is VoIP,
then each dummy host should be a potential VoIP client.
Note that an active censor can use port scanning (e.g., us-
ing nmap [17]) to check if a dummy host is actually running
the application, i.e., listening on a particular port (e.g., port
5060 for SIP-based VoIP). In response, we can use port scan-
ning as well to obtain the list of dummy hosts. According
to our experience, a dummy host is “quiet” (i.e., not sending
any reply packet) to incoming UDP packets sent to a spe-
ciﬁc port, as long as this port is not “closed” on the dummy
host. In many cases, port scanning is unable to determine
whether a particular application is running on a target ma-
chine, since the target machine could be behind a ﬁrewall
that is conﬁgured to ﬁlter probe packets. For example, nmap
returns “open|ﬁltered” or “closed|ﬁltered” when it cannot tell
whether the port is open/closed or the probe is ﬁltered. This
ambiguity plays in our favor as it makes a larger number of
hosts appear to be plausible VoIP endpoints.

4) Finally, we note that not all Internet hosts can launch
IP spooﬁng. Some ASes apply ingress and/or egress ﬁltering
to limit IP spooﬁng. The MIT ANA Spoofer project [18] has
collected a wide range of IP spooﬁng test results, showing
that over 400 ASes (22%) and 88.7M IPs (15.7%) can be
used to launch IP spooﬁng. Therefore, we need to deploy
our spoofer in the ASes where IP spooﬁng is not prohibited.
We can utilize some tools, such as nmap and the spooﬁng
tester developed by the Spoofer project [18], to test whether
a host can perform IP spooﬁng.
4.3 Upstream Channel

To send upstream messages, each user uses a stegano-
graphic channel embedded in indirect communications such
as IM and Email. Note that URLs are typically quite short
and can be easily embedded into a small number of messages.
Communication requirements can be further reduced by us-
ing a pre-agreed list of censored URLs and sending just the
index of the desired site. Likewise, navigation within a site
can use relative link numbering, requesting, e.g., the 3rd link
from the front page of www.cnn.com. Note that steganography
requires the use of a secret encoding key to remain invisible;
this process can be made resilient to insider attacks by hav-
ing each user register a separate pairwise key when joining
the system. Speciﬁc steganographic constructions and their
security are beyond the scope of this work. An important
challenge that we must address, however, is the possibility
that the censor will perform blocking based on the recipi-
ent’s IM identiﬁer or Email address; we discuss a solution in
Section 5.2.

5. A DESIGN OF CENSORSPOOFER

The CensorSpoofer framework can be instantiated using
a number of protocol choices. In this section, we present a
concrete design based on VoIP. We start with some back-
ground about VoIP systems.
5.1 Background of SIP-based VoIP

VoIP is an Internet service that transmits Voice over IP-
based networks. It employs session control protocols, such as
SIP, MGCP, and H.323, to setup and tear down calls. SIP is
one of the most widely used VoIP signal protocols, because
of its light weight. In this work, we focus on SIP-based VoIP
systems.

Alice

atlanta.com

proxy

biloxi.com

proxy

Bob

INVITE M1

Trying M3

Ringing M8

OK M11

ACK M12

INVITE M4

Ringing M6

OK M9

ACK M14

INVITE M2

Trying M5

Ringing M7

OK M10

ACK M13

Media Session

BYE M15

OK M16

Figure 2: An example of a SIP session (registrars and loca-
tion services are not shown).

SIP is an application layer protocol. It can run on either
UDP or TCP. There are three main elements in SIP systems:
user agents, location services, and servers.

• User agents are the end devices in a SIP network. They
originate SIP requests to establish media session, and
send and receive media. A user agent can be a phys-
ical SIP phone or SIP client software running on a
computer (also called softphone). A user agent needs
a SIP ID, which is signed up at a SIP provider, in order
to make and receive SIP calls.
• Location service is a database that contains informa-
tion about users, such as SIP IDs, the latest login IP
addresses, preferences, etc. Location services generally
do not interact directly with user agents.
• Servers are intermediary devices that are located within
the SIP network and assist user agents in session estab-
lishment. There are two types of SIP servers: registrar
and proxy. A registrar receives SIP registration re-
quests and updates the user agent’s information (e.g.,
login IP address) into the location service. A SIP proxy
receives SIP requests from a user agent or another
proxy and forwards the request to another location.

Here is an example to show how a user (Alice) calls an-
other user (Bob). Suppose Alice has signed up a SIP ID
alice@atlanta.com at the SIP provider atlanta.com, and
Bob got his SIP ID bob@biloxi.com from biloxi.com, and
Alice knows Bob’s SIP ID. When Bob comes online, he ﬁrst
sends a registration request to the registrar of biloxi.com
with its current IP address. So does Alice to register herself
at the registrar of atlanta.com.

The SIP call initialization process is shown in Figure 2.
First, Alice sends an INVITE message (M1), which contains
her SIP ID and IP address, Bob’s SIP ID, her supported
media codecs, etc., to the proxy of atlanta.com (note that
at this point Alice does not know Bob’s IP address). The
local proxy performs a DNS lookup to ﬁnd the IP address of
the proxy serving Bob’s domain, i.e., biloxi.com, and then

125forwards the INVITE message (M2) to the remote proxy. At
the meantime, the local proxy sends a Trying response (M3)
back to Alice, indicating that the INVITE has been received
and is being routed to the destination. Upon receiving the
INVITE message, the proxy of biloxi.com sends a query
to its location service to look up the registered IP address
of Bob, and then it forwards the INVITE message (M4)
to Bob. The user agent of Bob sends a Ringing response
(M6) to the proxy indicating that Bob’s phone is ringed. If
Bob decides to answer the phone, an OK message containing
Bob’s current IP (M9) is sent towards Alice; otherwise, a
Reject response is returned (not shown in the ﬁgure). From
the received OK message, Alice learns Bob’s IP address, and
sends an ACK message towards Bob (M12, M13, M14). At
this point, the SIP initialization session is done, and Alice
and Bob start the media session by sending each other audio
data directly. At the end of the media session, either party
can send a BYE message (M15) to close the call.

The media session uses Real-time Transport Protocol (RTP)

to transmit audio data, and Real-time Transport Control
Protocol (RTCP) to provide out-of-band statistic and con-
trol information for the RTP ﬂow. Both RTP and RTCP run
on top of UDP. VoIP clients can use SRTP/SRTCP [28]—
an encrypted version of RTP/RTCP—to encrypt their voice
communication. SRTP/SRTCP only requires the user to in-
stall a user agent that has encryption features, and does not
require VoIP servers to support encryption. This implies
that the user can use any VoIP provider, including local
providers that collude with the censor, to access our cir-
cumvention system. The encryption key for SRTP/SRTCP
can be either established beforehand, e.g., via MIKEY [25],
or negotiated on the ﬂy using ZRTP [31]. In this work, we
consider using pre-established keys for SRTP/ SRTCP.

5.2 Censorship Circumvention

A sketch of the circumvention procedure is as follows. The
client ﬁrst initializes a SIP session with the spoofer by send-
ing out a normal INVITE message. Upon receiving the
INVITE message, the spoofer randomly selects a dummy
host and replies with a manipulated OK message that looks
like originating from the dummy host. When the OK mes-
sage arrives, the client starts to send encrypted RTP/RTCP
packets with random content to the dummy host, and the
spoofer starts to send encrypted RTP/RTCP packets to the
client by spooﬁng the dummy host’s IP address. Meanwhile,
the client sends URLs through a steganographic IM/Email
channel to the spoofer. The spoofer fetches the webpages,
puts them into RTP packet payloads and sends them to the
client. To terminate the circumvention session, the client
sends a termination signal to the spoofer over the upstream
channel, and then the spoofer sends a BYE message (with
IP spooﬁng) to the client to close the call.

5.2.1 Invitation-based Bootstrapping

Since the censor can learn the callee’s SIP ID from the
INVITE message, the user cannot call a common SIP ID,
because otherwise he/she will be detected once the censor
learns the spoofer’s SIP ID from corrupt users. There is a
similar issue for the steganographic IM/Email channel: the
censor can detect users sending IMs or Emails to the spoofer
based on the recipient’s IM ID or Email address (generally
referred to as upstream ID).

To address this, we let the spoofer use a unique SIP ID

and a unique upstream ID to communicate with each client.
Hence, the SIP IDs and upstream IDs of the spoofer learned
by corrupt users cannot be used to detect honest users. To
avoid the bottleneck of having the spoofer create a large
number of SIP and upstream IDs by itself, we let each
client sign up a SIP ID and an upstream ID on behalf of
the spoofer, and give them to the spoofer when joining the
system. We achieve this by introducing an invitation-based
bootstrapping process.

In particular, if a user Alice wants to join the circumven-
tion system, she needs an invitation and help from an ex-
isting CensorSpoofer user (say Bob). Alice must trust Bob
(e.g., Bob is a friend of Alice); otherwise, Bob could sim-
ply report Alice to the censor for attempting to access cir-
cumvention service. (We note that similar invitation-based
bootstrapping strategies have already been adopted by some
real-world circumvention systems, e.g., Psiphon [48].) First,
Alice needs to sign up two SIP IDs and two upstream IDs.
One pair of SIP ID and upstream ID is for herself, and
can be obtained from her local SIP and IM/Email providers
(which potentially collude with the censor). The other pair
is for the spoofer, and must be signed up at abroad SIP and
IM/Email providers (not necessarily supporting encryption).
If all external SIP, IM, or Email providers are blocked by the
censor, Alice can ask Bob to use his already-established cir-
cumvention channels to sign up these IDs for her. Then,
Alice encrypts the following registration information with
the spoofer’s public key:

caller’s SIP ID | master secret |
callee’s SIP ID | passwd for the callee’s SIP ID |
upstream ID | passwd for the upstream ID
The master secret is used to derive SRTP/SRTCP session
keys (and the key for the steganographic upstream channel
if necessary), and the passwords are for the spoofer to login
the callee’s SIP ID and the upstream ID.

To complete the bootstrapping, Alice needs to deliver the
encrypted registration information to the spoofer. Alice
could ask Bob to forward the whole registration information
to the spoofer through his upstream channel. To reduce the
bandwidth consumption of Bob’s upstream channel, Alice
could let Bob only forward the encrypted upstream SIP ID
and password to the spoofer; once her upstream channel is
established, she can send the rest registration information
to the spoofer by herself.

Note that our unique-ID assignment strategy cannot be
applied to existing proxy-based circumvention systems, such
as Tor, to improve the robustness against the insider attack.
This is because the “ID” in CensorSpoofer is an application-
level ID, and it is feasible to get a large number of them and
use a unique one for each user; whereas, in Tor, the “ID”
is the proxy’s IP address, and IP addresses are commonly
viewed as a scarce resource and it is hard to get a large
number of spare IP addresses.

For the spoofer,

it needs to run multiple SIP IDs and
multiple upstream IDs at the same time (possibly with a
common service provider).
In general, IM/Email servers
and SIP registrars do not limit the number of accounts reg-
istered from a common IP address, because it is possible
that multiple legitimate clients are behind a NAT. We did
some tests on two real-world VoIP providers ekiga.net and
mixvoip.com with 100 diﬀerent SIP IDs running on one
of our lab machines, respectively.
It turned out for both

126providers, all these SIP IDs can be registered and receive
calls successfully. We also did tests on Gtalk with 10 diﬀer-
ent accounts on the same machine and all of them worked
properly.

5.2.2 Manipulating the OK Message

Once the bootstrapping is done, the client can initialize a
circumvention session by calling the SIP ID that was given
to the spoofer at the registration. In the SIP protocol, the
callee’s IP address is written into the OK message (more
speciﬁcally, the enclosed SDP message [27]), and later is
used by the caller to send RTP/RTCP packets to the callee.
Since the OK message can be eavesdropped by the censor,
the spoofer cannot put its real IP into the OK message.

For this, we use a trick to hide the spoofer’s IP address.
According to the IETF standards [27,29], the SDP messages
are not checked by SIP proxies. This means the spoofer
can put the dummy host’s IP, instead of its own IP, into
the OK message, without inﬂuencing the OK message be-
ing forwarded back to the client. Since the registered IP of
the callee (kept by the location service of the spoofer’s VoIP
provider) is unknown to the censor, the manipulated OK
message is still plausible to the censor. To verify the feasi-
bility of replacing the spoofer’s IP address in the OK mes-
sage in practice, we utilized netfilter_queue [19] to mod-
ify the OK message on the ﬂy, and tested it with two VoIP
providers ekiga.net and mixvoip.com and an unmodiﬁed
VoIP softphone PJSUA [11]. We found all manipulated OK
messages were successfully delivered to the client and the
client-side softphone started to send RTP/RTCP packets to
the replaced IP address after receiving the OK message.

5.2.3 Selection of Dummy Hosts

A SIP client listens on TCP and/or UDP port 5060 for
SIP signaling, and the ports for RTP/RTCP are selected
randomly on the ﬂy (usually RTP uses an even port and
RTCP uses the next higher odd port). To check the le-
gitimacy of a dummy host, the censor could apply port
scanning to test if the ports used by VoIP are open on the
dummy host.
In response, we can also use port scanning
to get the list of dummy hosts. As we mentioned before,
in many cases, port scanning can only return an ambigu-
ous result. For nmap [17] (the state-of-the-art port scanning
tool), the possible probing results include “open”, “closed”,
“ﬁltered”, “unﬁltered”, “open|ﬁltered”, “closed|ﬁltered”, and
“host seems down”. Only “closed” can clearly tell the censor
that a particular application is not running on the target
machine. When the status is “host seems down”, it is very
likely that the target host is oﬄine. For safety, we also ex-
clude “host seems down” from the acceptable probing states.
Therefore, we let the spoofer periodically run port scanning
with randomly selected IPs outside the censor’s network to
get a list of acceptable (cid:2)ip, rtp port(cid:3) (see Algorithm 1).

Another strategy for the censor to check legitimacy of the
dummy host is to compute the predicted AS path of the
downstream traﬃc (supposedly from the dummy host) and
compare it against the observed entry point (into the cen-
sor’s network) of the spooﬁng traﬃc sent by the spoofer. If
the dummy host is located far from the spoofer, it is likely
that the entry point of the spooﬁng traﬃc is inconsistent
with its claimed AS path. To deal with this, we ﬁrst use
traceroute to compute the actual AS path from the spoofer
to the client (called reference AS path), and then choose a

Input: IP range // outside censored networks
Output: dum hosts
dum hosts ← {} ;
unaccepted ← {closed, host seems down} ;
foreach ip ∈ IP range do

if port scan(ip, sip port) /∈ unaccepted then

rtp port ← rand even port() ;
rtcp port ← rtp port + 1 ;
if port scan(ip, rtp port) /∈ unaccepted and
port scan(ip, rtcp port) /∈ unaccepted then

add (cid:2)ip, rtp port(cid:3) to dum hosts ;

end

end

end

Algorithm 1: Port scanning algorithm to ﬁnd a list of
candidate dummy hosts

dummy host whose predicted AS path to the client is consis-
tent with the reference AS path with respect to their entry
points. Researchers have proposed several AS-path inference
algorithms with high predication accuracy (such as [55]).

In addition, since the port status on a probed host may
change over time, we let the spoofer keep track of the pre-
viously found dummy hosts and maintain a list of alive
dummy hosts. When a circumvention request arrives, the
spoofer picks a dummy host from the alive-host list, and
keeps checking the VoIP ports of this dummy host during
the circumvention session. If the spoofer detects any port
of SIP, RTP and RTCP on the dummy host is closed before
the circumvention session ends, it sends a BYE message to
the client immediately to terminate the SIP session. If the
client wants to presume the circumvention session, it needs
to initialize another SIP session with the spoofer.

5.2.4 Trafﬁc Pattern and Bandwidth

To resist traﬃc-pattern-analysis attack, the client and the
spoofer should follow certain patterns of legitimate VoIP
traﬃc when sending RTP/RTCP packets. For VoIP, both
RTP and RTCP packets are of the same size and sent peri-
odically3. The packet size and sending frequency are deﬁned
by the audio codec, which is negotiated during the SIP ini-
tialization session. The codec determines the bandwidth of
the downstream channel (∼ pkt size × f req). Some codecs
that are used to achieve better voice quality can provide
higher bandwidth (e.g., 64 Kbps with G.711), while others
provide lower bandwidth (e.g., 16 Kbps with iLBC). Note
that the same bandwidth is consumed at the dummy host,
due to the dummy traﬃc sent by the client. We can use
some bandwidth estimation tools (e.g., packet-trains [46])
to ﬁgure out how much available bandwidth the dummy host
has, and based on that, we choose an appropriate codec to
avoid consuming too much bandwidth of the dummy host.

5.2.5 Packet Loss

UDP does not provide reliable transmission. A RTP packet
containing data of a blocked webpage could be lost during
transmission, causing failure of reconstructing the webpage
at the client. To tolerate packet loss, we use Forward Er-

3Some softphones have the option of Voice Activity Detec-
tion (VAD), which avoids unnecessary coding and transmis-
sion of silence voice data. With VAD, the RTP packet size
and sending interval may variate. In this work, we assume
no VAD is used at the spoofer or the client for simplicity.

127ror Correction (FEC) codes (e.g., Reed-Solomon code [26])
inside the downstream channel, so that the client can re-
cover the webpage as long as a certain number of packets
are received.

6. SECURITY ANALYSIS

We next discuss the security properties of CensorSpoofer

against potential passive and active attacks.
6.1 Geolocation Analysis

Since the callee’s SIP ID and IP address contained in the
OK message are transmitted in plaintext, a sophisticated
censor could record all the IP addresses that have been
bound to a particular SIP ID over time, and try to discover
abnormality based on the geolocations of these IPs. For in-
stance, a SIP ID would look suspicious if its registered IPs
for two closely conducted SIP sessions are geographically far
from each other (e.g., the SIP ID is ﬁrst registered with an
IP in U.S. and 1 hour later it is registered again with another
IP in Europe).

To deal with this, instead of picking dummy hosts ran-
domly, the spoofer can choose a set of dummy hosts that
are geographically close, for a particular SIP ID, accord-
ing to an IP-geolocation database (such as [20]). When a
SIP ID is used by the spoofer for the ﬁrst time, the spoofer
randomly selects a primary dummy host for it, and keeps
this information in the user database. For subsequent SIP
sessions calling this SIP ID, the spoofer preferentially as-
signs its primary dummy host for it. If the port status of
the primary dummy host becomes “closed”, the spoofer then
preferentially chooses a dummy host from those that have
been assigned to this SIP ID (which are also stored in the
user database). If none of them is available, the spoofer se-
lects a new dummy host that is geographically close to the
primary dummy host for this SIP ID. (Note that the spoofer
should make sure that a particular dummy host is not being
used by two or more SIP IDs at the same time.)

Furthermore, each user can create multiple SIP IDs. When
a circumvention session is carried out very close to the previ-
ous one, or when the spoofer cannot ﬁnd a suitable dummy
host for a SIP ID, the user can call another SIP ID instead.
6.2 User Agent & Operating System (OS) Fin-

gerprinting

The SIP protocol deﬁnes the basic formats of SIP mes-
sages, but allows user agents (i.e., softphones or SIP phones)
to add optional information to the SIP messages, such as the
user’s display name, timestamps, and the software/hardware
information of the user agent.
In addition, SIP messages
(e.g., INVITE and OK) contain some random identiﬁers,
such as “To tag” and “From tag”, which are generated by
the user agent with self-deﬁned length. Additionally, the
SIP messages also contain the codecs that are supported by
the user agent.

The above information allows a sophisticated censor to
ﬁngerprint a particular user agent. As a result, the censor
may detect users communicating with the spoofer based on
the user-agent ﬁngerprint of the spoofer. To address this,
the spoofer can create a number of user-agent proﬁles based
on the popular SIP phones and softphones, and assign one of
them to each SIP ID. For a SIP session calling a particular
SIP ID, the spoofer generates corresponding SIP messages
based on the user-agent proﬁle of the SIP ID.

In addition, some softphones are only available for certain
OSes. For example, SFLphone [9] can only be used on Linux,
and Blink [8] is only available for Windows and Mac users.
Hence, a sophisticated censor can use OS ﬁngerprinting tools
(e.g., the OS detection of nmap [17]) to check if the dummy
host’s OS is consistent with its user agent (learnt from the
user-agent ﬁngerprint). To handle this, the spoofer can also
use the OS ﬁngerprinting tool to detect the dummy host’s
OS and assign an appropriate user-agent proﬁle.

6.3 Trafﬁc Manipulation

The censor can also try to manipulate traﬃc ﬂows in order

to detect users accessing our circumvention system.

In anonymous communication systems (e.g., Tor [40]), an
attacker could use traﬃc analysis to detect if two relays are
on the same path of a ﬂow, by injecting a speciﬁc traﬃc
pattern at one relay (e.g., by delaying certain packets) and
detecting the same pattern at the other relay [58]. If apply-
ing the same attacking methodology to CensorSpoofer, the
censor could delay the packets sent by the user, and detect
if there are any traﬃc pattern changes in the downstream
ﬂow. However, this attack is based on the precondition that
the ﬂows sent and received by the remote host are corre-
lated, and this is not true for VoIP, since each VoIP client
sends RTP/RTCP packets periodically, independent of the
incoming ﬂow.

Another way to manipulate traﬃc is to drop packets.
Since the spoofer does not actually receive any RTP/RTCP
packets from the user, the censor can drop the user’s pack-
ets without even being noticed by either the spoofer or the
user. The VoIP phones can tolerate a small number of ran-
dom packet loss; but if there are no RTP/RTCP packets
received for a certain period of time (e.g., 30 seconds), they
will drop the call automatically. Hence, a censor can adopt
the following strategy to detect a CensorSpoofer user:
it
blocks all the RTP/RTCP packets sent to the callee, and
checks if the callee still sends packets to the client after a
certain period of time (e.g., 30 seconds). However, the price
of mounting this attack is very high. Since the censor is un-
able to tell which ﬂow carries censored data, it has to drop
all VoIP ﬂows unselectively, causing normal VoIP conversa-
tions being interrupted.

The censor can also alter, reorder, inject or replay RTP/
RTCP packets sent to the callee (i.e., the dummy host).
However, since a normal VoIP client running the SRTP pro-
tocol can simply ﬁlter the invalid packets, such attacks can-
not help the censor detect if the callee is a real SIP client or
a dummy host.

6.4 SIP Message Manipulation

The censor can attempt to manipulate SIP messages. For
instance, the censor can manipulate the IP of the callee (i.e.,
the dummy host) in the OK message, and check if there
are any RTP/RTCP packets sent to the user. (Similar to
the packet-dropping attack, this attack will make legitimate
users unable to make and receive VoIP calls.) To resist this
attack, the spoofer can compute a short keyed hash of the
dummy host’s IP (and other important data if any) using
the SRTP session key, and put the hash value into some
random identiﬁers (e.g., “To Tag”) in the OK message. The
user who knows the session key can use the embedded hash
to verify the integrity of the dummy host’s IP. If the user

128Table 1: Bandwidths for diﬀerent VoIP codecs

Codec

G.711

G.722-64
G.726-40

iLBC

BW of downstream

Consumed BW of

channel (Kbps)

dummy host (Kbps)

64
64
40
15.6

87.2
87.2
54.7
26.6

detects the OK message is manipulated, he will abandon the
SIP session by not sending an ACK response.

7. PROTOTYPE AND EVALUATION

In this section, we report the evaluation results. Refer to

Appendix for details of our prototype implementation.
7.1 Sketch of Prototype Implementation

The spoofer prototype has four components: a SIP mes-
sage handler, a RTP/RTCP transmitter, an upstream mes-
sage receiver, and a prefetching proxy. For the SIP message
handler, we used tcpdump to create user-agent proﬁles, and
netfilter_queue [19] to capture incoming INVITE mes-
sages. We used UDP raw sockets to send RTP/RTCP pack-
ets. The raw socket allows us to put an arbitrary IP into
the source IP ﬁeld in the IP header. We implemented a
XOR-based encoder/decoder to handle packet loss. For this
prototype, we used Gtalk as the upstream channel, although
our system in no way depends on encrypted indirect chan-
nels like Gtalk. We implemented a simple Gtalk client using
a python API xmpppy [21]. For ordinary web browsing, a
user’s web browser sends separate HTTP requests for the
html ﬁle of the webpage as well as the objects embedded
in the webpage. To minimize the number of messages sent
through the upstream channel, we implemented a prefetch-
ing proxy for the spoofer, which can parse the html ﬁle to
ﬁgure out the missing objects and fetch these objects on be-
half of the client, so that the client only needs to send a
single HTTP request to the spoofer. Our implementation
of the prefetching proxy is based on an open-source layout
engine QtWebKit [22].

For the client, we implemented a client-side HTTP proxy
to handle HTTP requests made by the user’s browser and
HTTP responses received from the RTP channel. The proxy
only forwards the ﬁrst HTTP request to the spoofer via the
Gtalk channel. We implemented a minimal browser appli-
cation – simply a wrapper around QtWebPage – to load the
webpages and provide statistic information for evaluation.
7.2 Evaluation

7.2.1 Performance Evaluation

The spoofer was deployed on an Emulab machine (located
in Utah, U.S.), which has 3.0 GHz 64-bit Duel Core CPU
with 1 GB cache and 2 GB of RAM and runs Ubuntu 11.04.
We deployed 8 clients on Planetlab, which are all located
in China, and the dummy hosts are located in Illinois, U.S.
To handle packet loss, we made the spoofer add a redun-
dant XOR packet for every 10 packets. We chose the most
commonly used VoIP codecs G.726-40, G.722-64, G.711, and
iLBC, and set the corresponding RTP packet size and send-
ing interval according to the standard speciﬁcations in [37].
The bandwidth provided by each codec and the consumed
bandwidth of the dummy host are provided in Table 1.

Each client was conﬁgured to repeatedly download the

page of wikipedia.org (which is about 160 KB) for 20 times.
For each download, we measured the time to download only
the html ﬁle and the entire page, respectively. (Note that
once the html ﬁle is downloaded, the user’s web browser will
display the basic frame and the text of the webpage, and the
user can start reading the text-based content.) We found
that the clients were able to successfully download the page
of wikipedia.org (which was blocked in China) using Cen-
sorSpoofer. The results of downloading times are provided
in Figure 3a, 3b. We can see that with the codec G.711 or
G.722-64, the downloading time for the whole page was 27
seconds, but it only took 6 seconds to load the html ﬁle.

In addition, we compared CensorSpoofer with existing cir-
cumvention systems. We installed a Tor client on one of the
Planetlab machines, and made it connect to a bridge in
the U.S. to download the webpage of wikipedia.org for 50
times. Additionally, we ran the same experiment by making
the client connect to a public proxy of NetShade4 (a proxy-
based circumvention & anonymity system), which is located
in U.S. Figure 3c, 3d show that it did take longer time for
CensorSpoofer to download the pages than the other two
circumvention systems, because CensorSpoofer needs to re-
shape the downstream traﬃc into low-bandwidth VoIP traf-
ﬁc. However, its downloading time for small web contents,
such as html ﬁles, is still acceptable.

We note that the performance of CensorSpoofer can be im-
proved by ﬁxing some limitations of our current implemen-
tation. For example, our current prototype of the spoofer
does not start sending any packet to the client until it has
received the entire response. We believe removing these lim-
itations can reduce the downloading time.

We also notice that the main performance bottleneck of
CensorSpoofer is the RTP channel that carries the voice
data. We believe by using a higher-bandwidth downstream
channel, such as video streaming, the performance of Cen-
sorSpoofer can be much improved.

7.2.2 Measurement of Dummy-Host Selection

To evaluate the easiness of ﬁnding dummy hosts, we im-
plemented the port scanning algorithm (i.e., Algorithm 1 in
Section 5.2.3) using nmap [17]. We considered China as the
censored country. We randomly selected 10 000 IPs (out-
side China) from the entire IP space, according to an IP-
geolocation database [20]. We found 1213 IPs (12.1%) that
meet our requirements; this indicates that there are a poten-
tially large number of usable dummy hosts on the Internet.
Furthermore, we computed the percentage of appropriate
dummy hosts for a speciﬁc client based on their predicted
AS paths to the client. We implemented a widely used AS
path inference algorithm [55] that is based on AS relation-
ships [43]. We considered the top four ASes in China in
terms of the number of covered direct IPs (according to [30]),
and selected a random IP (i.e., the client) from each of the
ASes. We randomly picked 225 dummy hosts out of the
1213 candidate dummy hosts, and computed the AS paths
between them and the four clients. Then, we compared
the output paths with the AS paths from the spoofer to
the clients (computed using traceroute), and ﬁltered the
dummy hosts with inconsistent entry points. The results
are shown in Table 2. We can see that for a speciﬁc client,
there are enough dummy hosts to use, especially for the
clients located in large ASes.
4

http://www.raynersoftware.com/netshade/

1291

0.8

0.6

0.4

0.2

F
D
C

1

0.8

0.6

0.4

0.2

F
D
C

G.711/G.722−64
G.726−40
iLBC
30

40

 

10

0
0
Time to download the html file (sec)
(a) Download the html ﬁle

20

 

 

1

0.8

0.6

0.4

0.2

F
D
C

CensorSpoofer (G.711)
Proxy−based
Tor

 

0
0
Time to download the full page (sec)

20

40

60

 

 

1

0.8

0.6

0.4

0.2

F
D
C

G.711/G.722−64
G.726−40
iLBC
100

 

60

40

0
20
Time to download the full page (sec)
(b) Download the full page

120

80

CensorSpoofer (G.711)
Proxy−based
Tor

 

0
0
25
Time to download the html file (sec)

10

15

20

5

(c) Comparison: the html ﬁle

F
D
C

1

0.8

0.6

0.4

0.2

0

100

95

90

85

80

75

s
t
s
o
h

 
y
m
m
u
d

 
l

u

f

e
s
u

 
f
o

 

#

6

70

12/02

13/02

14/02

15/02

16/02

Time (dd/mm)

1

2

3

4

Length of staying usable (hour)

5

(d) Comparison: the full page

(e) Stability of dummy hosts over a
short period of time

(f) Stability of dummy hosts over a
long period of time

Figure 3: Evaluation (note that for (e) the CDF plot is truncated to max len stay usable = 6 hours, since many dummy hosts
stay usable for a very long time)

Table 2: Usable dummy hosts based on AS paths (Spoofer-ASN = 38)

DST-ASN % of direct IPs Entry-ASN # of usable dummy hosts % of usable dummy hosts

4134
4837
9394
4538

39.4%
19.8%
8.3%
7.1%

4134
4839
9394
23911

225
225
217
41

100%
100%
96.4%
18.2%

In addition, we measured the stability of dummy hosts
over time.
Ideally, the dummy host should stay “usable”
(i.e., none of its VoIP ports becomes “closed” or “host seems
down”) during the circumvention session, so that the user
does not need to re-initialize the SIP session to change dummy
hosts. To justify this, we randomly selected 100 dummy
hosts out of the 1213 candidate dummy hosts, kept sending
RTP packets to each of them and checking the states of their
VoIP ports. Figure 3e depicts the CDF of length of period
for a dummy host to stay usable. We can see that over 90%
dummy hosts can stay usable for more than 2 hours, and
over 80% can stay usable for over 6 hours. This means in
most cases, the users only need to establish one SIP session
throughout their web browsing.

We also measured the stability of dummy hosts over a
longer period of time. We kept track of the states of 100
randomly selected dummy hosts from Feb.
9th 2012 to
Feb. 16th 2012. To simulate the practical scenario when
the dummy hosts are used by our system to absorb VoIP
traﬃc, we kept sending RTP packets to each dummy host
periodically, with 1-hour sending period and 1-hour sleeping
period. Figure 3f depicts the number of usable dummy hosts
in that period. We can see that the total number of dummy
hosts is almost stable, indicating that the pool of candidate
dummy nodes does not shrink over time.

8. CONCLUSION

We proposed a new circumvention framework, Censor-
Spoofer, by exploiting the asymmetric nature of web brows-
ing. CensorSpoofer decouples the upstream and downstream
channels, using a low-bandwidth indirect channel for deliv-
ering URLs and a high-bandwidth direct channel for down-
loading web content. The upstream channel hides the re-
quests using steganography within Email/IM; whereas the
downstream channel uses IP spooﬁng to conceal the proxy’s
real address. Unlike some existing circumvention systems,
CensorSpoofer does not require any additional support from
network infrastructure. We implemented a proof-of-concept
prototype for CensorSpoofer, and the experimental results
showed that CensorSpoofer has reasonable performance for
real-world deployment.

9. ACKNOWLEDGEMENTS

We are grateful to Joshua Juen for his help with the AS
path prediction. We thank Shuo Tang for helpful discussion
on implementing the prefetching proxy. We also thank Pra-
teek Mittal, Anupam Das, Sonia Jahid, and Joshua Juen
for inspiring discussion at the beginning of this work. This
work was supported in part by NSF CNS 09-53655 and the
Boeing Trusted Software Center at the Information Trust
Institute, University of Illinois.

13010. REFERENCES
[1] Dynaweb. http://www.dongtaiwang.com/home_en.php.
[2] Ultrasurf. http://www.ultrareach.com.
[3] Ten ways to discover Tor bridges.

https://blog.torproject.org/blog/
research-problems-ten-ways-discover-tor-bridges.

[4] TriangleBoy Whitepaper. http://www.webrant.com/

safeweb_site/html/www/tboy_whitepaper.html.

[5] MailMyWeb. http://www.mailmyweb.com/.
[6] Feed Over Email (F.O.E).

http://code.google.com/p/foe-project/.
[7] WASTE. http://waste.sourceforge.net/.
[8] Blink. http://icanblink.com/.
[9] SFLphone. http://sflphone.org/.
[10] Zfone. http://zfoneproject.com/.
[11] pjsua. http://www.pjsip.org/.
[12] PhonerLite. http://www.phonerlite.de/index_en.htm.
[13] Microsoft Lync. http:

//technet.microsoft.com/en-us/library/gg195673.aspx.

[14] CounterPath.

http://www.counterpath.com/softphone-products.html.

[15] Cisco IP phones. http://www.cisco.com/en/US/docs/
voice_ip_comm/cucm/security/4_0_1/secuview.html.

[16] Grandstream. http://www.grandstream.com/products/
ip-voice-telephony/enterprise-ip-phones/gxp1100.

[17] nmap. http://nmap.org/.
[18] The MIT ANA Spoofer project.

http://spoofer.csail.mit.edu/.

[19] netﬁlter-queue. http:

//www.netfilter.org/projects/libnetfilter_queue/.

[20] IP geolocation database. http://ipinfodb.com/.
[21] XMPPPY. http://xmpppy.sourceforge.net/.
[22] QtWebKit. http://trac.webkit.org/wiki/QtWebKit.
[23] OpenSSL. www.openssl.org.
[24] How censorship works in china: A brief overview.

http://www.hrw.org/reports/2006/china0806/3.htm#
_Toc142395821.

[25] Mikey: Multimedia internet keying.

http://www.ietf.org/rfc/rfc3830.txt.

[26] Reed-solomon forward error correction (fec) schemes.

http://www.ietf.org/rfc/rfc5510.txt.

[27] Sdp: Session description protocol.

http://www.ietf.org/rfc/rfc4566.txt.

[28] The secure real-time transport protocol (srtp).

http://www.ietf.org/rfc/rfc3711.txt.

[29] Sip: Session initiation protocol.

http://www.ietf.org/rfc/rfc3261.txt.

[30] Top 50 autonomous systems. http://cyber.law.harvard.

edu/netmaps/country_detail.php/?cc=CN.

[31] Zrtp: Media path key agreement for unicast secure rtp.

http://www.ietf.org/rfc/rfc6189.txt.

[32] Defeat Internet Censorship: Overview of Advanced

Technologies and Products, Nov. 2007.
http://www.internetfreedom.org/archive/Defeat_
Internet_Censorship_White_Paper.pdf.

[33] Iran reportedly blocking encrypted internet traﬃc, 2012.

http://arstechnica.com/tech-policy/news/2012/02/
iran-reportedly-blocking-encrypted-internet-traffic.
ars.

[34] New blocking activity from iran, June, 16, 2011. https://
blog.torproject.org/blog/new-blocking-activity-iran.

[35] D. Barboza and C. C. Miller. Google accuses chinese of

blocking gmail service. http://www.nytimes.com/2011/03/
21/technology/21google.html?_r=2.

[36] S. Burnett, N. Feamster, and S. Vempal. Chipping away at

censorship with user-generated content. In USENIX
Security, 2010.

[37] Cisco. Voice over ip – per call bandwidth consumption.

http://www.cisco.com/application/pdf/paws/7934/
bwidth_consume.pdf.

[38] I. Clarke, T. W. Hong, S. G. Miller, O. Sandberg, and
B. Wiley. Protecting Free Expression Online with
{Freenet}. IEEE Internet Computing, 6(1):40–49, 2002.

[39] J. Cowie. Egypt leaves the internet, Jan. 2011.

http://www.renesys.com/blog/2011/01/
egypt-leaves-the-internet.shtml.

[40] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The

second-generation onion router. In USENIX Security
Symposium, August 2004.

[41] N. Feamster, M. Balazinska, G. Harfst, H. Balakrishnan,
and D. Karger. Infranet: Circumventing Web Censorship
and Surveillance. In USENIX Security, Aug. 2002.

[42] N. Feamster, M. Balazinska, W. Wang, H. Balakrishnan,
and D. Karger. Thwarting web censorship with untrusted
messenger discovery. In Privacy Enhancing Technologies
(PETS), 2003.

[43] L. Gao. On inferring autonomous system relationships in

the internet. IEEE/ACM Trans. Netw., 9:733–745,
December 2001.

[44] A. Houmansadr, G. T. K. Nguyen, M. Caesar, and

N. Borisov. Cirripede : Circumvention infrastructure using
router redirection with plausible deniability categories and
subject descriptors. In ACM CCS’11, 2011.

[45] J. Jacob. How internet censorship works in china, 2011.
http://www.ibtimes.com/articles/113590/20110217/.

[46] R. Jain, S. Member, Shawn, and A. Routhier. Packet

trainsˆa ˘AˇTmeasurements and a new model for computer
network traﬃc. IEEE Journal on Selected Areas in
Communications, 4:986–995, 1986.

[47] J. Jarvis. Facebook, twitter, and the egyptian revolution,

Feb. 13. 2011.
http://thefastertimes.com/mediaandtech/2011/02/13/
facebook-twitter-and-the-egyptian-revolution/.

[48] J. Jia and P. Smith. Psiphon: Analysis and Estimation,
2004. http://www.cdf.toronto.edu/~csc494h/reports/
2004-fall/psiphon_ae.html.

[49] J. Karlin, D. Ellard, A. W. Jackson, C. E. Jones, G. Lauer,

D. P. Mankins, and W. T. Strayer. Decoy Routing :
Toward Unblockable Internet Communication. In USENIX
FOCI, 2011.

[50] C. S. Leberknight, M. Chiang, H. V. Poor, and F. Wong. A
taxonomy of Internet censorship and anti-censorship. http:
//www.princeton.edu/~chiangm/anticensorship.pdf.
[51] M. Mahdian. Fighting censorship with algorithms. In

Proceedings of FUN 2010, 2010.

[52] D. McCoy, J. A. Morales, and K. Levchenko. Proximax: A

measurement based system for proxies dissemination. In
Financial Cryptography and Data Security (FC’11), 2011.

[53] J. McLachlan and N. Hopper. On the risks of serving

whenever you surf: Vulnerability of tor’s blocking resistance
design. In WPES’09, 2009.

[54] B. Popescu, B. Crispo, and A. S. Tanenbaum. Safe and

private data sharing with turtle: Friends team-up and beat
the system. In The 12th Cambridge International
Workshop on Security Protocols, April 2004.

[55] J. Qiu and L. Gao. Cam04-4: As path inference by

exploiting known as paths. In GLOBECOM ’06, 2006.

[56] Y. Sovran, A. Libonati, and J. Li. Pass it on: Social

networks stymie censors. In IPTPS’08, Feb 2008.

[57] E. Y. Vasserman, R. Jansen, J. Tyra, N. Hopper, and

Y. Kim. Membership-concealing overlay networks. In ACM
CCS’09, Nov. 2009.

[58] X. Wang, S. Chen, and S. Jajodia. Network ﬂow
watermarking attack on low-latency anonymous
communication systems. In IEEE Oakland, 2007.

[59] E. Wustrow, S. Wolchok, I. Goldberg, and J. A. Halderman.

Telex: Anticensorship in the Network Infrastructure. In
20th USENIX Security Symposium, Aug. 2011.

[60] J. Zittrain and B. Edelman. Internet Filtering in China.

IEEE Internet Computing, 7(2):70–77, 2003.

131APPENDIX
A. THE SPOOFER PROTOTYPE

SIP Message Handler. We use PJSUA v1.12 [11] as
an out-of-box tool to register callees’ SIP IDs. We choose
PJSUA because we can easily register multiple SIP IDs us-
ing the -config-file option. To prevent the user-agent
ﬁngerprinting attack, we use tcpdump to pre-record the OK
messages generated by diﬀerent softphones, and use them as
templates to generate corresponding OK messages.

When starting the spoofer, the SIP message handler ﬁrst
launches PJSUA to register callees’ SIP IDs, so that the SIP
proxies can forward INVITE messages related with these
SIP IDs to the spoofer. We use netfilter_queue [19] to
capture incoming INVITE messages. (Since PJSUA requires
to bind port 5060, we do not create a socket bound to port
5060 to receive INVITE messages.) For each INVITE mes-
sage, the handler replies with an OK message that is crafted
according to the content the INVITE message, and creates
a thread for the RTP/RTCP transmitter for this client.

RTP/RTCP Transmitter. The RTP/RTCP transmit-
ter needs to send RTP/RTCP packets periodically with IP
spooﬁng. For this, we use a UDP raw socket, which allows
us to put an arbitrary IP into the source IP ﬁeld in the IP
header. To encrypt RTP/RTCP packets, we use AES-128 of
OpenSSL v1.0.0 [23] with a pre-shared key. Since the send-
ing frequency of RTCP packets is much lower than that of
RTP packets, we only use RTP to send censored data.

To handle packet loss, we implemented a simple XOR-
based encoder/decoder. The RTP/RTCP transmitter par-
titions the ﬂow of each task (i.e., downloading a particu-
lar webpage) into ﬁxed-sized data blocks, and multiplex the
blocks of diﬀerent tasks of the same client into one stream,
which is further divided into groups of size λ (e.g., λ = 10
blocks). For each group, the transmitter generates a redun-
dant block by XORing all λ blocks in the group, so that
any λ out of the λ + 1 blocks are suﬃcient to recover the
whole group. Whenever a RTP packet needs to be sent, the
transmitter checks if there are any available blocks (includ-
ing XOR blocks) in the buﬀer for this client. If so, it writes
one block into the RTP payload and sends it out; otherwise,
the RTP packet is stuﬀed with random data.

Note that some blocks may contain data less than their
capacity (e.g., the last block of a task), and blocks may arrive
at the client in diﬀerent order than being sent out; besides,
the client should be able to diﬀerentiate blocks for diﬀerent
tasks. To handle these, we use the ﬁrst 4 bytes of the RTP
payload to embed a block sequence number (2 bytes), a task
number (1 byte), and block size (1 byte). These ﬁelds are
encrypted together with the rest RTP payload.

Upstream Message Receiver. We use Gtalk as the
upstream channel, although our system in no way depends
on encrypted indirect channels like Gtalk. We implemented
a simple Gtalk client using a python API xmpppy [21] to
send and receive Gtalk messages. Each Gtalk message con-
tains a URL, the user’s IP address, and a task number (also
contained in the RTP payload). The upstream message re-
ceiver forwards the Gtalk message to the prefetching proxy
by sending a UDP packet, and then the prefetching proxy
will start downloading the webpage according to the URL.
Prefetching Proxy. Since each CensorSpoofer client
only sends one URL (instead of separate HTTP requests)
to the spoofer, the spoofer needs to prefetch the whole web-

page on the behalf of the client. This means that the spoofer
needs to ﬁrst download the html ﬁle, parse it to ﬁgure out
the missing objects, and then send separate HTTP requests
to fetch these objects, and ﬁnally send all the downloaded
data to the client over the RTP channel. We built a prefetch-
ing proxy (PFP) for this purpose. Instead of implementing a
html parser and fetching embedded objects (which are essen-
tially the operations of a web browser) from scratch, we use
an open-source layout engine QtWebKit [22], which is a port
of the popular WebKit layout engine into the Qt application
development framework. We choose QtWebKit because it
provides a simple QtWebPage type that signiﬁcantly reduces
our development eﬀort. Given a URL to load, a QtWeb-
Page performs all the necessary network operations, includ-
ing parsing, Javascript execution, etc., in order to render the
webpage. The PFP obtains all the raw HTTP responses for
HTTP requests that the QtWebPage makes. As soon as PFP
receives a full HTTP response, it sends the request-response
pair to the client over the RTP channel. When the QtWeb-
Page ﬁnishes loading the entire webpage, the PFP sends an
“End-of-Page” marker to the client, to inform that there will
be no more request-response pair for this webpage.

B. THE CLIENT PROTOTYPE

To avoid the censor detecting CensorSpoofer users based
on the ﬁngerprint of their softphones, we do not implement
our own softphone for the clients; instead, we let the client
use any existing softphone to access CensorSpoofer. Again,
we use PJSUA for the client prototype.

When running the client, PJSUA is ﬁrst launched to reg-
ister the user’s SIP ID. Most softphones (including PJSUA)
do not support making calls outside the user interfaces. In
order to call the spoofer automatically inside our client pro-
gram, we use tcpdump to pre-record the INVITE and ACK
messages, and send them in an ongoing SIP initialization
session (the ACK message needs to be updated according to
the received OK message). Once the SIP initialization is ﬁn-
ished, the client creates a UDP socket to receive RTP/RTCP
packets from the spoofer and send RTP/RTCP packets to
the dummy host. The client uses the pre-shared key to de-
crypt received packets and stores the decrypted blocks into
a buﬀer. Once λ blocks in a group are received, the client
uses the XOR-based decoder to recover the original group.
We implemented a client-side HTTP proxy (CSP) to han-
dle HTTP requests made by the user’s browser and HTTP
responses received from the RTP channel. When the CSP
receives the ﬁrst HTTP request for a page, it forwards the
URL of the page to the spoofer via the Gtalk channel, but
will not forward subsequent requests for other objects of
the page.
Instead, the CSP will “collect” in memory the
HTTP request-response pairs received from the spoofer, and
will serve to the client’s browser the appropriate HTTP re-
sponses from its memory when the browser makes a HTTP
request. We note that any web browser supporting HTTP
proxies, such as Mozilla Firefox, can use the CSP because the
CSP provides an HTTP proxy compliant interface. There-
fore, we do not have to modify existing web browsers or
implement a new one. However, for ease of automating ex-
periments, we implement a minimal browser application (to-
talling 150 lines of code) that is simply a wrapper around
QtWebPage to load the webpages. This browser application
also outputs various statistics useful for our evaluation.

132