Peer-Assisted Content Distribution

in Akamai NetSession

Mingchen Zhao†

Paarijaat Aditya‡

Ang Chen†

Yin Lin(cid:63) (cid:5)

Andreas Haeberlen† Peter Druschel‡ Bruce Maggs(cid:63) (cid:5) Bill Wishon(cid:5) Miroslav Ponec(cid:5)

†University of Pennsylvania ‡MPI-SWS (cid:63)Duke University (cid:5)Akamai Technologies

ABSTRACT
Content distribution systems have traditionally adopted one
of two architectures:
infrastructure-based content deliv-
ery networks (CDNs), in which clients download content
from dedicated, centrally managed servers, and peer-to-
peer CDNs, in which clients download content from each
other. The advantages and disadvantages of each architec-
ture have been studied in great detail. Recently, hybrid,
or “peer-assisted”, CDNs have emerged, which combine ele-
ments from both architectures. The properties of such sys-
tems, however, are not as well understood.

In this paper, we discuss the potential risks and ben-
eﬁts of peer-assisted CDNs, and we study one speciﬁc in-
stance, Akamai’s NetSession system, to examine the im-
pact of these risks and beneﬁts in practice. NetSession
is a mature system that has been operating commercially
since 2010 and currently has more than 25 million users
in 239 countries and territories. Our results show that
NetSession can deliver several of the key beneﬁts of both
infrastructure-based and peer-to-peer CDNs—for instance,
it can oﬀload 70–80% of the traﬃc to the peers with-
out a corresponding loss of performance or reliability—
and that the risks can be managed well.
This sug-
gests that hybrid designs may be an attractive option for
future CDNs.
Categories and Subject Descriptors
C.2.4 [Computer Systems Organization]: Computer-
Communication Networks—Distributed
C.4
[Computer Systems Organization]: Performance of
Systems
Keywords
Content distribution networks, peer-to-peer systems
1.
This paper presents a study of a hybrid CDN called Net-
Session in which most content is delivered by a set of peers
whose operation is coordinated (and backstopped) by a ded-
icated infrastructure. Our study is motivated by the obser-

INTRODUCTION

Systems;

Permission to make digital or hard copies of part or all of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage, and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for third-party components
of this work must be honored. For all other uses, contact the owners/authors.
Copyright is held by the authors/owners.
IMC’13, October 23–25, 2013, Barcelona, Spain.
ACM 978-1-4503-1953-9/13/10. http://dx.doi.org/10.1145/2504730.2504752.

vation that hybrid CDNs seem to have reconciled two ar-
chitectures with very diﬀerent tradeoﬀs: On the one hand,
peer-to-peer systems are inexpensive and easy to scale but
seem to be plagued by security issues and low quality of ser-
vice (QoS); on the other hand, infrastructure-based systems
are expensive to set up and scale but can provide predictable
QoS and reliable accounting, and ensure content integrity.
We felt that the time was ripe to investigate what advan-
tages a hybrid of these approaches might convey.

We ﬁnd, perhaps surprisingly, that NetSession is able to
achieve the “best of both worlds”:
it can oﬀer most of the
beneﬁts of both architectures while avoiding most of the
drawbacks. This is because the strengths of the infrastruc-
ture and the peers complement each other: The infrastruc-
ture provides a central point of coordination that can quickly
match up peers and can add resources when peers cannot
provide adequate QoS; the peers provide resources and scal-
ability, and they extend the “reach” of the infrastructure to
underserved areas.

in particular,

Prior work has identiﬁed several potential concerns about
hybrid CDNs;
it has been suggested that
hybrid CDNs might become a burden to Internet Service
Providers (ISPs) by increasing inter-AS traﬃc [17, 24, 35].
We show that, at least in the case of NetSession, this con-
cern appears to be unfounded. Finally, we report some ob-
servations from the day-to-day operation of the NetSession
system. Among other things, we discover a surprising de-
gree of user mobility in the system, and we describe what
appear to be the eﬀects of cloning and re-imaging client in-
stallations. In summary, this paper makes the following ﬁve
contributions:

• an overview of the hybrid CDN design space, including
a discussion of potential risks and beneﬁts (Section 2);
• a description of NetSession’s design goals and imple-

mentation (Section 3);

• a measurement study that provides an overview of the
scale at which NetSession operates and the types of
content it is used to deliver (Section 4);

• an analysis of whether NetSession meets its design
goals and realizes the potential beneﬁts of hybrid sys-
tems (Section 5); and

• an investigation into whether the risks associated with
hybrid systems, such as undue burdens on ISPs or
problems with untrusted end-user machines, are evi-
denced by NetSession in practice (Section 6).

We discuss related work in Section 7, and present our con-
clusions in Section 8.

312. THE CDN DESIGN SPACE
We begin by sketching the design space for content distri-
bution systems, and discuss the potential risks and beneﬁts
of hybrid designs.

2.1 To Peer or Not To Peer?
Traditionally, CDNs have fallen into two categories: some re-
lied exclusively on a centrally managed infrastructure, while
others operated entirely without one. Akamai’s CDN [10]
is an example of an infrastructure-based CDN: it uses an
infrastructure of more than 137,000 servers in 87 countries
within over 1,150 Internet networks, all owned and operated
by Akamai. BitTorrent [8] is an example of a peer-to-peer
(p2p) CDN: other than the tracker (which serves as an initial
point of contact) and perhaps an initial seeder, it requires no
infrastructure at all; all data is exchanged directly between
the peers. Recent BitTorrent clients have even replaced the
tracker with a distributed hashtable [9], removing the last
remaining infrastructure element.

Infrastructure-based CDNs typically have the bene-
ﬁt of professional administrators and amply provisioned
resources—they can control and authenticate the content
they distribute, and they can achieve high performance and
reliability, but they are also expensive to scale. Peer-to-peer
CDNs must rely on resources contributed by their peers,
which means that their properties are often the exact op-
posite: they require little up-front investment and scale or-
ganically, but can be plagued by spam and low-quality con-
tent, and their quality of service tends to be unpredictable.
Thus, it is natural to ask whether it might not be possible
to achieve the “best of both worlds” in a single system.

2.2 Why decide?
In this paper, we focus on hybrid CDNs that combine ele-
ments from both architectures: like peer-to-peer CDNs, they
achieve scalability by leveraging resources from the client
machines, but, like infrastructure-based CDNs, they also
rely on dedicated, centrally managed elements, such as a
central directory of ﬁle locations and dedicated servers that
provide a backstop of delivery capacity. We refer to such
CDNs as peer-assisted CDNs.

One way to characterize peer-assisted CDN designs is
to look at the role they assign to the infrastructure. For
instance, the infrastructure can provide resources, such as
bandwidth, computation, or storage, which might be used
to improve the quality of service or to keep rarely requested
content available; it can provide coordination by building a
global view of the system, e.g., to recognize attacks, to allo-
cate resources, or to pair up peers with matching NATs; and
it can provide control, e.g., by deciding which content may
be distributed. Thus, there is an entire spectrum of possible
designs, ranging from systems that rely mostly on the peers
and have a very small infrastructure (such as tracker-based
BitTorrent) to systems that rely primarily on the infrastruc-
ture and use the peers only as an optimization.

2.3 Potential beneﬁts
Peer-assisted CDNs have substantial ﬂexibility in dividing
tasks between the peers and the infrastructure. Thus, they
can potentially use each element where it is strongest. The
potential beneﬁts relative to a pure peer-to-peer CDN in-
clude:

Better quality of service: The infrastructure can be used
as a “backstop” for the peers, i.e., it can help out with re-
quests where the peers do not have much bandwidth, or
where there is a lot of churn.
Reduced reliance on peer contributions: The infras-
tructure can absorb the cost of a certain degree of freeload-
ing. Thus, it is not as important to force peers to recipro-
cate, or to “fairly” distribute the workload.
More reliable delivery: The infrastructure can authenti-
cate content; there is no need to rely on heuristics or rep-
utations to recognize content that has been corrupted or
tampered with.
Less legal exposure: The infrastructure can ensure that
all content is properly licensed; thus, peers can safely par-
ticipate in swarming and upload content to others, without
being at risk for accidental violations of the DMCA (and
similar laws).
Better security: The infrastructure can use its global view
to recognize and ﬁght attacks, and it can provide profession-
ally managed servers that can perform trusted functions.
Higher eﬃciency: The infrastructure can maintain a
global view and perform global optimizations, e.g., by
quickly locating copies of a ﬁle, or by matching up peers.

The potential beneﬁts over a pure infrastructure-based

system include:
Lower cost: Content providers can potentially deliver their
data at lower cost (and can pass some of the resulting savings
on to end users). Also, the CDN operator may be able to
oﬀer services to content providers who otherwise may not
be able to aﬀord a CDN.
Global coverage: Finally, in geographic areas with sparse
infrastructure deployment, serving content from peers may
increase the quality of service. Also, ISPs that are not host-
ing CDN servers should see less inter-ISP traﬃc for popular
downloads.

2.4 Potential risks
Peer-assisted CDNs face some of the risks that aﬀect pure
infrastructure based and peer-to-peer architectures, and a
few risks that are unique to them:
Need for revenue: Unlike peer-to-peer CDNs, peer-
assisted CDNs must generate some revenue to defray the
costs of the infrastructure.
Less transparency: Unlike infrastructure CDNs, peer-
assisted CDNs are usually not transparent to users; they
require the installation of software on each client.
Heterogeneity: Unlike most infrastructure CDNs, peer-
assisted CDNs include a heterogeneous population of ma-
chines that are managed by users, with varying capabilities
and complex failure modes.
Multiple administrative domains: Unlike infrastructure
CDNs, peer-assisted CDNs inherently contain machines that
are controlled by diﬀerent parties, many of whom the CDN
operator does not trust.
NATs and ﬁrewalls: Unlike infrastructure CDNs, peer-
assisted CDNs rely on their clients’ upstream links, which
requires traversing a variety of middleboxes that may exist
on the path.
Impact on ISPs: Peers in peer-assisted CDNs send and
receive traﬃc; thus, these systems are creating a diﬀerent
traﬃc pattern, which can aﬀect ISPs’ networks and busi-
nesses.

323. THE NETSESSION SYSTEM
To examine how many of the potential beneﬁts peer-assisted
CDNs can deliver in practice, and how many of their poten-
tial risks they can avoid, we have studied the NetSession
system, a peer-assisted CDN that was originally developed
by RedSwoosh and has been commercially operated by Aka-
mai since 2010. As of October 2012, NetSession has been in
production use for ﬁve years and has almost 26 million users
in 239 countries and territories.
3.1 Design goals
NetSession was designed with the following three high-level
goals in mind:

1. A substantial fraction of the content should be deliv-

ered by the peers.

2. Peer-assisted delivery QoS should be comparable to

that of infrastructure-based delivery; in particular,

(a) downloads should be no less reliable; and

(b) downloads should not be much slower.

3. The system should oﬀer reliable accounting for services

provided.

In other words, the system was meant to combine the key
beneﬁts of peer-to-peer CDNs (scalability) and infrastruc-
ture CDNs (quality of service). The third goal was an op-
erational requirement: Content providers, who pay for the
CDN’s services, expect detailed logs that show the amount
and the quality of the services provided. There were also
two explicit non-goals:

1. The system need not be more reliable than an

infrastructure-based CDN; and

2. Peers need not contribute equally.

The ﬁrst point sets realistic expectations about security; the
second point reﬂects the fact that the system has a large
infrastructure to fall back on, so some proportion of peers
who opt out of serving content to peers would not be a
concern. Serving content reliably and with good QoS is more
important than minimizing load on the infrastructure.
3.2 Architecture
NetSession distributes content via an infrastructure of edge
servers that are operated by Akamai, and a number of user-
operated peers that have special software, the NetSession
Interface (Section 3.4), installed on them.
In addition to
the edge servers, the infrastructure also contains a group
of NetSession-speciﬁc servers called the NetSession control
plane (Section 3.6), which serve as coordinators and perform
accounting, but do not directly serve any content. Figure 1
illustrates the high-level interaction between these compo-
nents.

To avoid confusion, we use the term content providers
to refer to the organizations and individuals who provide
content for NetSession to distribute, and the term users to
refer to those who download the content.
3.3 Example: Download Manager
We begin by brieﬂy describing an example application, the
Download Manager (DLM). The DLM is one of several ap-
plications that use the NetSession system; a typical use case

Figure 1: Overview of the NetSession system.

is to distribute large objects that are several GBs in size,
such as software installation images.

When a user attempts to download an object that is dis-
tributed using the DLM, she is ﬁrst asked to install the
NetSession Interface on her computer (unless it is already
available from previous usage). Once installed, the NetSes-
sion Interface starts downloading the content from the edge
servers; in parallel, it queries the control plane for a list of
nearby peers that already have a copy of the object. If suit-
able peers are found, the local peer and the selected peers
attempt to contact each other and exchange as much data
as possible; however, the download from the edge servers
continues in parallel. Thus, if a peer is “unlucky” and picks
peers that are slow or unreliable, the infrastructure can cover
the diﬀerence, so that user experience does not suﬀer as a
result.

Users can pause and resume downloads, and they can con-
tinue downloads that were aborted earlier, e.g., because the
peer lost network connectivity or the peer’s hard drive was
full. Once the download completes, the NetSession Interface
software remains on the peer and can be reused for future
downloads, or by other NetSession-enabled applications, and
it can upload the downloaded content to other peers.
3.4 The NetSession Interface
The NetSession Interface is available for Windows and Mac
OS. It is implemented as a background application that runs
whenever the user is logged into their system. This design
choice is diﬀerent from many p2p clients, which must be
launched explicitly by the user. The short session times
that have been observed in p2p systems [4, 14, 27] suggest
that users launch the client only when they intend to down-
load something, so the time window in which objects can be
uploaded to other peers tends to be very short. As a persis-
tent background application, NetSession does not have this
problem, but in return, it must take great care not to incon-
venience the user. We discuss some of its best practices in
Section 3.9.

Whenever the NetSession Interface is active and the peer
is online, it maintains a TCP connection to the control plane.
When a download is started, the peer uses this control con-
nection to query the control plane for other peers. The con-
nection is also useful for opening peer-to-peer connections
through NATs, which in most cases requires coordination
between the peers; the control plane can facilitate this by
informing both endpoints using their control connection. Fi-

Control plane servers Edge servers Clients Clients 33nally, peers use the connection to learn about conﬁguration
updates, and they report usage statistics, which are used for
billing, performance monitoring, and to generate reports for
content providers. Each peer has a unique GUID, which is
chosen at random during installation.

NetSession uses the standard HTTP (or HTTPS) proto-
col to download content from edge servers; for downloads
from peers, it uses a swarming protocol not unlike BitTor-
rent’s. As in BitTorrent, objects are broken into ﬁxed-size
pieces that can be downloaded and their content hashes veri-
ﬁed separately, and peers exchange information about which
pieces of the ﬁle they have locally available.

A key diﬀerence to BitTorrent is the absence of an incen-
tive mechanism: in NetSession, peers can always obtain the
content from the infrastructure, so it is not as important to
discourage “freeloading”—the infrastructure can easily ab-
sorb the cost of a few users who decide not to upload. Hence,
a conscious decision was made not to include incentives, and
to serve content to each peer at the best possible speed, re-
gardless of how much bandwidth it is contributing to the
system. There is no tit-for-tat strategy that would “choke”
slow uploaders as in BitTorrent, only a globally conﬁgurable
limit on the total number of upload connections a peer al-
lows. In fact, NetSession Interface users have the option to
turn oﬀ peer content uploads permanently or temporarily
in the NetSession application preferences, without adverse
eﬀects on their download performance.

NetSession is predominantly used by content providers
who distribute large objects and already require their clients
to install software (e.g., games). NetSession also supports
video streaming, but it currently does not serve much video
traﬃc because of the requirement to install client software.

3.5 Interaction with edge servers
NetSession’s HTTP(S) connections to the edge servers are
used not only for downloading ﬁles, they also support many
other critical functions.

One important function is to ensure content integrity. File
pieces can be corrupted in transit or on the peers; addition-
ally, content can change over time, so it is important that
diﬀerent versions are not mixed up in the same download.
Edge servers generate and maintain secure IDs of content,
which are unique to each version, as well as secure hashes
of the pieces of each ﬁle. The IDs and the hashes are pro-
vided to the peers, so they can validate the content they
have downloaded. If a peer cannot validate a ﬁle piece, it
discards the piece and does not upload it to other peers.

Another key function is authorization. Before a peer can
receive content from other peers, it must authenticate to
an edge server over the HTTP(S) connection; this yields an
encrypted token that can be used to search for peers. This is
done to prevent users from downloading ﬁles from peers that
they are not authorized to obtain from the infrastructure.

Finally, the HTTP(S) connections are used for conﬁgura-
tion and reporting. A policy deﬁned by the content provider
is used to decide whether a particular ﬁle may be down-
loaded and uploaded; in addition, various conﬁgurable op-
tions apply to each download and upload. These policies and
options are securely communicated to the peers through the
trusted edge-server infrastructure. NetSession also uses in-
formation from the trusted edge servers to prevent account-
ing attacks [1], where compromised or faulty peers incor-
rectly report downloads and uploads.

3.6 The NetSession control plane
The NetSession control plane consists of a number of
globally-distributed servers that are operated by Akamai.
Its main function is to coordinate between the peers. Each
control plane server runs some of the following components:
Connection node (CN): The CNs are the endpoints of
the persistent TCP connections that the peers open to the
control plane when they are active. The CNs receive and
collect the usage statistics that are uploaded by the peers,
and they handle queries for objects the peers wish to down-
load. These persistent TCP connections are also used to tell
peers to connect to each other in order to facilitate sharing
of content. Such coordination is necessary for both security
reasons and to overcome NATs and ﬁrewalls.
Database node (DN): The DNs maintain a database of
which objects are currently available on which peers, as well
as details about the connectivity of these peers. Peers ap-
pear in the database only when a) uploads are explicitly
enabled on the peer, and b) the peer currently has objects
to share.
STUN: Peers periodically communicate with STUN compo-
nents over UDP and TCP to determine the details of their
connectivity (which are then stored in the DN databases)
and to enable NAT traversal. This involves a protocol with
goals similar to [25], but NetSession uses a custom imple-
mentation.
Monitoring node: Peers upload information about their
operation and about problems, such as application crash re-
ports, to these nodes. Processing their logs helps to monitor
the network in real-time, to identify problems, and to trou-
bleshoot speciﬁc user issues during support procedures.
3.7 Peer selection
When a CN receives a query for an object with peer-to-peer
delivery enabled, the CN asks the DNs to identify suitable
peers that currently have a copy of the requested object.
The CN then returns information about these peers to the
querying peer, and it instructs both the querying peer and
the chosen peers to initiate connections to each other. By de-
fault, up to 40 peers are returned, and if connections to some
of these peers cannot be established, additional queries are
issued until a suﬃcient number of peer connections succeed.
Peers control the number and utilization of their connections
based on current resource availability.

The DN chooses peers using a locality-aware strategy at
two diﬀerent levels. First, when a peer establishes its per-
sistent TCP connection to the control plane, it is mapped
to the closest available CN by Akamai’s DNS system [10].
When a CN queries the DN for peers for a speciﬁc object,
it prefers to contact only local DNs, i.e., DNs running on
machines in the same network region as the CN that per-
forms the query. (Network regions are deﬁned by proximity
to particular groups of servers.) Since the same process is
used when a peer registers a local copy of a ﬁle, DNs tend
to have information about their local peers. The CN/DN
system is interconnected across regions, so it is possible in
principle to search for peers from any region; however, long-
term experimentation has shown that using only local DNs
in searches does not negatively impact performance.

Since the current deployment has less than 20 network
regions, the ﬁrst, region-based selection strategy is not suf-
ﬁciently ﬁne-grained for popular content that is available on
many peers. Hence, the DNs use another level of locality-

34based peer selection that is based on the geolocation of each
peer. Each peer belongs to multiple sets, based on its public
IP address and the Autonomous System (AS) it is located
in. For example, a peer can simultaneously be in a universal
World set, a subset for a large geographical region, a subset
for a smaller region, and a subset for its speciﬁc AS.

DN selection begins with peers from the most speciﬁc set
that the querying peer belongs to, and proceeds to less spe-
ciﬁc sets until enough suitable peers are found. An addi-
tional mechanism adds diversity: Occasionally, peers are se-
lected from a less speciﬁc set, with probability proportional
to the speciﬁcity of the set. Also, when a peer is selected, it
is placed at the end of a peer selection list for fairness. The
selection process can be modiﬁed with a set of conﬁgurable
policies.

In addition to locality and ﬁle availability, the DN also
it selects
takes the connectivity of the peers into account:
only peers that are likely to be able to establish a connec-
tion with each other, e.g., based on the type of their NAT
or ﬁrewall. Due to the vast diversity in NAT implementa-
tions today, NAT hole punching is a complex issue, and the
necessary code takes up a large fraction of the NetSession
codebase.
3.8 Robustness
The design of NetSession employs the notions of soft state
and fate sharing to provide robustness against failures. At
ﬁrst glance, it might seem that the loss of CN or DN com-
ponents could be catastrophic to NetSession. Indeed, many
peers rely on each CN: over 150,000 might be connected to
one simultaneously. But ultimately, all of the data about
the peers that matters is held by the peers themselves. If
a CN goes down, the peers that are connected to that CN
simply reconnect to another one. If a DN goes down, the
CNs connected to that DN send a RE-ADD message to their
peers, asking them to list the ﬁles that they are storing. The
CN passes these lists on to the available DNs in order to re-
populate their databases.
In practice, failures of CN and
DN nodes occur routinely, e.g., during server maintenance
or during software updates. In fact, when a new CN/DN
software version is released, all CNs and DNs are restarted
in a short timeframe, and this does not negatively aﬀect the
service. (In the event of an unexpectedly large-scale failure,
reconnections are rate-limited to ensure a smooth recovery.)
Finally, if a peer is not able to connect to any CN at all, it
retrieves the content directly from the edge servers; hence,
even if the entire CN and DN infrastructure were to fail, the
peers would simply fall to back to retrieving content from
the CDN infrastructure.

The client software version is centrally controlled by the
CDN infrastructure, and peers can perform automated up-
grades in the background on demand. Most of the peer
population can be upgraded to a new version within one
hour. The ability to perform fast software upgrades without
user interaction can help to respond quickly to security or
performance incidents. Download and upload performance
is constantly monitored, and automated alerts are in place
to notify network engineers in case of large-scale problems.
3.9 Best practices
Since NetSession uses resources that are provided by the
peers, it must carefully consider the users’ interests. Net-
Session obtains consent from users through its EULA, and

Control plane logs:
Time period covered
Log entries
Number of GUIDs
Control plane servers
Distinct URLs
Distinct IPs
Downloads initiated
Geolocation data:
Distinct IPs
Distinct locations
Distinct autonomous systems
Distinct country codes

10/01 – 10/31, 2012
4,150,989,257
25,941,122
197
4,038,894
133,690,372
12,508,764

133,690,372
34,383
31,190
239

Table 1: Overall statistics for our data sets.

Akamai provides users with information about what the Net-
Session Interface is, and what it does. The software includes
both a control panel user interface and a command line util-
ity that enable users to determine what the software is doing,
which ﬁles it is currently storing, which applications are us-
ing it, etc. These tools also allow users to turn uploading on
or oﬀ, and it comes with an uninstaller.

NetSession is designed to protect the privacy of its users;
it does not capture personal information [3]. The data it
keeps is similar to that of a normal web server. When peers
download content from each other, they learn that other
peers with certain GUIDs and IP addresses already have the
requested ﬁle. However, this information is not displayed to
users and is deleted from the peer once a download completes
and the logs have been uploaded to the CNs for billing and
monitoring.

To avoid inconveniencing users, the NetSession Interface
is designed to stay in the background as much as possible.
For example, a peer does not proactively download content;
it only shares objects that the corresponding user has previ-
ously downloaded. Uploads are rate-limited, and peers up-
load each object at most a limited number of times. Finally,
peers monitor the utilization of the local network connec-
tions and throttle or pause uploads when the connections
are used by other applications. While it is important for
users to experience good download performance, the per-
formance of uploads is intentionally limited using custom
protocols.

Users do not beneﬁt directly from the bandwidth they do-
nate, but NetSession oﬀers a number of indirect beneﬁts; for
instance, the DLM enables users to resume aborted down-
loads and to download from multiple sources simultaneously.
Also, peer-assisted downloads require fewer resources from
the infrastructure and can thus be oﬀered at a lower price.
Content providers can pass on these savings to the users.

4. MEASUREMENT STUDY
We now turn to the question how well NetSession, as one
instance of a peer-assisted CDN, is able to deliver the po-
tential beneﬁts of a hybrid architecture, and how well it is
able to avoid the corresponding risks. To answer this ques-
tion, we have performed a measurement study that is based
on a set of logs from the production system.
4.1 Data set
Our logs cover the month of October 2012. At a high level,
they contain information about downloads and information
about logins. When a peer downloads a ﬁle from NetSession,

35Customer A
Customer B
Customer C
Customer D
Customer E
Customer F
Customer G
Customer H
Customer I
Customer J
All customers

Americas
US East US West
–
1%
6%
21%
3%
–
3%
4%
2%
24%
4%

–
2%
13%
22%
5%
–
8%
6%
5%
42%
7%

Other

India

12%
1%
15%
6%
8%
–
12%
7%
18%
14%
11%

6%
11%
1%
–
2%
–
2%
4%
–
–
3%

Asia
China
6%
–
–
–
1%
–
8%
2%
–
–
2%

Other

Europe

Africa

Oceania

18%
61%
8%
3%
29%
–
20%
20%
15%
5%
20%

51%
6%
55%
45%
48%
100%
45%
53%
57%
11%
46%

4%
17%
1%
–
2%
–
2%
2%
1%
1%
4%

3%
1%
2%
3%
3%
–
2%
2%
1%
3%
2%

Table 2: Global distribution of downloads for the ten largest content providers.

ber of GUIDs should correspond roughly to the number of
peers.) On a typical day, between 8.75 and 10.90 million of
the GUIDs connect to the control plane at least once. The
system has been growing steadily over time; for comparison,
a trace from October 2010 contained 14.19 million distinct
GUIDs, or slightly more than half the number in our trace.
Figure 2 shows the global distribution of the peers as a
“bubble plot”: the size of each bubble corresponds to the
number of peers whose ﬁrst connection to the system was
from that particular location. Most of the peers are located
in North America (27%) and Europe (35%), but there are
also sizable groups of peers in South America and Asia.
Overall, we observed connections from 239 diﬀerent coun-
tries and territories across all continents, so NetSession is a
truly global system.
4.3 Content providers
Each ﬁle that is available through NetSession is oﬀered by
a speciﬁc content provider—usually a large corporate cus-
tomer. To illustrate how these customers are using the sys-
tem, we selected the downloads served by the ten largest
customers (here identiﬁed as Customers A through J), we
associated each download with one of ten regions, and we
counted the number of downloads per customer per region.
Table 2 show the results. Generally, we ﬁnd that roughly
half of the downloads occur in Europe. However, the down-
loads distribution depends on customer. Customer B’s con-
tent, for example, is far more popular in Asia except China
and Africa. Customer J’s content is mostly requested from
within the United States.
4.4 Available content
At the time our data was collected, a typical use case for
NetSession was the distribution of software installers; data
ﬁles and other content, such as music and video, made up a
small portion. Overall, we observed downloads for 4,038,894
distinct objects in our trace. Figure 3(a) shows the distribu-
tion of requests for objects of a given size, for peer-assisted,
infrastructure only, and all requests in NetSession. Peer-
assisted downloads are strongly biased towards large ﬁles;
82% of peer-assisted requests are for objects larger than
500 MB. Because the beneﬁts of peer assist are most pro-
nounced for such large objects, content providers tend to
enable it on such objects.

The object popularity distribution and temporal request
pattern in NetSession’s workload are shown in Figure 3(b)
and (c). As expected, the former shows the nearly ubiq-
uitous power law, while the latter shows the usual diurnal
patterns.

Figure 2: Global distribution of peers.

the CN records information about the download, including
the GUID of the peer, the name and size of the ﬁle, the CP
code (a number identifying a speciﬁc account of a content
provider that is oﬀering the ﬁle), the time the download
started and ended, and the number of bytes downloaded
from the infrastructure and from peers. This information is
used for accounting and billing. Additionally, when a peer
opens a connection to the control plane, the CN records the
peer’s current IP address, its software version, and whether
or not uploads are enabled on that peer.

To localize the peers geographically and in the net-
work, we also obtained geolocation data from Akamai’s
EdgeScape [2] service about each IP address that appears
in the trace. This data includes an ISO 3166 country code,
the name of a city and state, a latitude/longitude pair, a
timezone, and a network provider name. (Note that territo-
ries and areas of geographical interest, such as Antarctica,
can also have country codes.) The granularity of the lo-
cation information varies by region; in the United States,
locations are typically at the city/suburb granularity. For
instance, the data set contains 218 unique locations in the
state of Pennsylvania.

To protect the privacy of users and content providers,
the data in our logs have been anonymized by hashing the
ﬁle names, IP addresses, and GUIDs. Table 1 shows some
overall statistics for our data set.
4.2 Number and location of the peers
We begin by giving an overview of the NetSession deploy-
ment as of October 2012, to illustrate the number and ge-
ographic distribution of the peers, as well as the type of
content being served. The one-month trace contains about
26 million distinct GUIDs. (Recall that the NetSession soft-
ware chooses a GUID when it is ﬁrst installed, so the num-

36(a) Request distrib. by object size

(b) Content popularity

(c) Bytes served over time

Figure 3: Overall workload characteristics.

Uploads
initially...
Disabled
Enabled

Nodes

0

15,913,255
7,395,867

99.96%
98.11%

Number of changes

1

0.03%
1.80%

≥ 2
0.01%
0.09%

Table 3: Observed changes to the setting that en-
ables content uploads.

5. BENEFITS
Next, we focus on three questions that can be answered
quantitatively based on our data, namely: 1) How well does
peer assist work? 2) Does peer assist aﬀect performance and
reliability? And, 3) does peer assist help improve the CDN’s
global coverage?
5.1 How well does peer assist work?
Recall that NetSession peers are not required to contribute
bandwidth: users are free to disable uploads to peers by
changing their preferences in the NetSession GUI. This is
a major diﬀerence from pure peer-to-peer systems like Bit-
Torrent, which include incentive mechanisms like tit-for-tat
to encourage uploading.
In the literature, it is often as-
sumed that users are “rational” and will avoid uploading if
they don’t beneﬁt from it [8, 23]; it is therefore natural to
ask whether NetSession peers are willing to contribute any
bandwidth at all.
Do the peers contribute resources? To answer this
question, we used the login records in our data set to deter-
mine the fraction of peers that have uploads enabled. How-
ever, the NetSession binary is available in two versions, one
with uploads initially enabled and one with uploads initially
disabled. This is chosen by the content provider who bundles
the binary; some content providers use the software merely
as a download manager, without the peer assist. For this
reason, we additionally check whether users changed this
setting between logins, and if so, how often.

Tables 3 and 4 show our results. About 31% of the peers
have uploading enabled, but the setting is rarely changed—
more than 99% of the peers keep their initial setting through-
out our trace. As Table 4 shows, the initial setting depends
on the content provider from who the user ﬁrst downloaded
the binary. Most users simply stick with whatever the de-
fault is. This tendency is well known in UI design [21, 31],
but it also suggests that users either don’t care enough about
the uploads to change the setting or are not aware of the
choice, despite its mention in the NetSession user agreement.
Uploading in peer-to-peer CDNs carries the risk of legal
exposure and/or degraded network performance [29]. As a
peer-assisted CDN, NetSession can avoid the ﬁrst problem

Customer
p2p (%)

A B C D E
<1 20
2

94

2

F G H
45
47 <1

I
J
91 <1‘

Table 4: Fraction of peers that have content uploads
enabled.

because its content is centrally controlled and vetted, and
its back-oﬀ mechanism (Section 3.9) can avoid the second
problem by consuming bandwidth only when the connection
is idle. We speculate that this is part of the reason why
most users don’t seem to turn oﬀ peer uploads when they
are enabled initially.
How much can be oﬄoaded to the peers? As a peer-
assisted CDN, NetSession can oﬄoad some of the bandwidth
needed to satisfy the download requests to the peers. Con-
tent providers can control on a per-ﬁle basis whether or not
peer-to-peer downloads are allowed. In our trace, we found
that peer-to-peer downloads were enabled for only 1.7% of
the ﬁles, but these downloads accounted for 57.4% of the
downloaded bytes overall.

The key quantity of interest is the peer eﬃciency of the
system, i.e., the fraction of bytes in peer-assisted downloads
that are actually downloaded from the peers.
(The peer
eﬃciency for infrastructure-only downloads is zero.) In our
trace, the average peer eﬃciency for peer-assisted downloads
was 71.4%. This is a very good result, given that, even in a
peer-assisted download, NetSession never exclusively down-
loads from the peers; there is always at least one connection
to the infrastructure, to guarantee progress independent of
the peers.
5.2 Does peer assist reduce performance?
Are peer-assisted downloads slower? NetSession re-
lies on peer downloads, which are limited by peer reliability
and the upstream bandwidth of broadband access networks,
to which many of NetSession’s peers are connected. This
bandwidth is typically much smaller than the downstream
bandwidth [11]. Hence, it is natural to ask how the per-
formance of peer-assisted downloads compares to those that
are served by the infrastructure.

Figure 4 makes this comparison for downloads from the
two networks with the most downloads, AS X and AS Y. We
identiﬁed all downloads from these networks where either a)
all the bytes came from the edge servers, or b) at least 50%
of the bytes came from peers. We then averaged the speed
of each download across its entire length; the ﬁgure shows
the results as a CDF.

We ﬁnd that, although the peer-assisted downloads are
somewhat slower, the speed is still quite high, with most
downloads occurring at rates of multiple Mbps. When com-
paring the performance across networks, we ﬁnd that the

 0 20 40 60 80 100 0.01 0.1 1 10CDF (%)Object size (GB)Infrastructure-onlyAllPeer-assisted1101001K10K100K 1 10 100 1000 10000 100000# DownloadsDownload rank                      0 2 4 6 8 1 8 15 22 29Downloads (TB/hour)Day in October 2012GMTLocal time37Figure 4: Edge-only vs peer-assisted download
speed in two large ASes.

Figure 6: Impact of the number of peers on peer
eﬃciency.

Figure 5: Number of registered ﬁle copies vs. peer
eﬃciency

Figure 7: Downloads of larger ﬁles are terminated
more often.

biggest diﬀerences between peer-assisted and infrastructure
download speeds occur in the networks with the highest link
bandwidths. One possible explanation is the high asymme-
try of most high-speed broadband links (fast downstream
and slow upstream), which would limit the available band-
width from nearby peers.
How many peers are needed for good performance?
Achieving good peer eﬃciency in a peer-assisted download
requires a suﬃcient number of peers who have a copy of the
requested ﬁle. We now ask how many copies are needed to
achieve a good peer eﬃciency.

NetSession does not use predictive caching—i.e., a peer
only downloads a ﬁle when it is requested by the local user.
Once a ﬁle has been downloaded, the peer keeps it in a local
cache for a certain amount of time and informs the control
plane that it is willing to upload this ﬁle to other peers (if
uploading is enabled). This creates entries in the DN log,
and we counted these entries for each ﬁle to estimate how
many copies of that ﬁle were available. We also calculated
the average peer eﬃciency for each ﬁle.

Figure 5 shows the average peer eﬃciency as a function of
the number of copies registered during the trace (the error
bars show the 20th and 80th percentile). We found that,
with less than 50 registered copies, peer eﬃciency was be-
low 10%, but rose rapidly after that, and reached 80% for
approximately 10,000 copies.

Another way to look at this question is to ask how many
peers need to assist in a given download to achieve the high-
est eﬃciency. This question is diﬃcult to answer precisely
because peer eﬃciency depends on a variety of other factors,
including the size of the object and the network connections
of the peers, so we can only hope for a rough trend (with

large error bars). To look for this trend, we grouped the
downloads by the number of peers that the DN initially
suggested to the downloading peer, and we computed the
average peer eﬃciency for each group. Figure 6 shows our
results. We ﬁnd that 80% peer eﬃciency is generally reached
with about 25–30 peers. This is consistent with earlier re-
sults for BitTorrent [5, 14], which also requires a few tens of
peers to achieve good performance.
Are peer-assisted downloads less reliable? To an-
swer this question, we examined the eventual outcome of
the downloads initiated in our trace. The logs can show
three kinds of outcomes: a download can complete, it can
fail, or it can be aborted/paused by the user and never re-
sumed. When a download fails, the log also shows a speciﬁc
cause; we divided these into system-related causes (e.g., too
many corrupted content blocks) and other causes (e.g., the
user’s disk is full).

We ﬁnd that 94% of the infrastructure-only downloads
eventually complete, but only 92% of the peer-assisted
downloads. At ﬁrst glance, this discrepancy suggests that
peer-assisted downloads are slightly less reliable. How-
ever, the rate of system-related failures is very small (0.1%
for infrastructure-only versus 0.2% for peer-assisted), but
infrastructure-only downloads are paused or terminated less
often than peer-assisted ones (3% versus 8%).

A closer look reveals that the termination rate increases
with the length of the download. While the download speed
for infrastructure-only and peer-assisted downloads is ap-
proximately the same, the latter are typically used for larger
ﬁles (see Figure 3(a) earlier), which naturally take longer to
download. As Figure 7 shows, larger downloads are termi-
nated more often—hence the discrepancy.

 0 20 40 60 80 100 0.1 1 10 100% of downloads in AS XAvg download speed (Mbps)Edge only>50% P2P 0 20 40 60 80 100 0.1 1 10 100% of downloads in AS YAvg download speed (Mbps)Edge only>50% P2P 0 20 40 60 80 100 1 10 100 1000 10000 100000Peer efficiency (%)File copies registered by peers in October 2012 0 20 40 60 80 100 0 5 10 15 20 25 30 35 40Peer efficiency (%)Number of peers initially returned by the control plane 0 5 10 15 20 25 30<10MB10-100MB100MB-1GB>1GBPause rate (%)File sizeInfrastructure-onlyPeer-assistedAll385.3 Do peers improve global coverage?
In theory, a hybrid CDN has another advantage over its
infrastructure-based counterparts: it may be easier to obtain
a globally distributed population of peers than to establish
a truly global infrastructure. Thus, it should be possible for
a hybrid system to provide better service for customers in
under-served regions, where the closest infrastructure nodes
are far away, but peers may be nearby.

To test whether this is the case for NetSession, we ag-
gregated the completed downloads on a per-country basis,
and we counted the number of bytes served by the infras-
tructure and by the peers. We then classiﬁed each country
into one of three groups, which are shown as colored dots
in Figure 8: countries where the infrastructure serves bytes
more than the peers (circle), between 50% and 100% of the
peers (plus), or less than 50% of the peers (square). Since
not all content providers use peer-assisted downloads, and
the popularity of the providers varies between regions, we
show results for one typical, p2p-enabled provider here.

We ﬁnd that, for NetSession, the picture is mixed: al-
though the peers tend to contribute more in some regions,
such as Africa and South America, the contributions do not
vary much overall. We suspect that this is because NetSes-
sion relies on edge servers from Akamai’s main CDN, which
already has very good coverage around the globe.

Another potential beneﬁt of a large peer population is
that downloading peers might ﬁnd a copy of the requested
content within their local network, e.g., in a corporate LAN.
In October 2012 this case appears to have been rare, but this
could change, e.g., when NetSession is used to distribute
large software updates.
5.4 Summary
NetSession demonstrates that peer-assisted CDNs can in-
deed deliver the key beneﬁts of both peer-to-peer and
infrastructure-based CDNs: they can oﬄoad a considerable
fraction of the traﬃc to the peers, without a signiﬁcant loss
of speed or reliability. NetSession’s 80% peer eﬃciency de-
pends on many factors that may be diﬀerent in other sys-
tems, but it provides a lower bound on what peer-assisted
CDNs can achieve in a large-scale commercial deployment.
6. RISKS
We now turn to the question of how well NetSession, as an
instance of a peer-assisted CDN, can avoid the risks inherent
in this architecture. We again focus on two aspects we can
examine quantitatively using our trace: 1) whether NetSes-
sion aﬀects the traﬃc balance of ISPs, and 2) whether the
presence of user-managed machines is causing problems.
6.1 Do ISPs suffer from NetSession?
The impact of peer-assisted CDNs on ISPs, and the potential
conﬂict of interest between the two, has been a cause of
some concern [17, 24, 35]. To determine how this conﬂict
aﬀects NetSession, we used detailed traﬃc statistics in our
trace, which included, for each peer-assisted download, the
GUID of each peer that has sent any content bytes to the
downloading client. We ﬁrst used the login data to map each
GUID to the IP address it was using at the time, and then
we used the EdgeScape data to map the IP address to the
number of the Autonomous System (AS) to which it belongs.
The result is a set of (N, AS1, AS2) tuples, which describe
a ﬂow of N bytes from AS1 to AS2. We aggregated the

Figure 8: Peer contributions in diﬀerent regions (for
one exemplary content provider).

ﬂows per AS, and we report our results at the granularity
of ASes. We include only the content bytes, but not the
packet headers or the protocol overhead; including the latter
would add a small constant factor. We also neglect bytes
sent by the infrastructure, since these would be sent by an
infrastructure-based CDN as well, and since most of them
would normally be sent from an edge server within the same
AS anyway.
Which ASes are sending the most? Overall, our trace
shows that 895 TB of content bytes were sent peer-to-peer,
and that the peers involved in these transmissions were lo-
cated in roughly 22,000 diﬀerent ASes. (The number is dif-
ferent from that in Table 1 because not all GUIDs partic-
ipated in a p2p transaction.) 18% of this traﬃc was sent
between peers in the same AS; we do not further consider
such intra-AS traﬃc here because it does not aﬀect the inter-
AS bandwidth cost.

To determine how the inter-AS traﬃc was distributed
across the ASes, we sorted the ASes by the number of bytes
they sent to peers in other ASes. Figure 9(a) shows the re-
sult as a CDF. Roughly half of the ASes did not send any
inter-AS bytes at all, and 98% sent less than 163 GB over
the entire month. However, there is a “heavy tail” of ASes
that sent substantially more; the top contributor sent ap-
proximately 34.2 TB.

Figure 9(b) shows a diﬀerent perspective on this result: a
point (x, y) on this plot indicates that the cumulative con-
tribution of ASes contributing less than x bytes amounted
to y% of the total inter-AS p2p traﬃc. This plot shows
that 98% of the ASes contributed just 10% of the bytes; the
remaining 2% (394 ASes) were responsible for 90% of the
p2p traﬃc. We refer to the former as “light” and “heavy”
uploaders, respectively. Figure 9(c) shows that this uneven
distribution has a natural explanation; the heavy uploaders
simply contain a lot more peers.
How balanced is the traﬃc? Sending a large number of
bytes to its neighbors is not necessarily expensive for an AS,
as long as it receives an equally large number of bytes from
them; balanced connections with peering ASes may be con-
sidered “settlement free”. To examine whether NetSession’s
p2p traﬃc aﬀects this balance, we separately counted the
inter-AS bytes each AS sent and received. Figure 10 shows
the result as a scatterplot. Note that the scales are logarith-
mic; since zero does not appear on a logarithmic scale, the
points for ASes that have not uploaded and/or downloaded
anything appear near the axes.

Figure 10 shows that ASes often have a substantial rel-
ative imbalance; many receive several Gigabytes but send

39(a) Inter-AS traﬃc

(b) Contributions of diﬀerent ASes

(c) Distinct IP addresses per AS

Figure 9: Traﬃc balance results.

Figure 10: p2p bytes uploaded vs. downloaded for
an AS. Only the bytes which cross AS boundaries
are considered here.

hardly anything, or vice versa. However, this imbalance
mostly aﬀects ASes that are not carrying very much NetSes-
sion p2p traﬃc anyway. The traﬃc of the “heavy” uploaders
(which appear in red towards the upper right end of the plot)
tends to be well-balanced, i.e., they usually receive as much
as they send. At a high level, this is not unexpected: if up-
loaders and downloaders are distributed roughly uniformly,
the resulting traﬃc is naturally balanced. However, there
are many eﬀects that could bias this pattern—for instance,
clients in certain ASes might have a higher upstream band-
width and might therefore be chosen to upload more often.
NetSession avoids such biases in part by limiting the number
of times a peer will upload a ﬁle it has locally cached.

Note that we have only considered the origin and the des-
tination of the traﬃc here. We cannot reliably estimate the
eﬀect of transit traﬃc because our data set does not con-
tain traceroutes. Based on CAIDA’s AS topology data [6],
we estimate that out of the total inter-AS p2p bytes ex-
changed between the “heavy” uploaders, approximately 35%
were exchanged between those that had a direct connection
with each other.

So far, we have seen that the overall incoming traﬃc of an
AS is largely balanced by its overall outgoing traﬃc. How-
ever, a pairwise imbalance could still exist between pairs
of ASes. Figure 11 shows that this is not the case: anal-
ogous to above, the ﬁgure contains the distribution of p2p
bytes exchanged between pairs of “heavy” uploaders that

Figure 11: Traﬃc balance on AS-to-AS links.

had a direct connection (though not necessarily a peering
relationship) with each other. The trend is similar to Fig-
ure 10: heavy contributors tend to have a traﬃc balance
that is roughly even.

We emphasize that our results should not be interpreted
as saying that NetSession’s traﬃc has no impact on ISPs.
Our data only describes the traﬃc, and not the cost that
ISPs may or may not charge each other for carrying that
traﬃc. This cost depends on a variety of other factors as
well, including the business relationships between the ISPs.
Nevertheless, it is likely that a large traﬃc imbalance would
eventually aﬀect the business relationship and/or the cost,
and our results do show that this particular problem does
not seem to be occurring.

6.2 Impact of user-managed machines
How strong is the mobility-related churn? Unlike
the servers in an infrastructure-based CDN, the NetSession
peers can move; for instance, users can install NetSession on
a laptop that they take to work in the morning and back
home in the evening. Overall, we observed connections from
133.7 million diﬀerent IP addresses in 31,190 diﬀerent au-
tonomous systems (ASes); 80.6% of the GUIDs connected
from a single AS, 13.4% from two diﬀerent ASes, and 6%
from more than two ASes. The DNs must update their di-
rectories to keep track of this mobility, but the corresponding
workload is moderate: on average, the control plane receives
20,922 new connections per minute.

 0 20 40 60 80 1001kB1MB1GB1TB1PBFraction of ASes (%)P2P bytes uploaded by an AS to other ASes (163GB,98%) 0 20 40 60 80 1001kB1MB1GB1TB1PB% of total uploadsP2P bytes uploaded by an AS to other ASes (163GB,10%) 0 20 40 60 80 1001101001k10k100k1M10MFraction of ASes (%)Number of IP addresses observed in ASLightHeavy1kB1MB1GB1TB1PB1kB1MB1GB1TB1PBContent uploaded to other ASesContent downloaded from other ASesHeavy uploadersLight uploaders1kB1MB1GB1TB1PB1kB1MB1GB1TB1PBBytes transferred from AS B to AS ABytes transferred from AS A to AS BAS pairs (A,B)40Figure 12: Expected sequence of secondary GUIDs
(left) and common nonlinear patterns.

As an aside, to get a rough sense of the corresponding
physical mobility, we computed for each GUID the two ge-
olocations that were farthest apart. We found that 77% re-
mained within 10 km, and that 23% were more than 10 km
apart. We note that the actual mobility may be somewhat
lower; for instance, if a user occasionally opens a VPN con-
nection to her corporate headquarters, the geolocation of the
latter may be far away.
Can malicious peers do damage? Unlike a centrally
managed infrastructure, which mostly needs to be protected
against external attackers, a peer-assisted CDN also needs
protection against attacks from within—each user physically
controls his or her machine and can change the software on
it at will. Previous work has shown that this can lead to
new vulnerabilities that are unique to hybrid architectures,
such as accounting attacks [1], in which compromised peers
misreport the amount of service they have provided, in an
attempt to distort the reports the CDN provides to its cus-
tomers. As mentioned in Section 3.5, NetSession relies on
data from the (trusted) edge servers to detect such attacks
and to ﬁlter out incorrect reports. Measures are in place
to make modiﬁcation of the client-side executable diﬃcult,
but we have seen users experiment with manually modifying
data in conﬁguration ﬁles.
GUID cloning and re-imaging: Even in the absence of
attacks, the designer of a hybrid CDN must consider more
failure modes than in an infrastructure-based system. Here,
we cannot provide an exhaustive discussion due to lack of
space, but we discuss an illustrative example. While analyz-
ing an earlier set of traces, we noticed that certain GUIDs
showed unusual behavior: they were logging in very fre-
quently, sometimes from IP addresses in diﬀerent countries
and even on diﬀerent continents. We initially suspected in-
ternational travel, but some users appeared to be traveling
at implausible speeds. We eventually suspected that some
installations had to be sharing the same GUID.

To investigate further, we modiﬁed the NetSession soft-
ware to support a random 160-bit “secondary GUID”, which
is chosen freshly every time the software starts (unlike the
primary GUID, which is chosen when the software is ﬁrst in-
stalled), and to report the last ﬁve secondary GUIDs to the
control plane upon login. A normal NetSession installation
would report overlapping sequences of secondary GUIDs,
such as 5 4 3 2 1, 6 5 4 3 2, and so on. We then col-
lected and analyzed the secondary GUIDs on a sample of 8
control plane servers, grouped them by primary GUID, and
constructed graphs in which vertices represent secondary
GUIDs and edges connect GUIDs that follow each other in
a login entry. In total, we obtained 17.7 million connected
graphs with at least three vertices.
99.4% of the graphs were linear chains (as in our example:
1 → 2 → 3 → . . .), which would be expected for a normal

NetSession installation. But the remaining 0.6% were trees,
indicating that the corresponding installation had at some
point been rolled back to an earlier state! Figure 12 shows
the most common nonlinear patterns: one long branch with
a single, one-vertex short branch (46.2%), two long branches
(6.2%), and several short or medium branches (23.5%). We
suspect that the ﬁrst pattern corresponds to a failed soft-
ware update and the second pattern to a restored backup;
the third pattern might be due to re-imaging, e.g., in an In-
ternet caf´e that restores its machines every night, or due to
cloning, e.g., in a large IT department that initializes new
workstations from a master image. We also observed sev-
eral highly irregular patterns for which we currently have no
explanation.

Recall that this example was merely meant to illustrate
that hybrid systems must deal with user actions that would
not normally occur in a centrally managed infrastructure.
However, this speciﬁc example was of some practical impor-
tance, since the number of distinct GUIDs plays a role in
NetSession’s internal accounting.

7. RELATED WORK
CDN measurement studies: There are several prior
studies of content-distribution systems, including both peer-
to-peer [13,26] and infrastructure [32] systems. The systems
studied include p2p streaming systems [15, 28, 34] and one
commercial hybrid CDN, LiveSky [36]. LiveSky delivers live-
streaming video, so its architecture is necessarily diﬀerent
from NetSession’s. To the best of our knowledge, the present
paper is the ﬁrst measurement study of a commercial hybrid
CDN for static content.
Hybrid CDNs: The idea of combining a CDN infrastruc-
ture with peer-to-peer elements has been explored both in
research [12, 22] and in industry [33, 34, 36]; see [20] for a
survey. The Antfarm system [22], in particular, has some
similarities to NetSession. Antfarm combines peer-to-peer
swarms with a coordinator, which carefully directs band-
width provided by the infrastructure servers to maximize
the aggregate bandwidth of the swarms. NetSession’s con-
trol plane plays a similar role but, unlike Antfarm’s coor-
dinator, it does not implement an explicit incentive mech-
anism. Work on the potential beneﬁts, speciﬁcally [16, 17],
has already been discussed in Section 5; likewise, work on the
inherent risks, such as [1], has been discussed in Section 6.
Impact on ISPs: Several papers [7, 17, 24, 35] have noted
a potential conﬂict of interest between hybrid CDNs and
ISPs because the former potentially increase the upstream
traﬃc, and thus the cost, of the latter. The work in [7]
demonstrated that a peer selection algorithm using CDN-
based DNS “hints” can signiﬁcantly reduce cross-ISP traﬃc.
However, the general conclusion in this work is that the
CDN can avoid a large impact on ISPs by using a simple
locality-aware peer selection strategy.
Incentives: Swarming protocols like BitTorrent [8] typi-
cally include explicit incentives because they assume that
users will not contribute bandwidth unless they can beneﬁt
from it. There is a large body of work on understanding
speciﬁc incentive systems, e.g., [18, 23], and on building sys-
tems that can deliver them more robustly, e.g., [19]; Dande-
lion [30] even introduces an infrastructure component simi-
lar to NetSession’s control plane, although its main purpose
is to implement a fair-exchange mechanism. The existence
and eﬃcient operation of NetSession does not contradict the

41basic assumptions on which these systems are based, but it
does suggest that the users’ actual motivations are more
complex, and that avoiding bandwidth contributions may
not be among their primary concerns.
8. CONCLUSION
In this paper, we have examined the risks and beneﬁts of
“hybrid” CDN architectures, which rely on a managed in-
frastructure but also include a peer-to-peer element to lever-
age resources contributed by clients. To determine how well
a practical system can deliver the beneﬁts (and avoid the
risks), we have presented a measurement study of NetSes-
sion, a large commercial CDN that uses this architecture.

Our results show that NetSession is able to deliver the
key beneﬁts of a hybrid architecture:
it can oﬄoad a high
fraction (70–80%) of the traﬃc to peers, but it can also oﬀer
good performance and high reliability. NetSession appears
to avoid a key risk—tilting the traﬃc balance of ISPs—but
it does face other challenges that are inherent in its hybrid
architecture, e.g., with respect to security or manageability.
Overall, our ﬁndings suggest that a hybrid architecture
is an attractive design point for a CDN. The infrastructure
and the peers can deliver many of their key beneﬁts, and
they can complement one another to avoid many of their
key weaknesses. NetSession’s performance shows what is
possible in this space.
Acknowledgments
We thank our shepherd Craig Partridge and the anonymous
reviewers for their comments and suggestions. This work
was supported in part by NSF grants CNS-1040672, CNS-
1054229, and CNS-1065130, by AFRL grants FA8750-11-1-
0262 and FA8750-10-2-0193, and by the Max Planck Society.
9. REFERENCES
[1] P. Aditya, M. Zhao, Y. Lin, A. Haeberlen,

P. Druschel, B. Maggs, and B. Wishon. Reliable client
accounting for hybrid content-distribution networks.
In Proc. NSDI, Apr. 2012.

[2] Akamai. EdgeScape brochure. http:

//www.akamai.com/dl/brochures/edgescape.pdf.
[3] Akamai Technologies. NetSession design principles.
http://www.akamai.com/html/solutions/client_
design_principles.html.

[4] R. Bhagwan, S. Savage, and G. M. Voelker.

Understanding availability. In Proc. IPTPS, 2003.

[5] A. R. Bharambe, C. Herley, and V. N. Padmanabhan.

Analyzing and improving a BitTorrent network’s
performance mechanisms. In Proc. INFOCOM, 2006.

[6] CAIDA. Archipelago measurement infrastructure.

http://www.caida.org/projects/ark/.

[7] D. R. Choﬀnes and F. E. Bustamante. Taming the

Torrent. In Proc. SIGCOMM, 2008.

[8] B. Cohen. Incentives build robustness in BitTorrent.

In Proc. P2PEcon, June 2003.

[9] S. A. Crosby and D. S. Wallach. An analysis of

BitTorrent’s two Kademlia-based DHTs. Technical
Report TR-07-04, Department of Computer Science,
Rice University, May 2007.

[10] J. Dilley, B. Maggs, J. Parikh, H. Prokop,

R. Sitaraman, and B. Weihl. Globally distributed
content delivery. IEEE Internet Computing,
6(5):50–58, Sept. 2002.

[11] M. Dischinger, A. Haeberlen, K. P. Gummadi, and

S. Saroiu. Characterizing residential broadband
networks. In Proc. IMC, Oct. 2007.

[12] M. J. Freedman. Experiences with CoralCDN: A
ﬁve-year operational view. In Proc. NSDI, 2010.

[13] K. P. Gummadi, R. Dunn, S. Saroiu, S. Gribble,

H. Levy, and J. Zahorjan. Measurement, modeling and
analysis of a peer-to-peer ﬁle-sharing workload. In
Proc. SOSP, Oct. 2003.

[14] L. Guo, S. Chen, Z. Xiao, E. Tan, X. Ding, and

X. Zhang. Measurements, analysis, and modeling of
BitTorrent-like systems. In Proc. IMC, 2005.

[15] X. Hei, C. Liang, J. Liang, Y. Liu, and K. Ross. A

measurement study of a large-scale P2P IPTV system.
Multimedia, IEEE Trans., 9(8):1672–1687, Dec. 2007.

[16] C. Huang, A. Wang, J. Li, and K. W. Ross.

Understanding hybrid CDN-P2P: Why Limelight
needs its own Red Swoosh. In NOSSDAV, 2008.

[17] T. Karagiannis, P. Rodriguez, and K. Papagiannaki.

Should Internet service providers fear peer-assisted
content distribution? In Proc. IMC, 2005.

[18] D. Levin, K. LaCurts, N. Spring, and

B. Bhattacharjee. BitTorrent is an auction: Analyzing
and improving BitTorrent’s incentives. In Proc.
SIGCOMM, 2008.

[19] H. C. Li, A. Clement, M. Marchetti, M. Kapritsos,

L. Robison, L. Alvisi, and M. Dahlin. FlightPath:
Obedience vs. choice in cooperative services. In Proc.
OSDI, 2008.

[20] Z. Lu, Y. Wang, and Y. R. Yang. An analysis and

comparison of CDN-P2P-hybrid content delivery
system and model. JCM, 7(3):232–245, 2012.

[21] W. E. Mackay. Triggers and barriers to customizing

software. In Proc. CHI, Apr. 1991.

[22] R. S. Peterson and E. G. Sirer. Antfarm: eﬃcient

content distribution with managed swarms. In Proc.
NSDI, 2009.

[23] M. Piatek, T. Isdal, T. Anderson, and

A. Krishnamurthy. Do incentives build robustness in
BitTorrent? In Proc. NSDI, 2007.

[24] M. Piatek, H. V. Madhyastha, J. P. John,

A. Krishnamurthy, and T. Anderson. Pitfalls for
ISP-friendly P2P design. In Proc. HotNets, 2009.

[25] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing.

Session Traversal Utilities for NAT (STUN). RFC
5389, Oct. 2008.

[26] S. Saroiu, K. P. Gummadi, R. J. Dunn, S. D. Gribble,

and H. M. Levy. An analysis of Internet content
delivery systems. In Proc. OSDI, 2002.

[27] S. Saroiu, K. P. Gummadi, and S. Gribble. A

measurement study of peer-to-peer ﬁle sharing
systems. In Proc. MMCN, Jan. 2002.

[28] T. Silverston and O. Fourmaux. Measuring P2P IPTV

systems. In Proc. NOSSDAV, 2007.

[29] M. Sirivianos, J. H. Park, R. Chen, and X. Yang.
Free-riding in BitTorrent networks with the Large
View exploit. In Proc. IPTPS, Feb. 2007.

[30] M. Sirivianos, J. H. Park, X. Yang, and S. Jarecki.

Dandelion: Cooperative content distribution with
robust incentives. In Proc. USENIX ATC, 2007.

[31] J. Spool. Do users change their settings?

http://www.uie.com/brainsparks/2011/09/14/
do-users-change-their-settings/.

[32] K. Sripanidkulchai, B. Maggs, and H. Zhang. An

analysis of live streaming workloads on the Internet.
In Proc. IMC, 2004.

[33] Velocix. Network architecture. http:

//www.velocix.com/network_architecture.php.

[34] L. Vu, I. Gupta, K. Nahrstedt, and J. Liang.

Understanding overlay characteristics of a large-scale
peer-to-peer IPTV system. ACM Tr. Multim. Comp.
Comm. Appl., 6:31:1–31:24, 2010.

[35] H. Xie, R. Yang, A. Krishnamurthy, Y. Liu, and

A. Silberschatz. P4P: Provider portal for applications.
In Proc. SIGCOMM, 2008.

[36] H. Yin, X. Liu, T. Zhan, V. Sekar, F. Qiu, C. Lin,
H. Zhang, and B. Li. Design and deployment of a
hybrid CDN-P2P system for live video streaming:
experiences with LiveSky. In Proc. MM, 2009.

42